/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ThfBreadcrumbFavoriteService } from './thf-breadcrumb-favorite.service';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza o servi√ßo de favoritar do thf-breadcrumb.
 */
var ThfBreadcrumbFavoriteComponent = /** @class */ (function () {
    function ThfBreadcrumbFavoriteComponent(service) {
        this.service = service;
        this.favorite = false;
    }
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
        this.getStatusFavorite();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.setSubscription) {
            this.setSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.toggleFavoriteAction = /**
     * @return {?}
     */
    function () {
        this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.getStatusFavorite = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.getSubscription = this.service.getFavorite().subscribe(function (result) { return _this.favorite = result.isFavorite; });
    };
    /**
     * @private
     * @param {?} status
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.setStatusFavorite = /**
     * @private
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        this.setSubscription = this.service.sendStatusFavorite(status).subscribe(function (result) { return _this.favorite = result.isFavorite; });
    };
    ThfBreadcrumbFavoriteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-breadcrumb-favorite', template: "<div class=\"thf-breadcrumb-favorite thf-clickable\" (click)=\"toggleFavoriteAction()\"> <span class=\"thf-icon thf-icon-star thf-breadcrumb-favorite-star thf-clickable\" [class.thf-breadcrumb-favorite-star-active]=\"favorite\"> </span> <span class=\"thf-hidden-sm thf-breadcrumb-favorite-label\" *ngIf=\"favorite\">Desfavoritar</span> <span class=\"thf-hidden-sm thf-breadcrumb-favorite-label\" *ngIf=\"!favorite\">Favoritar</span> </div> ",
                    providers: [ThfBreadcrumbFavoriteService]
                },] },
    ];
    /** @nocollapse */
    ThfBreadcrumbFavoriteComponent.ctorParameters = function () { return [
        { type: ThfBreadcrumbFavoriteService }
    ]; };
    ThfBreadcrumbFavoriteComponent.propDecorators = {
        favoriteService: [{ type: Input, args: ['t-favorite-service',] }],
        itemActive: [{ type: Input, args: ['t-item-active',] }],
        paramsService: [{ type: Input, args: ['t-params-service',] }]
    };
    return ThfBreadcrumbFavoriteComponent;
}());
export { ThfBreadcrumbFavoriteComponent };
if (false) {
    /** @type {?} */
    ThfBreadcrumbFavoriteComponent.prototype.favorite;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteComponent.prototype.getSubscription;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteComponent.prototype.setSubscription;
    /** @type {?} */
    ThfBreadcrumbFavoriteComponent.prototype.favoriteService;
    /** @type {?} */
    ThfBreadcrumbFavoriteComponent.prototype.itemActive;
    /** @type {?} */
    ThfBreadcrumbFavoriteComponent.prototype.paramsService;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteComponent.prototype.service;
}
