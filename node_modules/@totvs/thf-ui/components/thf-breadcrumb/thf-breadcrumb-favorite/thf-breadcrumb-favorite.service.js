/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente thf-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
var ThfBreadcrumbFavoriteService = /** @class */ (function () {
    function ThfBreadcrumbFavoriteService(http) {
        this.http = http;
    }
    Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "bodyParams", {
        get: /**
         * @return {?}
         */
        function () { return this._bodyParams; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.configService = /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    function (url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    };
    /**
     * @param {?} status
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.sendStatusFavorite = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.getFavorite = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    };
    ThfBreadcrumbFavoriteService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ThfBreadcrumbFavoriteService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfBreadcrumbFavoriteService;
}());
export { ThfBreadcrumbFavoriteService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteService.prototype._url;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteService.prototype._bodyParams;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteService.prototype.http;
}
