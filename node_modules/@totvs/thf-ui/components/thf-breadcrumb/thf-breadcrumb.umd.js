(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('@angular/common/http')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/router', '@angular/common/http'], factory) :
	(factory((global['thf-breadcrumb'] = {}),global.core,global.common,global.router,global.http));
}(this, (function (exports,core,common,router,http) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy
 *
 * ThfBreadcrumb, ThfBreadcrumbComponent, ThfBreadcrumbBaseComponent,
 * ThfPageDefaultComponent, ThfPageDetailComponent, ThfPageEditComponent, ThfPageListComponent
 *
 * \@description
 *
 * Interface que define cada item do componente **thf-breadcrumb**.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `t-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `t-params-service` que recebe um objeto contendo as informações.
 */
var ThfBreadcrumbBaseComponent = /** @class */ (function () {
    function ThfBreadcrumbBaseComponent() {
        this.itemsView = [];
        this._items = [];
    }
    Object.defineProperty(ThfBreadcrumbBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens do _breadcrumb_.
         *
         * **Exemplo:**
         * ```
         * { label: 'Thf Portal', link: 'portal' }
         * ```
         */
        set: /**
         * \@description
         *
         * Lista de itens do _breadcrumb_.
         *
         * **Exemplo:**
         * ```
         * { label: 'Thf Portal', link: 'portal' }
         * ```
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = items;
            this.itemsView = [].concat(items);
        },
        enumerable: true,
        configurable: true
    });
    ThfBreadcrumbBaseComponent.propDecorators = {
        favoriteService: [{ type: core.Input, args: ['t-favorite-service',] }],
        items: [{ type: core.Input, args: ['t-items',] }],
        paramsService: [{ type: core.Input, args: ['t-params-service',] }]
    };
    return ThfBreadcrumbBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfBreadcrumbBaseComponent
 *
 * \@example
 *
 * <example name="thf-breadcrumb-basic" title="Totvs Breadcrumb Basic">
 *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-breadcrumb-labs" title="Totvs Breadcrumb Labs">
 *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
var ThfBreadcrumbComponent = /** @class */ (function (_super) {
    __extends(ThfBreadcrumbComponent, _super);
    function ThfBreadcrumbComponent(differs, element, renderer) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.renderer = renderer;
        _this.showDropdown = false;
        _this.showDropdownToggle = false;
        _this._breadcrumbItemsLenght = 0;
        _this.calculatedElement = false;
        _this.hiddenWithoutResize = false;
        _this.initialized = false;
        _this.wasClickedonDropdown = function (event) {
            /** @type {?} */
            var clickedOutIconDropdown = _this.checkClickOutElement(event, _this.dropdownIcon);
            if (clickedOutIconDropdown) {
                _this.showDropdown = false;
                _this.removeClickoutListener();
            }
        };
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
        this.initializeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeClickoutListener();
        this.removeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.toggleDropdown = /**
     * @return {?}
     */
    function () {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    };
    /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.checkClickOutElement = /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    function (event, element) {
        return element && !element.nativeElement.contains(event.target);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.checkChangeOnItems = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.calcBreadcrumb = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        /** @type {?} */
        var breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.getBreadcrumbFavoriteWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.favoriteService ? this.element.nativeElement
            .querySelector('.thf-breadcrumb-favorite').offsetWidth + 20 : 0;
    };
    /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.getBreadcrumbWidth = /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    function (breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.thf-breadcrumb').offsetWidth - breadcrumbFavorite;
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.calcBreadcrumbItemsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbItem = this.element.nativeElement
            .querySelectorAll('.thf-breadcrumb-item, .thf-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map(function (breadcrumb) { return breadcrumb['offsetWidth']; })
            .reduce(function (a, b) { return a + b; }, 16);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.enableBreadcrumbResponsive = /**
     * @private
     * @return {?}
     */
    function () {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.disableBreadcrumbResponsive = /**
     * @private
     * @return {?}
     */
    function () {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            if (_this.calculatedElement && !_this.hiddenWithoutResize && _this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                _this.hiddenWithoutResize = true;
            }
            else {
                _this.calcBreadcrumb();
            }
        }, 50);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.initBreadcrumbSize = /**
     * @private
     * @return {?}
     */
    function () {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.initializeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.initializeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.removeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.removeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    ThfBreadcrumbComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-breadcrumb', template: "<div class=\"thf-breadcrumb\" #breadcrumb> <ul class=\"thf-breadcrumb-items\"> <li #dropdownIcon *ngIf=\"showDropdownToggle\" class=\"thf-breadcrumb-item thf-clickable\" (click)=\"toggleDropdown()\"> <span class=\"thf-breadcrumb-icon-more thf-icon thf-icon-more\"></span> <div class=\"thf-breadcrumb-arrow\"></div> </li> <div *ngFor=\"let item of itemsView, let itemIndex = index;\"> <thf-breadcrumb-item [t-action]=\"item.action\" [t-label]=\"item.label\" [t-link]=\"item.link\" [t-item-active]=\"itemIndex === (itemsView.length - 1)\"> </thf-breadcrumb-item> </div> </ul> <thf-breadcrumb-favorite *ngIf=\"favoriteService\" [t-favorite-service]=\"favoriteService\" [t-item-active]=\"items[items.length - 1]\" [t-params-service]=\"paramsService\"> </thf-breadcrumb-favorite> <thf-breadcrumb-dropdown *ngIf=\"showDropdown\" [t-items]=\"dropdownItems\"> </thf-breadcrumb-dropdown> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfBreadcrumbComponent.ctorParameters = function () { return [
        { type: core.IterableDiffers },
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    ThfBreadcrumbComponent.propDecorators = {
        breadcrumbElement: [{ type: core.ViewChild, args: ['breadcrumb', { read: core.ElementRef },] }],
        dropdownIcon: [{ type: core.ViewChild, args: ['dropdownIcon', { read: core.ElementRef },] }]
    };
    return ThfBreadcrumbComponent;
}(ThfBreadcrumbBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy
 *
 * ThfPageDefaultComponent, ThfPageDetailComponent, ThfPageEditComponent, ThfPageListComponent, ThfPageDynamicSearchBaseComponent
 *
 * \@description
 *
 * Interface que define o `thf-breadcrumb`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza o dropdown do thf-breadcrumb.
 */
var ThfBreadcrumbDropdownComponent = /** @class */ (function () {
    function ThfBreadcrumbDropdownComponent() {
    }
    ThfBreadcrumbDropdownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-breadcrumb-dropdown', template: "<ul class=\"thf-breadcrumb-dropdown\"> <li class=\"thf-breadcrumb-dropdown-item\" *ngFor=\"let item of items\" [routerLink]=\"item.link\"> {{ item.label }} </li> </ul> "
                },] },
    ];
    ThfBreadcrumbDropdownComponent.propDecorators = {
        items: [{ type: core.Input, args: ['t-items',] }]
    };
    return ThfBreadcrumbDropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente thf-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
var ThfBreadcrumbFavoriteService = /** @class */ (function () {
    function ThfBreadcrumbFavoriteService(http$$1) {
        this.http = http$$1;
    }
    Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "bodyParams", {
        get: /**
         * @return {?}
         */
        function () { return this._bodyParams; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.configService = /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    function (url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    };
    /**
     * @param {?} status
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.sendStatusFavorite = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.getFavorite = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    };
    ThfBreadcrumbFavoriteService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ThfBreadcrumbFavoriteService.ctorParameters = function () { return [
        { type: http.HttpClient }
    ]; };
    return ThfBreadcrumbFavoriteService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza o serviço de favoritar do thf-breadcrumb.
 */
var ThfBreadcrumbFavoriteComponent = /** @class */ (function () {
    function ThfBreadcrumbFavoriteComponent(service) {
        this.service = service;
        this.favorite = false;
    }
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
        this.getStatusFavorite();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.setSubscription) {
            this.setSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.toggleFavoriteAction = /**
     * @return {?}
     */
    function () {
        this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.getStatusFavorite = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.getSubscription = this.service.getFavorite().subscribe(function (result) { return _this.favorite = result.isFavorite; });
    };
    /**
     * @private
     * @param {?} status
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.setStatusFavorite = /**
     * @private
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        this.setSubscription = this.service.sendStatusFavorite(status).subscribe(function (result) { return _this.favorite = result.isFavorite; });
    };
    ThfBreadcrumbFavoriteComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-breadcrumb-favorite', template: "<div class=\"thf-breadcrumb-favorite thf-clickable\" (click)=\"toggleFavoriteAction()\"> <span class=\"thf-icon thf-icon-star thf-breadcrumb-favorite-star thf-clickable\" [class.thf-breadcrumb-favorite-star-active]=\"favorite\"> </span> <span class=\"thf-hidden-sm thf-breadcrumb-favorite-label\" *ngIf=\"favorite\">Desfavoritar</span> <span class=\"thf-hidden-sm thf-breadcrumb-favorite-label\" *ngIf=\"!favorite\">Favoritar</span> </div> ",
                    providers: [ThfBreadcrumbFavoriteService]
                },] },
    ];
    /** @nocollapse */
    ThfBreadcrumbFavoriteComponent.ctorParameters = function () { return [
        { type: ThfBreadcrumbFavoriteService }
    ]; };
    ThfBreadcrumbFavoriteComponent.propDecorators = {
        favoriteService: [{ type: core.Input, args: ['t-favorite-service',] }],
        itemActive: [{ type: core.Input, args: ['t-item-active',] }],
        paramsService: [{ type: core.Input, args: ['t-params-service',] }]
    };
    return ThfBreadcrumbFavoriteComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza cada item do thf-breadcrumb.
 */
var ThfBreadcrumbItemComponent = /** @class */ (function () {
    function ThfBreadcrumbItemComponent() {
        // Especifica se item é o link ativo.
        this.itemActive = false;
    }
    ThfBreadcrumbItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-breadcrumb-item', template: "<li *ngIf=\"!itemActive\" [class.thf-breadcrumb-item]=\"link || action\" [class.thf-breadcrumb-item-unclickable]=\"!link && !action\"> <a *ngIf=\"link\" [routerLink]=\"link\"> <label class=\"thf-breadcrumb-label\">{{ label }}</label> <div class=\"thf-breadcrumb-arrow\"></div> </a> <a *ngIf=\"!link && action\" (click)=\"action(label)\"> <label class=\"thf-breadcrumb-label\">{{ label }}</label> <div class=\"thf-breadcrumb-arrow\"></div> </a> <a *ngIf=\"!link && !action\"> <label class=\"thf-breadcrumb-label\">{{ label }}</label> <div class=\"thf-breadcrumb-arrow\"></div> </a> </li> <li *ngIf=\"itemActive\" class=\"thf-breadcrumb-item-unclickable\"> <label class=\"thf-breadcrumb-label\">{{ label }}</label> </li> "
                },] },
    ];
    ThfBreadcrumbItemComponent.propDecorators = {
        action: [{ type: core.Input, args: ['t-action',] }],
        label: [{ type: core.Input, args: ['t-label',] }],
        link: [{ type: core.Input, args: ['t-link',] }],
        itemActive: [{ type: core.Input, args: ['t-item-active',] }]
    };
    return ThfBreadcrumbItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-breadcrumb.
 *
 */
var ThfBreadcrumbModule = /** @class */ (function () {
    function ThfBreadcrumbModule() {
    }
    ThfBreadcrumbModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule
                    ],
                    declarations: [
                        ThfBreadcrumbComponent,
                        ThfBreadcrumbDropdownComponent,
                        ThfBreadcrumbFavoriteComponent,
                        ThfBreadcrumbItemComponent
                    ],
                    exports: [ThfBreadcrumbComponent]
                },] },
    ];
    return ThfBreadcrumbModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfBreadcrumbComponent = ThfBreadcrumbComponent;
exports.ThfBreadcrumbModule = ThfBreadcrumbModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
