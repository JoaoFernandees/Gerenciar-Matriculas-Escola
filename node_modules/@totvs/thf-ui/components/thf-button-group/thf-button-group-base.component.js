/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { ThfButtonGroupToggle } from './thf-button-group-toggle.enum';
/** @type {?} */
var THF_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * \@description
 *
 * O componente `thf-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `thf-button-group` com apenas 1 ação, para isso utilize o `thf-button`.
 * - Procure utilizar no máximo 3 ações para cada `thf-button-group`.
 *
 * > As recomendações do `thf-button` também valem para o `thf-button-group`.
 */
var ThfButtonGroupBaseComponent = /** @class */ (function () {
    function ThfButtonGroupBaseComponent() {
        this._small = false;
        this._toggle = THF_TOGGLE_TYPE_DEFAULT;
        /**
         * Lista de botões.
         */
        this.buttons = [];
    }
    Object.defineProperty(ThfButtonGroupBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonGroupBaseComponent.prototype, "toggle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._toggle;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `ThfMultiselectFilterMode`.
         *
         * @default `none`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `ThfMultiselectFilterMode`.
         *
         * \@default `none`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._toggle = ((/** @type {?} */ (Object))).values(ThfButtonGroupToggle).includes(value) ? value : THF_TOGGLE_TYPE_DEFAULT;
            this.checkSelecteds(this._toggle);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    ThfButtonGroupBaseComponent.prototype.onButtonClick = /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    function (buttonClicked, buttonIndex) {
        if (this.toggle === ThfButtonGroupToggle.Single) {
            this.buttons.forEach(function (button, index) {
                return button.selected = index === buttonIndex ? !buttonClicked.selected : false;
            });
        }
        else if (this.toggle === ThfButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    };
    /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    ThfButtonGroupBaseComponent.prototype.checkSelecteds = /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    function (toggleMode) {
        if (toggleMode === ThfButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === ThfButtonGroupToggle.Single) {
            /** @type {?} */
            var hasMoreOneSelected = this.buttons.filter(function (button) { return button.selected; }).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfButtonGroupBaseComponent.prototype.deselectAllButtons = /**
     * @private
     * @return {?}
     */
    function () {
        this.buttons.forEach(function (button) { return button.selected = false; });
    };
    ThfButtonGroupBaseComponent.propDecorators = {
        buttons: [{ type: Input, args: ['t-buttons',] }],
        small: [{ type: Input, args: ['t-small',] }],
        toggle: [{ type: Input, args: ['t-toggle',] }]
    };
    return ThfButtonGroupBaseComponent;
}());
export { ThfButtonGroupBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfButtonGroupBaseComponent.prototype._small;
    /**
     * @type {?}
     * @private
     */
    ThfButtonGroupBaseComponent.prototype._toggle;
    /**
     * Lista de botões.
     * @type {?}
     */
    ThfButtonGroupBaseComponent.prototype.buttons;
}
