var __extends=this&&this.__extends||function(){var t=function(n,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var o in n)n.hasOwnProperty(o)&&(t[o]=n[o])})(n,o)};return function(n,o){function e(){this.constructor=n}t(n,o),n.prototype=null===o?Object.create(o):(e.prototype=o.prototype,new e)}}();import{Component}from"@angular/core";import{ThfButtonBaseComponent}from"./thf-button-base.component";var ThfButtonComponent=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return __extends(n,t),n.prototype.onClick=function(){this.click.emit(null)},n.decorators=[{type:Component,args:[{selector:"thf-button",template:'<button class="thf-button thf-text-ellipsis" type="button" [class.thf-button-danger]="type === \'danger\'" [class.thf-button-link]="type === \'link\'" [class.thf-button-primary]="type === \'primary\'" [class.thf-button-sm] = "small" [class.thf-clickable]="type === \'link\'" [disabled]="disabled || loading" (click)="onClick()"> <span *ngIf="loading" class="thf-icon thf-button-loading-icon"></span> <span *ngIf="icon" class="thf-icon {{ icon }}" aria-hidden="true"></span> <span *ngIf="label" class="thf-button-label">{{ label }}</span> </button> '}]}],n}(ThfButtonBaseComponent);export{ThfButtonComponent};