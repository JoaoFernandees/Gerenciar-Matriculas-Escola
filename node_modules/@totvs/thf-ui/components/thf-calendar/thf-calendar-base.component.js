/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
/** @type {?} */
var thfCalendarLocales = ['pt', 'en', 'es'];
/** @type {?} */
var thfCalendarLocaleDefault = 'pt';
/**
 * \@description
 *
 * O `thf-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
var ThfCalendarBaseComponent = /** @class */ (function () {
    function ThfCalendarBaseComponent(thfDate, thfCalendarLangService) {
        this.thfDate = thfDate;
        this.thfCalendarLangService = thfCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeekDays = Array();
        this.monthVisible = false;
        this.yearVisible = false;
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        /**
         * Evento disparado ao selecionar um dia do calendário.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(ThfCalendarBaseComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * @default `pt`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * \@default `pt`
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            this._locale = thfCalendarLocales.includes(locale) ? locale : thfCalendarLocaleDefault;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarBaseComponent.prototype, "maxDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} maxDate
         * @return {?}
         */
        function (maxDate) {
            this._maxDate = this.thfDate.getDateForDateRange(maxDate, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarBaseComponent.prototype, "minDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} minDate
         * @return {?}
         */
        function (minDate) {
            this._minDate = this.thfDate.getDateForDateRange(minDate, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCalendarBaseComponent.prototype.initializeLanguage = /**
     * @return {?}
     */
    function () {
        this.thfCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.thfCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.thfCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
    };
    ThfCalendarBaseComponent.propDecorators = {
        locale: [{ type: Input, args: ['t-locale',] }],
        maxDate: [{ type: Input, args: ['t-max-date',] }],
        minDate: [{ type: Input, args: ['t-min-date',] }],
        change: [{ type: Output, args: ['t-change',] }]
    };
    return ThfCalendarBaseComponent;
}());
export { ThfCalendarBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfCalendarBaseComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarBaseComponent.prototype._maxDate;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarBaseComponent.prototype._minDate;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.dayVisible;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayDays;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayDecade;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayFinalDecade;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayMonth;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayMonths;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayStartDecade;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayWeekDays;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayYear;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.monthVisible;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.yearVisible;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.currentMonthNumber;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.currentYear;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.date;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.dateIso;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.displayMonthNumber;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.lastDisplay;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.today;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.validatorChange;
    /**
     * Evento disparado ao selecionar um dia do calendário.
     * @type {?}
     */
    ThfCalendarBaseComponent.prototype.change;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.thfDate;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.thfCalendarLangService;
}
