var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThfCalendarBaseComponent } from './thf-calendar-base.component';
import { ThfCalendarLangService } from './services/thf-calendar.lang.service';
import { ThfCalendarService } from './services/thf-calendar.service';
import { ThfDateService } from '../../services/thf-date/thf-date.service';
/**
 * \@docsExtends ThfCalendarBaseComponent
 *
 * \@example
 *
 * <example name="thf-calendar-basic" title="Totvs Calendar Basic" >
 *  <file name="sample-thf-calendar-basic/sample-thf-calendar-basic.component.html"> </file>
 *  <file name="sample-thf-calendar-basic/sample-thf-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-calendar-labs" title="Totvs Calendar Labs" >
 *  <file name="sample-thf-calendar-labs/sample-thf-calendar-labs.component.html"> </file>
 *  <file name="sample-thf-calendar-labs/sample-thf-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-calendar-ticket-sales" title="Totvs Calendar - Ticket Sales" >
 *  <file name="sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
var ThfCalendarComponent = /** @class */ (function (_super) {
    __extends(ThfCalendarComponent, _super);
    function ThfCalendarComponent(thfCalendarService, thfCalendarLangService, thfDate) {
        var _this = _super.call(this, thfDate, thfCalendarLangService) || this;
        _this.thfCalendarService = thfCalendarService;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    ThfCalendarComponent.prototype.getBackgroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayBackgroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.getDayColor(date, 'background');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayForegroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.getDayColor(date, 'foreground');
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    ThfCalendarComponent.prototype.getForegroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthLabel = /**
     * @return {?}
     */
    function () {
        return this.thfCalendarLangService.getMonthLabel();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearLabel = /**
     * @return {?}
     */
    function () {
        return this.thfCalendarLangService.getYearLabel();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextMonth = /**
     * @return {?}
     */
    function () {
        this.displayMonthNumber < 11 ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1) :
            this.updateDisplay(this.displayYear + 1, 0);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPreviousMonth = /**
     * @return {?}
     */
    function () {
        this.displayMonthNumber > 0 ? this.updateDisplay(this.displayYear, this.displayMonthNumber - 1) :
            this.updateDisplay(this.displayYear - 1, 11);
    };
    // Ao selecionar uma data
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectDate = 
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.date = date;
        this.dateIso = this.thfDate.convertDateToISO(date);
        if (this.propagateChange) {
            this.propagateChange(this.dateIso);
        }
        this.change.emit(this.dateIso);
    };
    // Ao selecionar um mês
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectMonth = 
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    // Ao selecionar um ano
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectYear = 
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCalendarComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} func
     * @return {?}
     */
    ThfCalendarComponent.prototype.registerOnTouched = /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCalendarComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDay = /**
     * @return {?}
     */
    function () {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectMonth = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectYear = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateYear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ThfCalendarComponent.prototype.validateModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfCalendarComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.writeDate(value);
        }
        else {
            this.date = undefined;
            this.updateDate(this.today);
        }
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.addAllYearsInDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        /** @type {?} */
        var i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    };
    /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    ThfCalendarComponent.prototype.equalsDate = /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    // Obtém um array de todos os anos desta década
    // Obtém um array de todos os anos desta década
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDecadeArray = 
    // Obtém um array de todos os anos desta década
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    ThfCalendarComponent.prototype.getColorForDate = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? "thf-calendar-box-" + local + "-selected" :
            "thf-calendar-box-" + local + "-selected-disabled";
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    ThfCalendarComponent.prototype.getColorForDateRange = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? "thf-calendar-box-" + local :
            "thf-calendar-box-" + local + "-disabled";
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    ThfCalendarComponent.prototype.getColorForToday = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? "thf-calendar-box-" + local + "-today" :
            "thf-calendar-box-" + local + "-today-disabled";
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayColor = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        if (this.equalsDate(date, this.date)) {
            return this.getColorForDate(date, local);
        }
        else if (this.equalsDate(date, this.today)) {
            return this.getColorForToday(date, local);
        }
        else {
            return this.getColorForDateRange(date, local);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfCalendarComponent.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        this.date && this.thfDate.isValidIso(this.thfDate.convertDateToISO(this.date)) ?
            this.updateDate(this.date) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDateFromDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.date = date;
        this.onSelectDate(this.date);
    };
    /**
     * @private
     * @param {?} stringDate
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDateFromIso = /**
     * @private
     * @param {?} stringDate
     * @return {?}
     */
    function (stringDate) {
        var _a = this.thfDate.getDateFromIso(stringDate), year = _a.year, month = _a.month, day = _a.day;
        /** @type {?} */
        var date = new Date(year, month - 1, day);
        this.thfDate.setYearFrom0To100(date, year);
        this.date = date;
        this.onSelectDate(this.date);
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date) {
            this.currentMonthNumber = date.getMonth();
            this.currentYear = date.getFullYear();
            this.updateDisplay(this.currentYear, this.currentMonthNumber);
        }
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    };
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDisplay = /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var calendarArray = this.thfCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getDecadeArray(year);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.writeDate = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value instanceof Date ? this.selectDateFromDate(value) : this.writeDateIso(value);
        this.updateDate(this.date);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.writeDateIso = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.thfDate.isValidIso(value) ? this.selectDateFromIso(value) : this.date = undefined;
    };
    ThfCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-calendar', template: "<div class=\"thf-calendar\"> <div *ngIf=\"dayVisible\"> <div class=\"thf-calendar-nav\"> <span class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\" (click)=\"onPreviousMonth()\"></span> <div class=\"thf-calendar-nav-title\" attr-calendar> <span class=\"thf-clickable thf-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\" (click)=\"onNextMonth()\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeekDays\"> {{ day.toLowerCase() }} </div> </div> <div class=\"thf-calendar-content-list-day\"> <div *ngFor=\"let day of displayDays\" class=\"thf-calendar-day\" [ngClass]=\"getDayBackgroundColor(day)\" (click)=\"onSelectDate(day)\"> <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\"> {{ day.getDate() }} </span> </div> </div> </div> </div> <div *ngIf=\"monthVisible\"> <div class=\"thf-calendar-nav\"> <span class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\" (click)=\"updateYear(-1)\"></span> <div class=\"thf-calendar-nav-title\" attr-calendar> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\" (click)=\"updateYear(1)\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getMonthLabel() }} </div> </div> <div class=\"thf-calendar-content-list-month\"> <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\" [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" (click)=\"onSelectMonth(displayYear, i)\" attr-calendar> <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\"> {{ month }} </span> </div> </div> </div> </div> <div *ngIf=\"yearVisible\"> <div class=\"thf-calendar-nav\"> <span class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\" (click)=\"updateYear(-10)\"></span> <div class=\"thf-calendar-nav-title\"> {{ displayStartDecade }} - {{ displayFinalDecade }} </div> <span class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\" (click)=\"updateYear(10)\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getYearLabel() }} </div> </div> <div class=\"thf-calendar-content-list-year\"> <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\" [ngClass]=\"getBackgroundColor(year, currentYear)\" (click)=\"onSelectYear(year, displayMonthNumber)\"attr-calendar> <span [ngClass]=\"getForegroundColor(year, currentYear)\"> {{ year }} </span> </div> </div> </div> </div> </div> ",
                    providers: [
                        ThfCalendarService,
                        ThfCalendarLangService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfCalendarComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfCalendarComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfCalendarComponent.ctorParameters = function () { return [
        { type: ThfCalendarService },
        { type: ThfCalendarLangService },
        { type: ThfDateService }
    ]; };
    return ThfCalendarComponent;
}(ThfCalendarBaseComponent));
export { ThfCalendarComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype.thfCalendarService;
}
