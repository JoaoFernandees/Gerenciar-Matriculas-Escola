var __extends=this&&this.__extends||function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function i(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(i.prototype=a.prototype,new i)}}();import{Component,forwardRef}from"@angular/core";import{NG_VALIDATORS,NG_VALUE_ACCESSOR}from"@angular/forms";import{ThfCalendarBaseComponent}from"./thf-calendar-base.component";import{ThfCalendarLangService}from"./services/thf-calendar.lang.service";import{ThfCalendarService}from"./services/thf-calendar.service";import{ThfDateService}from"../../services/thf-date/thf-date.service";var ThfCalendarComponent=function(t){function e(e,a,i){var n=t.call(this,i,a)||this;return n.thfCalendarService=e,n}return __extends(e,t),e.prototype.ngOnInit=function(){this.init()},e.prototype.getBackgroundColor=function(t,e){return t===e?"thf-calendar-box-background-selected":"thf-calendar-box-background"},e.prototype.getDayBackgroundColor=function(t){return this.getDayColor(t,"background")},e.prototype.getDayForegroundColor=function(t){return this.getDayColor(t,"foreground")},e.prototype.getForegroundColor=function(t,e){return t===e?"thf-calendar-box-foreground-selected":"thf-calendar-box-foreground"},e.prototype.getMonthLabel=function(){return this.thfCalendarLangService.getMonthLabel()},e.prototype.getYearLabel=function(){return this.thfCalendarLangService.getYearLabel()},e.prototype.onNextMonth=function(){this.displayMonthNumber<11?this.updateDisplay(this.displayYear,this.displayMonthNumber+1):this.updateDisplay(this.displayYear+1,0)},e.prototype.onPreviousMonth=function(){this.displayMonthNumber>0?this.updateDisplay(this.displayYear,this.displayMonthNumber-1):this.updateDisplay(this.displayYear-1,11)},e.prototype.onSelectDate=function(t){this.date=t,this.dateIso=this.thfDate.convertDateToISO(t),this.propagateChange&&this.propagateChange(this.dateIso),this.change.emit(this.dateIso)},e.prototype.onSelectMonth=function(t,e){this.selectDay(),this.updateDisplay(t,e)},e.prototype.onSelectYear=function(t,e){"month"===this.lastDisplay?this.selectMonth():this.selectDay(),this.currentYear=t,this.updateDisplay(t,e)},e.prototype.registerOnChange=function(t){this.propagateChange=t},e.prototype.registerOnTouched=function(t){this.onTouched=t},e.prototype.registerOnValidatorChange=function(t){this.validatorChange=t},e.prototype.selectDay=function(){this.dayVisible=!0,this.monthVisible=!1,this.yearVisible=!1,this.lastDisplay="day"},e.prototype.selectMonth=function(){this.dayVisible=!1,this.monthVisible=!0,this.yearVisible=!1,this.lastDisplay="month"},e.prototype.selectYear=function(){this.dayVisible=!1,this.monthVisible=!1,this.yearVisible=!0},e.prototype.updateYear=function(t){this.updateDisplay(this.displayYear+t,this.displayMonthNumber)},e.prototype.validateModel=function(t){this.validatorChange&&this.validatorChange(t)},e.prototype.validate=function(t){return null},e.prototype.writeValue=function(t){t?this.writeDate(t):(this.date=void 0,this.updateDate(this.today))},e.prototype.addAllYearsInDecade=function(t){var e;for(e=t;e<t+10;e++)this.displayDecade.push(e)},e.prototype.equalsDate=function(t,e){try{return t.getFullYear()===e.getFullYear()&&t.getMonth()===e.getMonth()&&t.getDate()===e.getDate()}catch(t){return!1}},e.prototype.getDecadeArray=function(t){if(this.displayDecade=Array(),t%10!=0)for(;t%10!=0;)t--;this.updateDecade(t)},e.prototype.getColorForDate=function(t,e){return this.thfDate.validateDateRange(t,this.minDate,this.maxDate)?"thf-calendar-box-"+e+"-selected":"thf-calendar-box-"+e+"-selected-disabled"},e.prototype.getColorForDateRange=function(t,e){return this.thfDate.validateDateRange(t,this.minDate,this.maxDate)?"thf-calendar-box-"+e:"thf-calendar-box-"+e+"-disabled"},e.prototype.getColorForToday=function(t,e){return this.thfDate.validateDateRange(t,this.minDate,this.maxDate)?"thf-calendar-box-"+e+"-today":"thf-calendar-box-"+e+"-today-disabled"},e.prototype.getDayColor=function(t,e){return this.equalsDate(t,this.date)?this.getColorForDate(t,e):this.equalsDate(t,this.today)?this.getColorForToday(t,e):this.getColorForDateRange(t,e)},e.prototype.init=function(){this.date&&this.thfDate.isValidIso(this.thfDate.convertDateToISO(this.date))?this.updateDate(this.date):this.updateDate(this.today),this.initializeLanguage(),this.selectDay()},e.prototype.selectDateFromDate=function(t){this.date=t,this.onSelectDate(this.date)},e.prototype.selectDateFromIso=function(t){var e=this.thfDate.getDateFromIso(t),a=e.year,i=e.month,n=e.day,r=new Date(a,i-1,n);this.thfDate.setYearFrom0To100(r,a),this.date=r,this.onSelectDate(this.date)},e.prototype.updateDate=function(t){t&&(this.currentMonthNumber=t.getMonth(),this.currentYear=t.getFullYear(),this.updateDisplay(this.currentYear,this.currentMonthNumber))},e.prototype.updateDecade=function(t){this.addAllYearsInDecade(t),this.displayStartDecade=t,this.displayFinalDecade=t+9},e.prototype.updateDisplay=function(t,e){var a=this.thfCalendarService.monthDays(t,e);this.displayDays=[].concat.apply([],a),this.displayMonthNumber=e,this.displayMonth=this.displayMonths[e],this.displayYear=t,this.getDecadeArray(t)},e.prototype.writeDate=function(t){t instanceof Date?this.selectDateFromDate(t):this.writeDateIso(t),this.updateDate(this.date)},e.prototype.writeDateIso=function(t){this.thfDate.isValidIso(t)?this.selectDateFromIso(t):this.date=void 0},e.decorators=[{type:Component,args:[{selector:"thf-calendar",template:'<div class="thf-calendar"> <div *ngIf="dayVisible"> <div class="thf-calendar-nav"> <span class="thf-calendar-nav-left thf-icon thf-icon-arrow-left" (click)="onPreviousMonth()"></span> <div class="thf-calendar-nav-title" attr-calendar> <span class="thf-clickable thf-mr-1" (click)="selectMonth()">{{ displayMonth }}</span> <span class="thf-clickable" (click)="selectYear()">{{ displayYear }}</span> </div> <span class="thf-calendar-nav-right thf-icon thf-icon-arrow-right" (click)="onNextMonth()"></span> </div> <div class="thf-calendar-content"> <div class="thf-calendar-labels"> <div class="thf-calendar-label" *ngFor="let day of displayWeekDays"> {{ day.toLowerCase() }} </div> </div> <div class="thf-calendar-content-list-day"> <div *ngFor="let day of displayDays" class="thf-calendar-day" [ngClass]="getDayBackgroundColor(day)" (click)="onSelectDate(day)"> <span *ngIf="day != 0" [ngClass]="getDayForegroundColor(day)"> {{ day.getDate() }} </span> </div> </div> </div> </div> <div *ngIf="monthVisible"> <div class="thf-calendar-nav"> <span class="thf-calendar-nav-left thf-icon thf-icon-arrow-left" (click)="updateYear(-1)"></span> <div class="thf-calendar-nav-title" attr-calendar> <span class="thf-clickable" (click)="selectYear()">{{ displayYear }}</span> </div> <span class="thf-calendar-nav-right thf-icon thf-icon-arrow-right" (click)="updateYear(1)"></span> </div> <div class="thf-calendar-content"> <div class="thf-calendar-labels"> <div class="thf-calendar-label"> {{ getMonthLabel() }} </div> </div> <div class="thf-calendar-content-list-month"> <div *ngFor="let month of displayMonths; let i = index;" class="thf-calendar-month" [ngClass]="getBackgroundColor(i, displayMonthNumber)" (click)="onSelectMonth(displayYear, i)" attr-calendar> <span [ngClass]="getForegroundColor(i, displayMonthNumber)"> {{ month }} </span> </div> </div> </div> </div> <div *ngIf="yearVisible"> <div class="thf-calendar-nav"> <span class="thf-calendar-nav-left thf-icon thf-icon-arrow-left" (click)="updateYear(-10)"></span> <div class="thf-calendar-nav-title"> {{ displayStartDecade }} - {{ displayFinalDecade }} </div> <span class="thf-calendar-nav-right thf-icon thf-icon-arrow-right" (click)="updateYear(10)"></span> </div> <div class="thf-calendar-content"> <div class="thf-calendar-labels"> <div class="thf-calendar-label"> {{ getYearLabel() }} </div> </div> <div class="thf-calendar-content-list-year"> <div *ngFor="let year of displayDecade; let i = index;" class="thf-calendar-year" [ngClass]="getBackgroundColor(year, currentYear)" (click)="onSelectYear(year, displayMonthNumber)"attr-calendar> <span [ngClass]="getForegroundColor(year, currentYear)"> {{ year }} </span> </div> </div> </div> </div> </div> ',providers:[ThfCalendarService,ThfCalendarLangService,{provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(function(){return e}),multi:!0},{provide:NG_VALIDATORS,useExisting:forwardRef(function(){return e}),multi:!0}]}]}],e.ctorParameters=function(){return[{type:ThfCalendarService},{type:ThfCalendarLangService},{type:ThfDateService}]},e}(ThfCalendarBaseComponent);export{ThfCalendarComponent};