/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToInt, isTypeof } from '../../utils/util';
import { ThfChartType } from './enums/thf-chart-type.enum';
/** @type {?} */
var thfChartDefaultHeight = 400;
/** @type {?} */
var thfChartTypeDefault = ThfChartType.Pie;
/** @type {?} */
var thfChartMinHeight = 200;
/**
 * \@description
 *
 * O `thf-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Este componente também possibilita a definição das seguintes propriedades: altura do gráfico; série(s) que irão compor o gráfico;
 * título do gráfico; e tipo de gráfico.
 *
 * Além das definições de propriedades, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 *
 * @abstract
 */
var ThfChartBaseComponent = /** @class */ (function () {
    function ThfChartBaseComponent() {
        this._height = thfChartDefaultHeight;
        this._type = thfChartTypeDefault;
        this.thfChartType = ThfChartType;
        /**
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesClick = new EventEmitter();
        /**
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesHover = new EventEmitter();
    }
    Object.defineProperty(ThfChartBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * @default `400px`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * \@default `400px`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var intValue = convertToInt(value);
            /** @type {?} */
            var height;
            if (isTypeof(value, 'number')) {
                height = intValue <= thfChartMinHeight ? thfChartMinHeight : intValue;
            }
            else {
                height = thfChartDefaultHeight;
            }
            this._height = height;
            this.rebuildComponent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfChartBaseComponent.prototype, "type", {
        // TODO quando houver a necessidade de informar um type.
        // /**
        //  * @optional
        //  *
        //  * @description
        //  *
        //  * Define o tipo de gráfico.
        //  *
        //  * > Veja os valores válidos no *enum* `ThfChartType`.
        //  *
        //  * @default `ThfChartType.Pie`
        //  */
        // @Input('t-type') set type(value: ThfChartType) {
        //   this._type = (<any>Object).values(ThfChartType).includes(value) ? value : thfChartTypeDefault;
        // }
        get: 
        // TODO quando houver a necessidade de informar um type.
        // /**
        //  * @optional
        //  *
        //  * @description
        //  *
        //  * Define o tipo de gráfico.
        //  *
        //  * > Veja os valores válidos no *enum* `ThfChartType`.
        //  *
        //  * @default `ThfChartType.Pie`
        //  */
        // @Input('t-type') set type(value: ThfChartType) {
        //   this._type = (<any>Object).values(ThfChartType).includes(value) ? value : thfChartTypeDefault;
        // }
        /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ThfChartBaseComponent.prototype.onSeriesClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesClick.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfChartBaseComponent.prototype.onSeriesHover = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesHover.emit(event);
    };
    ThfChartBaseComponent.propDecorators = {
        height: [{ type: Input, args: ['t-height',] }],
        series: [{ type: Input, args: ['t-series',] }],
        title: [{ type: Input, args: ['t-title',] }],
        seriesClick: [{ type: Output, args: ['t-series-click',] }],
        seriesHover: [{ type: Output, args: ['t-series-hover',] }]
    };
    return ThfChartBaseComponent;
}());
export { ThfChartBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfChartBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfChartBaseComponent.prototype._type;
    /** @type {?} */
    ThfChartBaseComponent.prototype.thfChartType;
    /**
     * Coleção de objetos que implementam a interface `ThfPieChartSeries`, para definição dos elementos do gráfico que serão criados
     * dinâmicamente.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.series;
    /**
     * Define o título do gráfico.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.title;
    /**
     * Evento executado quando o usuário clicar sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.seriesClick;
    /**
     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.seriesHover;
    /**
     * @abstract
     * @return {?}
     */
    ThfChartBaseComponent.prototype.rebuildComponent = function () { };
}
