/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
/** @type {?} */
var Padding = 24;
/**
 * @abstract
 */
var ThfChartDynamicTypeComponent = /** @class */ (function () {
    function ThfChartDynamicTypeComponent() {
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        this.series = [];
    }
    /**
     * @param {?} chartWrapperElement
     * @param {?} chartHeaderElement
     * @param {?} chartLegendElement
     * @return {?}
     */
    ThfChartDynamicTypeComponent.prototype.calculateSVGContainerDimensions = /**
     * @param {?} chartWrapperElement
     * @param {?} chartHeaderElement
     * @param {?} chartLegendElement
     * @return {?}
     */
    function (chartWrapperElement, chartHeaderElement, chartLegendElement) {
        /** @type {?} */
        var svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - (Padding * 2);
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    };
    /**
     * @return {?}
     */
    ThfChartDynamicTypeComponent.prototype.calculateTotalValue = /**
     * @return {?}
     */
    function () {
        this.totalValue = this.series.reduce(function (previousValue, serie) { return previousValue + serie.value; }, 0);
    };
    ThfChartDynamicTypeComponent.propDecorators = {
        chartBody: [{ type: ViewChild, args: ['chartBody',] }],
        svgContainer: [{ type: ViewChild, args: ['svgContainer',] }]
    };
    return ThfChartDynamicTypeComponent;
}());
export { ThfChartDynamicTypeComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ThfChartDynamicTypeComponent.prototype.windowResizeListener;
    /**
     * @type {?}
     * @protected
     */
    ThfChartDynamicTypeComponent.prototype.windowScrollListener;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.centerX;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartElementCategory;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartElementValue;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartHeader;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartLegend;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartWrapper;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.colors;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.height;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.onSerieClick;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.onSerieHover;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.series;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.svgElement;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.svgHeight;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.target;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.tooltipElement;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.tooltipText;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.totalValue;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartBody;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.svgContainer;
}
