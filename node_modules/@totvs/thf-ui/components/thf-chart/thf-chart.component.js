var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, HostListener, IterableDiffers, ViewChild, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { ThfChartBaseComponent } from './thf-chart-base.component';
import { ThfChartColors } from './thf-chart-colors.constant';
import { ThfChartPieComponent } from './thf-chart-types/thf-chart-pie/thf-chart-pie.component';
import { ThfChartType } from './enums/thf-chart-type.enum';
/**
 * \@docsExtends ThfChartBaseComponent
 *
 * \@example
 *
 * <example name="thf-chart-basic" title="Totvs Chart Basic">
 *  <file name="sample-thf-chart-basic/sample-thf-chart-basic.component.html"> </file>
 *  <file name="sample-thf-chart-basic/sample-thf-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-chart-labs" title="Totvs Chart Labs">
 *  <file name="sample-thf-chart-labs/sample-thf-chart-labs.component.html"> </file>
 *  <file name="sample-thf-chart-labs/sample-thf-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-chart-coffee-ranking" title="Totvs Chart - Coffee Ranking">
 *  <file name="sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
var ThfChartComponent = /** @class */ (function (_super) {
    __extends(ThfChartComponent, _super);
    function ThfChartComponent(changeDetector, componentFactoryResolver, differs) {
        var _a;
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.differs = differs;
        _this.calculatedElement = false;
        _this.initialized = false;
        _this.windowResizeListener = new Subject();
        _this.mappings = (_a = {},
            _a[ThfChartType.Pie] = ThfChartPieComponent,
            _a);
        _this.onResize = function () { return _this.windowResizeListener.next(); };
        _this.differ = _this.differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
    };
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visÃ­vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (charWrapperWidth && !this.calculatedElement && this.initialized) {
            this.calculatedElement = true;
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
        this.checkingForSerieChanges();
    };
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeWindowResizeListener();
    };
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getSeriesColor();
    };
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.rebuildComponent = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.dynamicComponentSetting();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.checkingForSerieChanges = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.componentRef && this.differ) {
            /** @type {?} */
            var changeSeries = this.differ.diff(this.series);
            if (changeSeries) {
                this.getSeriesColor();
                this.rebuildComponent();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.createComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var componentType = this.getComponentType(this.type);
        /** @type {?} */
        var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        /** @type {?} */
        var instance = (/** @type {?} */ (this.componentRef.instance));
        this.setChartProperties(instance);
        return instance;
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.dynamicComponentSetting = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    };
    /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    ThfChartComponent.prototype.getComponentType = /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    function (typeName) {
        return this.mappings[typeName];
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.getSeriesColor = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var colorsLength = ThfChartColors.length - 1;
        if (!this.series) {
            return this.colors = ThfChartColors[colorsLength];
        }
        /** @type {?} */
        var seriesLength = this.series.length - 1;
        if (seriesLength > colorsLength) {
            /** @type {?} */
            var colors = ThfChartColors[colorsLength];
            // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
            /** @type {?} */
            var quantityDuplicates = seriesLength / colorsLength;
            for (var i = 1; i <= quantityDuplicates; i++) {
                colors = colors.concat(ThfChartColors[colorsLength]);
            }
            return this.colors = colors;
        }
        return this.colors = ThfChartColors[seriesLength];
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.removeWindowResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.onResize) {
            this.onResize = function () { };
        }
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    ThfChartComponent.prototype.setChartProperties = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
        instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;
        instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        instance.colors = this.colors;
        instance.height = this.height;
        instance.series = this.series || [];
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    ThfChartComponent.prototype.setClickSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        instance.onSerieClick.subscribe(function (event) {
            _this.onSeriesClick(event);
        });
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    ThfChartComponent.prototype.setHoverSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        instance.onSerieHover.subscribe(function (event) {
            _this.onSeriesHover(event);
        });
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    ThfChartComponent.prototype.setResizeListenerSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        this.windowResizeListener.subscribe(function () {
            instance.chartHeader = _this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = _this.chartLegend.nativeElement.offsetHeight;
            instance.chartWrapper = _this.chartWrapper.nativeElement.offsetWidth;
        });
    };
    ThfChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-chart', template: "<div #chartWrapper class=\"thf-chart-wrapper\"> <div #chartHeader class=\"thf-chart-header\"> <div class=\"thf-chart-title\">{{ title }}</div> </div> <ng-template #chartContainer></ng-template> <div #chartLegend class=\"thf-chart-legend\"> <div class=\"thf-chart-legend-container\"> <div class=\"thf-chart-legend-item\" *ngFor=\"let serie of series; let i = index\"> <div class=\"thf-chart-legend-square\" [style.background]=\"colors[i]\"></div> <span class=\"thf-chart-legend-text\">{{ serie.category }}</span> </div> </div> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfChartComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers }
    ]; };
    ThfChartComponent.propDecorators = {
        chartContainer: [{ type: ViewChild, args: ['chartContainer', { read: ViewContainerRef },] }],
        chartHeader: [{ type: ViewChild, args: ['chartHeader',] }],
        chartLegend: [{ type: ViewChild, args: ['chartLegend',] }],
        chartWrapper: [{ type: ViewChild, args: ['chartWrapper',] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return ThfChartComponent;
}(ThfChartBaseComponent));
export { ThfChartComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.calculatedElement;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.windowResizeListener;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.mappings;
    /** @type {?} */
    ThfChartComponent.prototype.colors;
    /** @type {?} */
    ThfChartComponent.prototype.chartContainer;
    /** @type {?} */
    ThfChartComponent.prototype.chartHeader;
    /** @type {?} */
    ThfChartComponent.prototype.chartLegend;
    /** @type {?} */
    ThfChartComponent.prototype.chartWrapper;
    /** @type {?} */
    ThfChartComponent.prototype.onResize;
    /** @type {?} */
    ThfChartComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.differs;
}
