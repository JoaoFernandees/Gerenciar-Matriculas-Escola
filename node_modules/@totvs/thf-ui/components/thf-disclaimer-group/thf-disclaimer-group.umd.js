(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('uuid'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'uuid', '@angular/common'], factory) :
	(factory((global['thf-disclaimer-group'] = {}),global.core,global.uuid,global.common));
}(this, (function (exports,core,uuid,common) { 'use strict';

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */
var thfLocales = ['pt', 'en', 'es'];
// Idioma padrão
/** @type {?} */
var thfLocaleDefault = 'pt';
/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */
function browserLanguage() {
    /** @type {?} */
    var language = navigator.language.toLowerCase().substring(0, 2);
    if (!thfLocales.includes(language)) {
        return thfLocaleDefault;
    }
    return language;
}
/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */

/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} date
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */

/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */

// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */

// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */

/**
 * @param {?} event
 * @return {?}
 */
function isKeyCodeEnter(event) {
    return event.keyCode === 13 || event.which === 13;
}
/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */

/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} link
 * @return {?}
 */

/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @param {?} text
 * @return {?}
 */

/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

var __assign$1 = (undefined && undefined.__assign) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' }
};
/**
 * \@description
 *
 * O componente `thf-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [thf-page-list](/documentation/thf-page-list).
 */
var ThfDisclaimerGroupBaseComponent = /** @class */ (function () {
    function ThfDisclaimerGroupBaseComponent(differs) {
        this._disclaimers = [];
        this._hideRemoveAll = false;
        this.previousDisclaimers = [];
        this.literals = __assign$1({}, thfDisclaimerGroupLiteralsDefault[thfLocaleDefault], thfDisclaimerGroupLiteralsDefault[browserLanguage()]);
        /**
         * Função que será disparada quando a lista de *disclaimers* for modificada.
         */
        this.change = new core.EventEmitter();
        this.differ = differs.find([]).create(null);
    }
    Object.defineProperty(ThfDisclaimerGroupBaseComponent.prototype, "disclaimers", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disclaimers;
        },
        /** Lista de *disclaimers*. */
        set: /**
         * Lista de *disclaimers*.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.previousDisclaimers = this.disclaimers.slice();
            this._disclaimers = this.checkDisclaimers(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideRemoveAll;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o botão para remover todos os *disclaimers* do grupo.
         *
         * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta o botão para remover todos os *disclaimers* do grupo.
         *
         * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideRemoveAll = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkChanges();
    };
    /**
     * @param {?} disclaimer
     * @param {?=} emitChange
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.closeItem = /**
     * @param {?} disclaimer
     * @param {?=} emitChange
     * @return {?}
     */
    function (disclaimer, emitChange) {
        if (emitChange === void 0) { emitChange = true; }
        /** @type {?} */
        var itemIndex = this.disclaimers.findIndex(function (d) { return d['$id'] === disclaimer['$id']; });
        this.disclaimers.splice(itemIndex, 1);
        if (emitChange) {
            this.emitChangeDisclaimers();
        }
    };
    /**
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.isRemoveAll = /**
     * @return {?}
     */
    function () {
        return !this.hideRemoveAll && this.disclaimers.filter(function (c) { return !c.hideClose; }).length > 1;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.onKeyPress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    };
    /**
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.removeAllItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var removeItems = [];
        this.disclaimers.forEach(function (disclaimer) {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        });
        removeItems.forEach(function (disclaimer) { return _this.closeItem(disclaimer, false); });
        this.emitChangeDisclaimers();
    };
    /**
     * @private
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.checkChanges = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.checkDisclaimers = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (var i = 0; i < disclaimers.length; i++) {
                /** @type {?} */
                var disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = uuid.v4();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.disclaimersAreChanged = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        var _this = this;
        /** @type {?} */
        var currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some(function (disclaimer, index) { return disclaimer.value !== _this.previousDisclaimers[index].value
            || disclaimer.property !== _this.previousDisclaimers[index].property; });
    };
    /**
     * @private
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.emitChangeDisclaimers = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.change.emit(_this.disclaimers);
        });
        this.previousDisclaimers = this._disclaimers.slice();
    };
    ThfDisclaimerGroupBaseComponent.propDecorators = {
        disclaimers: [{ type: core.Input, args: ['t-disclaimers',] }],
        hideRemoveAll: [{ type: core.Input, args: ['t-hide-remove-all',] }],
        title: [{ type: core.Input, args: ['t-title',] }],
        change: [{ type: core.Output, args: ['t-change',] }]
    };
    return ThfDisclaimerGroupBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfDisclaimerGroupBaseComponent
 *
 * \@example
 *
 * <example name="thf-disclaimer-group-basic" title="Totvs Disclaimer Group Basic">
 *   <file name="sample-thf-disclaimer-group-basic/sample-thf-disclaimer-group-basic.component.html"> </file>
 *   <file name="sample-thf-disclaimer-group-basic/sample-thf-disclaimer-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-disclaimer-group-labs" title="Totvs Disclaimer Group Labs">
 *   <file name="sample-thf-disclaimer-group-labs/sample-thf-disclaimer-group-labs.component.html"> </file>
 *   <file name="sample-thf-disclaimer-group-labs/sample-thf-disclaimer-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-disclaimer-group-sw-planets" title="Totvs Disclaimer Group - Star Wars Planets">
 *   <file name="sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.component.html"> </file>
 *   <file name="sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.component.ts"> </file>
 *   <file name="sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.service.ts"> </file>
 * </example>
 *
 */
var ThfDisclaimerGroupComponent = /** @class */ (function (_super) {
    __extends(ThfDisclaimerGroupComponent, _super);
    function ThfDisclaimerGroupComponent(differs) {
        return _super.call(this, differs) || this;
    }
    ThfDisclaimerGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-disclaimer-group', template: "<div class=\"thf-disclaimer-group\" *ngIf=\"disclaimers.length > 0\" > <div class=\"thf-disclaimer-group-title\">{{ title }}</div> <thf-disclaimer-remove *ngIf=\"isRemoveAll()\" class=\"thf-disclaimer-group-padding\" [t-label]=\"literals.removeAll\" (keydown)=\"onKeyPress($event)\" (t-remove-all-action)=\"removeAllItems()\"> </thf-disclaimer-remove> <thf-disclaimer *ngFor=\"let disclaimer of disclaimers\" class=\"thf-disclaimer-group-padding\" [t-hide-close]=\"disclaimer.hideClose\" [t-label]=\"disclaimer.label\" [t-property]=\"disclaimer.property\" [t-value]=\"disclaimer.value\" (t-close-action)=\"closeItem(disclaimer)\"> </thf-disclaimer> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfDisclaimerGroupComponent.ctorParameters = function () { return [
        { type: core.IterableDiffers }
    ]; };
    return ThfDisclaimerGroupComponent;
}(ThfDisclaimerGroupBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy
 *
 * ThfPageListComponent
 *
 * \@description
 *
 * Interface que representa o objeto `thf-disclaimer-group`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_DISCLAIMER_TYPES = ['default', 'danger'];
/** @type {?} */
var THF_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente thf-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no thf-multi-select.
 *
 */
var ThfDisclaimerBaseComponent = /** @class */ (function () {
    function ThfDisclaimerBaseComponent() {
        this._type = 'default';
        this._hideClose = false;
        this.showDisclaimer = true;
        /**
         * Evento disparado ao fechar o disclaimer.
         * Para este evento será passado como parâmetro um objeto com value, label e property.
         */
        this.closeAction = new core.EventEmitter();
    }
    Object.defineProperty(ThfDisclaimerBaseComponent.prototype, "hideClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideClose;
        },
        /**
         * @description
         *
         * Esta propriedade esconde o botão para fechamento do thf-disclaimer, ao utilizar esta propriedade
         * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
         *
         * @default false
         */
        set: /**
         * \@description
         *
         * Esta propriedade esconde o botão para fechamento do thf-disclaimer, ao utilizar esta propriedade
         * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
         *
         * \@default false
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideClose = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDisclaimerBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @description
         *
         * Tipo do thf-disclaimer. Pode ser 'default' ou 'danger'.
         *
         * @default default
         * @optional
         */
        set: /**
         * \@description
         *
         * Tipo do thf-disclaimer. Pode ser 'default' ou 'danger'.
         *
         * \@default default
         * \@optional
         * @param {?} type
         * @return {?}
         */
        function (type) {
            this._type = THF_DISCLAIMER_TYPES.includes(type) ? type : THF_DISCLAIMER_DEFAULT_TYPE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfDisclaimerBaseComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    };
    /**
     * @return {?}
     */
    ThfDisclaimerBaseComponent.prototype.getLabel = /**
     * @return {?}
     */
    function () {
        return this.label ? this.label : this.value;
    };
    ThfDisclaimerBaseComponent.propDecorators = {
        label: [{ type: core.Input, args: ['t-label',] }],
        value: [{ type: core.Input, args: ['t-value',] }],
        property: [{ type: core.Input, args: ['t-property',] }],
        hideClose: [{ type: core.Input, args: ['t-hide-close',] }],
        closeAction: [{ type: core.Output, args: ['t-close-action',] }],
        type: [{ type: core.Input, args: ['t-type',] }]
    };
    return ThfDisclaimerBaseComponent;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfDisclaimerBaseComponent
 *
 * \@examplePrivate
 *
 * <example-private name="thf-disclaimer" title="Totvs Disclaimer">
 *   <file name="sample-thf-disclaimer.component.html"> </file>
 *   <file name="sample-thf-disclaimer.component.ts"> </file>
 * </example-private>
 */
var ThfDisclaimerComponent = /** @class */ (function (_super) {
    __extends$1(ThfDisclaimerComponent, _super);
    function ThfDisclaimerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDisclaimerComponent.prototype.onKeyPress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isKeyCodeEnter(event)) {
            this.close();
        }
    };
    ThfDisclaimerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-disclaimer', template: "<div *ngIf=\"showDisclaimer === true\" class=\"thf-disclaimer\"> <span class=\"thf-disclaimer-label\" [class.thf-disclaimer-label-danger]=\"type === 'danger'\"> {{getLabel()}} </span> <span *ngIf=\"hideClose === false\" class=\"thf-disclaimer-remove thf-icon thf-icon-close thf-clickable\" tabindex=\"0\" [class.thf-disclaimer-remove-danger]=\"type === 'danger'\" (click)=\"close()\" (keydown)=\"onKeyPress($event)\"> </span> </div> "
                },] },
    ];
    return ThfDisclaimerComponent;
}(ThfDisclaimerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-disclaimer.
 */
var ThfDisclaimerModule = /** @class */ (function () {
    function ThfDisclaimerModule() {
    }
    ThfDisclaimerModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfDisclaimerComponent],
                    exports: [ThfDisclaimerComponent]
                },] },
    ];
    return ThfDisclaimerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Este é um componente interno utilizado pelo thf-disclaimer-group, se comporta como um botão e recebe uma ação para remover todos os
 * thf-disclaimers do grupo.
 */
var ThfDisclaimerRemoveComponent = /** @class */ (function () {
    function ThfDisclaimerRemoveComponent() {
        /**
         * Ação para remover todos.
         */
        this.removeAllAction = new core.EventEmitter();
    }
    // Emite a ação de remover todos.
    // Emite a ação de remover todos.
    /**
     * @return {?}
     */
    ThfDisclaimerRemoveComponent.prototype.removeAction = 
    // Emite a ação de remover todos.
    /**
     * @return {?}
     */
    function () {
        this.removeAllAction.emit();
    };
    ThfDisclaimerRemoveComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-disclaimer-remove', template: "<thf-disclaimer class=\"thf-clickable\" tabindex=\"0\" t-hide-close=\"true\" t-type=\"danger\" [t-label]=\"label\" (click)=\"removeAction()\"> </thf-disclaimer> "
                },] },
    ];
    ThfDisclaimerRemoveComponent.propDecorators = {
        label: [{ type: core.Input, args: ['t-label',] }],
        removeAllAction: [{ type: core.Output, args: ['t-remove-all-action',] }]
    };
    return ThfDisclaimerRemoveComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-disclaimer-group.
 */
var ThfDisclaimerGroupModule = /** @class */ (function () {
    function ThfDisclaimerGroupModule() {
    }
    ThfDisclaimerGroupModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfDisclaimerModule
                    ],
                    declarations: [ThfDisclaimerGroupComponent, ThfDisclaimerRemoveComponent],
                    exports: [ThfDisclaimerGroupComponent]
                },] },
    ];
    return ThfDisclaimerGroupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfDisclaimerGroupComponent = ThfDisclaimerGroupComponent;
exports.ThfDisclaimerGroupModule = ThfDisclaimerGroupModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
