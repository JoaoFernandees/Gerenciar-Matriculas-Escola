/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
/** @type {?} */
var THF_DISCLAIMER_TYPES = ['default', 'danger'];
/** @type {?} */
var THF_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente thf-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no thf-multi-select.
 *
 */
var ThfDisclaimerBaseComponent = /** @class */ (function () {
    function ThfDisclaimerBaseComponent() {
        this._type = 'default';
        this._hideClose = false;
        this.showDisclaimer = true;
        /**
         * Evento disparado ao fechar o disclaimer.
         * Para este evento será passado como parâmetro um objeto com value, label e property.
         */
        this.closeAction = new EventEmitter();
    }
    Object.defineProperty(ThfDisclaimerBaseComponent.prototype, "hideClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideClose;
        },
        /**
         * @description
         *
         * Esta propriedade esconde o botão para fechamento do thf-disclaimer, ao utilizar esta propriedade
         * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
         *
         * @default false
         */
        set: /**
         * \@description
         *
         * Esta propriedade esconde o botão para fechamento do thf-disclaimer, ao utilizar esta propriedade
         * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
         *
         * \@default false
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideClose = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDisclaimerBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @description
         *
         * Tipo do thf-disclaimer. Pode ser 'default' ou 'danger'.
         *
         * @default default
         * @optional
         */
        set: /**
         * \@description
         *
         * Tipo do thf-disclaimer. Pode ser 'default' ou 'danger'.
         *
         * \@default default
         * \@optional
         * @param {?} type
         * @return {?}
         */
        function (type) {
            this._type = THF_DISCLAIMER_TYPES.includes(type) ? type : THF_DISCLAIMER_DEFAULT_TYPE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfDisclaimerBaseComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    };
    /**
     * @return {?}
     */
    ThfDisclaimerBaseComponent.prototype.getLabel = /**
     * @return {?}
     */
    function () {
        return this.label ? this.label : this.value;
    };
    ThfDisclaimerBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        value: [{ type: Input, args: ['t-value',] }],
        property: [{ type: Input, args: ['t-property',] }],
        hideClose: [{ type: Input, args: ['t-hide-close',] }],
        closeAction: [{ type: Output, args: ['t-close-action',] }],
        type: [{ type: Input, args: ['t-type',] }]
    };
    return ThfDisclaimerBaseComponent;
}());
export { ThfDisclaimerBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerBaseComponent.prototype._type;
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerBaseComponent.prototype._hideClose;
    /** @type {?} */
    ThfDisclaimerBaseComponent.prototype.showDisclaimer;
    /**
     * Label que aparecerá dentro do thf-disclaimer.
     * Quando não for definido um label será apresentada a propriedade t-value.
     * @type {?}
     */
    ThfDisclaimerBaseComponent.prototype.label;
    /**
     * Valor do thf-disclaimer.
     * @type {?}
     */
    ThfDisclaimerBaseComponent.prototype.value;
    /**
     * Nome da propriedade vinculada à este thf-disclaimer.
     * @type {?}
     */
    ThfDisclaimerBaseComponent.prototype.property;
    /**
     * Evento disparado ao fechar o disclaimer.
     * Para este evento será passado como parâmetro um objeto com value, label e property.
     * @type {?}
     */
    ThfDisclaimerBaseComponent.prototype.closeAction;
}
