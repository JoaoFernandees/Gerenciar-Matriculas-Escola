(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['thf-divider'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso é indicado para definição
 * e organização de informações em uma tela e sua característica é semelhante à tag `<hr>`.
 */
var ThfDividerBaseComponent = /** @class */ (function () {
    function ThfDividerBaseComponent() {
    }
    ThfDividerBaseComponent.propDecorators = {
        label: [{ type: core.Input, args: ['t-label',] }]
    };
    return ThfDividerBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfDividerBaseComponent
 *
 * \@example
 *
 * <example name="thf-divider-basic" title="Totvs Divider Basic" >
 *  <file name="sample-thf-divider-basic/sample-thf-divider-basic.component.html"> </file>
 *  <file name="sample-thf-divider-basic/sample-thf-divider-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-divider-labs" title="Totvs Divider Labs" >
 *  <file name="sample-thf-divider-labs/sample-thf-divider-labs.component.html"> </file>
 *  <file name="sample-thf-divider-labs/sample-thf-divider-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-divider-user-detail" title="Totvs Divider - User Detail" >
 *  <file name="sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.html"> </file>
 *  <file name="sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.ts"> </file>
 * </example>
 */
var ThfDividerComponent = /** @class */ (function (_super) {
    __extends(ThfDividerComponent, _super);
    function ThfDividerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfDividerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-divider', template: "<div class=\"thf-divider\"> <div *ngIf=\"label\" class=\"thf-divider-label\">{{ label }}</div> </div> ",
                },] },
    ];
    return ThfDividerComponent;
}(ThfDividerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-divider.
 */
var ThfDividerModule = /** @class */ (function () {
    function ThfDividerModule() {
    }
    ThfDividerModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfDividerComponent
                    ],
                    exports: [
                        ThfDividerComponent
                    ]
                },] },
    ];
    return ThfDividerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfDividerComponent = ThfDividerComponent;
exports.ThfDividerModule = ThfDividerModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
