/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
/**
 * \@description
 *
 * O componente `thf-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
 *
 * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
 * no módulo principal para o correto funcionamento deste componente:
 *
 * ```
 * import { RouterModule } from '\@angular/router';
 *
 * \@NgModule({
 *   imports: [
 *     ...
 *     RouterModule.forRoot([]),
 *     ThfModule
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   exports: [],
 *   providers: [],
 *   bootstrap: [
 *     AppComponent
 *   ]
 * })
 * export class AppModule { }
 * ```
 * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
 * [/Configurando as rotas do thf-menu](/guides/getting-started).
 *
 * \@example
 *
 * <example name="thf-dropdown-basic" title="Totvs Dropdown Basic" >
 *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.html"> </file>
 *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.ts"> </file>
 *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-dropdown-labs" title="Totvs Dropdown Labs" >
 *  <file name="sample-thf-dropdown-labs/sample-thf-dropdown-labs.component.html"> </file>
 *  <file name="sample-thf-dropdown-labs/sample-thf-dropdown-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dropdown-social-network" title="Totvs Dropdown - Social Network" >
 *  <file name="sample-thf-dropdown-social-network/sample-thf-dropdown-social-network.component.html"> </file>
 *  <file name="sample-thf-dropdown-social-network/sample-thf-dropdown-social-network.component.ts"> </file>
 * </example>
 */
var ThfDropdownComponent = /** @class */ (function () {
    function ThfDropdownComponent(_router, renderer, _view) {
        this._router = _router;
        this.renderer = renderer;
        this.open = false;
        this.icon = 'thf-icon-arrow-down';
        this._parentRef = _view['_view']['component'];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    ThfDropdownComponent.prototype.onClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.url) {
            /** @type {?} */
            var url = item.url;
            /** @type {?} */
            var regexUrl = /(http(s?))\:\/\//gi;
            if (regexUrl.test(url)) {
                window.open(url, '_blank');
            }
            else {
                this._router.navigate([url]);
            }
        }
        else if (item.action) {
            this._callAction(item.action);
        }
    };
    /**
     * @return {?}
     */
    ThfDropdownComponent.prototype.toggleDropdown = /**
     * @return {?}
     */
    function () {
        if (this.dropdownRef && !this.open) {
            this.showDropdown();
        }
        else {
            this.hideDropdown();
        }
    };
    /**
     * @private
     * @param {?} _function
     * @return {?}
     */
    ThfDropdownComponent.prototype._callAction = /**
     * @private
     * @param {?} _function
     * @return {?}
     */
    function (_function) {
        this._callActionOfContext(_function, this._parentRef);
    };
    /**
     * @private
     * @param {?} _function
     * @param {?} _context
     * @return {?}
     */
    ThfDropdownComponent.prototype._callActionOfContext = /**
     * @private
     * @param {?} _function
     * @param {?} _context
     * @return {?}
     */
    function (_function, _context) {
        if (this._isTypeof(_function, 'function')) {
            _function.call(_context);
        }
        else {
            _context[_function]();
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDropdownComponent.prototype.checkClickArea = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.dropdownRef && this.dropdownRef.nativeElement.contains(event.target);
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.destroyListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.clickoutListener();
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.hideDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.icon = 'thf-icon-arrow-down';
        this.destroyListener();
        this.showActionsList();
        this.open = false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.initializeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnDropdown(event);
        });
    };
    /**
     * @private
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfDropdownComponent.prototype._isTypeof = /**
     * @private
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    function (object, type) {
        return typeof object === type;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.showActionsList = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.actions && this.actions.length) {
            this.dropdownRef.nativeElement.classList.toggle('t-show');
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.showDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.icon = 'thf-icon-arrow-up';
        this.initializeListener();
        this.showActionsList();
        this.open = true;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDropdownComponent.prototype.wasClickedOnDropdown = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var clickedOnDropdown = this.checkClickArea(event);
        if (!clickedOnDropdown) {
            this.hideDropdown();
        }
    };
    ThfDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-dropdown', template: "<div #dropdownRef class=\"dropdown\" (click)=\"toggleDropdown()\"> <div class=\"button-dropdown\" [ngClass]=\"{'disabled' : disabled}\"> {{ label }} <div class=\"hidden-xs icon-dropdown thf-icon {{icon}}\"></div> </div> <ul class=\"dropdown-content\"> <li *ngFor=\"let action of actions\"> <a (click)=\"onClick(action)\" [ngClass]=\"{'disabled' : action.disabled}\">{{ action?.label }}</a> </li> </ul> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfDropdownComponent.ctorParameters = function () { return [
        { type: Router },
        { type: Renderer2 },
        { type: ViewContainerRef }
    ]; };
    ThfDropdownComponent.propDecorators = {
        actions: [{ type: Input, args: ['t-actions',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        label: [{ type: Input, args: ['t-label',] }],
        dropdownRef: [{ type: ViewChild, args: ['dropdownRef', { read: ElementRef },] }]
    };
    return ThfDropdownComponent;
}());
export { ThfDropdownComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDropdownComponent.prototype.open;
    /**
     * @type {?}
     * @private
     */
    ThfDropdownComponent.prototype._parentRef;
    /** @type {?} */
    ThfDropdownComponent.prototype.icon;
    /**
     * @type {?}
     * @protected
     */
    ThfDropdownComponent.prototype.clickoutListener;
    /**
     * Definido um *array* de objetos que implementam a interface `ThfDropdownAction`.
     * @type {?}
     */
    ThfDropdownComponent.prototype.actions;
    /**
     * Desabilita o `dropdown` na página.
     * @type {?}
     */
    ThfDropdownComponent.prototype.disabled;
    /**
     * Adiciona um rótulo ao `dropdown`.
     * @type {?}
     */
    ThfDropdownComponent.prototype.label;
    /** @type {?} */
    ThfDropdownComponent.prototype.dropdownRef;
    /**
     * @type {?}
     * @private
     */
    ThfDropdownComponent.prototype._router;
    /**
     * @type {?}
     * @private
     */
    ThfDropdownComponent.prototype.renderer;
}
