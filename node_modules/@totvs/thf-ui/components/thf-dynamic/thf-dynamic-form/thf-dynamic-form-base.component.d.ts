import { EventEmitter } from '@angular/core';
import { NgForm } from '@angular/forms';
import { ThfDynamicFormField } from './thf-dynamic-form-field.interface';
/**
 *
 * @description
 *
 * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
 *
 * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
 */
export declare class ThfDynamicFormBaseComponent {
    private _groupForm?;
    /**
     * @description
     *
     * Coleção de objetos que implementam a interface `ThfDynamicFormField`, para definição dos campos que serão criados
     * dinamicamente.
     *
     * > Ex: `[ { property: 'name' } ]`
     *
     * Regras de tipagem e criação dos componentes:
     *
     * - Caso o *type* informado seja *boolean* o componente criado será o `thf-switch`.
     * - Caso o *type* informado seja *currency* e não seja informado um *mask* ou *pattern* o componente criado será o `thf-decimal`,
     * caso seja informado um *mask* ou *pattern* o componente criado será o `thf-input`.
     * - Caso o *type* informado seja *number* e não seja informado um *mask* ou *pattern* o componente criado será o `thf-decimal`, caso seja
     * informado um *mask* ou *pattern* o componente criado será o `thf-input`.
     * - Caso a lista possua a propriedade `options` e a mesma possua até 3 itens o componente criado será o `thf-radio-group`, caso a
     * mesma possua mais de 3 items será criado o componente `thf-select`.
     * - Caso o *type* informado seja *date* ou *datetime* o componente criado será o `thf-datepicker`.
     * - Caso seja informado a propriedade `optionService` o componente criado será o `thf-combo`.
     * - Caso o *type* informado seja *time* o componente criado será um `thf-input` podendo receber um *mask* para formatar
     * o valor exibido, caso não seja informado um *mask* o componente será criado com a máscara '99:99' por padrão.
     * - Caso o *type* informado seja *string* o componente criado será o `thf-input`.
     *
     * @default `[]`
     */
    fields: Array<ThfDynamicFormField>;
    /**
     * Objeto que será utilizado como valor para exibir as informações, será recuperado e preenchido através do atributo *property*
     * dos objetos contidos na propridade `t-fields`.
     *
     * Pode iniciar com valor ou apenas com um objeto vazio que será preenchido conforme descrito acima.
     *
     * > Ex: `{ name: 'thf' }`
     */
    value: any;
    /**
     * @optional
     *
     * @description
     *
     * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
     * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
     *
     * Portanto existem duas maneiras de recuperar o formulário,
     * através de *template reference* e através do *output*, veja os exemplos abaixo:
     *
     * > *template reference*
     *
     * ```html
     *  <thf-dynamic-form #dynamicForm>
     *  </thf-dynamic-form>
     *
     *  <thf-button t-label="Adicionar" [t-disabled]="dynamicForm?.form.invalid">
     *  </thf-button>
     *
     * ```
     *
     * > *Output*
     *
     * ```html
     *  ...
     *  <thf-dynamic-form (t-form)="getForm($event)">
     *  </thf-dynamic-form>
     *
     *  <thf-button t-label="Adicionar" [t-disabled]="dynamicForm?.invalid">
     *  </thf-button>
     *  ...
     *
     * ```
     *
     * ```ts
     *  ...
     *
     *  export class AppComponent {
     *
     *    dynamicForm: NgForm;
     *
     *    getForm(form: NgForm) {
     *      this.dynamicForm = form;
     *    }
     *
     *  }
     * ```
     *
     * > Caso a propriedade `t-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
     * o formulário pai.
     */
    formOutput: EventEmitter<NgForm>;
    /**
     * @optional
     *
     * @description
     * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
     * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
     *
     * ```html
     * <form #parentForm="ngForm">
     *
     *   <thf-dynamic-form t-group-form [t-fields]="fields"></thf-dynamic-form>
     *
     *  <thf-button t-label="Adicionar" [t-disabled]="parentForm.invalid"></thf-button>
     * </form>
     * ```
     */
    groupForm: boolean;
}
