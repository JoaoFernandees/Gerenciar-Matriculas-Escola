var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../../thf-dynamic.util';
import { ThfDynamicFieldType } from '../../thf-dynamic-field-type.enum';
var ThfDynamicFormFieldsBaseComponent = /** @class */ (function () {
    function ThfDynamicFormFieldsBaseComponent(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this._value = {};
        this.visibleFields = [];
    }
    Object.defineProperty(ThfDynamicFormFieldsBaseComponent.prototype, "fields", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fields;
        },
        // array de objetos que implementam a interface ThfDynamicFormField, que serão exibidos no componente.
        set: 
        // array de objetos que implementam a interface ThfDynamicFormField, que serão exibidos no componente.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fields = Array.isArray(value) ? value.slice() : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDynamicFormFieldsBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        // valor que será utilizado para iniciar valor no componente.
        set: 
        // valor que será utilizado para iniciar valor no componente.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value && isTypeof(value, 'object') ? value : {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} compareTo
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.compareTo = /**
     * @param {?} value
     * @param {?} compareTo
     * @return {?}
     */
    function (value, compareTo) {
        return value === compareTo;
    };
    // retorna um array com os objetos configurados e visiveis.
    // retorna um array com os objetos configurados e visiveis.
    /**
     * @protected
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.getVisibleFields = 
    // retorna um array com os objetos configurados e visiveis.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var visibleFields = [];
        this.fields.forEach(function (field) {
            if (_this.existsProperty(visibleFields, field.property)) {
                _this.printError("\"thf-dynamic-form\" property \"" + field.property + "\" est\u00E1 duplicado. Interface: ThfDynamicFormField.");
                return;
            }
            if (!field['property']) {
                _this.printError('"thf-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(_this.createField(field));
            }
        });
        return visibleFields;
    };
    // converte um array em string para um array de objetos que contem label e value.
    // converte um array em string para um array de objetos que contem label e value.
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.convertOptions = 
    // converte um array em string para um array de objetos que contem label e value.
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var everyOptionString = options.every(function (option) { return typeof option === 'string'; });
        if (everyOptionString) {
            return options.map(function (value) { return ({ label: value, value: value }); });
        }
        return options;
    };
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.createField = 
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var control = this.getComponentControl(field);
        /** @type {?} */
        var componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return __assign({ label: this.titleCasePipe.transform(field.property) }, field, { componentClass: componentClass,
            control: control });
    };
    /**
     * @private
     * @param {?} fields
     * @param {?} property
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.existsProperty = /**
     * @private
     * @param {?} fields
     * @param {?} property
     * @return {?}
     */
    function (fields, property) {
        return fields.some(function (field) {
            return field.property === property;
        });
    };
    // recupera o componente de acordo com algumas regras do field.
    // recupera o componente de acordo com algumas regras do field.
    /**
     * @private
     * @param {?=} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.getComponentControl = 
    // recupera o componente de acordo com algumas regras do field.
    /**
     * @private
     * @param {?=} field
     * @return {?}
     */
    function (field) {
        if (field === void 0) { field = (/** @type {?} */ ({})); }
        /** @type {?} */
        var type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            field.options = this.convertOptions(field.options);
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            field.options = this.convertOptions(field.options);
            return 'radioGroup';
        }
        else if (this.compareTo(type, ThfDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, ThfDynamicFieldType.Date) || this.compareTo(type, ThfDynamicFieldType.DateTime)) {
            return 'datepicker';
        }
        else if (this.compareTo(type, ThfDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        return 'input';
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isCombo = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var optionsService = field.optionsService;
        return !!optionsService && isTypeof(optionsService, 'string');
    };
    /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isCurrencyType = /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, ThfDynamicFieldType.Currency) && (!mask && !pattern);
    };
    /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isNumberType = /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, ThfDynamicFieldType.Number) && (!mask && !pattern);
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isRadioGroup = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var options = field.options;
        return !!options && options.length <= 3;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isSelect = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var options = field.options;
        return !!options && options.length > 3;
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.printError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        console.error(error);
    };
    ThfDynamicFormFieldsBaseComponent.propDecorators = {
        fields: [{ type: Input, args: ['t-fields',] }],
        value: [{ type: Input, args: ['t-value',] }]
    };
    return ThfDynamicFormFieldsBaseComponent;
}());
export { ThfDynamicFormFieldsBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDynamicFormFieldsBaseComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicFormFieldsBaseComponent.prototype._value;
    /** @type {?} */
    ThfDynamicFormFieldsBaseComponent.prototype.visibleFields;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicFormFieldsBaseComponent.prototype.titleCasePipe;
}
