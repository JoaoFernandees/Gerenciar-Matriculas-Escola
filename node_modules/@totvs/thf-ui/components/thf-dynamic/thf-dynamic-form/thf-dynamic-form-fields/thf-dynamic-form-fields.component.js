var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { ThfDynamicFormFieldsBaseComponent } from './thf-dynamic-form-fields-base.component';
import { TitleCasePipe } from '@angular/common';
import { ControlContainer, NgForm } from '@angular/forms';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de criação dos campos dinâmicos.
 */
var ThfDynamicFormFieldsComponent = /** @class */ (function (_super) {
    __extends(ThfDynamicFormFieldsComponent, _super);
    function ThfDynamicFormFieldsComponent(titleCasePipe) {
        return _super.call(this, titleCasePipe) || this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfDynamicFormFieldsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.fields) {
            this.visibleFields = this.getVisibleFields();
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfDynamicFormFieldsComponent.prototype.trackBy = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    ThfDynamicFormFieldsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-dynamic-form-fields', template: "<div class=\"thf-row\" *ngIf=\"visibleFields && visibleFields.length > 0\"> <ng-container *ngFor=\"let field of visibleFields; trackBy: trackBy\"> <thf-divider *ngIf=\"field?.divider?.trim()\" class=\"thf-sm-12\" [t-label]=\"field.divider\"> </thf-divider> <thf-datepicker *ngIf=\"compareTo(field.control, 'datepicker')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-clean [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-end]=\"field.maxValue\" [t-start]=\"field.minValue\" [t-required]=\"field.required\"> </thf-datepicker> <thf-input *ngIf=\"compareTo(field.control, 'input')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-clean [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-mask]=\"field.mask\" [t-maxlength]=\"field.maxLength\" [t-minlength]=\"field.minLength\" [t-pattern]=\"field.pattern\" [t-required]=\"field.required\"> </thf-input> <thf-number *ngIf=\"compareTo(field.control, 'number')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-clean [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-min]=\"field.minValue\" [t-max]=\"field.maxValue\" [t-maxlength]=\"field.maxLength\" [t-minlength]=\"field.minLength\" [t-required]=\"field.required\"> </thf-number> <thf-decimal *ngIf=\"compareTo(field.control, 'decimal')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-clean [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-required]=\"field.required\"> </thf-decimal> <thf-select *ngIf=\"compareTo(field.control, 'select')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-options]=\"field.options\" [t-required]=\"field.required\"> </thf-select> <thf-radio-group *ngIf=\"compareTo(field.control, 'radioGroup')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-columns=\"3\" [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-options]=\"field.options\" [t-required]=\"field.required\"> </thf-radio-group> <thf-switch *ngIf=\"compareTo(field.control, 'switch')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-label-off]=\"field.booleanFalse\" [t-label-on]=\"field.booleanTrue\" [t-required]=\"field.required\"> </thf-switch> <thf-combo *ngIf=\"compareTo(field.control, 'combo')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" [t-disabled]=\"field.disabled\" [t-filter-service]=\"field.optionsService\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-required]=\"field.required\"> </thf-combo> </ng-container> </div> ",
                    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
                },] },
    ];
    /** @nocollapse */
    ThfDynamicFormFieldsComponent.ctorParameters = function () { return [
        { type: TitleCasePipe }
    ]; };
    return ThfDynamicFormFieldsComponent;
}(ThfDynamicFormFieldsBaseComponent));
export { ThfDynamicFormFieldsComponent };
