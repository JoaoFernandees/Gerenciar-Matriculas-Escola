var __extends=this&&this.__extends||function(){var e=function(l,t){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,l){e.__proto__=l}||function(e,l){for(var t in l)l.hasOwnProperty(t)&&(e[t]=l[t])})(l,t)};return function(l,t){function i(){this.constructor=l}e(l,t),l.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}}();import{Component}from"@angular/core";import{ThfDynamicFormFieldsBaseComponent}from"./thf-dynamic-form-fields-base.component";import{TitleCasePipe}from"@angular/common";import{ControlContainer,NgForm}from"@angular/forms";var ThfDynamicFormFieldsComponent=function(e){function l(l){return e.call(this,l)||this}return __extends(l,e),l.prototype.ngOnChanges=function(e){e.fields&&(this.visibleFields=this.getVisibleFields())},l.prototype.trackBy=function(e){return e},l.decorators=[{type:Component,args:[{selector:"thf-dynamic-form-fields",template:'<div class="thf-row" *ngIf="visibleFields && visibleFields.length > 0"> <ng-container *ngFor="let field of visibleFields; trackBy: trackBy"> <thf-divider *ngIf="field?.divider?.trim()" class="thf-sm-12" [t-label]="field.divider"> </thf-divider> <thf-datepicker *ngIf="compareTo(field.control, \'datepicker\')" [name]="field.property" [(ngModel)]="value[field.property]" [ngClass]="field.componentClass" t-clean [t-disabled]="field.disabled" [t-help]="field.help" [t-label]="field.label" [t-end]="field.maxValue" [t-start]="field.minValue" [t-required]="field.required"> </thf-datepicker> <thf-input *ngIf="compareTo(field.control, \'input\')" [name]="field.property" [(ngModel)]="value[field.property]" [ngClass]="field.componentClass" t-clean [t-disabled]="field.disabled" [t-help]="field.help" [t-label]="field.label" [t-mask]="field.mask" [t-maxlength]="field.maxLength" [t-minlength]="field.minLength" [t-pattern]="field.pattern" [t-required]="field.required"> </thf-input> <thf-number *ngIf="compareTo(field.control, \'number\')" [name]="field.property" [(ngModel)]="value[field.property]" [ngClass]="field.componentClass" t-clean [t-disabled]="field.disabled" [t-help]="field.help" [t-label]="field.label" [t-min]="field.minValue" [t-max]="field.maxValue" [t-maxlength]="field.maxLength" [t-minlength]="field.minLength" [t-required]="field.required"> </thf-number> <thf-decimal *ngIf="compareTo(field.control, \'decimal\')" [name]="field.property" [(ngModel)]="value[field.property]" [ngClass]="field.componentClass" t-clean [t-disabled]="field.disabled" [t-help]="field.help" [t-label]="field.label" [t-required]="field.required"> </thf-decimal> <thf-select *ngIf="compareTo(field.control, \'select\')" [name]="field.property" [(ngModel)]="value[field.property]" [ngClass]="field.componentClass" [t-disabled]="field.disabled" [t-help]="field.help" [t-label]="field.label" [t-options]="field.options" [t-required]="field.required"> </thf-select> <thf-radio-group *ngIf="compareTo(field.control, \'radioGroup\')" [name]="field.property" [(ngModel)]="value[field.property]" [ngClass]="field.componentClass" t-columns="3" [t-disabled]="field.disabled" [t-help]="field.help" [t-label]="field.label" [t-options]="field.options" [t-required]="field.required"> </thf-radio-group> <thf-switch *ngIf="compareTo(field.control, \'switch\')" [name]="field.property" [(ngModel)]="value[field.property]" [ngClass]="field.componentClass" [t-disabled]="field.disabled" [t-help]="field.help" [t-label]="field.label" [t-label-off]="field.booleanFalse" [t-label-on]="field.booleanTrue" [t-required]="field.required"> </thf-switch> <thf-combo *ngIf="compareTo(field.control, \'combo\')" [name]="field.property" [(ngModel)]="value[field.property]" [ngClass]="field.componentClass" [t-disabled]="field.disabled" [t-filter-service]="field.optionsService" [t-help]="field.help" [t-label]="field.label" [t-required]="field.required"> </thf-combo> </ng-container> </div> ',viewProviders:[{provide:ControlContainer,useExisting:NgForm}]}]}],l.ctorParameters=function(){return[{type:TitleCasePipe}]},l}(ThfDynamicFormFieldsBaseComponent);export{ThfDynamicFormFieldsComponent};