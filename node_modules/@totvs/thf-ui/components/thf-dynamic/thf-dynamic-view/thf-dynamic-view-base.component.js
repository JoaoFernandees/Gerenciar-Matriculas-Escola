var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean, isTypeof } from '../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../thf-dynamic.util';
/**
 *
 * \@description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `thf-info` para exibição, é possível criar `thf-tag` passando a propriedade { tag: true }.
 *
 */
var ThfDynamicViewBaseComponent = /** @class */ (function () {
    function ThfDynamicViewBaseComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this._fields = [];
        this._showAllValue = false;
        this._value = {};
        this.visibleFields = [];
    }
    Object.defineProperty(ThfDynamicViewBaseComponent.prototype, "fields", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fields;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de objetos que implementam a interface `ThfDynamicView`.
         *
         * > Ex: `[ { property: 'age' } ]`
         *
         * Regras de tipagem e formatação dos valores exibidos:
         *
         * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
         * como formato padrão.
         * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
         * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
         * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
         * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
         *
         * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `t-value`.
         *
         * @default `[]`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista de objetos que implementam a interface `ThfDynamicView`.
         *
         * > Ex: `[ { property: 'age' } ]`
         *
         * Regras de tipagem e formatação dos valores exibidos:
         *
         * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
         * como formato padrão.
         * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
         * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
         * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
         * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
         *
         * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `t-value`.
         *
         * \@default `[]`
         * @param {?} fields
         * @return {?}
         */
        function (fields) {
            this._fields = Array.isArray(fields) ? fields.slice() : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDynamicViewBaseComponent.prototype, "showAllValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showAllValue;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `t-value`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `t-value`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showAllValue = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDynamicViewBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /**
         * @description
         *
         * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
         * dos objetos contidos na propridade `t-fields`.
         *
         * > Ex: `{ age: '35' }`
         */
        set: /**
         * \@description
         *
         * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
         * dos objetos contidos na propridade `t-fields`.
         *
         * > Ex: `{ age: '35' }`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value && isTypeof(value, 'object') ? value : {};
        },
        enumerable: true,
        configurable: true
    });
    // retorna os fields com os valores recuperados do objeto value.
    // retorna os fields com os valores recuperados do objeto value.
    /**
     * @protected
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.getConfiguredFields = 
    // retorna os fields com os valores recuperados do objeto value.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var newFields = [];
        this.fields.forEach(function (field) {
            if (isVisibleField(field)) {
                newFields.push(_this.createField(field));
            }
        });
        return newFields;
    };
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    /**
     * @protected
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.getMergedFields = 
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var mergedFields = this.getConfiguredFields().slice();
        this.getValueFields().forEach(function (valueField) {
            /** @type {?} */
            var fieldIndex = mergedFields.findIndex(function (field) { return field.property === valueField.property; });
            /** @type {?} */
            var property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(_this.createField({ property: property }));
            }
        });
        return mergedFields;
    };
    // retorna o objeto value como fields.
    // retorna o objeto value como fields.
    /**
     * @protected
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.getValueFields = 
    // retorna o objeto value como fields.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.value).map(function (property) {
            return _this.createField({ property: property });
        });
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.createField = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var property = field.property;
        /** @type {?} */
        var value = this.transformValue(field.type, this.value[property], field.format);
        /** @type {?} */
        var classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return __assign({ property: property,
            value: value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
    };
    /**
     * @private
     * @param {?} type
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.transformValue = /**
     * @private
     * @param {?} type
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (type, value, format) {
        /** @type {?} */
        var transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    };
    ThfDynamicViewBaseComponent.propDecorators = {
        fields: [{ type: Input, args: ['t-fields',] }],
        showAllValue: [{ type: Input, args: ['t-show-all-value',] }],
        value: [{ type: Input, args: ['t-value',] }]
    };
    return ThfDynamicViewBaseComponent;
}());
export { ThfDynamicViewBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype._showAllValue;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype._value;
    /** @type {?} */
    ThfDynamicViewBaseComponent.prototype.visibleFields;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.currencyPipe;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.datePipe;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.decimalPipe;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.timePipe;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.titleCasePipe;
}
