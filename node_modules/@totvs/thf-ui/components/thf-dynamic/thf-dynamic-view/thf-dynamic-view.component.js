var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';
import { ThfTimePipe } from '../../../pipes/thf-time/thf-time.pipe';
import { ThfDynamicViewBaseComponent } from './thf-dynamic-view-base.component';
/**
 * \@docsExtends ThfDynamicViewBaseComponent
 *
 * \@example
 *
 * <example name="thf-dynamic-view-basic" title="Totvs Dynamic View Basic">
 *  <file name="sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.html"> </file>
 *  <file name="sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dynamic-view-employee" title="Totvs Dynamic View - Employee">
 *  <file name="sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.html"> </file>
 *  <file name="sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.ts"> </file>
 * </example>
 */
var ThfDynamicViewComponent = /** @class */ (function (_super) {
    __extends(ThfDynamicViewComponent, _super);
    function ThfDynamicViewComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        return _super.call(this, currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) || this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfDynamicViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.fields || changes.value || changes.showAllValue) {
            this.visibleFields = this.getVisibleFields();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfDynamicViewComponent.prototype.getVisibleFields = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.showAllValue) {
            return this.getMergedFields();
        }
        return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
    };
    ThfDynamicViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-dynamic-view', template: "<div class=\"thf-row\" *ngIf=\"visibleFields.length\"> <ng-template ngFor let-field [ngForOf]=\"visibleFields\"> <thf-divider *ngIf=\"field?.divider?.trim()\" class=\"thf-sm-12\" [t-label]=\"field.divider\"> </thf-divider> <ng-container *ngTemplateOutlet=\"!field.tag ? thfInfo : thfTag; context: { $implicit: field }\"> </ng-container> </ng-template> </div> <ng-template #thfInfo let-field> <thf-info [ngClass]=\"field.cssClass\" [t-label]=\"field.label\" [t-value]=\"field.value\"> </thf-info> </ng-template> <ng-template #thfTag let-field> <thf-tag [ngClass]=\"field.cssClass\" [t-label]=\"field.label\" [t-value]=\"field.value\"> </thf-tag> </ng-template> "
                },] },
    ];
    /** @nocollapse */
    ThfDynamicViewComponent.ctorParameters = function () { return [
        { type: CurrencyPipe },
        { type: DatePipe },
        { type: DecimalPipe },
        { type: ThfTimePipe },
        { type: TitleCasePipe }
    ]; };
    return ThfDynamicViewComponent;
}(ThfDynamicViewBaseComponent));
export { ThfDynamicViewComponent };
