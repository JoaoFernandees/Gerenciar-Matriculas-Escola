var __extends=this&&this.__extends||function(){var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(t,i)};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();import{Component}from"@angular/core";import{CurrencyPipe,DatePipe,DecimalPipe,TitleCasePipe}from"@angular/common";import{ThfTimePipe}from"../../../pipes/thf-time/thf-time.pipe";import{ThfDynamicViewBaseComponent}from"./thf-dynamic-view-base.component";var ThfDynamicViewComponent=function(e){function t(t,i,n,l,o){return e.call(this,t,i,n,l,o)||this}return __extends(t,e),t.prototype.ngOnChanges=function(e){(e.fields||e.value||e.showAllValue)&&(this.visibleFields=this.getVisibleFields())},t.prototype.getVisibleFields=function(){return this.showAllValue?this.getMergedFields():this.value&&this.fields.length?this.getConfiguredFields():this.getValueFields()},t.decorators=[{type:Component,args:[{selector:"thf-dynamic-view",template:'<div class="thf-row" *ngIf="visibleFields.length"> <ng-template ngFor let-field [ngForOf]="visibleFields"> <thf-divider *ngIf="field?.divider?.trim()" class="thf-sm-12" [t-label]="field.divider"> </thf-divider> <ng-container *ngTemplateOutlet="!field.tag ? thfInfo : thfTag; context: { $implicit: field }"> </ng-container> </ng-template> </div> <ng-template #thfInfo let-field> <thf-info [ngClass]="field.cssClass" [t-label]="field.label" [t-value]="field.value"> </thf-info> </ng-template> <ng-template #thfTag let-field> <thf-tag [ngClass]="field.cssClass" [t-label]="field.label" [t-value]="field.value"> </thf-tag> </ng-template> '}]}],t.ctorParameters=function(){return[{type:CurrencyPipe},{type:DatePipe},{type:DecimalPipe},{type:ThfTimePipe},{type:TitleCasePipe}]},t}(ThfDynamicViewBaseComponent);export{ThfDynamicViewComponent};