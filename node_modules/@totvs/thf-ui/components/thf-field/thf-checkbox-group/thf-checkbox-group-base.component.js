/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, convertToInt } from './../../../utils/util';
import { requiredFailed } from '../validators';
/** @type {?} */
var thfCheckboxGroupColumnsDefaultLength = 6;
/** @type {?} */
var thfCheckboxGroupColumnsTotalLength = 12;
/**
 * \@description
 *
 * O componente `thf-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
 * utilizando a tecla de espaço ou o clique do mouse, várias opções.
 *
 * > Para seleção única, utilize o [**Totvs Radio Group**](/documentation/thf-radio-group).
 *
 * Por padrão, o thf-checkbox-group retorna um array com os valores dos itens selecionados para o model.
 *
 * ```
 * favorites = ['THF', 'Angular'];
 * ```
 *
 * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
 * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
 * deve setar a propriedade `t-indeterminate` como `true`.
 *
 * Nesse caso, o thf-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
 *
 * ```
 * favorites = {
 *  THF: true,
 *  Angular: true,
 *  VueJS: false,
 *  React: null // indeterminado
 * };
 * ```
 */
var ThfCheckboxGroupBaseComponent = /** @class */ (function () {
    function ThfCheckboxGroupBaseComponent() {
        this.checkedOptions = {};
        this.checkedOptionsList = [];
        this.mdColumns = thfCheckboxGroupColumnsDefaultLength;
        this._columns = thfCheckboxGroupColumnsDefaultLength;
        this._disabled = false;
        this._indeterminate = false;
        this._required = false;
        // Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do campo
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
         * - É possível exibir as opções entre `1` e `4` colunas.
         * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
         * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
         * o *grid system* será composto por `2` colunas.
         *
         * @default `2`
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
         * - É possível exibir as opções entre `1` e `4` colunas.
         * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
         * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
         * o *grid system* será composto por `2` colunas.
         *
         * \@default `2`
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var columns = convertToInt(value, thfCheckboxGroupColumnsDefaultLength);
            this._columns = this.getGridSystemColumns(columns, 4);
            this.mdColumns = this.getGridSystemColumns(columns, 2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita todos os itens do checkbox.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita todos os itens do checkbox.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "indeterminate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._indeterminate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
         * a propriedade `t-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
         *
         * Quando essa propriedade é setada como `true`, o *thf-checkbox-group* passa a devolver um objeto completo para o
         * `ngModel`, diferente do array que contém apenas os valores selecionados.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
         * a propriedade `t-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
         *
         * Quando essa propriedade é setada como `true`, o *thf-checkbox-group* passa a devolver um objeto completo para o
         * `ngModel`, diferente do array que contém apenas os valores selecionados.
         *
         * \@default `false`
         * @param {?} indeterminate
         * @return {?}
         */
        function (indeterminate) {
            this._indeterminate = convertToBoolean(indeterminate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * @optional
         *
         * @description
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption
         */
        set: /**
         * \@optional
         *
         * \@description
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = Array.isArray(value) ? value : [];
            this.removeDuplicatedOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.changeValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.checkIndeterminate();
        if (this.propagateChange) {
            this.propagateChange(value);
        }
        else {
            this.ngModelChange.emit(value);
        }
        this.change.emit(value);
    };
    /**
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.checkIndeterminate = /**
     * @return {?}
     */
    function () {
        return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.checkOption = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this._disabled && !value.disabled) {
            this.checkOptionModel(value);
            this.changeValue();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} optionsModel
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.writeValue = /**
     * @param {?} optionsModel
     * @return {?}
     */
    function (optionsModel) {
        if (optionsModel && this.checkedOptions !== optionsModel) {
            this.generateCheckOptions(optionsModel);
        }
        else {
            this.checkedOptionsList = [];
            this.checkedOptions = {};
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) || this.isInvalidIndeterminate()) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.checkColumnsRange = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    };
    /**
     * @private
     * @param {?} optionChecked
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.checkOptionModel = /**
     * @private
     * @param {?} optionChecked
     * @return {?}
     */
    function (optionChecked) {
        this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
        if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
            this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
        }
        else if (!this.indeterminate) {
            this.checkedOptionsList.push(optionChecked.value);
        }
    };
    /**
     * @private
     * @param {?} optionsModel
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.generateCheckOptions = /**
     * @private
     * @param {?} optionsModel
     * @return {?}
     */
    function (optionsModel) {
        var _this = this;
        this.checkedOptions = {};
        if (optionsModel instanceof Array) {
            this.checkedOptionsList = optionsModel;
            this.options.forEach(function (option) {
                _this.checkedOptions[option.value] = optionsModel.includes(option.value);
            });
        }
        else {
            this.options.forEach(function (option) {
                optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                _this.checkedOptions = optionsModel;
            });
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.getGridSystemColumns = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var gridSystemColumns = thfCheckboxGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : thfCheckboxGroupColumnsDefaultLength;
    };
    /**
     * @private
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.isInvalidIndeterminate = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.indeterminate && this.required && this.checkedOptions) {
            return ((/** @type {?} */ (Object))).values(this.checkedOptions).every(function (value) { return value === false; });
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.removeDuplicatedOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.options.forEach(function (option, index) {
            /** @type {?} */
            var duplicatedIndex = _this.options.findIndex(function (optionFind) { return optionFind.value === option.value; }) === index;
            if (!duplicatedIndex) {
                _this.options.splice(_this.options.indexOf(option), 1);
            }
        });
    };
    ThfCheckboxGroupBaseComponent.propDecorators = {
        name: [{ type: Input, args: ['name',] }],
        columns: [{ type: Input, args: ['t-columns',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        help: [{ type: Input, args: ['t-help',] }],
        indeterminate: [{ type: Input, args: ['t-indeterminate',] }],
        label: [{ type: Input, args: ['t-label',] }],
        options: [{ type: Input, args: ['t-options',] }],
        required: [{ type: Input, args: ['t-required',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }],
        change: [{ type: Output, args: ['t-change',] }]
    };
    return ThfCheckboxGroupBaseComponent;
}());
export { ThfCheckboxGroupBaseComponent };
if (false) {
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.checkedOptions;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.checkedOptionsList;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.mdColumns;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.propagateChange;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.validatorChange;
    /**
     * @type {?}
     * @private
     */
    ThfCheckboxGroupBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    ThfCheckboxGroupBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfCheckboxGroupBaseComponent.prototype._indeterminate;
    /**
     * @type {?}
     * @private
     */
    ThfCheckboxGroupBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    ThfCheckboxGroupBaseComponent.prototype._required;
    /**
     * Nome dos checkboxes
     * @type {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.name;
    /**
     * Texto de apoio do campo
     * @type {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.help;
    /**
     * Label do campo
     * @type {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.label;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.ngModelChange;
    /**
     * Evento disparado ao alterar valor do campo
     * @type {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.change;
}
