/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, EventEmitter, Input, Output } from '@angular/core';
/**
 * \@docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface ThfClean.
 * @abstract
 */
var ThfCleanBaseComponent = /** @class */ (function () {
    function ThfCleanBaseComponent() {
        /**
         * Valor que será atribuído ao campo quando for clicado no thf-clean.
         */
        this.defaultValue = '';
        /**
         * Evento disparado quando executada ação do thf-clean.
         * Este evento deve ser usado para avisar para o componente que está usando o thf-clean, que o botão foi disparado,
         * e provavelmente será preciso emitir o evento para atualizar o model.
         */
        this.changeEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    };
    /**
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.showIcon = /**
     * @return {?}
     */
    function () {
        return this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly();
    };
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o thf-clean deve ser usado.
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o thf-clean deve ser usado.
    /**
     * @private
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.hasCleanAttr = 
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o thf-clean deve ser usado.
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.parentComponent.clean;
    };
    // Este método verifica se o componente pai está desabilitado.
    // Este método verifica se o componente pai está desabilitado.
    /**
     * @private
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.isDisabled = 
    // Este método verifica se o componente pai está desabilitado.
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.parentComponent.disabled;
    };
    // Este método verifica se o componente pai está somente leitura.
    // Este método verifica se o componente pai está somente leitura.
    /**
     * @private
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.isReadonly = 
    // Este método verifica se o componente pai está somente leitura.
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.parentComponent.readonly;
    };
    ThfCleanBaseComponent.propDecorators = {
        inputRef: [{ type: Input, args: ['t-element-ref',] }],
        defaultValue: [{ type: Input, args: ['t-default-value',] }],
        changeEvent: [{ type: Output, args: ['t-change-event',] }]
    };
    return ThfCleanBaseComponent;
}());
export { ThfCleanBaseComponent };
if (false) {
    /**
     * Nesta propriedade deve-se informar o elementRef do campo de entrada que utilizará o thf-clean.
     * @type {?}
     */
    ThfCleanBaseComponent.prototype.inputRef;
    /**
     * Valor que será atribuído ao campo quando for clicado no thf-clean.
     * @type {?}
     */
    ThfCleanBaseComponent.prototype.defaultValue;
    /**
     * Evento disparado quando executada ação do thf-clean.
     * Este evento deve ser usado para avisar para o componente que está usando o thf-clean, que o botão foi disparado,
     * e provavelmente será preciso emitir o evento para atualizar o model.
     * @type {?}
     */
    ThfCleanBaseComponent.prototype.changeEvent;
    /**
     * @type {?}
     * @protected
     */
    ThfCleanBaseComponent.prototype.parentComponent;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.setInputValue = function (value) { };
    /**
     * @abstract
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.getInputValue = function () { };
}
