var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, isTypeof, removeDuplicatedOptions, validValue } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { ThfComboFilterMode } from './thf-combo-filter-mode.enum';
/** @type {?} */
var THF_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
/** @type {?} */
var THF_COMBO_FIELD_LABEL_DEFAULT = 'label';
/** @type {?} */
var THF_COMBO_FIELD_VALUE_DEFAULT = 'value';
/**
 * \@description
 *
 * O thf-combo, semelhante ao thf-select, exibe uma lista de valores e permite ao usuário fazer a seleção de um desses valores,
 * mas no caso do thf-combo, o usuário ainda consegue filtrar os valores disponibilizados para seleção.
 *
 * Também há a possibilidade de usar serviço no thf-combo, através da propriedade t-filter-service.
 *
 * O comportamento do thf-combo permite ao usuário:
 *  - selecionar um item através do mouse;
 *  - navegar pelos itens utilizando as setas do teclado confirmando a seleção com "Enter";
 *  - pesquisar os itens da lista de seleção e em seguida navegar com as setas ou com o mouse;
 *  - digitar a descrição completa.
 *
 * O thf-combo guarda o último valor caso o usuário desista de uma busca, deixando o campo ou teclando "ESC".
 * Caso seja digitado no campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada
 * ao deixar o campo ou pressionando "Enter".
 *
 * É necessário que os itens da lista de selecão contenham sempre valor (value) e descrição (label) para que os itens apareçam corretamente
 * no thf-combo, itens que não estejam implementando corretamenta a interface ThfComboOption, serão descartados.
 *
 * O thf-combo ainda permite definir o modo que será feito o filtro, através da propriedade t-filter-mode.
 * @abstract
 */
var ThfComboBaseComponent = /** @class */ (function () {
    function ThfComboBaseComponent() {
        this._changeOnEnter = false;
        this._debounceTime = 400;
        this._disabled = false;
        this._disabledInitFilter = false;
        this._fieldLabel = 'label';
        this._fieldValue = 'value';
        this._filterMinlength = 0;
        this._filterMode = ThfComboFilterMode.startsWith;
        this._options = [];
        this._required = false;
        this.cacheOptions = [];
        this.cacheStaticOptions = [];
        this.firstInWriteValue = true;
        this.isFirstFilter = true;
        this.isFiltering = false;
        this.visibleOptions = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * Indica que a lista definida na propriedade t-options será ordenada pela descrição.
         */
        this.sort = false;
        /**
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(ThfComboBaseComponent.prototype, "filterService", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterService;
        },
        /**
         * @optional
         *
         * @description
         * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
         * itens no componente.
         * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface ThfComboFilter.
         *
         * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
         * `t-field-label` e `t-field-value` para a construção da lista de itens.
         *
         * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
         * ```
         * url + ?filter=Peter
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
         * itens no componente.
         * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface ThfComboFilter.
         *
         * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
         * `t-field-label` e `t-field-value` para a construção da lista de itens.
         *
         * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
         * ```
         * url + ?filter=Peter
         * ```
         * @param {?} service
         * @return {?}
         */
        function (service) {
            this._filterService = service;
            this.configAfterSetFilterService(service);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "debounceTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._debounceTime;
        },
        /**
         * @optional
         *
         * @description
         * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
         * Será utilizada apenas quando houver serviço (`t-filter-service`).
         *
         * @default `400`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
         * Será utilizada apenas quando houver serviço (`t-filter-service`).
         *
         * \@default `400`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var parsedValue = parseInt((/** @type {?} */ (value)), 10);
            this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : THF_COMBO_DEBOUNCE_TIME_DEFAULT;
            this.unsubscribeKeyupObservable();
            this.initInputObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "disabledInitFilter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledInitFilter;
        },
        /**
         * @optional
         *
         * @description
         * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
         *
         * @default `false`
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
         *
         * \@default `false`
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabledInitFilter = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "fieldValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fieldValue;
        },
        /**
         * @optional
         *
         * @description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`t-options`), esta propriedade será responsável pelo valor de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * ThfComboOption.
         *
         * @default `value`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`t-options`), esta propriedade será responsável pelo valor de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * ThfComboOption.
         *
         * \@default `value`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fieldValue = value || THF_COMBO_FIELD_VALUE_DEFAULT;
            if (isTypeof(this.filterService, 'string') && this.service) {
                this.service.fieldValue = this._fieldValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "fieldLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fieldLabel;
        },
        /**
         * @optional
         *
         * @description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`t-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * ThfComboOption.
         *
         * @default `label`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`t-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * ThfComboOption.
         *
         * \@default `label`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fieldLabel = value || THF_COMBO_FIELD_LABEL_DEFAULT;
            if (isTypeof(this.filterService, 'string') && this.service) {
                this.service.fieldLabel = this._fieldLabel;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "filterMinlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMinlength;
        },
        /**
         * @optional
         *
         * @description
         * Valor mínimo de caracteres para realizar o filtro no serviço.
         *
         * @default `0`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Valor mínimo de caracteres para realizar o filtro no serviço.
         *
         * \@default `0`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var parseValue = (typeof value === 'string') ? parseInt(value, 10) : value;
            this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "changeOnEnter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._changeOnEnter;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o evento `t-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o evento `t-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
         *
         * \@default `false`
         * @param {?} changeOnEnter
         * @return {?}
         */
        function (changeOnEnter) {
            this._changeOnEnter = convertToBoolean(changeOnEnter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel(this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfComboOption.
         * Esta lista conterá os valores e as descrições que serão apresentados na tela.
         */
        set: /**
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfComboOption.
         * Esta lista conterá os valores e as descrições que serão apresentados na tela.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = Array.isArray(options) ? options : [];
            this.cacheStaticOptions = this.options;
            this.validAndSortOptions();
            removeDuplicatedOptions(this.options);
            this.updateComboList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "setSort", {
        set: /**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this.sort = sort === '' ? true : convertToBoolean(sort);
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "filterMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
         *
         * > Quando utilizar a propriedade `t-filter-service` esta propriedade será ignorada.
         *
         * @default `startsWith`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
         *
         * > Quando utilizar a propriedade `t-filter-service` esta propriedade será ignorada.
         *
         * \@default `startsWith`
         * @param {?} filterMode
         * @return {?}
         */
        function (filterMode) {
            this._filterMode = (filterMode in ThfComboFilterMode) ? filterMode : ThfComboFilterMode.startsWith;
            switch (this._filterMode.toString()) {
                case 'startsWith':
                    this._filterMode = ThfComboFilterMode.startsWith;
                    break;
                case 'contains':
                    this._filterMode = ThfComboFilterMode.contains;
                    break;
                case 'endsWith':
                    this._filterMode = ThfComboFilterMode.endsWith;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "filterParams", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterParams;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *ThfComboFilter*.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *ThfComboFilter*.
         * @param {?} filterParams
         * @return {?}
         */
        function (filterParams) {
            this._filterParams = (filterParams || filterParams === 0 || filterParams === false) ? filterParams : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateComboList();
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.onInitService = /**
     * @return {?}
     */
    function () {
        if (this.filterService) {
            this.setService(this.filterService);
            this.initInputObservable();
        }
    };
    /**
     * @param {?} service
     * @return {?}
     */
    ThfComboBaseComponent.prototype.setService = /**
     * @param {?} service
     * @return {?}
     */
    function (service) {
        if (service) {
            if (isTypeof(service, 'object')) {
                this.service = (/** @type {?} */ (service));
            }
            else {
                this.service = this.defaultService;
                this.service.configProperties((/** @type {?} */ (service)), this.fieldLabel, this.fieldValue);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.validAndSortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length > 0) {
            // Remove os objetos que não contém valor e atribui o valor ao label caso este esteja vazio
            for (var i = 0; i < this.options.length; i++) {
                if (!validValue(this.options[i]['value'])) {
                    this.options.splice(i, 1);
                }
                else if (!this.options[i]['label']) {
                    this.options[i]['label'] = this.options[i]['value'].toString();
                }
            }
        }
        this.sortOptions();
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.sortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length > 0 && this.sort) {
            this.options.sort(this.compareOptions);
        }
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ThfComboBaseComponent.prototype.compareOptions = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (a.label.toString().toLowerCase() < b.label.toString().toLowerCase()) {
            return -1;
        }
        if (a.label.toString().toLowerCase() > b.label.toString().toLowerCase()) {
            return 1;
        }
        return 0;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    ThfComboBaseComponent.prototype.compareMethod = /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    function (search, option, filterMode) {
        switch (filterMode) {
            case ThfComboFilterMode.startsWith:
                return this.startsWith(search, option);
            case ThfComboFilterMode.contains:
                return this.contains(search, option);
            case ThfComboFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfComboBaseComponent.prototype.startsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfComboBaseComponent.prototype.contains = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfComboBaseComponent.prototype.endsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    };
    /**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getOptionFromValue = /**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        var _this = this;
        return (options) ? options.find(function (option) { return _this.isEqual(option.value, value); }) : null;
    };
    /**
     * @param {?} label
     * @param {?} options
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getOptionFromLabel = /**
     * @param {?} label
     * @param {?} options
     * @return {?}
     */
    function (label, options) {
        if (options) {
            return options.find(function (option) {
                return option.label.toString().toLowerCase() === label.toString().toLowerCase();
            });
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} option
     * @param {?=} isUpdateModel
     * @param {?=} isWriteValue
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateSelectedValue = /**
     * @param {?} option
     * @param {?=} isUpdateModel
     * @param {?=} isWriteValue
     * @return {?}
     */
    function (option, isUpdateModel, isWriteValue) {
        if (isUpdateModel === void 0) { isUpdateModel = true; }
        if (isWriteValue === void 0) { isWriteValue = false; }
        /** @type {?} */
        var optionLabel = option && option.label || '';
        this.updateInternalVariables(option);
        // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
        if (this.changeOnEnter && isUpdateModel) {
            this.setInputValue(optionLabel);
        }
        else if (!this.changeOnEnter) {
            this.setInputValue(optionLabel);
        }
        if (isUpdateModel) {
            /** @type {?} */
            var optionValue = option && option.value || undefined;
            this.updateModel(optionValue, isWriteValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.callModelChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    ThfComboBaseComponent.prototype.isEqual = /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    ThfComboBaseComponent.prototype.searchForLabel = /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    function (search, options, filterMode) {
        var _this = this;
        if (search && options && options.length) {
            /** @type {?} */
            var newOptions_1 = [];
            options.forEach(function (option) {
                if (option.label && (_this.compareMethod(search, option, filterMode) || _this.service)) {
                    newOptions_1.push(option);
                }
            });
            this.selectedView = newOptions_1[0];
            this.updateComboList(newOptions_1);
        }
        else {
            this.updateComboList();
        }
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateComboList = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var copyOptions = options || this.options.slice();
        /** @type {?} */
        var newOptions = !options && this.selectedValue ? [__assign({}, this.selectedOption)] : copyOptions;
        if (newOptions) {
            this.visibleOptions = newOptions;
            if (!this.selectedView && this.visibleOptions.length) {
                this.selectedView = this.visibleOptions[0];
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} options
     * @param {?=} reverse
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getNextOption = /**
     * @param {?} value
     * @param {?} options
     * @param {?=} reverse
     * @return {?}
     */
    function (value, options, reverse) {
        if (reverse === void 0) { reverse = false; }
        /** @type {?} */
        var newOptions = [].concat(options);
        /** @type {?} */
        var optionFound = null;
        /** @type {?} */
        var found = false;
        if (reverse) {
            newOptions.reverse();
        }
        for (var i = 0; i < newOptions.length; i++) {
            /** @type {?} */
            var option = newOptions[i];
            if (!optionFound) {
                optionFound = option;
            }
            if (found) {
                return option;
            }
            if (this.isEqual(option.value, value)) {
                found = true;
            }
        }
        return optionFound;
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getIndexSelectedView = /**
     * @return {?}
     */
    function () {
        for (var i = 0; i < this.visibleOptions.length; i++) {
            if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                return i;
            }
        }
        return null;
    };
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    ThfComboBaseComponent.prototype.compareObjects = /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.verifyValidOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputValue = this.getInputValue();
        /** @type {?} */
        var optionFound = this.getOptionFromLabel(inputValue, this.options);
        if (optionFound && optionFound.value !== this.selectedValue) {
            this.updateSelectedValue(optionFound);
            this.previousSearchValue = optionFound.label;
            return;
        }
        else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {
            this.updateSelectedValueWithOldOption();
            this.previousSearchValue = this.selectedOption.label;
            return;
        }
        else if (inputValue && !optionFound) {
            /** @type {?} */
            var isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);
            this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
            this.previousSearchValue = '';
            return;
        }
    };
    // Recebe as alterações do model
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.writeValue = 
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (validValue(value) && !this.service && this.options && this.options.length) {
            /** @type {?} */
            var option = this.getOptionFromValue(value, this.options);
            this.updateSelectedValue(option);
            this.updateComboList();
            return;
        }
        // Se houver serviço busca pelo model.
        if (value && this.service) {
            return this.getObjectByValue(value);
        }
        if (!validValue(value)) {
            this.updateSelectedValue(null, true, true);
            this.updateComboList();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfComboBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfComboBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfComboBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfComboBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if ((requiredFailed(this.required, this.disabled, abstractControl.value))) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfComboBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    ThfComboBaseComponent.prototype.configAfterSetFilterService = /**
     * @private
     * @param {?} service
     * @return {?}
     */
    function (service) {
        if (service) {
            this.options = [];
            this.unsubscribeKeyupObservable();
            this.onInitService();
        }
        else {
            this.service = undefined;
            this.options = this.cacheStaticOptions;
        }
        this.visibleOptions = [];
        this.isFirstFilter = true;
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboBaseComponent.prototype.unsubscribeKeyupObservable = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.keyupSubscribe) {
            this.keyupSubscribe.unsubscribe();
        }
    };
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateInternalVariables = /**
     * @private
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (option) {
            this.selectedView = option;
            this.selectedOption = option;
        }
        else {
            this.selectedView = undefined;
            this.selectedOption = undefined;
        }
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} fromWriteValue
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateModel = /**
     * @private
     * @param {?} value
     * @param {?=} fromWriteValue
     * @return {?}
     */
    function (value, fromWriteValue) {
        if (fromWriteValue === void 0) { fromWriteValue = false; }
        if (value !== this.selectedValue) {
            if (!fromWriteValue) {
                this.callModelChange(value);
            }
            this.change.emit(value);
        }
        this.selectedValue = value;
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateSelectedValueWithOldOption = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oldOption = this.getOptionFromValue(this.selectedValue, this.options);
        if (oldOption && oldOption.label) {
            return this.updateSelectedValue(oldOption);
        }
    };
    ThfComboBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        help: [{ type: Input, args: ['t-help',] }],
        placeholder: [{ type: Input, args: ['t-placeholder',] }],
        name: [{ type: Input, args: ['name',] }],
        filterService: [{ type: Input, args: ['t-filter-service',] }],
        debounceTime: [{ type: Input, args: ['t-debounce-time',] }],
        disabledInitFilter: [{ type: Input, args: ['t-disabled-init-filter',] }],
        fieldValue: [{ type: Input, args: ['t-field-value',] }],
        fieldLabel: [{ type: Input, args: ['t-field-label',] }],
        filterMinlength: [{ type: Input, args: ['t-filter-minlength',] }],
        required: [{ type: Input, args: ['t-required',] }],
        changeOnEnter: [{ type: Input, args: ['t-change-on-enter',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        options: [{ type: Input, args: ['t-options',] }],
        setSort: [{ type: Input, args: ['t-sort',] }],
        filterMode: [{ type: Input, args: ['t-filter-mode',] }],
        filterParams: [{ type: Input, args: ['t-filter-params',] }],
        change: [{ type: Output, args: ['t-change',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
    };
    return ThfComboBaseComponent;
}());
export { ThfComboBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._changeOnEnter;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._debounceTime;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._disabledInitFilter;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._fieldLabel;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._fieldValue;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._filterMinlength;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._filterParams;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._filterService;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._required;
    /** @type {?} */
    ThfComboBaseComponent.prototype.cacheOptions;
    /** @type {?} */
    ThfComboBaseComponent.prototype.cacheStaticOptions;
    /** @type {?} */
    ThfComboBaseComponent.prototype.defaultService;
    /** @type {?} */
    ThfComboBaseComponent.prototype.firstInWriteValue;
    /** @type {?} */
    ThfComboBaseComponent.prototype.isFirstFilter;
    /** @type {?} */
    ThfComboBaseComponent.prototype.isFiltering;
    /** @type {?} */
    ThfComboBaseComponent.prototype.keyupSubscribe;
    /** @type {?} */
    ThfComboBaseComponent.prototype.onModelChange;
    /** @type {?} */
    ThfComboBaseComponent.prototype.onModelTouched;
    /** @type {?} */
    ThfComboBaseComponent.prototype.previousSearchValue;
    /** @type {?} */
    ThfComboBaseComponent.prototype.selectedOption;
    /** @type {?} */
    ThfComboBaseComponent.prototype.selectedValue;
    /** @type {?} */
    ThfComboBaseComponent.prototype.selectedView;
    /** @type {?} */
    ThfComboBaseComponent.prototype.service;
    /** @type {?} */
    ThfComboBaseComponent.prototype.visibleOptions;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype.validatorChange;
    /**
     * Label no componente.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.help;
    /**
     * Mensagem apresentada enquanto o campo estiver vazio.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.placeholder;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.name;
    /**
     * Indica que a lista definida na propriedade t-options será ordenada pela descrição.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.sort;
    /**
     * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.change;
    /** @type {?} */
    ThfComboBaseComponent.prototype.ngModelChange;
    /**
     * @type {?}
     * @protected
     */
    ThfComboBaseComponent.prototype.clickoutListener;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.setInputValue = function (value) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.applyFilter = function (value) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getObjectByValue = function (value) { };
    /**
     * @abstract
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getInputValue = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ThfComboBaseComponent.prototype.initInputObservable = function () { };
}
