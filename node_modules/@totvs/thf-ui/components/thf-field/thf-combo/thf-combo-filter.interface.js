/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfComboComponent
 *
 * \@description
 *
 * Interface para os serviços que serão utilizados no thf-combo.
 * @record
 */
export function ThfComboFilter() { }
if (false) {
    /**
     * Método responsável por retornar um Observable que contém uma coleção de objetos que seguem a interface ThfComboOption,
     * será informado por parametro o campo, de acordo com o fieldLabel, e o valor a ser pesquisado.
     *
     * @param {?} params {any} Objeto contendo a propriedade e o valor responsável por realizar o filtro.
     * @param {?=} filterParams {any} Valor informado através da propriedade `t-filter-params`.
     * @return {?}
     */
    ThfComboFilter.prototype.getFilteredData = function (params, filterParams) { };
    /**
     * Método responsável por retornar um Observable que contém apenas o objeto filtrado que seguem a interface ThfComboOption,
     * será informado por parametro valor a ser pesquisado.
     *
     * @param {?} value {string | number} Valor responsável por realizar a busca de um único objeto.
     * @param {?=} filterParams {any} Valor informado através da propriedade `t-filter-params`.
     * @return {?}
     */
    ThfComboFilter.prototype.getObjectByValue = function (value, filterParams) { };
}
