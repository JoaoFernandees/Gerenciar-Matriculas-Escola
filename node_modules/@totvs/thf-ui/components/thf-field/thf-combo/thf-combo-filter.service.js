/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente thf-combo.
 */
var ThfComboFilterService = /** @class */ (function () {
    function ThfComboFilterService(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
    }
    Object.defineProperty(ThfComboFilterService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    ThfComboFilterService.prototype.getFilteredData = /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    function (param, filterParams) {
        var _this = this;
        /** @type {?} */
        var value = param.value;
        /** @type {?} */
        var params = new HttpParams({
            fromString: "filter=" + value
        });
        return this.http.get("" + this.url, { responseType: 'json', params: params })
            .pipe(map(function (response) { return _this.parseToArrayComboOption(response.items); }));
    };
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    ThfComboFilterService.prototype.getObjectByValue = /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    function (value, filterParams) {
        var _this = this;
        return this.http.get(this.url + "/" + value).pipe(map(function (item) { return _this.parseToComboOption(item); }));
    };
    /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    ThfComboFilterService.prototype.configProperties = /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    function (url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    ThfComboFilterService.prototype.parseToArrayComboOption = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        if (items && items.length > 0) {
            return items.map(function (item) {
                return _this.parseToComboOption(item);
            });
        }
        return [];
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    ThfComboFilterService.prototype.parseToComboOption = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item && item[this.fieldValue]) {
            /** @type {?} */
            var label = item[this.fieldLabel];
            /** @type {?} */
            var value = item[this.fieldValue];
            return { label: label, value: value };
        }
    };
    ThfComboFilterService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ThfComboFilterService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfComboFilterService;
}());
export { ThfComboFilterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfComboFilterService.prototype._url;
    /** @type {?} */
    ThfComboFilterService.prototype.fieldLabel;
    /** @type {?} */
    ThfComboFilterService.prototype.fieldValue;
    /**
     * @type {?}
     * @private
     */
    ThfComboFilterService.prototype.http;
}
