var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';
import { removeDuplicatedOptions } from '../../../utils/util';
import { ThfComboBaseComponent } from './thf-combo-base.component';
import { ThfComboFilterMode } from './thf-combo-filter-mode.enum';
import { ThfComboFilterService } from './thf-combo-filter.service';
/**
 * \@docsExtends ThfComboBaseComponent
 *
 * \@description
 * Utilizando thf-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * \@example
 *
 * <example name="thf-combo-basic" title="Totvs Combo Basic">
 *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.html"> </file>
 *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-labs" title="Totvs Combo Labs">
 *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.html"> </file>
 *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-scheduling" title="Totvs Combo - Scheduling">
 *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.html"> </file>
 *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-transfer" title="Totvs Combo - Banking Transfer">
 *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.html"> </file>
 *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-heroes" title="Totvs Combo - Heroes">
 *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.html"> </file>
 *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-heroes-reactive-form" title="Totvs Combo - Heroes Reactive Form">
 *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-hotels" title="Totvs Combo - Booking Hotel">
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.html"> </file>
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.ts"> </file>
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.service.ts"> </file>
 * </example>
 */
var ThfComboComponent = /** @class */ (function (_super) {
    __extends(ThfComboComponent, _super);
    function ThfComboComponent(element, differs, defaultService, renderer, sanitized) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.differs = differs;
        _this.defaultService = defaultService;
        _this.renderer = renderer;
        _this.sanitized = sanitized;
        _this.comboIcon = 'thf-icon-arrow-down';
        _this.comboOpen = false;
        _this.isProcessingGetObjectByValue = false;
        _this.isServerSearching = false;
        _this.scrollTop = 0;
        _this.shouldMarkLetters = true;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            this.validAndSortOptions();
            removeDuplicatedOptions(this.options);
        }
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfComboComponent.prototype.onKeyDown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && event.keyCode === 9 && inputValue) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (event.keyCode === 38 || event.keyCode === 40) {
            event.preventDefault();
            if (this.comboOpen) {
                if (event.keyCode === 38) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (event.keyCode === 9 || event.keyCode === 27) {
            if (event.keyCode === 27 && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                this.updateComboList();
            }
            return;
        }
        // Tecla "enter"
        if (event.keyCode === 13 && this.selectedView && this.comboOpen) {
            /** @type {?} */
            var isUpdateModel = (this.selectedView.value !== this.selectedValue) || (inputValue !== this.selectedView.label);
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            this.updateComboList();
            return;
        }
        this.controlComboVisibility(true);
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfComboComponent.prototype.onKeyUp = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.keyCode || event.which;
        /** @type {?} */
        var inputValue = event.target.value;
        /** @type {?} */
        var arrowDown = 40;
        /** @type {?} */
        var arrowUp = 38;
        /** @type {?} */
        var enter = 13;
        /** @type {?} */
        var isValidKey = (key !== arrowUp && key !== arrowDown && key !== enter);
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.options, this.filterMode);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                /** @type {?} */
                var useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList(this.cacheOptions.slice());
                }
                this.isFiltering = false;
            }
        }
        this.previousSearchValue = inputValue;
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.initInputObservable = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.service) {
            /** @type {?} */
            var keyupObservable = fromEvent(this.inputElement.nativeElement, 'keyup')
                .pipe(filter(function (e) { return _this.isValidCharacterToSearch(e.keyCode); }), map(function (e) { return e.currentTarget.value; }), distinctUntilChanged(), tap(function () {
                _this.shouldMarkLetters = false;
            }), debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe(function (value) {
                if (value.length >= _this.filterMinlength || !value) {
                    _this.controlApplyFilter(value);
                }
            });
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.controlApplyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {
            this.applyFilter(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.applyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.isServerSearching = true;
        this.controlComboVisibility(false);
        /** @type {?} */
        var param = { property: this.fieldLabel, value: value };
        this.filterSubscription = this.service.getFilteredData(param, this.filterParams)
            .subscribe(function (items) { return _this.setOptionsByApplyFilter(value, items); });
    };
    /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    ThfComboComponent.prototype.setOptionsByApplyFilter = /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    function (value, items) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.options = items;
        this.searchForLabel(value, items, this.filterMode);
        this.controlComboVisibility(true);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.options;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.getObjectByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (!this.selectedValue) {
            this.isProcessingGetObjectByValue = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams)
                .subscribe(function (item) { return _this.updateOptionByFilteredValue(item); });
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfComboComponent.prototype.updateOptionByFilteredValue = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout(function () { _this.isProcessingGetObjectByValue = false; }, this.debounceTime);
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.selectPreviousOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.changeOnEnter ? this.selectedView && this.selectedView.value : this.selectedValue;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.selectNextOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.changeOnEnter ? this.selectedView && this.selectedView.value : this.selectedValue;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var index = this.changeOnEnter ? 1 : 0;
            /** @type {?} */
            var visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.toggleComboVisibility = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.applyFilterInFirstClick = /**
     * @return {?}
     */
    function () {
        if (this.isFirstFilter && !this.selectedValue) {
            this.applyFilter('');
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    ThfComboComponent.prototype.controlComboVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        this.comboIcon = toOpen ? 'thf-icon-arrow-up' : 'thf-icon-arrow-down';
        if (this.options && this.options.length) {
            if (toOpen && !this.selector('.thf-combo-content').classList.contains('thf-combo-show')) {
                this.selector('.thf-combo-content').classList.add('thf-combo-show');
                this.initializeListeners();
            }
            else if (!toOpen && this.selector('.thf-combo-content').classList.contains('thf-combo-show')) {
                this.selector('.thf-combo-content').classList.remove('thf-combo-show');
                this.removeListeners();
            }
        }
        this.comboOpen = toOpen;
        if (toOpen) {
            this.inputElement.nativeElement.focus();
            this.scrollTo(this.getIndexSelectedView());
        }
        else {
            this.isFiltering = false;
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfComboComponent.prototype.onOptionClick = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var inputValue = this.getInputValue();
        /** @type {?} */
        var isUpdateModel = (option.value !== this.selectedValue) || !!(this.selectedView && inputValue !== this.selectedView.label);
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        this.updateComboList([__assign({}, this.selectedView)]);
        this.previousSearchValue = this.selectedView.label;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfComboComponent.prototype.scrollTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.getInputValue = /**
     * @return {?}
     */
    function () {
        return this.inputElement.nativeElement.value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.setInputValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inputElement.nativeElement.value = value;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfComboComponent.prototype.selector = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfComboComponent.prototype.wasClickedOnToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.contentElement.nativeElement.contains(event.target) &&
            this.comboOpen) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            this.updateComboList();
        }
    };
    /**
     * @param {?} label
     * @return {?}
     */
    ThfComboComponent.prototype.getLabelFormatted = /**
     * @param {?} label
     * @return {?}
     */
    function (label) {
        /** @type {?} */
        var format = label;
        if (this.isFiltering ||
            (this.service && this.getInputValue() && !this.compareObjects(this.cacheOptions, this.visibleOptions) && this.shouldMarkLetters)) {
            /** @type {?} */
            var labelInput = this.getInputValue().toString().toLowerCase();
            /** @type {?} */
            var labelLowerCase = label.toLowerCase();
            /** @type {?} */
            var openTagBold = '<span class="thf-font-text-large-bold">';
            /** @type {?} */
            var closeTagBold = '</span>';
            /** @type {?} */
            var startString = void 0;
            /** @type {?} */
            var middleString = void 0;
            /** @type {?} */
            var endString = void 0;
            switch (this.filterMode) {
                case ThfComboFilterMode.startsWith:
                case ThfComboFilterMode.contains:
                    startString = label.substring(0, labelLowerCase.indexOf(labelInput));
                    middleString = label.substring(labelLowerCase.indexOf(labelInput), labelLowerCase.indexOf(labelInput) + labelInput.length);
                    endString = label.substring(labelLowerCase.indexOf(labelInput) + labelInput.length);
                    format = startString + openTagBold + middleString + closeTagBold + endString;
                    break;
                case ThfComboFilterMode.endsWith:
                    startString = label.substring(0, labelLowerCase.lastIndexOf(labelInput));
                    middleString = label.substring(labelLowerCase.lastIndexOf(labelInput));
                    format = startString + openTagBold + middleString + closeTagBold;
                    break;
            }
        }
        return this.safeHtml(format);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.safeHtml = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfComboComponent.prototype.isValidCharacterToSearch = /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.searchOnEnter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    ThfComboComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-combo', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <input #inputElement class=\"thf-input thf-combo-input\" autocomplete=\"off\" type=\"text\" [attr.name]=\"name\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [required]=\"required\" (click)=\"toggleComboVisibility()\" (keyup)=\"onKeyUp($event)\" (keyup.enter)=\"searchOnEnter($event.target.value)\" (keydown)=\"onKeyDown($event)\"> <div class=\"thf-field-icon-container-right\"> <span #icon class=\"thf-icon thf-field-icon {{ comboIcon }}\" [class.thf-field-icon-disabled]=\"disabled\" [class.thf-field-icon]=\"!disabled\" (click)=\"toggleComboVisibility()\"> </span> </div> <ul #contentElement class=\"thf-combo-content\" [scrollTop]=\"scrollTop\"> <li *ngFor=\"let option of visibleOptions\" [value]=\"option.value\" (click)=\"onOptionClick(option)\" [class.thf-combo-item-selected]=\"compareObjects(selectedView, option)\"> <a class=\"thf-combo-item\" [innerHTML]=\"getLabelFormatted(option?.label)\"></a> </li> </ul> <div class=\"thf-combo-content-loading\" *ngIf=\"isServerSearching\"> <thf-loading></thf-loading> </div> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        ThfComboFilterService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfComboComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfComboComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfComboComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IterableDiffers },
        { type: ThfComboFilterService },
        { type: Renderer2 },
        { type: DomSanitizer }
    ]; };
    ThfComboComponent.propDecorators = {
        contentElement: [{ type: ViewChild, args: ['contentElement', { read: ElementRef },] }],
        iconElement: [{ type: ViewChild, args: ['icon', { read: ElementRef },] }],
        inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef },] }]
    };
    return ThfComboComponent;
}(ThfComboBaseComponent));
export { ThfComboComponent };
if (false) {
    /** @type {?} */
    ThfComboComponent.prototype.contentElement;
    /** @type {?} */
    ThfComboComponent.prototype.iconElement;
    /** @type {?} */
    ThfComboComponent.prototype.inputElement;
    /** @type {?} */
    ThfComboComponent.prototype.comboIcon;
    /** @type {?} */
    ThfComboComponent.prototype.comboOpen;
    /** @type {?} */
    ThfComboComponent.prototype.differ;
    /** @type {?} */
    ThfComboComponent.prototype.isProcessingGetObjectByValue;
    /** @type {?} */
    ThfComboComponent.prototype.isServerSearching;
    /** @type {?} */
    ThfComboComponent.prototype.scrollTop;
    /** @type {?} */
    ThfComboComponent.prototype.service;
    /** @type {?} */
    ThfComboComponent.prototype.shouldMarkLetters;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.filterSubscription;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.getSubscription;
    /** @type {?} */
    ThfComboComponent.prototype.element;
    /** @type {?} */
    ThfComboComponent.prototype.differs;
    /** @type {?} */
    ThfComboComponent.prototype.defaultService;
    /** @type {?} */
    ThfComboComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.sanitized;
}
