import{Component,ElementRef,EventEmitter,Input,Output,ViewChild}from"@angular/core";import{isMobile,setYearFrom0To100,validateDateRange}from"../../../../utils/util";import{ThfCalendarLangService}from"./thf-calendar.lang.service";import{ThfCalendarService}from"./thf-calendar.service";var thfCalendarLocaleDefault="pt",thfCalendarLocales=["pt","en","es"],ThfCalendarComponent=function(){function e(e,t){this.thfCalendarService=e,this.thfCalendarLangService=t,this.dayVisible=!1,this.displayMonths=Array(),this.displayWeedDays=Array(),this.monthVisible=!1,this.overlayInvisible=!0,this.visible=!1,this.yearVisible=!1,this.isMobile=isMobile,this.today=new Date,this.selectedDateChange=new EventEmitter,this.submit=new EventEmitter}return Object.defineProperty(e.prototype,"dateEnd",{get:function(){return this._dateEnd},set:function(e){if(e&&e instanceof Date){var t=e.getFullYear(),a=e.getMonth(),i=e.getDate(),n=new Date(t,a,i,23,59,59);setYearFrom0To100(n,t),this._dateEnd=n}else this._dateEnd=void 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"locale",{get:function(){return this._locale},set:function(e){this._locale=thfCalendarLocales.includes(e)?e:thfCalendarLocaleDefault,this.initializeLanguage()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"selectedDate",{get:function(){return this._selectedDate},set:function(e){this._selectedDate=e&&e instanceof Date?e:void 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dateStart",{get:function(){return this._dateStart},set:function(e){if(e&&e instanceof Date){var t=e.getFullYear(),a=e.getMonth(),i=e.getDate(),n=new Date(t,a,i,0,0,0);setYearFrom0To100(n,t),this._dateStart=n}else this._dateStart=void 0},enumerable:!0,configurable:!0}),e.prototype.close=function(){this.overlayInvisible=!0,this.visible=!1},e.prototype.getArrayDecade=function(e){if(this.displayDecade=Array(),e%10!=0)for(;e%10!=0;)e--;this.updateDecade(e)},e.prototype.getBackgroundColor=function(e,t){return e===t?"thf-calendar-box-background-selected":"thf-calendar-box-background"},e.prototype.getDayBackgroundColor=function(e){return this.equalsDate(e,this.selectedDate)?"thf-calendar-box-background-selected":this.equalsDate(e,this.today)?"thf-calendar-box-background-today":e?validateDateRange(e,this.dateStart,this.dateEnd)?"thf-calendar-box-background":"thf-calendar-box-background-disabled":""},e.prototype.getDayForegroundColor=function(e){return this.equalsDate(e,this.selectedDate)?"thf-calendar-box-foreground-selected":this.equalsDate(e,this.today)?"thf-calendar-box-foreground-today":validateDateRange(e,this.dateStart,this.dateEnd)?"thf-calendar-box-foreground":"thf-calendar-box-foreground-disabled"},e.prototype.getForegroundColor=function(e,t){return e===t?"thf-calendar-box-foreground-selected":"thf-calendar-box-foreground"},e.prototype.getWordMonth=function(){return this.thfCalendarLangService.getWordMonth()},e.prototype.getWordYear=function(){return this.thfCalendarLangService.getWordYear()},e.prototype.init=function(){this.selectedDate?this.updateDate(this.selectedDate):this.updateDate(this.today),this.initializeLanguage(),this.selectDay(),this.isMobile()&&(this.overlayInvisible=!1),this.visible=!0},e.prototype.initializeLanguage=function(){this.thfCalendarLangService.setLanguage(this.locale),this.displayWeedDays=this.thfCalendarLangService.getArrayWeekDays(),this.displayMonths=this.thfCalendarLangService.getArrayMonths()},e.prototype.onNextMonth=function(){this.displayMonthNumber<11?this.updateDisplay(this.displayYear,this.displayMonthNumber+1):this.updateDisplay(this.displayYear+1,0)},e.prototype.onPrevMonth=function(){this.displayMonthNumber>0?this.updateDisplay(this.displayYear,this.displayMonthNumber-1):this.updateDisplay(this.displayYear-1,11)},e.prototype.onSelectDate=function(e){validateDateRange(e,this.dateStart,this.dateEnd)&&(this.selectedDate=e,this.selectedDateChange.emit(e),this.submit.emit(e))},e.prototype.onSelectMonth=function(e,t){this.selectDay(),this.updateDisplay(e,t)},e.prototype.onSelectYear=function(e,t){"month"===this.lastDisplay?this.selectMonth():this.selectDay(),this.currentYear=e,this.updateDisplay(e,t)},e.prototype.selectDay=function(){this.dayVisible=!0,this.monthVisible=!1,this.yearVisible=!1,this.lastDisplay="day"},e.prototype.selectMonth=function(){this.dayVisible=!1,this.monthVisible=!0,this.yearVisible=!1,this.lastDisplay="month"},e.prototype.selectYear=function(){this.dayVisible=!1,this.monthVisible=!1,this.yearVisible=!0},e.prototype.setMobileVisualization=function(){return this.isMobile()?"thf-calendar thf-calendar-mobile":"thf-calendar"},e.prototype.updateYear=function(e){this.updateDisplay(this.displayYear+e,this.displayMonthNumber)},e.prototype.addAllYearsInDecade=function(e){var t;for(t=e;t<e+10;t++)this.displayDecade.push(t)},e.prototype.equalsDate=function(e,t){try{return e.getFullYear()===t.getFullYear()&&e.getMonth()===t.getMonth()&&e.getDate()===t.getDate()}catch(e){return!1}},e.prototype.updateDate=function(e){this.currentMonthNumber=e.getMonth(),this.currentYear=e.getFullYear(),this.updateDisplay(this.currentYear,this.currentMonthNumber)},e.prototype.updateDecade=function(e){this.addAllYearsInDecade(e),this.displayStartDecade=e,this.displayFinalDecade=e+9},e.prototype.updateDisplay=function(e,t){var a=this.thfCalendarService.monthDays(e,t);this.displayDays=[].concat.apply([],a),this.displayMonthNumber=t,this.displayMonth=this.displayMonths[t],this.displayYear=e,this.getArrayDecade(e)},e.decorators=[{type:Component,args:[{selector:"thf-calendar",template:'<div class="thf-calendar-overlay" [class.thf-invisible]="overlayInvisible"></div> <div *ngIf="visible" [ngClass]="setMobileVisualization()"> <div *ngIf="dayVisible" #days> <div class="thf-calendar-nav"> <span (click)="onPrevMonth()" class="thf-calendar-nav-left thf-icon thf-icon-arrow-left"></span> <div class="thf-calendar-nav-title" attr-calendar> <span class="thf-clickable thf-mr-1" (click)="selectMonth()">{{ displayMonth }}</span> <span class="thf-clickable" (click)="selectYear()">{{ displayYear }}</span> </div> <span (click)="onNextMonth()" class="thf-calendar-nav-right thf-icon thf-icon-arrow-right"></span> </div> <div class="thf-calendar-content"> <div class="thf-calendar-labels"> <div class="thf-calendar-label" *ngFor="let day of displayWeedDays"> {{ day.toLowerCase() }} </div> </div> <div class="thf-calendar-content-list-day"> <div *ngFor="let day of displayDays" class="thf-calendar-day thf-calendar-box-background" (click)="onSelectDate(day)" [ngClass]="getDayBackgroundColor(day)"> <span *ngIf="day != 0" [ngClass]="getDayForegroundColor(day)"> {{ day.getDate() }} </span> </div> </div> </div> </div> <div *ngIf="monthVisible" #months> <div class="thf-calendar-nav"> <span (click)="updateYear(-1)" class="thf-calendar-nav-left thf-icon thf-icon-arrow-left"></span> <div class="thf-calendar-nav-title" attr-calendar> <span class="thf-clickable" (click)="selectYear()">{{ displayYear }}</span> </div> <span (click)="updateYear(1)" class="thf-calendar-nav-right thf-icon thf-icon-arrow-right"></span> </div> <div class="thf-calendar-content"> <div class="thf-calendar-labels"> <div class="thf-calendar-label"> {{ getWordMonth() }} </div> </div> <div class="thf-calendar-content-list-month"> <div *ngFor="let month of displayMonths; let i = index;" class="thf-calendar-month" (click)="onSelectMonth(displayYear, i)" [ngClass]="getBackgroundColor(i, displayMonthNumber)" attr-calendar> <span [ngClass]="getForegroundColor(i, displayMonthNumber)"> {{ month }} </span> </div> </div> </div> </div> <div *ngIf="yearVisible" #years> <div class="thf-calendar-nav"> <span (click)="updateYear(-10)" class="thf-calendar-nav-left thf-icon thf-icon-arrow-left"></span> <div class="thf-calendar-nav-title"> {{ displayStartDecade }} - {{ displayFinalDecade }} </div> <span (click)="updateYear(10)" class="thf-calendar-nav-right thf-icon thf-icon-arrow-right"></span> </div> <div class="thf-calendar-content"> <div class="thf-calendar-labels"> <div class="thf-calendar-label"> {{ getWordYear() }} </div> </div> <div class="thf-calendar-content-list-year"> <div *ngFor="let year of displayDecade; let i = index;" class="thf-calendar-year" (click)="onSelectYear(year, displayMonthNumber)" [ngClass]="getBackgroundColor(year, currentYear)" attr-calendar> <span [ngClass]="getForegroundColor(year, currentYear)"> {{ year }} </span> </div> </div> </div> </div> </div> ',providers:[ThfCalendarService,ThfCalendarLangService]}]}],e.ctorParameters=function(){return[{type:ThfCalendarService},{type:ThfCalendarLangService}]},e.propDecorators={elDays:[{type:ViewChild,args:["days",{read:ElementRef}]}],elMonths:[{type:ViewChild,args:["months",{read:ElementRef}]}],elYears:[{type:ViewChild,args:["years",{read:ElementRef}]}],dateEnd:[{type:Input,args:["t-date-end"]}],locale:[{type:Input,args:["t-locale"]}],selectedDate:[{type:Input,args:["t-selected-date"]}],dateStart:[{type:Input,args:["t-date-start"]}],selectedDateChange:[{type:Output,args:["t-selected-dateChange"]}],submit:[{type:Output,args:["t-submit"]}]},e}();export{ThfCalendarComponent};