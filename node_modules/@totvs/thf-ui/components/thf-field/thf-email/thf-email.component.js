var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 *
 * thf-email é um input específico para receber E-mail, com o pattern já configurado.
 *
 * \@example
 *
 * <example name="thf-email-basic" title="Totvs Email Basic">
 *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.html"> </file>
 *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.ts"> </file>
 *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-email-labs" title="Totvs Email Labs">
 *  <file name="sample-thf-email-labs/sample-thf-email-labs.component.html"> </file>
 *  <file name="sample-thf-email-labs/sample-thf-email-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-email-newsletter" title="Totvs Email - Newsletter">
 *  <file name="sample-thf-email-newsletter/sample-thf-email-newsletter.component.html"> </file>
 *  <file name="sample-thf-email-newsletter/sample-thf-email-newsletter.component.ts"> </file>
 * </example>
 */
var ThfEmailComponent = /** @class */ (function (_super) {
    __extends(ThfEmailComponent, _super);
    function ThfEmailComponent(el) {
        var _this = _super.call(this, el) || this;
        _this.icon = 'thf-icon-mail';
        _this.maxlength = 254;
        _this.type = 'email';
        _this.pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$';
        _this.mask = '';
        _this.listener = _this.validateClassesForPattern.bind(_this);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfEmailComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            if (!_this.onChangePropagate) {
                _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
            }
        });
    };
    /**
     * @return {?}
     */
    ThfEmailComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!this.onChangePropagate) {
            this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfEmailComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    ThfEmailComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-email', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span> </div> <input #inp class=\"thf-input\" [attr.name]=\"name\" [class.thf-input-icon-left]=\"icon\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [type]=\"type\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" (focus)=\"eventOnFocus($event)\" (input)=\"eventOnInput($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfEmailComponent; }),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfEmailComponent; }),
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfEmailComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ThfEmailComponent;
}(ThfInputGeneric));
export { ThfEmailComponent };
if (false) {
    /** @type {?} */
    ThfEmailComponent.prototype.icon;
    /** @type {?} */
    ThfEmailComponent.prototype.maxlength;
    /** @type {?} */
    ThfEmailComponent.prototype.type;
    /** @type {?} */
    ThfEmailComponent.prototype.pattern;
    /** @type {?} */
    ThfEmailComponent.prototype.mask;
    /**
     * @type {?}
     * @private
     */
    ThfEmailComponent.prototype.listener;
}
