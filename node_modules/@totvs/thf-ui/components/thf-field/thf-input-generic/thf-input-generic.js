var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, HostListener, ViewChild } from '@angular/core';
import { ThfInputBaseComponent } from '../thf-input/thf-input-base.component';
/**
 * @abstract
 */
var ThfInputGeneric = /** @class */ (function (_super) {
    __extends(ThfInputGeneric, _super);
    function ThfInputGeneric(el) {
        var _this = _super.call(this) || this;
        _this.type = 'text';
        _this.el = el;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.afterViewInit();
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.afterViewInit = /**
     * @return {?}
     */
    function () {
        this.putFocus();
        if (this.type !== 'password') {
            this.setPaddingInput();
        }
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.setPaddingInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            /** @type {?} */
            var selectorIcons = '.thf-field-icon-container:not(.thf-field-icon-container-left) > .thf-icon';
            /** @type {?} */
            var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (_this.clean) {
                icons++;
            }
            if (icons) {
                _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
            }
        });
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.putFocus = /**
     * @return {?}
     */
    function () {
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.onKeydown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.mask && !this.readonly && e.target.keyCode !== 229) {
            this.eventOnBlur(e);
            this.objMask.keydown(e);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.onKeyup = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.mask && !this.readonly) {
            if (e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keyup(e);
            }
            this.callOnChange(this.objMask.valueToModel);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.eventOnInput = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.mask) {
            /** @type {?} */
            var value = this.validMaxLength(this.maxlength, e.target.value);
            this.inputEl.nativeElement.value = value;
            this.callOnChange(value);
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    ThfInputGeneric.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        return ((maxlength || maxlength === 0) && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.eventOnFocus = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.eventOnBlur = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.mask) {
            this.objMask.blur(e);
        }
        if (e.type === 'blur') {
            this.blur.emit();
            this.controlChangeEmitter();
        }
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.controlChangeEmitter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var elementValue = this.inputEl.nativeElement.value;
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do t-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(function () {
                _this.change.emit(elementValue);
            }, 200);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.eventOnClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Atualiza a posição do cursor ao clicar
        if (this.mask) {
            this.objMask.click(e);
        }
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.hasInvalidClass = /**
     * @return {?}
     */
    function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.getErrorPattern = /**
     * @return {?}
     */
    function () {
        return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.validateClassesForPattern = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.getScreenValue();
        /** @type {?} */
        var element = this.el.nativeElement;
        if (value && !this.verifyPattern(this.pattern, value)) {
            element.classList.add('ng-invalid');
            element.classList.add('ng-dirty');
        }
        else {
            element.classList.remove('ng-invalid');
        }
    };
    /**
     * @param {?} pattern
     * @param {?} value
     * @return {?}
     */
    ThfInputGeneric.prototype.verifyPattern = /**
     * @param {?} pattern
     * @param {?} value
     * @return {?}
     */
    function (pattern, value) {
        return new RegExp(pattern).test(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfInputGeneric.prototype.clear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfInputGeneric.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.passedWriteValue = true;
        if (this.inputEl) {
            if (value) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se o valor for indefinido, deve limpar o campo.
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.changeModel.emit(value);
        }
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.getScreenValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var screenValue = this.inputEl && this.inputEl.nativeElement.value || undefined;
        if (this.type === 'number') {
            /** @type {?} */
            var parsedValue = parseFloat(screenValue);
            return parsedValue || parsedValue === 0 ? parsedValue : null;
        }
        else {
            return screenValue;
        }
    };
    ThfInputGeneric.propDecorators = {
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef },] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        onKeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }]
    };
    return ThfInputGeneric;
}(ThfInputBaseComponent));
export { ThfInputGeneric };
if (false) {
    /** @type {?} */
    ThfInputGeneric.prototype.inputEl;
    /** @type {?} */
    ThfInputGeneric.prototype.type;
    /** @type {?} */
    ThfInputGeneric.prototype.el;
    /** @type {?} */
    ThfInputGeneric.prototype.valueBeforeChange;
    /** @type {?} */
    ThfInputGeneric.prototype.timeoutChange;
    /**
     * @abstract
     * @param {?} c
     * @return {?}
     */
    ThfInputGeneric.prototype.extraValidation = function (c) { };
}
