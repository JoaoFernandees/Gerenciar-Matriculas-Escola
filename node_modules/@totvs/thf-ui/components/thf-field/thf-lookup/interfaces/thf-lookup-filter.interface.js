/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfLookupComponent
 *
 * \@description
 *
 * Define o tipo de busca utilizado no thf-lookup.
 * @record
 */
export function ThfLookupFilter() { }
if (false) {
    /**
     * Método responsável por enviar um filtro para o serviço e receber os dados.
     *
     * Os parâmetros page e pageSize seguem o guia de implementação das APIs TOTVS, são utilizados para controlar a busca dos dados em cada
     * requisição do botão 'Carregar mais resultados'.
     *
     * Este método deve retornar um *Observable* com a resposta da API no formato da interface `ThfLookupResponseApi`.
     *
     * @param {?} filter {any} Utilizado pelo serviço para filtrar os dados.
     * @param {?} page {number} Controla a paginação dos dados e recebe valor automaticamente a cada clique no botão 'Carregar mais resultados'.
     * @param {?=} pageSize {number} Quantidade de itens retornados cada vez que o serviço é chamado, por padrão é 10.
     * @param {?=} filterParams {any} Valor informado através da propriedade `t-filter-params`.
     * @return {?}
     */
    ThfLookupFilter.prototype.getFilteredData = function (filter, page, pageSize, filterParams) { };
    /**
     * Método responsável por enviar um valor que será buscado no serviço.
     *
     * @param {?} value {string} Valor único a ser buscado na fonte de dados.
     * @param {?=} filterParams {any} Valor informado através da propriedade `t-filter-params`.
     * @return {?}
     */
    ThfLookupFilter.prototype.getObjectByValue = function (value, filterParams) { };
}
