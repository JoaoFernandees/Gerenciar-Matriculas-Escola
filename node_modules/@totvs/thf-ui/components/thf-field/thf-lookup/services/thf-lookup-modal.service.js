/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { ThfComponentInjectorService } from '../../../../services/thf-component-injector/thf-component-injector.service';
import { ThfLookupModalComponent } from '../thf-lookup-modal/thf-lookup-modal.component';
/**
 * \@docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Thf Lookup Modal.
 */
var ThfLookupModalService = /** @class */ (function () {
    function ThfLookupModalService(thfComponentInjector) {
        this.thfComponentInjector = thfComponentInjector;
        this.componentRef = null;
        this.selectValueEvent = new EventEmitter();
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param service {ThfLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<ThfLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {ThfLookupLiterals} Literais utilizadas no componente.
     */
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    ThfLookupModalService.prototype.openModal = /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        var service = params.service, columns = params.columns, filterParams = params.filterParams, title = params.title, literals = params.literals;
        this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfLookupModalComponent);
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe(function ($event) {
            _this.selectValue($event);
        });
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    };
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    ThfLookupModalService.prototype.selectValue = 
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    };
    ThfLookupModalService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ThfLookupModalService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    return ThfLookupModalService;
}());
export { ThfLookupModalService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalService.prototype.componentRef;
    /** @type {?} */
    ThfLookupModalService.prototype.selectValueEvent;
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalService.prototype.thfComponentInjector;
}
