import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { ThfLookupColumn } from './interfaces/thf-lookup-column.interface';
import { ThfLookupFilter } from './interfaces/thf-lookup-filter.interface';
import { ThfLookupLiterals } from './interfaces/thf-lookup-literals.interface';
/**
 * @description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar o registro que será enviado para o campo. O `thf-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `thf-select` ou o `thf-combo`.
 */
export declare abstract class ThfLookupBaseComponent implements ControlValueAccessor, OnDestroy, OnInit, Validator {
    private _disabled?;
    private _focus?;
    private _required?;
    protected getSubscription: Subscription;
    protected keysDescription: Array<any>;
    protected oldValue: string;
    protected valueToModel: any;
    private onChangePropagate;
    private onTouched;
    private validatorChange;
    /** Label do campo. */
    label?: string;
    /**
     * @description
     *
     * Objeto com as literais usadas no `thf-lookup`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select',
     *    modalSecondaryActionLabel: 'Cancel',
     *    modalPlaceholder: 'Search Value',
     *    modalTableNoColumns: 'No columns',
     *    modalTableNoData: 'No data',
     *    modalTableLoadingData: 'Loading data',
     *    modalTableLoadMoreData: 'Load more'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-lookup
     *   [t-literals]="customLiterals">
     * </thf-lookup>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     */
    literals?: ThfLookupLiterals;
    /** Texto de apoio do campo. */
    help?: string;
    /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */
    placeholder?: string;
    /** Nome e Id do componente. */
    name: string;
    /**
     * @deprecated 5.x.x
     *
     * @optional
     *
     * @description
     *
     * Titulo da janela de busca dos dados.
     *
     * O título será definido com a seguinte prioridade:
     *
     * - `t-literals`
     * - `t-title`
     * - `t-label`
     *
     * Caso nenhuma das 3 propriedades forem definidas o título será definido com o valor default da linguagem do browser.
     *
     * > Veja a propriedade `modalTitle` do `t-literals`.
     */
    title?: string;
    /**
     * @description
     *
     * Indica a coluna que será utilizada como valor do campo.
     *
     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.
     */
    fieldValue: string;
    /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */
    fieldLabel: string;
    /** Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface `ThfLookupFilter`. */
    filterParams?: any;
    /**
     * @optional
     *
     * @description
     *
     * Formato de exibição do campo.
     *
     * Recebe uma função que deve retornar uma *string* com o/os valores do objeto formatados para exibição, por exemplo:
     *
     * ```
     * fieldFormat(obj) {
     *   return `${obj.id} - ${obj.name}`;
     * }
     * ```
     * > Esta propriedade sobrepõe o valor da propriedade `t-field-label` na descrição do campo.
     */
    fieldFormat?: (value: any) => string;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface ThfLookupColumn.
     */
    columns: Array<ThfLookupColumn>;
    /** Serviço responsável por buscar os dados da tabela na janela. */
    service: ThfLookupFilter;
    /**
     * @optional
     * @description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
     *
     * @default `false`
     */
    required: boolean;
    /**
     * @description
     *
     * Indica que o campo iniciará com foco.
     *
     * @default false
     * @optional
     */
    focus: boolean;
    /**
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default false
     * @optional
     */
    disabled: boolean;
    /**
     * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
     * Será passado por parâmetro o objeto de erro retornado.
     */
    onError?: EventEmitter<any>;
    /**
     * Evento será disparado quando ocorrer alguma seleção.
     * Será passado por parâmetro o objeto com o valor selecionado.
     */
    selected?: EventEmitter<any>;
    ngOnDestroy(): void;
    ngOnInit(): void;
    private initializeColumn;
    registerOnValidatorChange(fn: () => void): void;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
    selectValue(valueSelected: any): void;
    callOnChange(value: any): void;
    searchById(value: string): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: any): void;
    abstract setViewValue(value: any, object: any): void;
    abstract openLookup(): void;
    protected cleanModel(): void;
    protected cleanViewValue(): void;
    protected getFormattedLabel(value: any): string;
    protected selectModel(value: any): void;
    protected validateModel(model: any): void;
}
