/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { requiredFailed } from '../validators';
/**
 * \@description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar o registro que será enviado para o campo. O `thf-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `thf-select` ou o `thf-combo`.
 * @abstract
 */
var ThfLookupBaseComponent = /** @class */ (function () {
    function ThfLookupBaseComponent() {
        this._disabled = false;
        this._focus = false;
        this._required = false;
        this.oldValue = '';
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        this.placeholder = '';
        /**
         * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
         * Será passado por parâmetro o objeto de erro retornado.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer alguma seleção.
         * Será passado por parâmetro o objeto com o valor selecionado.
         */
        this.selected = new EventEmitter();
    }
    Object.defineProperty(ThfLookupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         * @description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         * \@description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.valueToModel);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfLookupBaseComponent.prototype, "focus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._focus;
        },
        /**
         * @description
         *
         * Indica que o campo iniciará com foco.
         *
         * @default false
         * @optional
         */
        set: /**
         * \@description
         *
         * Indica que o campo iniciará com foco.
         *
         * \@default false
         * \@optional
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._focus = (/** @type {?} */ (focus)) === '' ? true : convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfLookupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default false
         * @optional
         */
        set: /**
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default false
         * \@optional
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initializeColumn();
    };
    /**
     * @private
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.initializeColumn = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.fieldLabel) {
            this.keysDescription = [this.fieldLabel];
        }
        else {
            this.keysDescription = [];
            this.keysDescription = this.columns.filter(function (element) { return element.fieldLabel; })
                .map(function (element) { return element.column; });
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangePropagate = func;
    };
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    // Seleciona o valor do model.
    // Seleciona o valor do model.
    /**
     * @param {?} valueSelected
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.selectValue = 
    // Seleciona o valor do model.
    /**
     * @param {?} valueSelected
     * @return {?}
     */
    function (valueSelected) {
        this.valueToModel = valueSelected[this.fieldValue];
        this.callOnChange(this.valueToModel);
        this.selected.emit(valueSelected);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.callOnChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada.
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.searchById = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (typeof (value) === 'string') {
            value = value.trim();
        }
        if (value !== '') {
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(function (element) {
                if (element) {
                    _this.oldValue = element[_this.fieldLabel];
                    _this.selectValue(element);
                    _this.setViewValue(_this.getFormattedLabel(element), element);
                }
                else {
                    _this.cleanModel();
                }
            }, function (error) {
                _this.cleanModel();
                _this.onError.emit(error);
            });
        }
        else {
            this.cleanModel();
        }
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && value instanceof Object) {
            // Esta condição é executada quando é retornado o objeto selecionado do componente Thf Lookup Modal.
            this.oldValue = value[this.fieldLabel];
            this.valueToModel = value[this.fieldValue];
            this.setViewValue(this.getFormattedLabel(value), value);
        }
        else if (value) {
            // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
            this.searchById(value);
        }
        else {
            this.cleanViewValue();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.cleanModel = /**
     * @protected
     * @return {?}
     */
    function () {
        this.cleanViewValue();
        this.callOnChange(undefined);
    };
    /**
     * @protected
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.cleanViewValue = /**
     * @protected
     * @return {?}
     */
    function () {
        this.setViewValue('', {});
        this.oldValue = '';
        this.valueToModel = null;
    };
    // Formata a label do campo.
    // Formata a label do campo.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.getFormattedLabel = 
    // Formata a label do campo.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value ? this.keysDescription.map(function (column) { return value[column]; }).join(' - ') : '';
    };
    // Chama o método writeValue e preenche o model.
    // Chama o método writeValue e preenche o model.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.selectModel = 
    // Chama o método writeValue e preenche o model.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.writeValue(value);
        if (value && value instanceof Object) {
            this.selectValue(value);
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    ThfLookupBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        literals: [{ type: Input, args: ['t-literals',] }],
        help: [{ type: Input, args: ['t-help',] }],
        placeholder: [{ type: Input, args: ['t-placeholder',] }],
        name: [{ type: Input, args: ['name',] }],
        title: [{ type: Input, args: ['t-title',] }],
        fieldValue: [{ type: Input, args: ['t-field-value',] }],
        fieldLabel: [{ type: Input, args: ['t-field-label',] }],
        filterParams: [{ type: Input, args: ['t-filter-params',] }],
        fieldFormat: [{ type: Input, args: ['t-field-format',] }],
        columns: [{ type: Input, args: ['t-columns',] }],
        service: [{ type: Input, args: ['t-filter-service',] }],
        required: [{ type: Input, args: ['t-required',] }],
        focus: [{ type: Input, args: ['t-focus',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        onError: [{ type: Output, args: ['t-error',] }],
        selected: [{ type: Output, args: ['t-selected',] }]
    };
    return ThfLookupBaseComponent;
}());
export { ThfLookupBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype._focus;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype._required;
    /**
     * @type {?}
     * @protected
     */
    ThfLookupBaseComponent.prototype.getSubscription;
    /**
     * @type {?}
     * @protected
     */
    ThfLookupBaseComponent.prototype.keysDescription;
    /**
     * @type {?}
     * @protected
     */
    ThfLookupBaseComponent.prototype.oldValue;
    /**
     * @type {?}
     * @protected
     */
    ThfLookupBaseComponent.prototype.valueToModel;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype.onChangePropagate;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype.validatorChange;
    /**
     * Label do campo.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.label;
    /**
     * \@description
     *
     * Objeto com as literais usadas no `thf-lookup`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select',
     *    modalSecondaryActionLabel: 'Cancel',
     *    modalPlaceholder: 'Search Value',
     *    modalTableNoColumns: 'No columns',
     *    modalTableNoData: 'No data',
     *    modalTableLoadingData: 'Loading data',
     *    modalTableLoadMoreData: 'Load more'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-lookup
     *   [t-literals]="customLiterals">
     * </thf-lookup>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.literals;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.help;
    /**
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.placeholder;
    /**
     * Nome e Id do componente.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.name;
    /**
     * @deprecated 5.x.x
     *
     * \@optional
     *
     * \@description
     *
     * Titulo da janela de busca dos dados.
     *
     * O título será definido com a seguinte prioridade:
     *
     * - `t-literals`
     * - `t-title`
     * - `t-label`
     *
     * Caso nenhuma das 3 propriedades forem definidas o título será definido com o valor default da linguagem do browser.
     *
     * > Veja a propriedade `modalTitle` do `t-literals`.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.title;
    /**
     * \@description
     *
     * Indica a coluna que será utilizada como valor do campo.
     *
     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.fieldValue;
    /**
     * Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.fieldLabel;
    /**
     * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface `ThfLookupFilter`.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.filterParams;
    /**
     * \@optional
     *
     * \@description
     *
     * Formato de exibição do campo.
     *
     * Recebe uma função que deve retornar uma *string* com o/os valores do objeto formatados para exibição, por exemplo:
     *
     * ```
     * fieldFormat(obj) {
     *   return `${obj.id} - ${obj.name}`;
     * }
     * ```
     * > Esta propriedade sobrepõe o valor da propriedade `t-field-label` na descrição do campo.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.fieldFormat;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface ThfLookupColumn.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.columns;
    /**
     * Serviço responsável por buscar os dados da tabela na janela.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.service;
    /**
     * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
     * Será passado por parâmetro o objeto de erro retornado.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.onError;
    /**
     * Evento será disparado quando ocorrer alguma seleção.
     * Será passado por parâmetro o objeto com o valor selecionado.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.selected;
    /**
     * @abstract
     * @param {?} value
     * @param {?} object
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.setViewValue = function (value, object) { };
    /**
     * @abstract
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.openLookup = function () { };
}
