var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThfLookupBaseComponent } from './thf-lookup-base.component';
import { ThfLookupModalService } from './services/thf-lookup-modal.service';
/**
 * \@docsExtends ThfLookupBaseComponent
 *
 * \@description
 *
 * Quando existe muitos dados o thf-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
 * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
 * [Guia de implementação das APIs TOTVS](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444).
 *
 * Importante:
 *
 * - Caso o thf-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * ```
 * <thf-lookup
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </thf-lookup>
 * ```
 *
 * \@example
 *
 * <example name="thf-lookup-basic" title="Totvs Lookup Basic">
 *  <file name="sample-thf-lookup-basic/sample-thf-lookup-basic.component.html"> </file>
 *  <file name="sample-thf-lookup-basic/sample-thf-lookup-basic.component.ts"> </file>
 *  <file name="sample-thf-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="thf-lookup-labs" title="Totvs Lookup Labs">
 *  <file name="sample-thf-lookup-labs/sample-thf-lookup-labs.component.html"> </file>
 *  <file name="sample-thf-lookup-labs/sample-thf-lookup-labs.component.ts"> </file>
 *  <file name="sample-thf-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="thf-lookup-hero" title="Totvs Lookup - Hero">
 *  <file name="sample-thf-lookup-hero/sample-thf-lookup-hero.component.html"> </file>
 *  <file name="sample-thf-lookup-hero/sample-thf-lookup-hero.component.ts"> </file>
 *  <file name="sample-thf-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="thf-lookup-hero-reactive-form" title="Totvs Lookup - Hero Reactive Form">
 *  <file name="sample-thf-lookup-hero-reactive-form/sample-thf-lookup-hero-reactive-form.component.html"> </file>
 *  <file name="sample-thf-lookup-hero-reactive-form/sample-thf-lookup-hero-reactive-form.component.ts"> </file>
 *  <file name="sample-thf-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="thf-lookup-sw-films" title="Totvs Lookup - Star Wars films">
 *  <file name="sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.component.html"> </file>
 *  <file name="sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.component.ts"> </file>
 *  <file name="sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.service.ts"> </file>
 * </example>
 */
var ThfLookupComponent = /** @class */ (function (_super) {
    __extends(ThfLookupComponent, _super);
    function ThfLookupComponent(thfLookupModalService) {
        var _this = _super.call(this) || this;
        _this.thfLookupModalService = thfLookupModalService;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.modalSubscription) {
            this.modalSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.openLookup = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.disabled) {
            var _a = this, service = _a.service, columns = _a.columns, filterParams = _a.filterParams, literals = _a.literals;
            /** @type {?} */
            var title = this.title || this.label;
            this.thfLookupModalService.openModal({ service: service, columns: columns, filterParams: filterParams, title: title, literals: literals });
            if (!this.modalSubscription) {
                this.modalSubscription = this.thfLookupModalService.selectValueEvent.subscribe(function (element) {
                    _this.selectModel(element);
                });
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} object
     * @return {?}
     */
    ThfLookupComponent.prototype.setViewValue = /**
     * @param {?} value
     * @param {?} object
     * @return {?}
     */
    function (value, object) {
        if (this.fieldFormat) {
            this.setInputValueWithFieldFormat(object);
        }
        else {
            this.inputEl.nativeElement.value = this.valueToModel ? value : '';
        }
    };
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.getViewValue = /**
     * @return {?}
     */
    function () {
        return this.inputEl.nativeElement.value;
    };
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.searchEvent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.getViewValue();
        if (this.oldValue !== value) {
            this.searchById(value);
        }
    };
    /**
     * @private
     * @param {?} objectSelected
     * @return {?}
     */
    ThfLookupComponent.prototype.setInputValueWithFieldFormat = /**
     * @private
     * @param {?} objectSelected
     * @return {?}
     */
    function (objectSelected) {
        /** @type {?} */
        var isEmpty = Object.keys(objectSelected).length === 0;
        /** @type {?} */
        var fieldFormated = this.fieldFormat(objectSelected);
        this.oldValue = isEmpty ? '' : fieldFormated;
        this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
    };
    ThfLookupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-lookup', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <input #inp class=\"thf-input thf-input-icon-right\" type=\"text\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [required]=\"required\" (blur)=\"searchEvent()\"> <div class=\"thf-field-icon-container-right\"> <span tabindex=\"1\" #iconLookup (click)=\"openLookup()\" (focus)=\"inp.focus()\" class=\"thf-icon thf-field-icon thf-icon-search\" [class.thf-field-icon-disabled]=\"disabled\" [class.thf-field-icon]=\"!disabled\"> </span> </div> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        ThfLookupModalService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfLookupComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfLookupComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfLookupComponent.ctorParameters = function () { return [
        { type: ThfLookupModalService }
    ]; };
    ThfLookupComponent.propDecorators = {
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef },] }]
    };
    return ThfLookupComponent;
}(ThfLookupBaseComponent));
export { ThfLookupComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLookupComponent.prototype.modalSubscription;
    /** @type {?} */
    ThfLookupComponent.prototype.inputEl;
    /**
     * @type {?}
     * @private
     */
    ThfLookupComponent.prototype.thfLookupModalService;
}
