/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
import { ThfMultiselectSearchComponent } from './../thf-multiselect-search/thf-multiselect-search.component';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
var ThfMultiselectDropdownComponent = /** @class */ (function () {
    function ThfMultiselectDropdownComponent() {
        this.scrollTop = 0;
        this.show = false;
        this.haveOptions = false;
        /**
         * Propriedade que indica se o campo de pesquisa deverá ser escondido.
         */
        this.hideSearch = false;
        /**
         * Propriedade que recebe a lista de opções selecionadas.
         */
        this.selectedValues = [];
        /**
         * Propriedade que recebe a lista de opções que deverão ser criadas no dropdown.
         */
        this.options = [];
        /**
         * Evento disparado a cada tecla digitada na pesquisa.
         */
        this.changeSearch = new EventEmitter();
        /**
         * Evento disparado a cada alteração na lista das opções selecionadas.
         */
        this.change = new EventEmitter();
        /**
         * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
         * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
         * para notificar o componente principal que deve fechar o dropdown.
         */
        this.closeDropdown = new EventEmitter();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.scrollTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.isSelectedItem = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        return this.selectedValues.some(function (selectedItem) { return selectedItem === option.value; });
    };
    /**
     * @param {?} check
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.clickItem = /**
     * @param {?} check
     * @param {?} option
     * @return {?}
     */
    function (check, option) {
        this.updateSelectedValues(check, option);
        if (!this.hideSearch) {
            this.searchElement.setFocus();
        }
    };
    /**
     * @param {?} checked
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.updateSelectedValues = /**
     * @param {?} checked
     * @param {?} option
     * @return {?}
     */
    function (checked, option) {
        if (checked) {
            this.selectedValues.push(option.value);
        }
        else {
            /** @type {?} */
            var indexSelectedValues = this.selectedValues.indexOf(option.value);
            this.selectedValues.splice(indexSelectedValues, 1);
        }
        this.change.emit(this.selectedValues);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.callChangeSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.changeSearch.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.onKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === 9) {
            this.closeDropdown.emit();
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.controlVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        var _this = this;
        this.show = toOpen;
        this.checkInitialOptions();
        if (toOpen && this.searchElement && !this.hideSearch) {
            setTimeout(function () {
                _this.searchElement.setFocus();
                _this.searchElement.clean();
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.checkInitialOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.options.length) {
            this.haveOptions = true;
        }
    };
    ThfMultiselectDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-multiselect-dropdown', template: "<div class=\"thf-multiselect-content\" [hidden]=\"!show\"> <thf-multiselect-search #searchElement *ngIf=\"!hideSearch && haveOptions\" [t-literals]=\"literals\" [t-placeholder]=\"placeholderSearch\" (t-change)=\"callChangeSearch($event)\"> </thf-multiselect-search> <ul class=\"thf-multiselect-items-content\" [scrollTop]=\"scrollTop\" #ulElement> <div *ngIf=\"!options.length\" class=\"thf-multiselect-content-no-data thf-text-center\"> <span> {{ literals.noData }}</span> </div> <thf-multiselect-item *ngFor=\"let option of options\" [t-option]=\"option\" [t-selected]=\"isSelectedItem(option)\" (t-change)=\"clickItem($event, option)\"> </thf-multiselect-item> </ul> </div> "
                },] },
    ];
    ThfMultiselectDropdownComponent.propDecorators = {
        hideSearch: [{ type: Input, args: ['t-hide-search',] }],
        literals: [{ type: Input, args: ['t-literals',] }],
        placeholderSearch: [{ type: Input, args: ['t-placeholder-search',] }],
        selectedValues: [{ type: Input, args: ['t-selected-values',] }],
        options: [{ type: Input, args: ['t-options',] }],
        changeSearch: [{ type: Output, args: ['t-change-search',] }],
        change: [{ type: Output, args: ['t-change',] }],
        closeDropdown: [{ type: Output, args: ['t-close-dropdown',] }],
        ulElement: [{ type: ViewChild, args: ['ulElement', { read: ElementRef },] }],
        searchElement: [{ type: ViewChild, args: ['searchElement',] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return ThfMultiselectDropdownComponent;
}());
export { ThfMultiselectDropdownComponent };
if (false) {
    /** @type {?} */
    ThfMultiselectDropdownComponent.prototype.scrollTop;
    /** @type {?} */
    ThfMultiselectDropdownComponent.prototype.show;
    /** @type {?} */
    ThfMultiselectDropdownComponent.prototype.haveOptions;
    /**
     * Propriedade que indica se o campo de pesquisa deverá ser escondido.
     * @type {?}
     */
    ThfMultiselectDropdownComponent.prototype.hideSearch;
    /**
     * Propriedade que que recebe as literais definidas no componente `thf-multiselect`.
     * @type {?}
     */
    ThfMultiselectDropdownComponent.prototype.literals;
    /**
     * Placeholder do campo de pesquisa.
     * @type {?}
     */
    ThfMultiselectDropdownComponent.prototype.placeholderSearch;
    /**
     * Propriedade que recebe a lista de opções selecionadas.
     * @type {?}
     */
    ThfMultiselectDropdownComponent.prototype.selectedValues;
    /**
     * Propriedade que recebe a lista de opções que deverão ser criadas no dropdown.
     * @type {?}
     */
    ThfMultiselectDropdownComponent.prototype.options;
    /**
     * Evento disparado a cada tecla digitada na pesquisa.
     * @type {?}
     */
    ThfMultiselectDropdownComponent.prototype.changeSearch;
    /**
     * Evento disparado a cada alteração na lista das opções selecionadas.
     * @type {?}
     */
    ThfMultiselectDropdownComponent.prototype.change;
    /**
     * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
     * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
     * para notificar o componente principal que deve fechar o dropdown.
     * @type {?}
     */
    ThfMultiselectDropdownComponent.prototype.closeDropdown;
    /** @type {?} */
    ThfMultiselectDropdownComponent.prototype.ulElement;
    /** @type {?} */
    ThfMultiselectDropdownComponent.prototype.searchElement;
}
