/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de pesquisa que será criado dentro do dropdown do `thf-multiselect`.
 */
var ThfMultiselectSearchComponent = /** @class */ (function () {
    function ThfMultiselectSearchComponent() {
        /**
         * Evento que será disparado a cada tecla digitada no campo de busca.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(ThfMultiselectSearchComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder || this.literals.placeholderSearch;
        },
        /**
         * @optional
         *
         * @description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * @default `Buscar`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * \@default `Buscar`
         * @param {?} placeholder
         * @return {?}
         */
        function (placeholder) {
            this._placeholder = placeholder && isTypeof(placeholder, 'string') ? placeholder : this.literals.placeholderSearch;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectSearchComponent.prototype.onChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.change.emit({ event: event, value: this.inputElement.nativeElement.value });
    };
    /**
     * @return {?}
     */
    ThfMultiselectSearchComponent.prototype.setFocus = /**
     * @return {?}
     */
    function () {
        this.inputElement.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    ThfMultiselectSearchComponent.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.inputElement.nativeElement.value = '';
    };
    ThfMultiselectSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-multiselect-search', template: "<div class=\"thf-field-container-content thf-multiselect-content-search\"> <div class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-icon-search thf-field-icon\"></span> </div> <input #inputElement class=\"thf-input thf-input-icon-left\" type=\"text\" [placeholder]=\"placeholder\" (keyup)=\"onChange($event)\"> </div> ",
                },] },
    ];
    ThfMultiselectSearchComponent.propDecorators = {
        literals: [{ type: Input, args: ['t-literals',] }],
        placeholder: [{ type: Input, args: ['t-placeholder',] }],
        change: [{ type: Output, args: ['t-change',] }],
        inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef },] }]
    };
    return ThfMultiselectSearchComponent;
}());
export { ThfMultiselectSearchComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectSearchComponent.prototype._placeholder;
    /**
     * Propriedade que recebe as literais definidas no `thf-multiselect`.
     * @type {?}
     */
    ThfMultiselectSearchComponent.prototype.literals;
    /**
     * Evento que será disparado a cada tecla digitada no campo de busca.
     * @type {?}
     */
    ThfMultiselectSearchComponent.prototype.change;
    /** @type {?} */
    ThfMultiselectSearchComponent.prototype.inputElement;
}
