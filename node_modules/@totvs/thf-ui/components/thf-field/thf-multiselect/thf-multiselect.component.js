var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { ThfMultiselectBaseComponent } from './thf-multiselect-base.component';
/**
 * \@docsExtends ThfMultiselectBaseComponent
 *
 * \@example
 *
 * <example name="thf-multiselect-basic" title="Totvs Multiselect Basic">
 *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.html"> </file>
 *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-labs" title="Totvs Multiselect Labs">
 *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.html"> </file>
 *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-vacation" title="Totvs Multiselect - Vacation">
 *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.html"> </file>
 *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.ts"> </file>
 * </example>
 */
var ThfMultiselectComponent = /** @class */ (function (_super) {
    __extends(ThfMultiselectComponent, _super);
    function ThfMultiselectComponent(el, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.renderer = renderer;
        _this.disclaimerOffset = 0;
        _this.dropdownIcon = 'thf-icon-arrow-down';
        _this.dropdownOpen = false;
        _this.initialized = false;
        _this.visibleElement = false;
        _this.isCalculateVisibleItems = true;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.focus) {
            this.inputElement.nativeElement.focus();
        }
        this.initialized = true;
        this.initializeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputWidth = this.inputElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visÃ­vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
            return;
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeClickoutListener();
        this.removeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.getInputWidth = /**
     * @return {?}
     */
    function () {
        return this.el.nativeElement.querySelector('.thf-input').offsetWidth - 40;
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.getDisclaimersWidth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var disclaimers = this.el.nativeElement.querySelectorAll('thf-disclaimer');
        return Array.from(disclaimers).map(function (disclaimer) { return disclaimer['offsetWidth']; });
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.calculateVisibleItems = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var disclaimersWidth = this.getDisclaimersWidth();
        /** @type {?} */
        var inputWidth = this.getInputWidth();
        /** @type {?} */
        var extraDisclaimerSize = 38;
        /** @type {?} */
        var disclaimersVisible = disclaimersWidth[0];
        this.visibleDisclaimers = [];
        if (inputWidth > 0) {
            /** @type {?} */
            var sum = 0;
            /** @type {?} */
            var i = 0;
            for (i = 0; i < this.selectedOptions.length; i++) {
                sum += disclaimersWidth[i];
                this.visibleDisclaimers.push(this.selectedOptions[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !this.selectedOptions.length) {
                if (i === this.selectedOptions.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    this.visibleDisclaimers.splice(-2, 2);
                    /** @type {?} */
                    var label = '+' + (this.selectedOptions.length + 1 - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
                else {
                    this.visibleDisclaimers.splice(-1, 1);
                    /** @type {?} */
                    var label = '+' + (this.selectedOptions.length - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
            }
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.updateVisibleItems = /**
     * @return {?}
     */
    function () {
        this.visibleDisclaimers = [].concat(this.selectedOptions);
        this.debounceResize();
        // quando estiver dentro de modal
        if (!this.inputElement.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.debounceResize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.calculateVisibleItems();
        }, 200);
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfMultiselectComponent.prototype.onKeyDown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        // Seta para cima e para baixo
        if (event.keyCode === 38 || event.keyCode === 40) {
            event.preventDefault();
            this.controlDropdownVisibility(true);
            return;
        }
        // Tab
        if (event.keyCode === 9) {
            this.controlDropdownVisibility(false);
            return;
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.toggleDropdownVisibility = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        this.controlDropdownVisibility(!this.dropdownOpen);
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    ThfMultiselectComponent.prototype.openDropdown = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        if (toOpen && !this.disabled) {
            this.controlDropdownVisibility(true);
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    ThfMultiselectComponent.prototype.controlDropdownVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        this.dropdownIcon = toOpen ? 'thf-icon-arrow-up' : 'thf-icon-arrow-down';
        this.dropdownOpen = toOpen;
        this.dropdown.controlVisibility(toOpen);
        this.setVisibleOptionsDropdown(this.options);
        if (toOpen) {
            this.initializeClickoutListener();
            this.setPositionOpeningDropdown();
        }
        else {
            this.removeClickoutListener();
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.setPositionOpeningDropdown = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectedOptions && this.selectedOptions.length) {
            /** @type {?} */
            var index = this.options.findIndex(function (option) { return option.value === _this.selectedOptions[0].value; });
            this.dropdown.scrollTo(index);
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    ThfMultiselectComponent.prototype.setVisibleOptionsDropdown = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.visibleOptionsDropdown = options;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectComponent.prototype.changeSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.value) {
            this.searchByLabel(event.value, this.options, this.filterMode);
        }
        else {
            this.setVisibleOptionsDropdown(this.options);
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.getPlaceholder = /**
     * @return {?}
     */
    function () {
        return (this.placeholder && !this.visibleDisclaimers.length) ? this.placeholder : '';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMultiselectComponent.prototype.closeDisclaimer = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var index = this.selectedOptions.findIndex(function (option) { return option.value === value; });
        this.selectedOptions.splice(index, 1);
        this.updateVisibleItems();
        this.callOnChange(this.selectedOptions);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectComponent.prototype.wasClickedOnToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.dropdownElement.nativeElement.contains(event.target) &&
            !this.disclaimerContainerElement.nativeElement.contains(event.target) &&
            this.dropdownOpen) {
            this.controlDropdownVisibility(false);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectComponent.prototype.initializeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectComponent.prototype.initializeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.updateVisibleItems();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectComponent.prototype.removeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectComponent.prototype.removeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    ThfMultiselectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-multiselect', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\" [class.thf-multiselect-show]=\"dropdownOpen\"> <input #inputElement class=\"thf-input thf-input-icon-right thf-clickable\" readonly type=\"text\" [value]=\"getPlaceholder()\" [disabled]=\"disabled\" (keydown)=\"onKeyDown($event)\" (click)=\"toggleDropdownVisibility()\"> <div class=\"thf-field-icon-container-right\"> <span #iconElement class=\"thf-icon thf-field-icon {{ dropdownIcon }}\" [ngClass]=\"disabled ? 'thf-field-icon-disabled' : ''\" (click)=\"toggleDropdownVisibility()\"> </span> </div> <div #disclaimerContainer class=\"thf-multiselect-field\" [class.thf-multiselect-field-disabled]=\"disabled\"> <thf-disclaimer *ngFor=\"let disclaimer of visibleDisclaimers\" [t-label]=\"disclaimer.label\" [t-value]=\"disclaimer.value\" [t-hide-close]=\"disclaimer.value === '' || disabled\" [class.thf-clickable]=\"disclaimer.value === '' && !disabled\" (click)=\"openDropdown(disclaimer.value === '')\" (t-close-action)=\"closeDisclaimer(disclaimer.value)\"> </thf-disclaimer> </div> <thf-multiselect-dropdown #dropdownElement [t-hide-search]=\"hideSearch\" [t-literals]=\"literals\" [t-options]=\"visibleOptionsDropdown\" [t-selected-values]=\"getValuesFromOptions(selectedOptions)\" [t-placeholder-search]=\"placeholderSearch\" (t-change)=\"changeItems($event)\" (t-change-search)=\"changeSearch($event)\" (t-close-dropdown)=\"controlDropdownVisibility(false)\"> </thf-multiselect-dropdown> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfMultiselectComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfMultiselectComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfMultiselectComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ThfMultiselectComponent.propDecorators = {
        dropdownElement: [{ type: ViewChild, args: ['dropdownElement', { read: ElementRef },] }],
        dropdown: [{ type: ViewChild, args: ['dropdownElement',] }],
        disclaimerContainerElement: [{ type: ViewChild, args: ['disclaimerContainer', { read: ElementRef },] }],
        iconElement: [{ type: ViewChild, args: ['iconElement', { read: ElementRef },] }],
        inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef },] }]
    };
    return ThfMultiselectComponent;
}(ThfMultiselectBaseComponent));
export { ThfMultiselectComponent };
if (false) {
    /** @type {?} */
    ThfMultiselectComponent.prototype.dropdownElement;
    /** @type {?} */
    ThfMultiselectComponent.prototype.dropdown;
    /** @type {?} */
    ThfMultiselectComponent.prototype.disclaimerContainerElement;
    /** @type {?} */
    ThfMultiselectComponent.prototype.iconElement;
    /** @type {?} */
    ThfMultiselectComponent.prototype.inputElement;
    /** @type {?} */
    ThfMultiselectComponent.prototype.disclaimerOffset;
    /** @type {?} */
    ThfMultiselectComponent.prototype.dropdownIcon;
    /** @type {?} */
    ThfMultiselectComponent.prototype.dropdownOpen;
    /** @type {?} */
    ThfMultiselectComponent.prototype.initialized;
    /** @type {?} */
    ThfMultiselectComponent.prototype.positionDisclaimerExtra;
    /** @type {?} */
    ThfMultiselectComponent.prototype.timeoutResize;
    /** @type {?} */
    ThfMultiselectComponent.prototype.visibleElement;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectComponent.prototype.isCalculateVisibleItems;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectComponent.prototype.el;
    /** @type {?} */
    ThfMultiselectComponent.prototype.renderer;
}
