var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';
/**
 * @abstract
 */
var /**
 * @abstract
 */
ThfNumberBaseComponent = /** @class */ (function (_super) {
    __extends(ThfNumberBaseComponent, _super);
    function ThfNumberBaseComponent(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.type = 'number';
        return _this;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.eventOnInput = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.mask) {
            /** @type {?} */
            var value = e.target.value;
            /** @type {?} */
            var valueMaxlength = this.validMaxLength(this.maxlength, value);
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        if (maxlength && value.length > maxlength) {
            /** @type {?} */
            var substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else { // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.isEndWithDot = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.formatNumber = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value ? Number(value) : null;
    };
    return ThfNumberBaseComponent;
}(ThfInputGeneric));
/**
 * @abstract
 */
export { ThfNumberBaseComponent };
if (false) {
    /** @type {?} */
    ThfNumberBaseComponent.prototype.type;
}
