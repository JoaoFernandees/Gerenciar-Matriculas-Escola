var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { minFailed, maxFailed } from '../validators';
import { ThfNumberBaseComponent } from './thf-number-base.component';
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 *
 * thf-number é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com t-min, t-max e t-step,
 * respectivamente.
 *
 * \@example
 *
 * <example name="thf-number-basic" title="Totvs Number Basic">
 *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.html"> </file>
 *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-number-labs" title="Totvs Number Labs">
 *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.html"> </file>
 *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-number-calculate" title="Totvs Number - Calculate">
 *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.html"> </file>
 *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.ts"> </file>
 * </example>
 */
var ThfNumberComponent = /** @class */ (function (_super) {
    __extends(ThfNumberComponent, _super);
    function ThfNumberComponent(el) {
        var _this = _super.call(this, el) || this;
        /**
         * \@optional
         *
         * \@description
         *
         * Intervalo.
         *
         * \@default 1
         */
        _this.step = '1';
        return _this;
    }
    Object.defineProperty(ThfNumberComponent.prototype, "setMin", {
        set: /**
         * @param {?} min
         * @return {?}
         */
        function (min) {
            /** @type {?} */
            var parsedInt = parseInt(min, 10);
            this.min = !isNaN(parsedInt) ? parsedInt : undefined;
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfNumberComponent.prototype, "setMax", {
        set: /**
         * @param {?} max
         * @return {?}
         */
        function (max) {
            /** @type {?} */
            var parsedInt = parseInt(max, 10);
            this.max = !isNaN(parsedInt) ? parsedInt : undefined;
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfNumberComponent.prototype.extraValidation = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (minFailed(this.min, abstractControl.value)) {
            return { min: {
                    valid: false,
                } };
        }
        if (maxFailed(this.max, abstractControl.value)) {
            return { max: {
                    valid: false,
                } };
        }
        return null;
    };
    ThfNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-number', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <input #inp class=\"thf-input\" type=\"number\" [attr.max]=\"max\" [attr.min]=\"min\" [attr.name]=\"name\" [attr.step]=\"step\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [tabindex]=\"disabled ? -1 : 0\" (blur)=\"eventOnBlur($event)\" (focus)=\"eventOnFocus($event)\" (input)=\"eventOnInput($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean [t-default-value]=\"null\" [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"> </thf-clean> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfNumberComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfNumberComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfNumberComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ThfNumberComponent.propDecorators = {
        setMin: [{ type: Input, args: ['t-min',] }],
        setMax: [{ type: Input, args: ['t-max',] }],
        step: [{ type: Input, args: ['t-step',] }]
    };
    return ThfNumberComponent;
}(ThfNumberBaseComponent));
export { ThfNumberComponent };
if (false) {
    /**
     * Valor mínimo
     * @type {?}
     */
    ThfNumberComponent.prototype.min;
    /**
     * Valor máximo
     * @type {?}
     */
    ThfNumberComponent.prototype.max;
    /**
     * \@optional
     *
     * \@description
     *
     * Intervalo.
     *
     * \@default 1
     * @type {?}
     */
    ThfNumberComponent.prototype.step;
}
