var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, ElementRef, forwardRef, Input } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 * O thf-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
 *
 * \@example
 *
 * <example name="thf-password-basic" title="Totvs Password Basic">
 *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.html"> </file>
 *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-password-labs" title="Totvs Password Labs">
 *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.html"> </file>
 *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-password-reset" title="Totvs Password - Reset">
 *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.html"> </file>
 *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.ts"> </file>
 * </example>
 */
var ThfPasswordComponent = /** @class */ (function (_super) {
    __extends(ThfPasswordComponent, _super);
    function ThfPasswordComponent(el) {
        var _this = _super.call(this, el) || this;
        _this._hidePasswordPeek = false;
        _this.type = 'password';
        _this.visiblePassword = false;
        return _this;
    }
    Object.defineProperty(ThfPasswordComponent.prototype, "hidePasswordPeek", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hidePasswordPeek;
        },
        /**
         * @optional
         *
         * @description
         *
         * Permite esconder a função de espiar a senha digitada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Permite esconder a função de espiar a senha digitada.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hidePasswordPeek = convertToBoolean(value);
            if (value) {
                this.visiblePassword = false;
                this.type = 'password';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} c
     * @return {?}
     */
    ThfPasswordComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @return {?}
     */
    ThfPasswordComponent.prototype.showPassword = /**
     * @return {?}
     */
    function () {
        this.visiblePassword = !this.visiblePassword;
        this.type = this.type === 'password' ? 'text' : 'password';
    };
    ThfPasswordComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-password', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <div class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-field-icon thf-icon-lock\" [class.thf-field-icon-disabled]=\"disabled\"> </span> </div> <input #inp class=\"thf-input thf-input-icon-left\" [ngClass]=\"clean && inp.value && !hidePasswordPeek ? 'thf-input-double-icon-right' : 'thf-input-icon-right'\" [attr.name]=\"name\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [type]=\"disabled ? 'password' : type\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" (focus)=\"eventOnFocus($event)\" (input)=\"eventOnInput($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean  class=\"thf-icon thf-field-icon\" [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"> </thf-clean> <span *ngIf=\"!hidePasswordPeek && !disabled\" class=\"thf-icon thf-field-icon\" [ngClass]=\"visiblePassword ? 'thf-icon-eye' : 'thf-icon-eye-off thf-field-icon-disabled'\" (click)=\"showPassword()\"> </span> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfPasswordComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfPasswordComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfPasswordComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ThfPasswordComponent.propDecorators = {
        hidePasswordPeek: [{ type: Input, args: ['t-hide-password-peek',] }]
    };
    return ThfPasswordComponent;
}(ThfInputGeneric));
export { ThfPasswordComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPasswordComponent.prototype._hidePasswordPeek;
    /** @type {?} */
    ThfPasswordComponent.prototype.type;
    /** @type {?} */
    ThfPasswordComponent.prototype.visiblePassword;
}
