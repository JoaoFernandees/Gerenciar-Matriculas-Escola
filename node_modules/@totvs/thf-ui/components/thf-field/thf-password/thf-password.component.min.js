var __extends=this&&this.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();import{NG_VALIDATORS,NG_VALUE_ACCESSOR}from"@angular/forms";import{Component,ElementRef,forwardRef,Input}from"@angular/core";import{convertToBoolean}from"../../../utils/util";import{ThfInputGeneric}from"../thf-input-generic/thf-input-generic";var ThfPasswordComponent=function(e){function t(t){var n=e.call(this,t)||this;return n._hidePasswordPeek=!1,n.type="password",n.visiblePassword=!1,n}return __extends(t,e),Object.defineProperty(t.prototype,"hidePasswordPeek",{get:function(){return this._hidePasswordPeek},set:function(e){this._hidePasswordPeek=convertToBoolean(e),e&&(this.visiblePassword=!1,this.type="password")},enumerable:!0,configurable:!0}),t.prototype.extraValidation=function(e){return null},t.prototype.showPassword=function(){this.visiblePassword=!this.visiblePassword,this.type="password"===this.type?"text":"password"},t.decorators=[{type:Component,args:[{selector:"thf-password",template:'<thf-field-container [t-label]="label" [t-help]="help" [t-opcional]="!required"> <div class="thf-field-container-content"> <div class="thf-field-icon-container-left"> <span class="thf-icon thf-field-icon thf-icon-lock" [class.thf-field-icon-disabled]="disabled"> </span> </div> <input #inp class="thf-input thf-input-icon-left" [ngClass]="clean && inp.value && !hidePasswordPeek ? \'thf-input-double-icon-right\' : \'thf-input-icon-right\'" [attr.name]="name" [class.thf-input-icon-right]="clean" [disabled]="disabled" [placeholder]="placeholder" [readonly]="readonly" [required]="required" [type]="disabled ? \'password\' : type" (blur)="eventOnBlur($event)" (click)="eventOnClick($event)" (focus)="eventOnFocus($event)" (input)="eventOnInput($event)"> <div class="thf-field-icon-container-right"> <thf-clean  class="thf-icon thf-field-icon" [t-element-ref]="inputEl" (t-change-event)="clear($event)"> </thf-clean> <span *ngIf="!hidePasswordPeek && !disabled" class="thf-icon thf-field-icon" [ngClass]="visiblePassword ? \'thf-icon-eye\' : \'thf-icon-eye-off thf-field-icon-disabled\'" (click)="showPassword()"> </span> </div> </div> <thf-field-container-bottom [t-error-pattern]="getErrorPattern()"> </thf-field-container-bottom> </thf-field-container> ',providers:[{provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(function(){return t}),multi:!0},{provide:NG_VALIDATORS,useExisting:forwardRef(function(){return t}),multi:!0}]}]}],t.ctorParameters=function(){return[{type:ElementRef}]},t.propDecorators={hidePasswordPeek:[{type:Input,args:["t-hide-password-peek"]}]},t}(ThfInputGeneric);export{ThfPasswordComponent};