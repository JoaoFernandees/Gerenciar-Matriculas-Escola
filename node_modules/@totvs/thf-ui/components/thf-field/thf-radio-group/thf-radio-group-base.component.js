/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, convertToInt, removeDuplicatedOptions } from '../../../utils/util';
import { requiredFailed } from '../validators';
/** @type {?} */
var thfRadioGroupColumnsDefaultLength = 6;
/** @type {?} */
var thfRadioGroupColumnsTotalLength = 12;
/**
 * \@description
 *
 * O componente `thf-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**thf-combo**](/documentation/thf-combo) ou [**thf-select**](/documentation/thf-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**thf-checkbox-group**](/documentation/thf-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 * @abstract
 */
var ThfRadioGroupBaseComponent = /** @class */ (function () {
    function ThfRadioGroupBaseComponent() {
        this._columns = thfRadioGroupColumnsDefaultLength;
        this._disabled = false;
        this._required = false;
        this.mdColumns = thfRadioGroupColumnsDefaultLength;
        this.onChangePropagate = null;
        /**
         * Evento ao alterar valor do campo.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a quantidade de colunas para exibição das opções.
         *
         * **Considerações:**
         *  - É possível exibir as opções entre `1` e `4` colunas.
         *  - O número máximo de colunas é invariável nas seguintes resoluções:
         *    + `sm`: `1`
         *    + `md`: `2`
         *
         * @default `2`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a quantidade de colunas para exibição das opções.
         *
         * **Considerações:**
         *  - É possível exibir as opções entre `1` e `4` colunas.
         *  - O número máximo de colunas é invariável nas seguintes resoluções:
         *    + `sm`: `1`
         *    + `md`: `2`
         *
         * \@default `2`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var columns = convertToInt(value, thfRadioGroupColumnsDefaultLength);
            this._columns = this.getGridSystemColumns(columns, 4);
            this.mdColumns = this.getGridSystemColumns(columns, 2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * Lista de opções que serão exibidas.
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfRadioGroupOption.
         */
        set: /**
         * Lista de opções que serão exibidas.
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfRadioGroupOption.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = value;
            removeDuplicatedOptions(this.options);
        },
        enumerable: true,
        configurable: true
    });
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    /**
     * @param {?} changedValue
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.changeValue = 
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    /**
     * @param {?} changedValue
     * @return {?}
     */
    function (changedValue) {
        if (this.onChangePropagate) {
            this.onChangePropagate(changedValue);
        }
        if (this.value !== changedValue) {
            this.change.emit(changedValue);
        }
        this.value = changedValue;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangePropagate = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @param {?} modelValue
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.writeValue = /**
     * @param {?} modelValue
     * @return {?}
     */
    function (modelValue) {
        this.value = modelValue;
        // Busca radio com o valor especificado
        /** @type {?} */
        var element = this.getElementByValue(modelValue);
        if (!element && this.onChangePropagate) {
            this.value = undefined;
            this.onChangePropagate(this.value);
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.checkColumnsRange = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.getGridSystemColumns = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var gridSystemColumns = thfRadioGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : thfRadioGroupColumnsDefaultLength;
    };
    /**
     * @private
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.validateModel = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    ThfRadioGroupBaseComponent.propDecorators = {
        name: [{ type: Input, args: ['name',] }],
        columns: [{ type: Input, args: ['t-columns',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        required: [{ type: Input, args: ['t-required',] }],
        options: [{ type: Input, args: ['t-options',] }],
        change: [{ type: Output, args: ['t-change',] }]
    };
    return ThfRadioGroupBaseComponent;
}());
export { ThfRadioGroupBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfRadioGroupBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    ThfRadioGroupBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfRadioGroupBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    ThfRadioGroupBaseComponent.prototype._options;
    /** @type {?} */
    ThfRadioGroupBaseComponent.prototype.mdColumns;
    /** @type {?} */
    ThfRadioGroupBaseComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    ThfRadioGroupBaseComponent.prototype.onChangePropagate;
    /**
     * @type {?}
     * @private
     */
    ThfRadioGroupBaseComponent.prototype.validatorChange;
    /**
     * Nome das opções.
     * @type {?}
     */
    ThfRadioGroupBaseComponent.prototype.name;
    /**
     * Evento ao alterar valor do campo.
     * @type {?}
     */
    ThfRadioGroupBaseComponent.prototype.change;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.getElementByValue = function (value) { };
}
