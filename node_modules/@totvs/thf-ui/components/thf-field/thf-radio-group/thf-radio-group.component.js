var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input, IterableDiffers, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { removeDuplicatedOptions } from '../../../utils/util';
import { ThfRadioGroupBaseComponent } from './thf-radio-group-base.component';
/**
 * \@docsExtends ThfRadioGroupBaseComponent
 *
 * \@example
 *
 * <example name="thf-radio-group-basic" title="Totvs Radio Group Basic">
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.html"> </file>
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.ts"> </file>
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-radio-group-labs" title="Totvs Radio Group Labs">
 *  <file name="sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.html"> </file>
 *  <file name="sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-radio-group-translator" title="Totvs Radio Group - Translator">
 *  <file name="sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.html"> </file>
 *  <file name="sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.ts"> </file>
 * </example>
 *
 * <example name="thf-radio-group-translator-reactive-form" title="Totvs Radio Group - Translator Reactive Form">
 *  <file name="sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.html"> </file>
 *  <file name="sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.ts"> </file>
 * </example>
 *
 */
var ThfRadioGroupComponent = /** @class */ (function (_super) {
    __extends(ThfRadioGroupComponent, _super);
    function ThfRadioGroupComponent(differs) {
        var _this = _super.call(this) || this;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
        }
    };
    /**
     * @param {?} value
     * @param {?} disabled
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.eventClick = /**
     * @param {?} value
     * @param {?} disabled
     * @return {?}
     */
    function (value, disabled) {
        if (!disabled) {
            this.changeValue(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.getElementByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.inputEl.nativeElement.querySelector("input[value='" + value + "']");
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.onKeyUp = /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    function (event, value) {
        /** @type {?} */
        var key = event.keyCode || event.which;
        if (this.isArrowKey(key)) {
            this.changeValue(value);
        }
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.isArrowKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return key >= 37 && key <= 40;
    };
    ThfRadioGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-radio-group', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-row thf-pt-1 thf-pb-1\" #inp> <div *ngFor=\"let option of options\" class=\"thf-radio-group-item thf-md-{{ mdColumns }} thf-lg-{{ columns }}\"> <input #input class=\"thf-radio-group-input\" type=\"radio\" [attr.name]=\"name\" [checked]=\"value === option.value\" [class.thf-radio-group-input-checked]=\"value === option.value\" [disabled]=\"option.disabled === true || disabled\" [readonly]=\"readonly\" [required]=\"required\" [value]=\"option.value\" (keyup)=\"onKeyUp($event, option.value)\"> <label class=\"thf-radio-group-label\" [class.thf-clickable]=\"!input.disabled\" [for]=\"name\" (click)=\"eventClick(option.value, option.disabled === true || disabled)\"> {{ option.label }} </label> </div> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfRadioGroupComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfRadioGroupComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfRadioGroupComponent.ctorParameters = function () { return [
        { type: IterableDiffers }
    ]; };
    ThfRadioGroupComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        help: [{ type: Input, args: ['t-help',] }],
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef },] }]
    };
    return ThfRadioGroupComponent;
}(ThfRadioGroupBaseComponent));
export { ThfRadioGroupComponent };
if (false) {
    /**
     * Label do campo.
     * @type {?}
     */
    ThfRadioGroupComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    ThfRadioGroupComponent.prototype.help;
    /** @type {?} */
    ThfRadioGroupComponent.prototype.inputEl;
    /** @type {?} */
    ThfRadioGroupComponent.prototype.differ;
}
