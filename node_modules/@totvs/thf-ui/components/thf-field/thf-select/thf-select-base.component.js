/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions } from '../../../utils/util';
import { requiredFailed } from '../validators';
/**
 * \@description
 *
 * O componente thf-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O thf-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O thf-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[t-select-option-template](/documentation/thf-select-option-template)**.
 * @abstract
 */
var ThfSelectBaseComponent = /** @class */ (function () {
    function ThfSelectBaseComponent(element, changeDetector) {
        this.element = element;
        this._disabled = false;
        this._required = false;
        /**
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        this.readyToValidation = false;
        this.element = element;
        this.changeDetector = changeDetector;
    }
    Object.defineProperty(ThfSelectBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface ThfSelectOption.
         * Caso esta lista estiver vazia, o model será undefined.
         */
        set: /**
         * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface ThfSelectOption.
         * Caso esta lista estiver vazia, o model será undefined.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = options;
            removeDuplicatedOptions(this._options);
            removeUndefinedAndNullOptions(this._options);
            this.onUpdateOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSelectBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSelectBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.callModelChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.change.emit(value);
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this._required, this._disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
        return null;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onValidatorChange = fn;
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.validateModel = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.onValidatorChange) {
            this.onValidatorChange();
        }
    };
    ThfSelectBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        name: [{ type: Input, args: ['name',] }],
        help: [{ type: Input, args: ['t-help',] }],
        placeholder: [{ type: Input, args: ['t-placeholder',] }],
        options: [{ type: Input, args: ['t-options',] }],
        change: [{ type: Output, args: ['t-change',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        required: [{ type: Input, args: ['t-required',] }]
    };
    return ThfSelectBaseComponent;
}());
export { ThfSelectBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfSelectBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfSelectBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    ThfSelectBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    ThfSelectBaseComponent.prototype.onValidatorChange;
    /**
     * Adiciona uma label no componente.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.label;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.name;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.help;
    /**
     * Mensagem que aparecerá enquanto nenhuma opção estiver selecionada.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.placeholder;
    /**
     * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.change;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.ngModelChange;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.changeDetector;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.onModelChange;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.onModelTouched;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.readyToValidation;
    /**
     * @type {?}
     * @protected
     */
    ThfSelectBaseComponent.prototype.clickoutListener;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.element;
    /**
     * @abstract
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.onUpdateOptions = function () { };
    /**
     * @abstract
     * @param {?} selectOption
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.updateModel = function (selectOption) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.writeValue = function (value) { };
}
