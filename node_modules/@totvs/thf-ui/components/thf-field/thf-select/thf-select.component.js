var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, ContentChild, Component, ElementRef, forwardRef, HostListener, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { isMobile, removeDuplicatedOptions, removeUndefinedAndNullOptions, validValue } from '../../../utils/util';
import { ThfControlPositionService } from './../../../services/thf-control-position/thf-control-position.service';
import { ThfSelectBaseComponent } from './thf-select-base.component';
import { ThfSelectOptionTemplateDirective } from './thf-select-option-template/thf-select-option-template.directive';
/** @type {?} */
var thfSelectContentOffset = 8;
/** @type {?} */
var thfSelectContentPositionDefault = 'bottom';
/**
 * \@docsExtends ThfSelectBaseComponent
 *
 * \@example
 *
 * <example name="thf-select-basic" title="Totvs Select Basic">
 *   <file name="sample-thf-select-basic/sample-thf-select-basic.component.html"> </file>
 *   <file name="sample-thf-select-basic/sample-thf-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-select-labs" title="Totvs Select Labs">
 *   <file name="sample-thf-select-labs/sample-thf-select-labs.component.html"> </file>
 *   <file name="sample-thf-select-labs/sample-thf-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-select-customer-registration" title="Totvs Select - Customer registration">
 *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.html"> </file>
 *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.ts"> </file>
 *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.service.ts"> </file>
 *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.po.ts'> </file>
 * </example>
 */
var ThfSelectComponent = /** @class */ (function (_super) {
    __extends(ThfSelectComponent, _super);
    function ThfSelectComponent(element, changeDetector, differs, renderer, controlPosition) {
        var _this = _super.call(this, element, changeDetector) || this;
        _this.renderer = renderer;
        _this.controlPosition = controlPosition;
        _this.isMobile = isMobile();
        _this.open = false;
        _this.selectIcon = 'thf-icon-arrow-down';
        _this.onScroll = function () {
            _this.controlPosition.adjustPosition(thfSelectContentPositionDefault);
        };
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfSelectComponent.prototype.onKeydown = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var charCode = $event.which || $event.keyCode;
        // Seleciona os itens com as teclas "up" e "down"
        if ((!this.open || $event.altKey) && (charCode === 40 || charCode === 38)) {
            this.disableDefaultEventAndToggleButton();
        }
        // Abre o thf-select com as teclas "enter" e "espaço"
        if (charCode === 13 || charCode === 32) {
            this.disableDefaultEventAndToggleButton();
        }
        // Fecha o thf-select com a tecla "tab"
        if (this.open && charCode === 9) {
            $event.preventDefault();
            this.toggleButton();
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
            removeUndefinedAndNullOptions(this.options);
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.hideDropDown = /**
     * @return {?}
     */
    function () {
        this.selectIcon = 'thf-icon-arrow-down';
        this.selector('.thf-select-container').classList.remove('thf-select-show');
        this.open = false;
        this.changeDetector.markForCheck();
        this.removeListeners();
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    ThfSelectComponent.prototype.isEqual = /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.onOptionClick = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        this.toggleButton();
        this.updateModel(option);
    };
    // Altera o valor ao selecionar um item.
    // Altera o valor ao selecionar um item.
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.onSelectChange = 
    // Altera o valor ao selecionar um item.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');
        if (value && this.options && this.options.length) {
            /** @type {?} */
            var optionFound = this.options.find(function (option) {
                return _this.isEqual(option.value, value);
            });
            if (optionFound) {
                /** @type {?} */
                var index = this.options.indexOf(optionFound);
                ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
                this.updateModel(optionFound);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.onUpdateOptions = /**
     * @return {?}
     */
    function () {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    };
    /**
     * @param {?} index
     * @param {?} clientHeight
     * @return {?}
     */
    ThfSelectComponent.prototype.scrollValue = /**
     * @param {?} index
     * @param {?} clientHeight
     * @return {?}
     */
    function (index, clientHeight) {
        /** @type {?} */
        var heightScrollValue = (index + 1) * this.getSelectItemHeight();
        return this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfSelectComponent.prototype.selector = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.toggleButton = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');
        this.selectElement.nativeElement.focus();
        this.selectIcon = this.open ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
        this.changeDetector.markForCheck();
        if (this.options && this.options.length) {
            this.selector('.thf-select-container').classList.toggle('thf-select-show');
            ulDropdpwn.scrollTop = this.scrollPosition;
        }
        this.open = !this.open;
        if (this.open) {
            this.setPositionDropdown();
            this.initializeListeners();
        }
        else {
            this.removeListeners();
        }
    };
    // Atualiza valores
    // Atualiza valores
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.updateModel = 
    // Atualiza valores
    /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (this.selectedValue !== option.value) {
            this.selectedValue = option.value;
            this.selectElement.nativeElement.value = option.value;
            this.callModelChange(option.value);
            this.displayValue = option.label;
            this.onChange(option.value);
        }
    };
    // Esconde Content do Select quando for clicado fora
    // Esconde Content do Select quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    ThfSelectComponent.prototype.wasClickedOnToggle = 
    // Esconde Content do Select quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    };
    // Recebe as alterações do model
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.writeValue = 
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var optionFound = this.options.find(function (option) {
            return _this.isEqual(option.value, value);
        });
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound.value;
            this.displayValue = (optionFound.label);
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.callModelChange(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    };
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.disableDefaultEventAndToggleButton = 
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectElement.nativeElement.style.display = 'none';
        setTimeout(function () {
            _this.selectElement.nativeElement.style.display = 'block';
            _this.toggleButton();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.getSelectItemHeight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectItem = this.selector('div.thf-select-item');
        return selectItem && selectItem.clientHeight;
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
            _this.hideDropDown();
        });
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        this.eventResizeListener();
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.setPositionDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.setElements(this.contentList.nativeElement, thfSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
        this.controlPosition.adjustPosition(thfSelectContentPositionDefault);
    };
    ThfSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-select', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <select #select class=\"thf-select\" [attr.name]=\"name\" [disabled]=\"disabled\" [ngClass]=\"{'thf-select-mobile' : isMobile}\" [required]=\"required\" (change)=\"onSelectChange($event.target.value)\"> <option *ngIf=\"isMobile\" disabled hidden selected></option> <option *ngFor=\"let option of options\" [value]=\"option.value\" (click)=\"onOptionClick(option)\"> {{option?.label}} </option> </select> <div class=\"thf-select-container\"> <div #selectButton class=\"thf-select-button\" [ngClass]=\"{'thf-select-button-disabled' : disabled}\" (click)=\"toggleButton()\"> <span>{{displayValue || placeholder}}</span> <div class=\"thf-field-icon-container-right\"> <span #icon class=\"thf-icon {{selectIcon}}\" [ngClass]=\"disabled ? 'thf-field-icon-disabled' : 'thf-field-icon'\"></span> </div> </div> <ul #contentList class=\"thf-select-content\" [ngClass]=\"{'thf-invisible': isMobile}\"> <li *ngFor=\"let option of options\" [class.thf-select-item-selected]=\"selectedValue == option.value\" [value]=\"option.value\" (click)=\"onOptionClick(option)\"> <div class=\"thf-select-item\"> <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container> <ng-template #defaultOptionTemplate> <span>{{option?.label}}</span> </ng-template> <ng-template #optionTemplate [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\" [ngTemplateOutletContext]=\"{$implicit: option}\"> </ng-template> </div> </li> </ul> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfSelectComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfSelectComponent; }),
                            multi: true,
                        },
                        ThfControlPositionService
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfSelectComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IterableDiffers },
        { type: Renderer2 },
        { type: ThfControlPositionService }
    ]; };
    ThfSelectComponent.propDecorators = {
        selectOptionTemplate: [{ type: ContentChild, args: [ThfSelectOptionTemplateDirective,] }],
        contentList: [{ type: ViewChild, args: ['contentList', { read: ElementRef },] }],
        iconElement: [{ type: ViewChild, args: ['icon', { read: ElementRef },] }],
        selectElement: [{ type: ViewChild, args: ['select', { read: ElementRef },] }],
        selectButtonElement: [{ type: ViewChild, args: ['selectButton', { read: ElementRef },] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return ThfSelectComponent;
}(ThfSelectBaseComponent));
export { ThfSelectComponent };
if (false) {
    /** @type {?} */
    ThfSelectComponent.prototype.displayValue;
    /** @type {?} */
    ThfSelectComponent.prototype.isMobile;
    /** @type {?} */
    ThfSelectComponent.prototype.modelValue;
    /** @type {?} */
    ThfSelectComponent.prototype.open;
    /** @type {?} */
    ThfSelectComponent.prototype.selectedValue;
    /** @type {?} */
    ThfSelectComponent.prototype.selectIcon;
    /** @type {?} */
    ThfSelectComponent.prototype.scrollPosition;
    /**
     * @type {?}
     * @private
     */
    ThfSelectComponent.prototype.differ;
    /** @type {?} */
    ThfSelectComponent.prototype.eventListenerFunction;
    /** @type {?} */
    ThfSelectComponent.prototype.eventResizeListener;
    /** @type {?} */
    ThfSelectComponent.prototype.selectOptionTemplate;
    /** @type {?} */
    ThfSelectComponent.prototype.contentList;
    /** @type {?} */
    ThfSelectComponent.prototype.iconElement;
    /** @type {?} */
    ThfSelectComponent.prototype.selectElement;
    /** @type {?} */
    ThfSelectComponent.prototype.selectButtonElement;
    /**
     * @type {?}
     * @private
     */
    ThfSelectComponent.prototype.onScroll;
    /** @type {?} */
    ThfSelectComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfSelectComponent.prototype.controlPosition;
}
