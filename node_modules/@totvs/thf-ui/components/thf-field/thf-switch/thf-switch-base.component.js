/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { ThfSwitchLabelPosition } from './thf-switch-label-position.enum';
/**
 * \@description
 *
 * O componente `thf-switch` é um [checkbox](/documentation/thf-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
var ThfSwitchBaseComponent = /** @class */ (function () {
    function ThfSwitchBaseComponent() {
        this._disabled = false;
        this.switchValue = false;
        /**
         * Texto exibido quando o valor do componente for `true`.
         *
         * \@default `true`
         */
        this.labelOn = 'true';
        /**
         * Texto exibido quando o valor do componente for `false`.
         *
         * \@default `false`
         */
        this.labelOff = 'false';
        /**
         * \@optional
         *
         * \@description
         *
         * Posição de exibição do rótulo.
         *
         * > Por padrão exibe à direita.
         */
        this.labelPosition = ThfSwitchLabelPosition.Right;
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOn", {
        set: /**
         * @param {?} label
         * @return {?}
         */
        function (label) {
            this.labelOn = label || 'true';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOff", {
        set: /**
         * @param {?} label
         * @return {?}
         */
        function (label) {
            this.labelOff = label || 'false';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelPosition", {
        set: /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this.labelPosition = (position in ThfSwitchLabelPosition) ? parseInt((/** @type {?} */ (position)), 10) : ThfSwitchLabelPosition.Right;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica se o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica se o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.changeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.switchValue !== value) {
            this.switchValue = value;
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(this.switchValue);
        }
    };
    /**
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.eventClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.changeValue(!this.switchValue);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.switchValue) {
            this.switchValue = !!value;
        }
    };
    ThfSwitchBaseComponent.propDecorators = {
        name: [{ type: Input, args: ['name',] }],
        label: [{ type: Input, args: ['t-label',] }],
        help: [{ type: Input, args: ['t-help',] }],
        setLabelOn: [{ type: Input, args: ['t-label-on',] }],
        setLabelOff: [{ type: Input, args: ['t-label-off',] }],
        setLabelPosition: [{ type: Input, args: ['t-label-position',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        required: [{ type: Input, args: ['t-required',] }],
        change: [{ type: Output, args: ['t-change',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
    };
    return ThfSwitchBaseComponent;
}());
export { ThfSwitchBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfSwitchBaseComponent.prototype._disabled;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.propagateChange;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.switchValue;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.name;
    /**
     * Rótulo exibido pelo componente.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.help;
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * \@default `true`
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelOn;
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelOff;
    /**
     * \@optional
     *
     * \@description
     *
     * Posição de exibição do rótulo.
     *
     * > Por padrão exibe à direita.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelPosition;
    /**
     * @deprecated 4.x.x
     *
     * \@optional
     *
     * \@description
     *
     * Indica se o campo será obrigatório.
     *
     * \@default `false`
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.required;
    /**
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.change;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.ngModelChange;
}
