var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThfTextareaBaseComponent } from './thf-textarea-base.component';
/**
 * \@docsExtends ThfTextareaBaseComponent
 *
 * \@example
 *
 * <example name="thf-textarea-basic" title="Totvs Textarea Basic" >
 *  <file name="sample-thf-textarea-basic/sample-thf-textarea-basic.component.html"> </file>
 *  <file name="sample-thf-textarea-basic/sample-thf-textarea-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-textarea-labs" title="Totvs Textarea Labs" >
 *  <file name="sample-thf-textarea-labs/sample-thf-textarea-labs.component.html"> </file>
 *  <file name="sample-thf-textarea-labs/sample-thf-textarea-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-textarea-email" title="Totvs Textarea - Email" >
 *  <file name="sample-thf-textarea-email/sample-thf-textarea-email.component.html"> </file>
 *  <file name="sample-thf-textarea-email/sample-thf-textarea-email.component.ts"> </file>
 * </example>
 *
 * <example name="thf-textarea-email-reactive-form" title="Totvs Textarea - Email Reactive Form" >
 *  <file name="sample-thf-textarea-email-reactive-form/sample-thf-textarea-email-reactive-form.component.html"> </file>
 *  <file name="sample-thf-textarea-email-reactive-form/sample-thf-textarea-email-reactive-form.component.ts"> </file>
 * </example>
 *
 */
var ThfTextareaComponent = /** @class */ (function (_super) {
    __extends(ThfTextareaComponent, _super);
    function ThfTextareaComponent() {
        var _this = _super.call(this) || this;
        _this.fireChange = false;
        return _this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ThfTextareaComponent.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl) {
            if (!value) {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
            else {
                this.inputEl.nativeElement.value = value;
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.change.emit(value);
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    ThfTextareaComponent.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        return (maxlength && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfTextareaComponent.prototype.eventOnInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = this.validMaxLength(this.maxlength, event.target.value);
        this.callOnChange(value);
        this.inputEl.nativeElement.value = value;
    };
    /**
     * @return {?}
     */
    ThfTextareaComponent.prototype.eventOnFocus = /**
     * @return {?}
     */
    function () {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    /**
     * @return {?}
     */
    ThfTextareaComponent.prototype.eventOnBlur = /**
     * @return {?}
     */
    function () {
        this.blur.emit();
        this.controlChangeEmitter();
    };
    /**
     * @return {?}
     */
    ThfTextareaComponent.prototype.controlChangeEmitter = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elementValue = this.inputEl.nativeElement.value;
        if (elementValue !== this.valueBeforeChange) {
            this.change.emit(elementValue);
        }
    };
    ThfTextareaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-textarea', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <textarea #inp class=\"thf-textarea\" (blur)=\"eventOnBlur()\" (focus)=\"eventOnFocus()\" (input)=\"eventOnInput($event)\" [attr.name]=\"name\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [rows]=\"rows\"> </textarea> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfTextareaComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfTextareaComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfTextareaComponent.ctorParameters = function () { return []; };
    ThfTextareaComponent.propDecorators = {
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef },] }]
    };
    return ThfTextareaComponent;
}(ThfTextareaBaseComponent));
export { ThfTextareaComponent };
if (false) {
    /** @type {?} */
    ThfTextareaComponent.prototype.inputEl;
    /** @type {?} */
    ThfTextareaComponent.prototype.valueBeforeChange;
    /** @type {?} */
    ThfTextareaComponent.prototype.fireChange;
}
