var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, thfLocaleDefault } from '../../../utils/util';
import { requiredFailed } from '../validators';
/** @type {?} */
export var thfUploadLiteralsDefault = {
    en: (/** @type {?} */ ({
        selectFile: 'Select file',
        deleteFile: 'Delete',
        cancel: 'Cancel',
        tryAgain: 'Try again',
        startSending: 'Start sending'
    })),
    es: (/** @type {?} */ ({
        selectFile: 'Seleccionar archivo',
        deleteFile: 'Borrar',
        cancel: 'Cancelar',
        tryAgain: 'Intentar de nuevo',
        startSending: 'Iniciar carga'
    })),
    pt: (/** @type {?} */ ({
        selectFile: 'Selecionar arquivo',
        deleteFile: 'Excluir',
        cancel: 'Cancelar',
        tryAgain: 'Tentar Novamente',
        startSending: 'Iniciar envio'
    }))
};
/** @type {?} */
var thfUploadFormFieldDefault = 'files';
/**
 * \@description
 *
 * O componente thf-upload permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 * @abstract
 */
var ThfUploadBaseComponent = /** @class */ (function () {
    function ThfUploadBaseComponent() {
        /**
         * Define o valor do atributo name do componente.
         */
        this.name = 'file';
        /**
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         */
        this.autoUpload = false;
        /**
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição.
         * Por exemplo:
         * event.data = {id: 'id do usuario'};
         */
        this.onUpload = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * Por parâmetro será passado o objeto do retorno que é do tipo HttpErrorResponse.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * Por parâmetro será passado o objeto do retorno que é do tipo HttpResponse.
         */
        this.onSuccess = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(ThfUploadBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfUploadLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    selectFile: 'Buscar arquivo',
         *    deleteFile: 'Deletar',
         *    cancel: 'Desistir',
         *    tryAgain: 'Recomeçar',
         *    startSending: 'Enviar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-upload
         *   [t-literals]="customLiterals">
         * </thf-upload>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    selectFile: 'Buscar arquivo',
         *    deleteFile: 'Deletar',
         *    cancel: 'Desistir',
         *    tryAgain: 'Recomeçar',
         *    startSending: 'Enviar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-upload
         *   [t-literals]="customLiterals">
         * </thf-upload>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, thfUploadLiteralsDefault[thfLocaleDefault], thfUploadLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfUploadLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "fileRestrictions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fileRestrictions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que segue a definição da interface ThfFileRestrictions.
         * Onde é possível definir tamanho máximo, minimo e extensão dos arquivos permitidos.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto que segue a definição da interface ThfFileRestrictions.
         * Onde é possível definir tamanho máximo, minimo e extensão dos arquivos permitidos.
         * @param {?} restrictions
         * @return {?}
         */
        function (restrictions) {
            this._fileRestrictions = restrictions;
            this.setAllowedExtensions(restrictions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "formField", {
        get: /**
         * @return {?}
         */
        function () {
            return this._formField;
        },
        /**
         * @optional
         *
         * @description
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
         *
         * @default `files`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
         *
         * \@default `files`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._formField = value && typeof value === 'string' ? value : thfUploadFormFieldDefault;
            this.getUploadService().formField = this.formField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será desabilitado.
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o campo será desabilitado.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.setAllowedExtensions = /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    function (restrictions) {
        if (restrictions === void 0) { restrictions = {}; }
        /** @type {?} */
        var _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    ThfUploadBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        literals: [{ type: Input, args: ['t-literals',] }],
        help: [{ type: Input, args: ['t-help',] }],
        url: [{ type: Input, args: ['t-url',] }],
        fileRestrictions: [{ type: Input, args: ['t-restrictions',] }],
        name: [{ type: Input, args: ['name',] }],
        formField: [{ type: Input, args: ['t-form-field',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        autoUpload: [{ type: Input, args: ['t-auto-upload',] }],
        isMultiple: [{ type: Input, args: ['t-multiple',] }],
        required: [{ type: Input, args: ['t-required',] }],
        onUpload: [{ type: Output, args: ['t-upload',] }],
        onError: [{ type: Output, args: ['t-error',] }],
        onSuccess: [{ type: Output, args: ['t-success',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
    };
    return ThfUploadBaseComponent;
}());
export { ThfUploadBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._fileRestrictions;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._formField;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._required;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.allowedExtensions;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.currentFiles;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.onModelChange;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype.validatorChange;
    /**
     * Label do campo
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.help;
    /**
     * URL que deve ser feita a requisição com os arquivos selecionados.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.url;
    /**
     * Define o valor do atributo name do componente.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.name;
    /**
     * Define se o envio do arquivo será automático ao selecionar o mesmo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.autoUpload;
    /**
     * Define se pode selecionar mais de um arquivo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.isMultiple;
    /**
     * Função que será executada no momento de realizar o envio do arquivo,
     * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
     * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
     * que será enviado em conjunto com o arquivo na requisição.
     * Por exemplo:
     * event.data = {id: 'id do usuario'};
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onUpload;
    /**
     * Evento será disparado quando ocorrer algum erro no envio do arquivo.
     * Por parâmetro será passado o objeto do retorno que é do tipo HttpErrorResponse.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onError;
    /**
     * Evento será disparado quando o envio do arquivo for realizado com sucesso.
     * Por parâmetro será passado o objeto do retorno que é do tipo HttpResponse.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onSuccess;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.ngModelChange;
    /**
     * @abstract
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.getUploadService = function () { };
    /**
     * @abstract
     * @param {?} event
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.onFileChange = function (event) { };
    /**
     * @abstract
     * @param {?=} files
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.uploadFiles = function (files) { };
    /**
     * @abstract
     * @param {?} file
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.stopUpload = function (file) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.updateModel = function (value) { };
    /**
     * @abstract
     * @param {?} model
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.writeValue = function (model) { };
}
