/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpRequest, HttpResponse } from '@angular/common/http';
var ThfUploadBaseService = /** @class */ (function () {
    function ThfUploadBaseService(http) {
        this.http = http;
        this.formField = 'files';
        this.requests = [];
    }
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param url URL da requisição a ser efetuada.
     * @param files Arquivos a serem enviados.
     * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     */
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param {?} url URL da requisição a ser efetuada.
     * @param {?} files Arquivos a serem enviados.
     * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     * @return {?}
     */
    ThfUploadBaseService.prototype.upload = /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param {?} url URL da requisição a ser efetuada.
     * @param {?} files Arquivos a serem enviados.
     * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     * @return {?}
     */
    function (url, files, tOnUpload, uploadCallback, successCallback, errorCallback) {
        /** @type {?} */
        var filesLength = files.length;
        /** @type {?} */
        var uploadEvent = {
            data: {},
            file: null
        };
        for (var i = 0; i < filesLength; i++) {
            /** @type {?} */
            var formData = new FormData();
            /** @type {?} */
            var file = files[i];
            /** @type {?} */
            var fileName = file.rawFile.name;
            formData.append(this.formField, file.rawFile, fileName);
            // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
            if (tOnUpload) {
                uploadEvent['file'] = file;
                tOnUpload.emit(uploadEvent);
                formData.append('data', JSON.stringify(uploadEvent.data));
            }
            this.sendFile(url, file, formData, uploadCallback, successCallback, errorCallback);
        }
    };
    /**
     * @param {?} url
     * @param {?} file
     * @param {?} formData
     * @param {?} uploadCallback
     * @param {?} successCallback
     * @param {?} errorCallback
     * @return {?}
     */
    ThfUploadBaseService.prototype.sendFile = /**
     * @param {?} url
     * @param {?} file
     * @param {?} formData
     * @param {?} uploadCallback
     * @param {?} successCallback
     * @param {?} errorCallback
     * @return {?}
     */
    function (url, file, formData, uploadCallback, successCallback, errorCallback) {
        var _this = this;
        /** @type {?} */
        var request = this.getRequest(url, formData).subscribe(function (event) {
            if (event.type === HttpEventType.UploadProgress) {
                _this.addRequest(file, request);
                /** @type {?} */
                var percentDone = Math.round(100 * event.loaded / event.total);
                uploadCallback(file, percentDone);
            }
            else if (event instanceof HttpResponse) {
                // Sucesso, arquivos enviados.
                successCallback(file, event);
            }
        }, function (err) {
            errorCallback(file, err);
        });
    };
    /**
     * @param {?} url
     * @param {?} formData
     * @return {?}
     */
    ThfUploadBaseService.prototype.getRequest = /**
     * @param {?} url
     * @param {?} formData
     * @return {?}
     */
    function (url, formData) {
        /** @type {?} */
        var req = new HttpRequest('POST', url, formData, {
            reportProgress: true
        });
        return this.http.request(req);
    };
    /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    ThfUploadBaseService.prototype.stopRequestByFile = /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    function (file, callback) {
        /** @type {?} */
        var requestObj = this.requests.find(function (req) {
            return req.file.uid === file.uid;
        });
        if (requestObj) {
            /** @type {?} */
            var request = requestObj.request;
            request.unsubscribe();
            this.removeRequest(requestObj);
            callback();
        }
    };
    /**
     * @param {?} requestObj
     * @return {?}
     */
    ThfUploadBaseService.prototype.removeRequest = /**
     * @param {?} requestObj
     * @return {?}
     */
    function (requestObj) {
        /** @type {?} */
        var index = this.requests.indexOf(requestObj);
        this.requests.splice(index, 1);
    };
    /**
     * @param {?} file
     * @param {?} request
     * @return {?}
     */
    ThfUploadBaseService.prototype.addRequest = /**
     * @param {?} file
     * @param {?} request
     * @return {?}
     */
    function (file, request) {
        /** @type {?} */
        var hasRequest = this.requests.some(function (req) {
            return req.file.uid === file.uid;
        });
        if (!hasRequest) {
            this.requests.push({ file: file, request: request });
        }
    };
    ThfUploadBaseService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ThfUploadBaseService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfUploadBaseService;
}());
export { ThfUploadBaseService };
if (false) {
    /** @type {?} */
    ThfUploadBaseService.prototype.formField;
    /** @type {?} */
    ThfUploadBaseService.prototype.requests;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseService.prototype.http;
}
