import { ElementRef } from '@angular/core';
import { ThfUploadBaseComponent } from './thf-upload-base.component';
import { ThfUploadFile } from './thf-upload-file';
import { ThfUploadService } from './thf-upload.service';
/**
 * @docsExtends ThfUploadBaseComponent
 *
 * @example
 *
 * <example name="thf-upload-basic" title="Totvs Upload Basic">
 *  <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.html"> </file>
 *  <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-labs" title="Totvs Upload Labs">
 *  <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.html"> </file>
 *  <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-resume" title="Totvs Upload - Resume">
 *  <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.html"> </file>
 *  <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.ts"> </file>
 * </example>
 */
export declare class ThfUploadComponent extends ThfUploadBaseComponent {
    private elementRef;
    private uploadService;
    private calledByCleanInputValue;
    private inputFile;
    constructor(elementRef: ElementRef, uploadService: ThfUploadService);
    readonly hasFileNotUploaded: boolean;
    readonly isDisabled: boolean;
    onClick(): void;
    onFileChange(event: any): void;
    updateModel(files: Array<ThfUploadFile>): void;
    uploadFiles(files: Array<ThfUploadFile>): void;
    stopUpload(file: ThfUploadFile): void;
    stopUploadHandler(file: ThfUploadFile): void;
    uploadingHandler(file: ThfUploadFile, percent: number): void;
    successHandler(file: ThfUploadFile): void;
    errorHandler(file: ThfUploadFile): void;
    isStatusFile(status: string, file: ThfUploadFile): boolean;
    hasAnyFileUploading(files: Array<ThfUploadFile>): boolean;
    getThfIcon(file: ThfUploadFile): string;
    getUploadService(): ThfUploadService;
    setUploadStatus(file: any, className: string, percent: number): void;
    setProgressStatus(uid: string, percent: number, isShow: boolean): void;
    removeFile(file: any): void;
    getFileSize(size: number): string;
    writeValue(model: any): void;
    addFileNameClass(uid: string): void;
    removeFileNameClass(uid: string): void;
    parseFiles(files: Array<File>): Array<ThfUploadFile>;
    checkRestrictions(file: ThfUploadFile): boolean;
    isAllowedExtension(extension: string, allowedExtensions?: Array<string>): boolean;
    private cleanInputValue;
    private existsFileSameName;
    private insertFileInFiles;
    private isExceededFileLimit;
    private updateExistsFileInFiles;
}
