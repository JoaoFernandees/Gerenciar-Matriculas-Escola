var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { isEquals } from '../../../utils/util';
import { ThfUploadBaseComponent } from './thf-upload-base.component';
import { ThfUploadFile } from './thf-upload-file';
import { ThfUploadService } from './thf-upload.service';
import { ThfUploadStatus } from './thf-upload-status.enum';
/**
 * \@docsExtends ThfUploadBaseComponent
 *
 * \@example
 *
 * <example name="thf-upload-basic" title="Totvs Upload Basic">
 *  <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.html"> </file>
 *  <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-labs" title="Totvs Upload Labs">
 *  <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.html"> </file>
 *  <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-resume" title="Totvs Upload - Resume">
 *  <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.html"> </file>
 *  <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.ts"> </file>
 * </example>
 */
var ThfUploadComponent = /** @class */ (function (_super) {
    __extends(ThfUploadComponent, _super);
    function ThfUploadComponent(elementRef, uploadService) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.uploadService = uploadService;
        _this.calledByCleanInputValue = false;
        return _this;
    }
    Object.defineProperty(ThfUploadComponent.prototype, "hasFileNotUploaded", {
        get: /**
         * @return {?}
         */
        function () {
            if (Array.isArray(this.currentFiles)) {
                return this.currentFiles.some(function (file) { return file.status !== ThfUploadStatus.Uploaded; });
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadComponent.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var currentFiles = this.currentFiles || [];
            return this.hasAnyFileUploading(this.currentFiles) ||
                !this.url ||
                this.disabled ||
                this.isExceededFileLimit(currentFiles.length);
        },
        enumerable: true,
        configurable: true
    });
    // Invoca a seleção de arquivos, clicando no input type file.
    // Invoca a seleção de arquivos, clicando no input type file.
    /**
     * @return {?}
     */
    ThfUploadComponent.prototype.onClick = 
    // Invoca a seleção de arquivos, clicando no input type file.
    /**
     * @return {?}
     */
    function () {
        this.calledByCleanInputValue = false;
        this.inputFile.nativeElement.click();
    };
    // Função disparada ao selecionar algum arquivo.
    // Função disparada ao selecionar algum arquivo.
    /**
     * @param {?} event
     * @return {?}
     */
    ThfUploadComponent.prototype.onFileChange = 
    // Função disparada ao selecionar algum arquivo.
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // necessario este tratamento quando for rodado no IE;
        // no IE o change é disparado quando o campo é limpado também
        if (this.calledByCleanInputValue) {
            this.calledByCleanInputValue = false;
            return event.preventDefault();
        }
        /** @type {?} */
        var files = event.target.files;
        this.currentFiles = this.currentFiles || [];
        this.currentFiles = this.parseFiles(files);
        this.updateModel(this.currentFiles.slice());
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
        this.cleanInputValue();
    };
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.updateModel = 
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
    };
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadFiles = 
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filesFiltered = files.filter(function (file) {
            return file.status !== ThfUploadStatus.Uploaded;
        });
        this.uploadService.upload(this.url, filesFiltered, this.onUpload, function (file, percent) {
            // UPLOADING
            _this.uploadingHandler(file, percent);
        }, function (file, eventResponse) {
            // SUCCESS
            _this.successHandler(file);
            _this.onSuccess.emit(eventResponse);
        }, function (file, eventError) {
            // Error
            _this.errorHandler(file);
            _this.onError.emit(eventError);
        });
    };
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUpload = 
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        this.uploadService.stopRequestByFile(file, function () {
            if (_this.autoUpload) {
                _this.removeFile(file);
            }
            else {
                _this.stopUploadHandler(file);
            }
        });
    };
    // Função disparada ao parar um envio de arquivo.
    // Função disparada ao parar um envio de arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUploadHandler = 
    // Função disparada ao parar um envio de arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.status = ThfUploadStatus.None;
        this.removeFileNameClass(file.uid);
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress', 100);
    };
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    /**
     * @param {?} file
     * @param {?} percent
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadingHandler = 
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    /**
     * @param {?} file
     * @param {?} percent
     * @return {?}
     */
    function (file, percent) {
        file.status = ThfUploadStatus.Uploading;
        this.setProgressStatus(file.uid, percent, true);
        this.setUploadStatus(file, 'thf-upload-progress', percent);
    };
    // Função disparada quando o envio é realizado com sucesso.
    // Função disparada quando o envio é realizado com sucesso.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.successHandler = 
    // Função disparada quando o envio é realizado com sucesso.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.status = ThfUploadStatus.Uploaded;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-success', 100);
    };
    // Função disparada quando é retornado um erro no envio do arquivo.
    // Função disparada quando é retornado um erro no envio do arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.errorHandler = 
    // Função disparada quando é retornado um erro no envio do arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.status = ThfUploadStatus.Error;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-error', 100);
    };
    // Valida se o status passado por parâmetro é igual ao status do arquivo.
    // Valida se o status passado por parâmetro é igual ao status do arquivo.
    /**
     * @param {?} status
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.isStatusFile = 
    // Valida se o status passado por parâmetro é igual ao status do arquivo.
    /**
     * @param {?} status
     * @param {?} file
     * @return {?}
     */
    function (status, file) {
        return file.status === ThfUploadStatus[status];
    };
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.hasAnyFileUploading = 
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        if (files && files.length) {
            return files.some(function (file) { return file.status === ThfUploadStatus.Uploading; });
        }
        return false;
    };
    // Retorna o thf-icon de acordo com o status do arquivo.
    // Retorna o thf-icon de acordo com o status do arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.getThfIcon = 
    // Retorna o thf-icon de acordo com o status do arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        switch (file.status) {
            case ThfUploadStatus.Uploaded:
                return 'thf-icon-ok';
            case ThfUploadStatus.Error:
                return 'thf-icon-close';
            case ThfUploadStatus.None:
                return 'thf-icon-info';
            case ThfUploadStatus.Uploading:
            default:
                return '';
        }
    };
    /**
     * @return {?}
     */
    ThfUploadComponent.prototype.getUploadService = /**
     * @return {?}
     */
    function () {
        return this.uploadService;
    };
    // Atualiza o status do envio de arquivos.
    // Atualiza o status do envio de arquivos.
    /**
     * @param {?} file
     * @param {?} className
     * @param {?} percent
     * @return {?}
     */
    ThfUploadComponent.prototype.setUploadStatus = 
    // Atualiza o status do envio de arquivos.
    /**
     * @param {?} file
     * @param {?} className
     * @param {?} percent
     * @return {?}
     */
    function (file, className, percent) {
        /** @type {?} */
        var uid = file.uid;
        /** @type {?} */
        var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        divStatus.classList.remove('thf-upload-progress-error', 'thf-upload-progress-success');
        divStatus.classList.add(className);
        if (percent > 5 && file.status !== ThfUploadStatus.None) {
            this.addFileNameClass(uid);
        }
    };
    // Atualiza o status do progresso do envio do arquivo.
    // Atualiza o status do progresso do envio do arquivo.
    /**
     * @param {?} uid
     * @param {?} percent
     * @param {?} isShow
     * @return {?}
     */
    ThfUploadComponent.prototype.setProgressStatus = 
    // Atualiza o status do progresso do envio do arquivo.
    /**
     * @param {?} uid
     * @param {?} percent
     * @param {?} isShow
     * @return {?}
     */
    function (uid, percent, isShow) {
        /** @type {?} */
        var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        /** @type {?} */
        var divProgress = divStatus.querySelector('.thf-upload-progress-status');
        /** @type {?} */
        var isDisplay = isShow ? 'block' : 'none';
        divProgress.setAttribute('style', "display: " + isDisplay + ";");
        divProgress.setAttribute('style', "width: " + percent + "%;");
    };
    // Remove o arquivo passado por parametro da lista dos arquivos correntes.
    // Remove o arquivo passado por parametro da lista dos arquivos correntes.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFile = 
    // Remove o arquivo passado por parametro da lista dos arquivos correntes.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
        this.updateModel(this.currentFiles.slice());
    };
    // Retorna o tamanho do arquivo em KBytes.
    // Retorna o tamanho do arquivo em KBytes.
    /**
     * @param {?} size
     * @return {?}
     */
    ThfUploadComponent.prototype.getFileSize = 
    // Retorna o tamanho do arquivo em KBytes.
    /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var kbSize = 0;
        if (size) {
            kbSize = Math.ceil(size / 1024);
        }
        return kbSize + " KB";
    };
    // Recebe o valor do model.
    // Recebe o valor do model.
    /**
     * @param {?} model
     * @return {?}
     */
    ThfUploadComponent.prototype.writeValue = 
    // Recebe o valor do model.
    /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    };
    // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
    // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.addFileNameClass = 
    // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
    /**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        /** @type {?} */
        var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        /** @type {?} */
        var fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.add('thf-upload-filename-loading');
    };
    // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
    // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFileNameClass = 
    // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
    /**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        /** @type {?} */
        var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        /** @type {?} */
        var fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.remove('thf-upload-filename-loading');
    };
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.parseFiles = 
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var thfUploadFiles = this.currentFiles || [];
        /** @type {?} */
        var filesLength = files.length;
        for (var i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(thfUploadFiles.length)) {
                break;
            }
            /** @type {?} */
            var file = new ThfUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                thfUploadFiles = this.insertFileInFiles(file, thfUploadFiles);
            }
        }
        return thfUploadFiles;
    };
    // Verifica se o arquivo está de acordo com as restrições.
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.checkRestrictions = 
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var restrictions = this.fileRestrictions;
        if (restrictions) {
            /** @type {?} */
            var allowedExtensions = restrictions.allowedExtensions;
            /** @type {?} */
            var minFileSize = restrictions.minFileSize || 0;
            /** @type {?} */
            var maxFileSize = restrictions.maxFileSize || 31457280;
            // 30MB
            /** @type {?} */
            var isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            /** @type {?} */
            var isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            return isAccept && isAcceptSize;
        }
        return true;
    };
    /**
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    ThfUploadComponent.prototype.isAllowedExtension = /**
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    function (extension, allowedExtensions) {
        if (allowedExtensions === void 0) { allowedExtensions = []; }
        return allowedExtensions.some(function (ext) { return ext.toLowerCase() === extension; });
    };
    /**
     * @private
     * @return {?}
     */
    ThfUploadComponent.prototype.cleanInputValue = /**
     * @private
     * @return {?}
     */
    function () {
        this.calledByCleanInputValue = true;
        this.inputFile.nativeElement.value = '';
    };
    /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.existsFileSameName = /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    function (file, files) {
        return files.some(function (currentFile) { return file.name === currentFile.name; });
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.insertFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    };
    /**
     * @private
     * @param {?} currentFilesLength
     * @return {?}
     */
    ThfUploadComponent.prototype.isExceededFileLimit = /**
     * @private
     * @param {?} currentFilesLength
     * @return {?}
     */
    function (currentFilesLength) {
        return this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength;
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.updateExistsFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        /** @type {?} */
        var fileIndex = files.findIndex(function (currentFile) { return newFile.name === currentFile.name && currentFile.status !== ThfUploadStatus.Uploaded; });
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    };
    ThfUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-upload', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-upload\"> <input #inputFile class=\"thf-upload-input\" type=\"file\" [accept]=\"allowedExtensions\" [attr.name]=\"name\" [disabled]=\"isDisabled\" [multiple]=\"isMultiple\" [required]=\"required\" (change)=\"onFileChange($event)\"> <thf-button class=\"thf-upload-button\" for=\"file\" [t-disabled]=\"isDisabled\" [t-label]=\"literals.selectFile\" (t-click)=\"onClick()\"> </thf-button> <div class=\"thf-upload-progress\" *ngFor=\"let file of currentFiles\" [id]=\"file.uid\"> <div class=\"thf-upload-progress-status\"></div> <div class=\"thf-upload-filename-foreground\"> <div class=\"thf-upload-filename\"> <span class=\"thf-icon {{ getThfIcon(file) }}\"></span> {{ file.name }} - {{ getFileSize(file.size) }} </div> <div class=\"thf-upload-group-actions\"> <span *ngIf=\"isStatusFile('None', file) || isStatusFile('Error', file)\" class=\"thf-upload-action\" (click)=\"removeFile(file)\"> {{ literals.deleteFile }} </span> <span *ngIf=\"isStatusFile('Uploading', file)\" class=\"thf-upload-action\" (click)=\"stopUpload(file)\"> {{ literals.cancel }} </span> <span *ngIf=\"isStatusFile('Error', file)\" class=\"thf-upload-action\" (click)=\"uploadFiles([file])\"> {{ literals.tryAgain }} </span> </div> </div> </div> <thf-button *ngIf=\"!autoUpload && (currentFiles?.length > 0 && hasFileNotUploaded)\" t-type=\"primary\" [t-disabled]=\"hasAnyFileUploading(currentFiles)\" [t-label]=\"literals.startSending\" (t-click)=\"uploadFiles(currentFiles)\"> </thf-button> </div> </thf-field-container> ",
                    providers: [
                        ThfUploadService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return ThfUploadComponent; }),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(function () { return ThfUploadComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfUploadComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ThfUploadService }
    ]; };
    ThfUploadComponent.propDecorators = {
        inputFile: [{ type: ViewChild, args: ['inputFile', { read: ElementRef },] }]
    };
    return ThfUploadComponent;
}(ThfUploadBaseComponent));
export { ThfUploadComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfUploadComponent.prototype.calledByCleanInputValue;
    /**
     * @type {?}
     * @private
     */
    ThfUploadComponent.prototype.inputFile;
    /**
     * @type {?}
     * @private
     */
    ThfUploadComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ThfUploadComponent.prototype.uploadService;
}
