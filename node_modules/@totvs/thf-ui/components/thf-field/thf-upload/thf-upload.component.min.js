var __extends=this&&this.__extends||function(){var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(t,i)};return function(t,i){function s(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(s.prototype=i.prototype,new s)}}();import{Component,ElementRef,forwardRef,ViewChild}from"@angular/core";import{NG_VALIDATORS,NG_VALUE_ACCESSOR}from"@angular/forms";import{isEquals}from"../../../utils/util";import{ThfUploadBaseComponent}from"./thf-upload-base.component";import{ThfUploadFile}from"./thf-upload-file";import{ThfUploadService}from"./thf-upload.service";import{ThfUploadStatus}from"./thf-upload-status.enum";var ThfUploadComponent=function(e){function t(t,i){var s=e.call(this)||this;return s.elementRef=t,s.uploadService=i,s.calledByCleanInputValue=!1,s}return __extends(t,e),Object.defineProperty(t.prototype,"hasFileNotUploaded",{get:function(){return!!Array.isArray(this.currentFiles)&&this.currentFiles.some(function(e){return e.status!==ThfUploadStatus.Uploaded})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isDisabled",{get:function(){var e=this.currentFiles||[];return this.hasAnyFileUploading(this.currentFiles)||!this.url||this.disabled||this.isExceededFileLimit(e.length)},enumerable:!0,configurable:!0}),t.prototype.onClick=function(){this.calledByCleanInputValue=!1,this.inputFile.nativeElement.click()},t.prototype.onFileChange=function(e){if(this.calledByCleanInputValue)return this.calledByCleanInputValue=!1,e.preventDefault();var t=e.target.files;this.currentFiles=this.currentFiles||[],this.currentFiles=this.parseFiles(t),this.updateModel(this.currentFiles.slice()),this.autoUpload&&this.uploadFiles(this.currentFiles),this.cleanInputValue()},t.prototype.updateModel=function(e){this.onModelChange?this.onModelChange(e):this.ngModelChange.emit(e)},t.prototype.uploadFiles=function(e){var t=this,i=e.filter(function(e){return e.status!==ThfUploadStatus.Uploaded});this.uploadService.upload(this.url,i,this.onUpload,function(e,i){t.uploadingHandler(e,i)},function(e,i){t.successHandler(e),t.onSuccess.emit(i)},function(e,i){t.errorHandler(e),t.onError.emit(i)})},t.prototype.stopUpload=function(e){var t=this;this.uploadService.stopRequestByFile(e,function(){t.autoUpload?t.removeFile(e):t.stopUploadHandler(e)})},t.prototype.stopUploadHandler=function(e){e.status=ThfUploadStatus.None,this.removeFileNameClass(e.uid),this.setProgressStatus(e.uid,0,!1),this.setUploadStatus(e,"thf-upload-progress",100)},t.prototype.uploadingHandler=function(e,t){e.status=ThfUploadStatus.Uploading,this.setProgressStatus(e.uid,t,!0),this.setUploadStatus(e,"thf-upload-progress",t)},t.prototype.successHandler=function(e){e.status=ThfUploadStatus.Uploaded,this.setProgressStatus(e.uid,0,!1),this.setUploadStatus(e,"thf-upload-progress-success",100)},t.prototype.errorHandler=function(e){e.status=ThfUploadStatus.Error,this.setProgressStatus(e.uid,0,!1),this.setUploadStatus(e,"thf-upload-progress-error",100)},t.prototype.isStatusFile=function(e,t){return t.status===ThfUploadStatus[e]},t.prototype.hasAnyFileUploading=function(e){return!(!e||!e.length)&&e.some(function(e){return e.status===ThfUploadStatus.Uploading})},t.prototype.getThfIcon=function(e){switch(e.status){case ThfUploadStatus.Uploaded:return"thf-icon-ok";case ThfUploadStatus.Error:return"thf-icon-close";case ThfUploadStatus.None:return"thf-icon-info";case ThfUploadStatus.Uploading:default:return""}},t.prototype.getUploadService=function(){return this.uploadService},t.prototype.setUploadStatus=function(e,t,i){var s=e.uid,o=this.elementRef.nativeElement.querySelector("div[id='"+s+"'].thf-upload-progress");o.classList.remove("thf-upload-progress-error","thf-upload-progress-success"),o.classList.add(t),i>5&&e.status!==ThfUploadStatus.None&&this.addFileNameClass(s)},t.prototype.setProgressStatus=function(e,t,i){var s=this.elementRef.nativeElement.querySelector("div[id='"+e+"'].thf-upload-progress").querySelector(".thf-upload-progress-status"),o=i?"block":"none";s.setAttribute("style","display: "+o+";"),s.setAttribute("style","width: "+t+"%;")},t.prototype.removeFile=function(e){var t=this.currentFiles.indexOf(e);this.currentFiles.splice(t,1),this.updateModel(this.currentFiles.slice())},t.prototype.getFileSize=function(e){var t=0;return e&&(t=Math.ceil(e/1024)),t+" KB"},t.prototype.writeValue=function(e){e?isEquals(this.currentFiles,e)||(this.currentFiles=this.parseFiles(e)):this.currentFiles=void 0},t.prototype.addFileNameClass=function(e){this.elementRef.nativeElement.querySelector("div[id='"+e+"'].thf-upload-progress").querySelector(".thf-upload-filename").classList.add("thf-upload-filename-loading")},t.prototype.removeFileNameClass=function(e){this.elementRef.nativeElement.querySelector("div[id='"+e+"'].thf-upload-progress").querySelector(".thf-upload-filename").classList.remove("thf-upload-filename-loading")},t.prototype.parseFiles=function(e){for(var t=this.currentFiles||[],i=e.length,s=0;s<i&&!this.isExceededFileLimit(t.length);s++){var o=new ThfUploadFile(e[s]);this.checkRestrictions(o)&&(t=this.insertFileInFiles(o,t))}return t},t.prototype.checkRestrictions=function(e){var t=this.fileRestrictions;if(t){var i=t.allowedExtensions,s=t.minFileSize||0,o=t.maxFileSize||31457280,l=!i||this.isAllowedExtension(e.extension,i),r=e.size>=s&&e.size<=o;return l&&r}return!0},t.prototype.isAllowedExtension=function(e,t){return void 0===t&&(t=[]),t.some(function(t){return t.toLowerCase()===e})},t.prototype.cleanInputValue=function(){this.calledByCleanInputValue=!0,this.inputFile.nativeElement.value=""},t.prototype.existsFileSameName=function(e,t){return t.some(function(t){return e.name===t.name})},t.prototype.insertFileInFiles=function(e,t){return this.existsFileSameName(e,t)?this.updateExistsFileInFiles(e,t):(this.isMultiple?t.push(e):t.splice(0,t.length,e),t)},t.prototype.isExceededFileLimit=function(e){return this.isMultiple&&this.fileRestrictions&&this.fileRestrictions.maxFiles>0&&this.fileRestrictions.maxFiles<=e},t.prototype.updateExistsFileInFiles=function(e,t){var i=t.findIndex(function(t){return e.name===t.name&&t.status!==ThfUploadStatus.Uploaded});return-1!==i&&t.splice(i,1,e),t},t.decorators=[{type:Component,args:[{selector:"thf-upload",template:'<thf-field-container [t-label]="label" [t-help]="help" [t-opcional]="!required"> <div class="thf-upload"> <input #inputFile class="thf-upload-input" type="file" [accept]="allowedExtensions" [attr.name]="name" [disabled]="isDisabled" [multiple]="isMultiple" [required]="required" (change)="onFileChange($event)"> <thf-button class="thf-upload-button" for="file" [t-disabled]="isDisabled" [t-label]="literals.selectFile" (t-click)="onClick()"> </thf-button> <div class="thf-upload-progress" *ngFor="let file of currentFiles" [id]="file.uid"> <div class="thf-upload-progress-status"></div> <div class="thf-upload-filename-foreground"> <div class="thf-upload-filename"> <span class="thf-icon {{ getThfIcon(file) }}"></span> {{ file.name }} - {{ getFileSize(file.size) }} </div> <div class="thf-upload-group-actions"> <span *ngIf="isStatusFile(\'None\', file) || isStatusFile(\'Error\', file)" class="thf-upload-action" (click)="removeFile(file)"> {{ literals.deleteFile }} </span> <span *ngIf="isStatusFile(\'Uploading\', file)" class="thf-upload-action" (click)="stopUpload(file)"> {{ literals.cancel }} </span> <span *ngIf="isStatusFile(\'Error\', file)" class="thf-upload-action" (click)="uploadFiles([file])"> {{ literals.tryAgain }} </span> </div> </div> </div> <thf-button *ngIf="!autoUpload && (currentFiles?.length > 0 && hasFileNotUploaded)" t-type="primary" [t-disabled]="hasAnyFileUploading(currentFiles)" [t-label]="literals.startSending" (t-click)="uploadFiles(currentFiles)"> </thf-button> </div> </thf-field-container> ',providers:[ThfUploadService,{provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(function(){return t}),multi:!0},{provide:NG_VALIDATORS,useExisting:forwardRef(function(){return t}),multi:!0}]}]}],t.ctorParameters=function(){return[{type:ElementRef},{type:ThfUploadService}]},t.propDecorators={inputFile:[{type:ViewChild,args:["inputFile",{read:ElementRef}]}]},t}(ThfUploadBaseComponent);export{ThfUploadComponent};