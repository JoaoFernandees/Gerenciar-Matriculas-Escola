/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} required
 * @param {?} disabled
 * @param {?} value
 * @return {?}
 */
export function requiredFailed(required, disabled, value) {
    /** @type {?} */
    var valid = ((typeof value === 'string' && value) || (typeof value === 'object' && value && value.length)
        || (typeof value === 'number' && (value || value === 0)) || (typeof value === 'boolean' && value));
    return (required && !disabled && !valid);
}
/**
 * @param {?} maxlength
 * @param {?} value
 * @return {?}
 */
export function maxlengthFailed(maxlength, value) {
    /** @type {?} */
    var validMaxlength = maxlength || maxlength === 0;
    /** @type {?} */
    var validValue = (value || value === 0) && value.toString();
    return validMaxlength && validValue && validValue.length > Number(maxlength);
}
/**
 * @param {?} minlength
 * @param {?} value
 * @return {?}
 */
export function minlengthFailed(minlength, value) {
    /** @type {?} */
    var validMinlength = minlength || minlength === 0;
    /** @type {?} */
    var validValue = (value || value === 0) && value.toString();
    return validMinlength && validValue && validValue.length < Number(minlength);
}
/**
 * @param {?} pattern
 * @param {?} value
 * @return {?}
 */
export function patternFailed(pattern, value) {
    /** @type {?} */
    var reg;
    try {
        reg = new RegExp(pattern);
    }
    catch (e) {
        return true;
    }
    return (pattern && value && !reg.test(value));
}
/**
 * @param {?} min
 * @param {?} value
 * @return {?}
 */
export function minFailed(min, value) {
    /** @type {?} */
    var validValue = value || value === 0;
    /** @type {?} */
    var validMin = min || min === 0;
    return validValue && validMin && value < min;
}
/**
 * @param {?} max
 * @param {?} value
 * @return {?}
 */
export function maxFailed(max, value) {
    /** @type {?} */
    var validValue = value || value === 0;
    /** @type {?} */
    var validMax = max || max === 0;
    return validValue && validMax && value > max;
}
/**
 * @param {?} value
 * @return {?}
 */
export function dateFailed(value) {
    return (value && isNaN(Date.parse(value)));
}
