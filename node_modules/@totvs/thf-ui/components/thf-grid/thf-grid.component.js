/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
/**
 * \@description
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * \@example
 *
 * <example name="thf-grid-basic" title="Totvs Grid Basic">
 *  <file name="sample-thf-grid-basic/sample-thf-grid-basic.component.html"> </file>
 *  <file name="sample-thf-grid-basic/sample-thf-grid-basic.component.ts"> </file>
 * </example>
 */
var ThfGridComponent = /** @class */ (function () {
    function ThfGridComponent(changeDetectorRef, elRef, renderer) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.elRef = elRef;
        this.lastCell = '0-0';
        this.lastRow = 0;
        this.lastColumn = 0;
        this.currencyCell = '0-0';
        this.currencyRow = 0;
        this.currencyColumn = 0;
        this.logger = false;
        this.width = '100%';
        this.widthFreeze = 0;
        this.widthActions = 0;
        this._columns = [];
        /**
         * \@description
         *
         * Ações disparadas quando uma linha do grid é manipulada.
         */
        this.rowActions = {};
        /**
         * Lista com os dados que serão exibidos no grid.
         */
        this.data = [];
        this.debounceResize();
        this.resizeListener = renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
    }
    Object.defineProperty(ThfGridComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns.filter(function (column) { return column.freeze !== true && column.action !== true; });
        },
        /**
         * Colunas exibidas no grid.
         */
        set: /**
         * Colunas exibidas no grid.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._columns = value.slice();
            this._columns.forEach(function (column) {
                column.label = column.label || column.property;
                if (column.freeze === true) {
                    column.cssWidth = (column.width || 100) + "px";
                }
                else {
                    column.cssWidth = column.width ? column.width + "px" : '100%';
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfGridComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            /** @type {?} */
            var widthTableWrapper = _this.tableWrapper.nativeElement.offsetWidth;
            _this.width = widthTableWrapper - (_this.widthFreeze + 8) - _this.widthActions + "px";
        }, 100);
    };
    Object.defineProperty(ThfGridComponent.prototype, "freezeColumns", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var freezeColumns = this._columns.filter(function (column) { return column.freeze === true; });
            this.widthFreeze = freezeColumns.reduce(function (prev, current) { return prev + (current.width || 100); }, 0);
            return freezeColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfGridComponent.prototype, "actionColumns", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var actionsColumns = this._columns.filter(function (column) { return column.action === true; });
            this.widthActions = actionsColumns.length > 0 ? 56 : 0;
            return actionsColumns;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    ThfGridComponent.prototype.cancelRow = /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    function (event, row) {
        var _this = this;
        /** @type {?} */
        var el = event.path.find(function (element) { return element.id; });
        if (!el) {
            return;
        }
        var x = (el.id).split('-')[0];
        if (this.isEmptyRow(x)) {
            if (!this.removeRow(event, row)) {
                return;
            }
            this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
        }
        else {
            this.data[+x - 1] = Object.assign({}, this.currencyObj);
            setTimeout(function () { return _this.selectCell(_this.currencyRow, _this.currencyColumn); });
        }
    };
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    ThfGridComponent.prototype.removeRow = /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    function (event, row) {
        if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
            return false;
        }
        /** @type {?} */
        var index = this.data.indexOf(row);
        this.data.splice(index, 1);
        this.changeDetectorRef.detectChanges();
        if ((this.data.length === 0) || (index === this.data.length)) {
            this.selectCell(this.currencyRow - 1, this.currencyColumn);
        }
        else {
            this.selectCell(this.currencyRow, this.currencyColumn);
        }
        return true;
    };
    /**
     * @param {?} event
     * @param {?} direction
     * @return {?}
     */
    ThfGridComponent.prototype.tableKeydown = /**
     * @param {?} event
     * @param {?} direction
     * @return {?}
     */
    function (event, direction) {
        var _a = event.target.id.split('-'), row = _a[0], col = _a[1];
        row = +row;
        col = +col;
        /** @type {?} */
        var prow = +row;
        /** @type {?} */
        var pcol = +col;
        // event.preventDefault();
        // event.stopPropagation();
        // debugger;
        if (direction === 'down') {
            if (row <= this.data.length) {
                prow++;
            }
            if (row === this.data.length) {
                if (row === 0 || !this.isEmptyRow(row)) {
                    if (this.saveRow(row)) {
                        if (!this.insertRow()) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    prow--;
                }
            }
        }
        else if ((direction === 'up') && (row > 0)) {
            prow--;
        }
        else if ((direction === 'left') && (col > 0)) {
            pcol--;
        }
        else if ((direction === 'right') && (col < this._columns.length - 1)) {
            pcol++;
        }
        else if (direction === 'next') {
            if (col < this._columns.length - 1) {
                pcol++;
                event.preventDefault();
            }
            else if (row < this.data.length) {
                pcol = 0;
                prow++;
                event.preventDefault();
            }
        }
        else if (direction === 'prior') {
            if (col > 0) {
                pcol--;
                event.preventDefault();
            }
            else if (row > 0) {
                pcol = this._columns.length - 1;
                prow--;
                event.preventDefault();
            }
        }
        if (this.currencyCell === prow + "-" + pcol) {
            // console.log('vazou');
            return;
        }
        // debugger;
        if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
            if (!this.isEmptyRow(row)) {
                if (!this.saveRow(row)) {
                    return;
                }
            }
            else {
                if (!this.removeRow(event, row)) {
                    return;
                }
            }
        }
        if (this.currencyRow !== prow) {
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('mudou de linha');
        }
        this.lastCell = event.target.id;
        this.lastRow = row;
        this.lastColumn = col;
        this.selectCell(prow, pcol);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfGridComponent.prototype.tableClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var el = event.path.find(function (element) { return element.id; });
        if (!el) {
            this.selectCell(this.currencyRow, this.currencyColumn);
            return;
        }
        if (this.currencyCell === el.id) {
            return;
        }
        var _a = (el.id).split('-'), row = _a[0], col = _a[1];
        /** @type {?} */
        var prow = +row;
        /** @type {?} */
        var pcol = +col;
        if (prow !== this.currencyRow) {
            if (this.currencyRow > 0) {
                if (!this.isEmptyRow(this.currencyRow)) {
                    if (!this.saveRow(this.currencyRow)) {
                        this.selectCell(this.currencyRow, this.currencyColumn);
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('>>>>>>> ', prow - 1);
        }
        this.lastCell = this.currencyCell;
        this.lastRow = this.currencyRow;
        this.lastColumn = this.currencyColumn;
        this.currencyCell = el.id;
        this.currencyRow = prow;
        this.currencyColumn = pcol;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfGridComponent.prototype.saveRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        // console.log(this.data[row - 1]);
        var _this = this;
        // console.log(this.data[row - 1]);
        /** @type {?} */
        var obj = this.data[row - 1];
        if (!Object.keys(obj).some(function (prop) { return obj[prop] !== _this.currencyObj[prop]; })) {
            // console.log('tudo igual');
            return true;
        }
        if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
            return false;
        }
        /** @type {?} */
        var requireds = [];
        this.columns.forEach(function (column) {
            if (column.required === true && !obj[column.property]) {
                requireds.push(column.property);
            }
        });
        return requireds.length === 0;
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.insertRow = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = {};
        if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
            return false;
        }
        // this.currencyObj = Object.assign({}, obj);
        this.data.push(obj);
        this.changeDetectorRef.detectChanges();
        return true;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfGridComponent.prototype.isEmptyRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var obj = this.data[row - 1];
        if (!obj) { // title
            return false;
        }
        /** @type {?} */
        var filled = Object.keys(obj).some(function (property) { return obj[property]; });
        return !filled;
    };
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    ThfGridComponent.prototype.selectCell = /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    function (row, col) {
        /** @type {?} */
        var nextCell = this.elRef.nativeElement.querySelector("[id='" + row + "-" + col + "']");
        if (nextCell) {
            this.currencyCell = row + "-" + col;
            this.currencyRow = row;
            this.currencyColumn = col;
            nextCell.focus();
        }
    };
    ThfGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-grid', template: "<div class=\"thf-grid-wrapper thf-grid-row-wrapper\" #wrapper> <div *ngIf=\"logger\"> lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br> lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br> lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br> <hr> currencyObj: {{ currencyObj | json }} <hr> </div> <div class=\"thf-grid\"> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" #table (keydown.arrowup)=\"tableKeydown($event, 'up')\" (keydown.arrowdown)=\"tableKeydown($event, 'down')\" (keydown.arrowleft)=\"tableKeydown($event, 'left')\" (keydown.arrowright)=\"tableKeydown($event, 'right')\" (keydown.tab)=\"tableKeydown($event, 'next')\" (keydown.shift.tab)=\"tableKeydown($event, 'prior')\" (click)=\"tableClick($event)\" (contextmenu)=\"tableClick($event)\" (dblclick)=\"tableClick($event)\"> <div class=\"thf-grid-cell thf-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\"> <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container> </div> <div class=\"thf-grid-cell thf-grid-cell-normal\" [style.width]=\"width\" [style.max-width]=\"width\" [style.min-width]=\"width\"> <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container> </div> <div class=\"thf-grid-cell thf-grid-cell-action\" *ngIf=\"actionColumns.length > 0\"> <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container> </div> </div> </div> </div> <!-- <div class=\"thf-grid-footer-wrapper\"> <div class=\"thf-grid-footer\"> <div class=\"links\"><a href=\"#\">RODAPÉ</a></div> </div> </div> --> </div> <!-- Coluna com as colunas congeladas --> <ng-template #divFreezeColumns> <div class=\"thf-grid thf-grid-freeze\"> <div class=\"thf-grid-header-group\"> <div class=\"thf-grid-row\"> <thf-grid-head *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-title\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" t-freeze=\"true\" t-position=\"{{ '0-' + i }}\" [t-width]=\"column.width\" [t-align]=\"column.align\" [t-title]=\"column.label\"> </thf-grid-head> </div> </div> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\" (keydown.control.delete)=\"removeRow($event, row)\" (keydown.esc)=\"cancelRow($event, row)\"> <thf-grid-cell *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-cell\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" t-freeze=\"true\" [t-align]=\"column.align\" [t-readonly]=\"column.readonly\" [t-required]=\"column.required\" t-position=\"{{ (j + 1) + '-' + i }}\" [t-width]=\"column.width\" [(t-value)]=\"row[column.property]\"> </thf-grid-cell> </div> </div> </div> </ng-template> <!-- FIM: Coluna com as colunas congeladas --> <!-- Coluna com as colunas nornais --> <ng-template #divColumns> <div class=\"thf-grid thf-grid-normal\"> <div class=\"thf-grid-header-group\"> <div class=\"thf-grid-row\"> <thf-grid-head *ngFor=\"let column of columns; index as i\" class=\"thf-grid-title\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" [t-align]=\"column.align\" t-position=\"{{ '0-' + (i + freezeColumns.length) }}\" [t-title]=\"column.label\" [t-width]=\"column.width\"> </thf-grid-head> </div> </div> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\" (keydown.control.delete)=\"removeRow($event, row)\" (keydown.esc)=\"cancelRow($event, row)\"> <thf-grid-cell *ngFor=\"let column of columns; index as i\" class=\"thf-grid-cell\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" [t-align]=\"column.align\" [t-readonly]=\"column.readonly\" [t-required]=\"column.required\" t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length) }}\" [(t-value)]=\"row[column.property]\" [t-width]=\"column.width\"> </thf-grid-cell> </div> </div> </div> </ng-template> <!-- FIM: Coluna com as colunas nornais --> <!-- Coluna com as colunas de ação --> <ng-template #divActionColumns> <div class=\"thf-grid thf-grid-actions\"> <div class=\"thf-grid-header-group\"> <div class=\"thf-grid-row\"> <thf-grid-head *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-title\" t-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\" [t-title]=\"column.label\" [t-align]=\"column.align\"> </thf-grid-head> </div> </div> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\" (keydown.control.delete)=\"removeRow($event, row)\" (keydown.esc)=\"cancelRow($event, row)\"> <thf-grid-cell-action *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-cell\" t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length + columns.length) }}\" [t-value]=\"row[column.property]\"> </thf-grid-cell-action> </div> </div> </div> </ng-template> <!-- FIM: Coluna com as colunas de ação --> ", styles: [".thf-grid-wrapper { /* margin: 30px; */ overflow: auto; border: 1px solid #eceeee; /* width: 100%; */ /* border: 1px solid red; */ /* display: table-cell; */ } .thf-grid { display: table; border-right: none; border-bottom: none; } .thf-grid-cell-normal::-webkit-scrollbar, .thf-grid-row-wrapper::-webkit-scrollbar { border-radius: 2px; height: 4px; opacity: 0.5; width: 4px; } .thf-grid-cell-normal::-webkit-scrollbar-thumb, .thf-grid-row-wrapper::-webkit-scrollbar-thumb { background-color: #0c9abe; } .thf-grid .fixed { display: table; } .thf-grid-header-group { display: table-header-group; } .thf-grid-body { display: table-row-group; } .thf-grid-row { display: table-row; } .thf-grid-title, .thf-grid-cell { display: table-cell; border: none; } .thf-grid-cell-freeze { border-right: 2px solid #ceeaf2; } .thf-grid-cell-action { color: blue; border-left: 2px solid #ceeaf2; } .thf-grid-freeze, .thf-grid-actions { width: 100%; } .thf-grid-normal { width: 100%; } .thf-grid-cell-normal { overflow: auto; } .thf-grid-footer { display: table-footer-group; } .thf-grid-footer-wrapper { border: 1px solid #eceeee; border-top: none; } "]
                },] },
    ];
    /** @nocollapse */
    ThfGridComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ThfGridComponent.propDecorators = {
        tableElement: [{ type: ViewChild, args: ['table',] }],
        tableWrapper: [{ type: ViewChild, args: ['wrapper',] }],
        rowActions: [{ type: Input, args: ['t-row-actions',] }],
        columns: [{ type: Input, args: ['t-columns',] }],
        data: [{ type: Input, args: ['t-data',] }]
    };
    return ThfGridComponent;
}());
export { ThfGridComponent };
if (false) {
    /** @type {?} */
    ThfGridComponent.prototype.lastCell;
    /** @type {?} */
    ThfGridComponent.prototype.lastRow;
    /** @type {?} */
    ThfGridComponent.prototype.lastColumn;
    /** @type {?} */
    ThfGridComponent.prototype.currencyCell;
    /** @type {?} */
    ThfGridComponent.prototype.currencyRow;
    /** @type {?} */
    ThfGridComponent.prototype.currencyColumn;
    /** @type {?} */
    ThfGridComponent.prototype.currencyObj;
    /** @type {?} */
    ThfGridComponent.prototype.logger;
    /** @type {?} */
    ThfGridComponent.prototype.width;
    /** @type {?} */
    ThfGridComponent.prototype.widthFreeze;
    /** @type {?} */
    ThfGridComponent.prototype.widthActions;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype.resizeListener;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype.timeoutResize;
    /** @type {?} */
    ThfGridComponent.prototype.tableElement;
    /** @type {?} */
    ThfGridComponent.prototype.tableWrapper;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype._columns;
    /**
     * \@description
     *
     * Ações disparadas quando uma linha do grid é manipulada.
     * @type {?}
     */
    ThfGridComponent.prototype.rowActions;
    /**
     * Lista com os dados que serão exibidos no grid.
     * @type {?}
     */
    ThfGridComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype.elRef;
}
