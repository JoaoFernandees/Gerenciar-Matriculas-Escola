[{"__symbolic":"module","version":4,"metadata":{"ThfGridComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":31,"character":1},"arguments":[{"selector":"thf-grid","template":"<div class=\"thf-grid-wrapper thf-grid-row-wrapper\" #wrapper> <div *ngIf=\"logger\"> lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br> lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br> lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br> <hr> currencyObj: {{ currencyObj | json }} <hr> </div> <div class=\"thf-grid\"> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" #table (keydown.arrowup)=\"tableKeydown($event, 'up')\" (keydown.arrowdown)=\"tableKeydown($event, 'down')\" (keydown.arrowleft)=\"tableKeydown($event, 'left')\" (keydown.arrowright)=\"tableKeydown($event, 'right')\" (keydown.tab)=\"tableKeydown($event, 'next')\" (keydown.shift.tab)=\"tableKeydown($event, 'prior')\" (click)=\"tableClick($event)\" (contextmenu)=\"tableClick($event)\" (dblclick)=\"tableClick($event)\"> <div class=\"thf-grid-cell thf-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\"> <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container> </div> <div class=\"thf-grid-cell thf-grid-cell-normal\" [style.width]=\"width\" [style.max-width]=\"width\" [style.min-width]=\"width\"> <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container> </div> <div class=\"thf-grid-cell thf-grid-cell-action\" *ngIf=\"actionColumns.length > 0\"> <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container> </div> </div> </div> </div> <!-- <div class=\"thf-grid-footer-wrapper\"> <div class=\"thf-grid-footer\"> <div class=\"links\"><a href=\"#\">RODAPÉ</a></div> </div> </div> --> </div> <!-- Coluna com as colunas congeladas --> <ng-template #divFreezeColumns> <div class=\"thf-grid thf-grid-freeze\"> <div class=\"thf-grid-header-group\"> <div class=\"thf-grid-row\"> <thf-grid-head *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-title\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" t-freeze=\"true\" t-position=\"{{ '0-' + i }}\" [t-width]=\"column.width\" [t-align]=\"column.align\" [t-title]=\"column.label\"> </thf-grid-head> </div> </div> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\" (keydown.control.delete)=\"removeRow($event, row)\" (keydown.esc)=\"cancelRow($event, row)\"> <thf-grid-cell *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-cell\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" t-freeze=\"true\" [t-align]=\"column.align\" [t-readonly]=\"column.readonly\" [t-required]=\"column.required\" t-position=\"{{ (j + 1) + '-' + i }}\" [t-width]=\"column.width\" [(t-value)]=\"row[column.property]\"> </thf-grid-cell> </div> </div> </div> </ng-template> <!-- FIM: Coluna com as colunas congeladas --> <!-- Coluna com as colunas nornais --> <ng-template #divColumns> <div class=\"thf-grid thf-grid-normal\"> <div class=\"thf-grid-header-group\"> <div class=\"thf-grid-row\"> <thf-grid-head *ngFor=\"let column of columns; index as i\" class=\"thf-grid-title\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" [t-align]=\"column.align\" t-position=\"{{ '0-' + (i + freezeColumns.length) }}\" [t-title]=\"column.label\" [t-width]=\"column.width\"> </thf-grid-head> </div> </div> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\" (keydown.control.delete)=\"removeRow($event, row)\" (keydown.esc)=\"cancelRow($event, row)\"> <thf-grid-cell *ngFor=\"let column of columns; index as i\" class=\"thf-grid-cell\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" [t-align]=\"column.align\" [t-readonly]=\"column.readonly\" [t-required]=\"column.required\" t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length) }}\" [(t-value)]=\"row[column.property]\" [t-width]=\"column.width\"> </thf-grid-cell> </div> </div> </div> </ng-template> <!-- FIM: Coluna com as colunas nornais --> <!-- Coluna com as colunas de ação --> <ng-template #divActionColumns> <div class=\"thf-grid thf-grid-actions\"> <div class=\"thf-grid-header-group\"> <div class=\"thf-grid-row\"> <thf-grid-head *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-title\" t-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\" [t-title]=\"column.label\" [t-align]=\"column.align\"> </thf-grid-head> </div> </div> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\" (keydown.control.delete)=\"removeRow($event, row)\" (keydown.esc)=\"cancelRow($event, row)\"> <thf-grid-cell-action *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-cell\" t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length + columns.length) }}\" [t-value]=\"row[column.property]\"> </thf-grid-cell-action> </div> </div> </div> </ng-template> <!-- FIM: Coluna com as colunas de ação --> ","styles":[".thf-grid-wrapper { /* margin: 30px; */ overflow: auto; border: 1px solid #eceeee; /* width: 100%; */ /* border: 1px solid red; */ /* display: table-cell; */ } .thf-grid { display: table; border-right: none; border-bottom: none; } .thf-grid-cell-normal::-webkit-scrollbar, .thf-grid-row-wrapper::-webkit-scrollbar { border-radius: 2px; height: 4px; opacity: 0.5; width: 4px; } .thf-grid-cell-normal::-webkit-scrollbar-thumb, .thf-grid-row-wrapper::-webkit-scrollbar-thumb { background-color: #0c9abe; } .thf-grid .fixed { display: table; } .thf-grid-header-group { display: table-header-group; } .thf-grid-body { display: table-row-group; } .thf-grid-row { display: table-row; } .thf-grid-title, .thf-grid-cell { display: table-cell; border: none; } .thf-grid-cell-freeze { border-right: 2px solid #ceeaf2; } .thf-grid-cell-action { color: blue; border-left: 2px solid #ceeaf2; } .thf-grid-freeze, .thf-grid-actions { width: 100%; } .thf-grid-normal { width: 100%; } .thf-grid-cell-normal { overflow: auto; } .thf-grid-footer { display: table-footer-group; } .thf-grid-footer-wrapper { border: 1px solid #eceeee; border-top: none; } "]}]}],"members":{"tableElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":53,"character":3},"arguments":["table"]}]}],"tableWrapper":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":54,"character":3},"arguments":["wrapper"]}]}],"rowActions":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":63,"character":3},"arguments":["t-row-actions"]}]}],"columns":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":68,"character":3},"arguments":["t-columns"]}]}],"data":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":88,"character":3},"arguments":["t-data"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":91,"character":31},{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":92,"character":19},{"__symbolic":"reference","module":"@angular/core","name":"Renderer2","line":93,"character":14}]}],"ngOnDestroy":[{"__symbolic":"method"}],"debounceResize":[{"__symbolic":"method"}],"cancelRow":[{"__symbolic":"method"}],"removeRow":[{"__symbolic":"method"}],"tableKeydown":[{"__symbolic":"method"}],"tableClick":[{"__symbolic":"method"}],"saveRow":[{"__symbolic":"method"}],"insertRow":[{"__symbolic":"method"}],"isEmptyRow":[{"__symbolic":"method"}],"selectCell":[{"__symbolic":"method"}]}}}}]