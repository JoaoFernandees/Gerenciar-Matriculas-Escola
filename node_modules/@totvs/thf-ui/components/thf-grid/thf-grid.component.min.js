import{ChangeDetectorRef,Component,ElementRef,Input,Renderer2,ViewChild}from"@angular/core";var ThfGridComponent=function(){function e(e,t,i){var r=this;this.changeDetectorRef=e,this.elRef=t,this.lastCell="0-0",this.lastRow=0,this.lastColumn=0,this.currencyCell="0-0",this.currencyRow=0,this.currencyColumn=0,this.logger=!1,this.width="100%",this.widthFreeze=0,this.widthActions=0,this._columns=[],this.rowActions={},this.data=[],this.debounceResize(),this.resizeListener=i.listen("window","resize",function(e){r.debounceResize()})}return Object.defineProperty(e.prototype,"columns",{get:function(){return this._columns.filter(function(e){return!0!==e.freeze&&!0!==e.action})},set:function(e){this._columns=e.slice(),this._columns.forEach(function(e){e.label=e.label||e.property,!0===e.freeze?e.cssWidth=(e.width||100)+"px":e.cssWidth=e.width?e.width+"px":"100%"})},enumerable:!0,configurable:!0}),e.prototype.ngOnDestroy=function(){this.resizeListener&&this.resizeListener()},e.prototype.debounceResize=function(){var e=this;clearTimeout(this.timeoutResize),this.timeoutResize=setTimeout(function(){var t=e.tableWrapper.nativeElement.offsetWidth;e.width=t-(e.widthFreeze+8)-e.widthActions+"px"},100)},Object.defineProperty(e.prototype,"freezeColumns",{get:function(){var e=this._columns.filter(function(e){return!0===e.freeze});return this.widthFreeze=e.reduce(function(e,t){return e+(t.width||100)},0),e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"actionColumns",{get:function(){var e=this._columns.filter(function(e){return!0===e.action});return this.widthActions=e.length>0?56:0,e},enumerable:!0,configurable:!0}),e.prototype.cancelRow=function(e,t){var i=this,r=e.path.find(function(e){return e.id});if(r){var n=r.id.split("-")[0];if(this.isEmptyRow(n)){if(!this.removeRow(e,t))return;this.currencyObj=Object.assign({},this.data[this.currencyRow-1])}else this.data[+n-1]=Object.assign({},this.currencyObj),setTimeout(function(){return i.selectCell(i.currencyRow,i.currencyColumn)})}},e.prototype.removeRow=function(e,t){if(this.rowActions.beforeRemove&&!this.rowActions.beforeRemove(Object.assign({},t)))return!1;var i=this.data.indexOf(t);return this.data.splice(i,1),this.changeDetectorRef.detectChanges(),0===this.data.length||i===this.data.length?this.selectCell(this.currencyRow-1,this.currencyColumn):this.selectCell(this.currencyRow,this.currencyColumn),!0},e.prototype.tableKeydown=function(e,t){var i=e.target.id.split("-"),r=i[0],n=i[1],o=+(r=+r),l=+(n=+n);if("down"===t){if(r<=this.data.length&&o++,r===this.data.length)if(0!==r&&this.isEmptyRow(r))o--;else{if(!this.saveRow(r))return;if(!this.insertRow())return}}else"up"===t&&r>0?o--:"left"===t&&n>0?l--:"right"===t&&n<this._columns.length-1?l++:"next"===t?n<this._columns.length-1?(l++,e.preventDefault()):r<this.data.length&&(l=0,o++,e.preventDefault()):"prior"===t&&(n>0?(l--,e.preventDefault()):r>0&&(l=this._columns.length-1,o--,e.preventDefault()));if(this.currencyCell!==o+"-"+l){if(o!==this.currencyRow&&r>0&&this.data.length>=r)if(this.isEmptyRow(r)){if(!this.removeRow(e,r))return}else if(!this.saveRow(r))return;this.currencyRow!==o&&(this.currencyObj=Object.assign({},this.data[o-1])),this.lastCell=e.target.id,this.lastRow=r,this.lastColumn=n,this.selectCell(o,l)}},e.prototype.tableClick=function(e){var t=e.path.find(function(e){return e.id});if(t){if(this.currencyCell!==t.id){var i=t.id.split("-"),r=i[0],n=+r,o=+i[1];if(n!==this.currencyRow){if(this.currencyRow>0)if(this.isEmptyRow(this.currencyRow)){if(!this.removeRow(e,r))return}else if(!this.saveRow(this.currencyRow))return void this.selectCell(this.currencyRow,this.currencyColumn);this.currencyObj=Object.assign({},this.data[n-1])}this.lastCell=this.currencyCell,this.lastRow=this.currencyRow,this.lastColumn=this.currencyColumn,this.currencyCell=t.id,this.currencyRow=n,this.currencyColumn=o}}else this.selectCell(this.currencyRow,this.currencyColumn)},e.prototype.saveRow=function(e){var t=this,i=this.data[e-1];if(!Object.keys(i).some(function(e){return i[e]!==t.currencyObj[e]}))return!0;if(this.rowActions.beforeSave&&!this.rowActions.beforeSave(i,this.currencyObj))return!1;var r=[];return this.columns.forEach(function(e){!0!==e.required||i[e.property]||r.push(e.property)}),0===r.length},e.prototype.insertRow=function(){var e={};return!(this.rowActions.beforeInsert&&!this.rowActions.beforeInsert(e))&&(this.data.push(e),this.changeDetectorRef.detectChanges(),!0)},e.prototype.isEmptyRow=function(e){var t=this.data[e-1];return!!t&&!Object.keys(t).some(function(e){return t[e]})},e.prototype.selectCell=function(e,t){var i=this.elRef.nativeElement.querySelector("[id='"+e+"-"+t+"']");i&&(this.currencyCell=e+"-"+t,this.currencyRow=e,this.currencyColumn=t,i.focus())},e.decorators=[{type:Component,args:[{selector:"thf-grid",template:'<div class="thf-grid-wrapper thf-grid-row-wrapper" #wrapper> <div *ngIf="logger"> lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br> lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br> lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br> <hr> currencyObj: {{ currencyObj | json }} <hr> </div> <div class="thf-grid"> <div class="thf-grid-body"> <div class="thf-grid-row" #table (keydown.arrowup)="tableKeydown($event, \'up\')" (keydown.arrowdown)="tableKeydown($event, \'down\')" (keydown.arrowleft)="tableKeydown($event, \'left\')" (keydown.arrowright)="tableKeydown($event, \'right\')" (keydown.tab)="tableKeydown($event, \'next\')" (keydown.shift.tab)="tableKeydown($event, \'prior\')" (click)="tableClick($event)" (contextmenu)="tableClick($event)" (dblclick)="tableClick($event)"> <div class="thf-grid-cell thf-grid-cell-freeze" *ngIf="freezeColumns.length > 0"> <ng-container *ngTemplateOutlet="divFreezeColumns"></ng-container> </div> <div class="thf-grid-cell thf-grid-cell-normal" [style.width]="width" [style.max-width]="width" [style.min-width]="width"> <ng-container *ngTemplateOutlet="divColumns"></ng-container> </div> <div class="thf-grid-cell thf-grid-cell-action" *ngIf="actionColumns.length > 0"> <ng-container *ngTemplateOutlet="divActionColumns"></ng-container> </div> </div> </div> </div> \x3c!-- <div class="thf-grid-footer-wrapper"> <div class="thf-grid-footer"> <div class="links"><a href="#">RODAPÉ</a></div> </div> </div> --\x3e </div> \x3c!-- Coluna com as colunas congeladas --\x3e <ng-template #divFreezeColumns> <div class="thf-grid thf-grid-freeze"> <div class="thf-grid-header-group"> <div class="thf-grid-row"> <thf-grid-head *ngFor="let column of freezeColumns; index as i" class="thf-grid-title" [style.width]="column.cssWidth" [style.max-width]="column.cssWidth" [style.min-width]="column.cssWidth" t-freeze="true" t-position="{{ \'0-\' + i }}" [t-width]="column.width" [t-align]="column.align" [t-title]="column.label"> </thf-grid-head> </div> </div> <div class="thf-grid-body"> <div class="thf-grid-row" *ngFor="let row of data; index as j" (keydown.control.delete)="removeRow($event, row)" (keydown.esc)="cancelRow($event, row)"> <thf-grid-cell *ngFor="let column of freezeColumns; index as i" class="thf-grid-cell" [style.width]="column.cssWidth" [style.max-width]="column.cssWidth" [style.min-width]="column.cssWidth" t-freeze="true" [t-align]="column.align" [t-readonly]="column.readonly" [t-required]="column.required" t-position="{{ (j + 1) + \'-\' + i }}" [t-width]="column.width" [(t-value)]="row[column.property]"> </thf-grid-cell> </div> </div> </div> </ng-template> \x3c!-- FIM: Coluna com as colunas congeladas --\x3e \x3c!-- Coluna com as colunas nornais --\x3e <ng-template #divColumns> <div class="thf-grid thf-grid-normal"> <div class="thf-grid-header-group"> <div class="thf-grid-row"> <thf-grid-head *ngFor="let column of columns; index as i" class="thf-grid-title" [style.width]="column.cssWidth" [style.max-width]="column.cssWidth" [style.min-width]="column.cssWidth" [t-align]="column.align" t-position="{{ \'0-\' + (i + freezeColumns.length) }}" [t-title]="column.label" [t-width]="column.width"> </thf-grid-head> </div> </div> <div class="thf-grid-body"> <div class="thf-grid-row" *ngFor="let row of data; index as j" (keydown.control.delete)="removeRow($event, row)" (keydown.esc)="cancelRow($event, row)"> <thf-grid-cell *ngFor="let column of columns; index as i" class="thf-grid-cell" [style.width]="column.cssWidth" [style.max-width]="column.cssWidth" [style.min-width]="column.cssWidth" [t-align]="column.align" [t-readonly]="column.readonly" [t-required]="column.required" t-position="{{ (j + 1) + \'-\' + (i + freezeColumns.length) }}" [(t-value)]="row[column.property]" [t-width]="column.width"> </thf-grid-cell> </div> </div> </div> </ng-template> \x3c!-- FIM: Coluna com as colunas nornais --\x3e \x3c!-- Coluna com as colunas de ação --\x3e <ng-template #divActionColumns> <div class="thf-grid thf-grid-actions"> <div class="thf-grid-header-group"> <div class="thf-grid-row"> <thf-grid-head *ngFor="let column of actionColumns; index as i" class="thf-grid-title" t-position="{{ \'0-\' + (i + freezeColumns.length + columns.length) }}" [t-title]="column.label" [t-align]="column.align"> </thf-grid-head> </div> </div> <div class="thf-grid-body"> <div class="thf-grid-row" *ngFor="let row of data; index as j" (keydown.control.delete)="removeRow($event, row)" (keydown.esc)="cancelRow($event, row)"> <thf-grid-cell-action *ngFor="let column of actionColumns; index as i" class="thf-grid-cell" t-position="{{ (j + 1) + \'-\' + (i + freezeColumns.length + columns.length) }}" [t-value]="row[column.property]"> </thf-grid-cell-action> </div> </div> </div> </ng-template> \x3c!-- FIM: Coluna com as colunas de ação --\x3e ',styles:[".thf-grid-wrapper { /* margin: 30px; */ overflow: auto; border: 1px solid #eceeee; /* width: 100%; */ /* border: 1px solid red; */ /* display: table-cell; */ } .thf-grid { display: table; border-right: none; border-bottom: none; } .thf-grid-cell-normal::-webkit-scrollbar, .thf-grid-row-wrapper::-webkit-scrollbar { border-radius: 2px; height: 4px; opacity: 0.5; width: 4px; } .thf-grid-cell-normal::-webkit-scrollbar-thumb, .thf-grid-row-wrapper::-webkit-scrollbar-thumb { background-color: #0c9abe; } .thf-grid .fixed { display: table; } .thf-grid-header-group { display: table-header-group; } .thf-grid-body { display: table-row-group; } .thf-grid-row { display: table-row; } .thf-grid-title, .thf-grid-cell { display: table-cell; border: none; } .thf-grid-cell-freeze { border-right: 2px solid #ceeaf2; } .thf-grid-cell-action { color: blue; border-left: 2px solid #ceeaf2; } .thf-grid-freeze, .thf-grid-actions { width: 100%; } .thf-grid-normal { width: 100%; } .thf-grid-cell-normal { overflow: auto; } .thf-grid-footer { display: table-footer-group; } .thf-grid-footer-wrapper { border: 1px solid #eceeee; border-top: none; } "]}]}],e.ctorParameters=function(){return[{type:ChangeDetectorRef},{type:ElementRef},{type:Renderer2}]},e.propDecorators={tableElement:[{type:ViewChild,args:["table"]}],tableWrapper:[{type:ViewChild,args:["wrapper"]}],rowActions:[{type:Input,args:["t-row-actions"]}],columns:[{type:Input,args:["t-columns"]}],data:[{type:Input,args:["t-data"]}]},e}();export{ThfGridComponent};