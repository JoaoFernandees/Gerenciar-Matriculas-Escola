/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { ThfInfoOrientation } from './thf-info-orietation.enum';
/** @type {?} */
var thfInfoOrientationDefault = ThfInfoOrientation.Vertical;
var ThfInfoBaseComponent = /** @class */ (function () {
    function ThfInfoBaseComponent() {
        this._orientation = thfInfoOrientationDefault;
        this.thfInfoOrientation = ThfInfoOrientation;
    }
    Object.defineProperty(ThfInfoBaseComponent.prototype, "labelSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelSize;
        },
        /**
         * @optional
         *
         * @description
         *
         * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `t-label` quando o componente for
         * utilizado na orientação horizontal.
         *
         * Valores válidos:
         *  - `[1 .. 11]`
         *
         * > A propriedade `t-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `t-label` quando o componente for
         * utilizado na orientação horizontal.
         *
         * Valores válidos:
         *  - `[1 .. 11]`
         *
         * > A propriedade `t-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                this._labelSize = undefined;
            }
            else {
                value = parseInt((/** @type {?} */ (value)), 10);
                this._labelSize = (value < 1 || value > 11) ? undefined : value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInfoBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o layout de exibição.
         *
         * > Quando definido na horizontal, pode-se utilizar a propriedade `t-label-size` para um maior controle das informações exibidas.
         *
         * @default `vertical`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o layout de exibição.
         *
         * > Quando definido na horizontal, pode-se utilizar a propriedade `t-label-size` para um maior controle das informações exibidas.
         *
         * \@default `vertical`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(ThfInfoOrientation).includes(value) ? value : thfInfoOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    ThfInfoBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        labelSize: [{ type: Input, args: ['t-label-size',] }],
        orientation: [{ type: Input, args: ['t-orientation',] }],
        value: [{ type: Input, args: ['t-value',] }]
    };
    return ThfInfoBaseComponent;
}());
export { ThfInfoBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfInfoBaseComponent.prototype._labelSize;
    /**
     * @type {?}
     * @private
     */
    ThfInfoBaseComponent.prototype._orientation;
    /** @type {?} */
    ThfInfoBaseComponent.prototype.thfInfoOrientation;
    /**
     * Valor do rótulo a ser exibido.
     * @type {?}
     */
    ThfInfoBaseComponent.prototype.label;
    /**
     * Valor do conteúdo a ser exibido.
     * @type {?}
     */
    ThfInfoBaseComponent.prototype.value;
}
