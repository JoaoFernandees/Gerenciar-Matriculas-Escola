var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { ThfInfoBaseComponent } from './thf-info-base.component';
/**
 * \@docsExtends ThfInfoBaseComponent
 *
 * \@description
 *
 * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
 * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão Totvs.
 *
 * \@example
 *
 * <example name="thf-info-basic" title="Totvs Info Basic">
 *  <file name="sample-thf-info-basic/sample-thf-info-basic.component.html"> </file>
 *  <file name="sample-thf-info-basic/sample-thf-info-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-info-labs" title="Totvs Info Labs">
 *  <file name="sample-thf-info-labs/sample-thf-info-labs.component.html"> </file>
 *  <file name="sample-thf-info-labs/sample-thf-info-labs.component.ts"> </file>
 * </example>
 */
var ThfInfoComponent = /** @class */ (function (_super) {
    __extends(ThfInfoComponent, _super);
    function ThfInfoComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfInfoComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-info', template: "<div class=\"thf-info\" [class.thf-row]=\"orientation === thfInfoOrientation.Horizontal && labelSize\"> <div class=\"thf-info-container-title\" [ngClass]=\"labelSize && orientation === thfInfoOrientation.Horizontal ? 'thf-sm-' + labelSize : ''\" [class.thf-info-label-horizontal]=\"orientation === thfInfoOrientation.Horizontal\" [class.thf-text-nowrap]=\"orientation === thfInfoOrientation.Horizontal && !labelSize\"> <span class=\"thf-info-label\"> {{ orientation === thfInfoOrientation.Horizontal ? label + ':' : label }} </span> </div> <div [ngClass]=\"labelSize && orientation === thfInfoOrientation.Horizontal ? 'thf-sm-' + (12 - labelSize) : ''\" [class.thf-info-container-content]=\"orientation !== thfInfoOrientation.Horizontal\" [class.thf-info-value-horizontal]=\"orientation === thfInfoOrientation.Horizontal\"> <span class=\"thf-info-value\">{{ value }}</span> </div> </div> "
                },] },
    ];
    return ThfInfoComponent;
}(ThfInfoBaseComponent));
export { ThfInfoComponent };
