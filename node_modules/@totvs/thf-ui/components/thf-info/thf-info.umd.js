(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['thf-info'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfInfoOrientation = {
    /** O valor será exibido na horizontal, ao lado direito em relação ao label. */
    Horizontal: 'horizontal',
    /** Exibe o valor na vertical, ou seja, abaixo do label. */
    Vertical: 'vertical',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfInfoOrientationDefault = ThfInfoOrientation.Vertical;
var ThfInfoBaseComponent = /** @class */ (function () {
    function ThfInfoBaseComponent() {
        this._orientation = thfInfoOrientationDefault;
        this.thfInfoOrientation = ThfInfoOrientation;
    }
    Object.defineProperty(ThfInfoBaseComponent.prototype, "labelSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelSize;
        },
        /**
         * @optional
         *
         * @description
         *
         * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `t-label` quando o componente for
         * utilizado na orientação horizontal.
         *
         * Valores válidos:
         *  - `[1 .. 11]`
         *
         * > A propriedade `t-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `t-label` quando o componente for
         * utilizado na orientação horizontal.
         *
         * Valores válidos:
         *  - `[1 .. 11]`
         *
         * > A propriedade `t-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                this._labelSize = undefined;
            }
            else {
                value = parseInt((/** @type {?} */ (value)), 10);
                this._labelSize = (value < 1 || value > 11) ? undefined : value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInfoBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o layout de exibição.
         *
         * > Quando definido na horizontal, pode-se utilizar a propriedade `t-label-size` para um maior controle das informações exibidas.
         *
         * @default `vertical`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o layout de exibição.
         *
         * > Quando definido na horizontal, pode-se utilizar a propriedade `t-label-size` para um maior controle das informações exibidas.
         *
         * \@default `vertical`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(ThfInfoOrientation).includes(value) ? value : thfInfoOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    ThfInfoBaseComponent.propDecorators = {
        label: [{ type: core.Input, args: ['t-label',] }],
        labelSize: [{ type: core.Input, args: ['t-label-size',] }],
        orientation: [{ type: core.Input, args: ['t-orientation',] }],
        value: [{ type: core.Input, args: ['t-value',] }]
    };
    return ThfInfoBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfInfoBaseComponent
 *
 * \@description
 *
 * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
 * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão Totvs.
 *
 * \@example
 *
 * <example name="thf-info-basic" title="Totvs Info Basic">
 *  <file name="sample-thf-info-basic/sample-thf-info-basic.component.html"> </file>
 *  <file name="sample-thf-info-basic/sample-thf-info-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-info-labs" title="Totvs Info Labs">
 *  <file name="sample-thf-info-labs/sample-thf-info-labs.component.html"> </file>
 *  <file name="sample-thf-info-labs/sample-thf-info-labs.component.ts"> </file>
 * </example>
 */
var ThfInfoComponent = /** @class */ (function (_super) {
    __extends(ThfInfoComponent, _super);
    function ThfInfoComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfInfoComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-info', template: "<div class=\"thf-info\" [class.thf-row]=\"orientation === thfInfoOrientation.Horizontal && labelSize\"> <div class=\"thf-info-container-title\" [ngClass]=\"labelSize && orientation === thfInfoOrientation.Horizontal ? 'thf-sm-' + labelSize : ''\" [class.thf-info-label-horizontal]=\"orientation === thfInfoOrientation.Horizontal\" [class.thf-text-nowrap]=\"orientation === thfInfoOrientation.Horizontal && !labelSize\"> <span class=\"thf-info-label\"> {{ orientation === thfInfoOrientation.Horizontal ? label + ':' : label }} </span> </div> <div [ngClass]=\"labelSize && orientation === thfInfoOrientation.Horizontal ? 'thf-sm-' + (12 - labelSize) : ''\" [class.thf-info-container-content]=\"orientation !== thfInfoOrientation.Horizontal\" [class.thf-info-value-horizontal]=\"orientation === thfInfoOrientation.Horizontal\"> <span class=\"thf-info-value\">{{ value }}</span> </div> </div> "
                },] },
    ];
    return ThfInfoComponent;
}(ThfInfoBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-info.
 */
var ThfInfoModule = /** @class */ (function () {
    function ThfInfoModule() {
    }
    ThfInfoModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfInfoComponent
                    ],
                    exports: [ThfInfoComponent],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfInfoModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfInfoOrientation = ThfInfoOrientation;
exports.ThfInfoComponent = ThfInfoComponent;
exports.ThfInfoModule = ThfInfoModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
