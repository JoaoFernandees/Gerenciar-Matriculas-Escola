var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectorRef, Component, ContentChild, IterableDiffers, ViewChild } from '@angular/core';
import { isTypeof } from '../../utils/util';
import { ThfPopupComponent } from '../thf-popup/thf-popup.component';
import { ThfListViewBaseComponent } from './thf-list-view-base.component';
import { ThfListViewContentTemplateDirective } from './thf-list-view-content-template/thf-list-view-content-template.directive';
import { ThfListViewDetailTemplateDirective } from './thf-list-view-detail-template/thf-list-view-detail-template.directive';
/**
 * \@docsExtends ThfListViewBaseComponent
 *
 * \@example
 *
 * <example name="thf-list-view-basic" title="Totvs List View Basic">
 *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.html"> </file>
 *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-list-view-labs" title="Totvs List View Labs">
 *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.html"> </file>
 *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-list-view-hiring-processes" title="Totvs List View - Hiring Processes">
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
var ThfListViewComponent = /** @class */ (function (_super) {
    __extends(ThfListViewComponent, _super);
    function ThfListViewComponent(changeDetector, differs) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(ThfListViewComponent.prototype, "hasContentTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "hasDetailTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewDetailTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "displayShowMoreButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "showButtonsActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "showPopupActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "titleHasAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.titleAction.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "visibleActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.actions && this.actions.filter(function (action) { return action.visible !== false; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfListViewComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.initShowDetail();
    };
    /**
     * @return {?}
     */
    ThfListViewComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkItemsChange();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfListViewComponent.prototype.checkTitleType = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfListViewComponent.prototype.getItemTitle = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title ?
            this.listViewContentTemplate.title(item) : item[this.propertyTitle];
    };
    /**
     * @return {?}
     */
    ThfListViewComponent.prototype.hasItems = /**
     * @return {?}
     */
    function () {
        return this.items && this.items.length > 0;
    };
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    ThfListViewComponent.prototype.returnBooleanValue = /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    function (listViewAction, item) {
        return isTypeof(listViewAction.disabled, 'function') ? ((/** @type {?} */ (listViewAction))).disabled(item) : listViewAction.disabled;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfListViewComponent.prototype.trackBy = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    ThfListViewComponent.prototype.togglePopup = /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    function (item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.thfPopupComponent.toggle(item);
    };
    /**
     * @private
     * @return {?}
     */
    ThfListViewComponent.prototype.checkItemsChange = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfListViewComponent.prototype.initShowDetail = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach(function (item) { return item.$showDetail = _this.listViewDetailTemplate.showDetail(item); });
        }
    };
    ThfListViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-list-view', template: " <div [class.thf-list-view-main-container-header]=\"showHeader\" [class.thf-list-view-main-container]=\"!showHeader\" [style.height.px]=\"height\"> <div *ngIf=\"showHeader\" class=\"thf-list-view-main-header\"> <div class=\"thf-checkbox-group-item\"> <div class=\"thf-list-view-main-select\"> <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\" [class.thf-checkbox-group-input-checked]=\"selectAll\" [class.thf-checkbox-group-input-indeterminate]=\"selectAll === null\"> <label class=\"thf-checkbox-group-label thf-clickable\" (click)=\"selectAllListItems()\"> {{ literals.selectAll }} </label> </div> </div> </div> <div class=\"thf-list-view-main-content\"> <div class=\"thf-list-view\" *ngIf=\"!hasItems()\"> <div class=\"thf-list-view-container-no-data thf-text-center\"> <span> {{ literals.noData }} </span> </div> </div> <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\"> <div class=\"thf-list-view\"> <div class=\"thf-list-view-container\"> <div class=\"thf-list-view-header\"> <div class=\"thf-list-view-title\" [ngSwitch]=\"checkTitleType(item)\"> <div *ngIf=\"select\" class=\"thf-list-view-select\"> <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\" [class.thf-checkbox-group-input-checked]=\"item.$selected\"> <label class=\"thf-checkbox-group-label thf-clickable\" (click)=\"selectListItem(item)\"></label> </div> <a *ngSwitchCase=\"'externalLink'\" class=\"thf-list-view-title-link\" target=\"_blank\" [href]=\"item[propertyLink]\" (click)=\"runTitleAction($event)\"> {{ getItemTitle(item) }} </a> <a *ngSwitchCase=\"'internalLink'\" class=\"thf-list-view-title-link\" [routerLink]=\"item[propertyLink]\" (click)=\"runTitleAction($event)\"> {{ getItemTitle(item) }} </a> <span *ngSwitchCase=\"'noLink'\" class=\"thf-list-view-title-no-link\" [class.thf-list-view-title-link]=\"titleHasAction\" (click)=\"titleHasAction && runTitleAction($event)\"> {{ getItemTitle(item) }} </span> </div> <div *ngIf=\"showButtonsActions\" class=\"thf-list-view-actions\"> <thf-button *ngFor=\"let action of visibleActions\" t-small=\"true\" [t-disabled]=\"returnBooleanValue(action, item)\" [t-icon]=\"action.icon\" [t-label]=\"action.label\" [t-type]=\"action.type\" (t-click)=\"onClickAction(action, item)\"> </thf-button> </div> <div *ngIf=\"showPopupActions\" class=\"thf-list-view-more-actions\"> <span #popupTarget class=\"thf-icon thf-icon-more thf-list-view-more-icon thf-clickable\" (click)=\"togglePopup(item, popupTarget)\"> </span> </div> </div> <div *ngIf=\"hasContentTemplate\" class=\"thf-list-view-content\"> <ng-template [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"> </ng-template> </div> <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"thf-list-view-detail\"> <ng-template [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"> </ng-template> </div> </div> <div *ngIf=\"hasDetailTemplate\" class=\"thf-list-view-detail-button\"> <span class=\"thf-clickable\" (click)=\"item.$showDetail = !item.$showDetail\"> {{ item.$showDetail ? literals.hideDetails : literals.showDetails }} </span> </div> </div> </ng-container> </div> </div> <div *ngIf=\"displayShowMoreButton\" class=\"thf-mb-2 thf-text-center\"> <thf-button [t-disabled]=\"showMoreDisabled\" [t-label]=\"literals.loadMoreData\" (t-click)=\"onShowMore()\"> </thf-button> </div> <thf-popup #popup [t-actions]=\"actions\" [t-target]=\"popupTarget\"> </thf-popup> ",
                    animations: [
                        trigger('showHideDetail', [
                            state('*', style({ 'overflow-y': 'visible' })),
                            state('void', style({ 'overflow-y': 'hidden' })),
                            transition('* => void', [
                                style({ height: '*', 'overflow-y': 'hidden' }),
                                animate(100, style({ height: 0 }))
                            ]),
                            transition('void => *', [
                                style({ height: '0' }),
                                animate(100, style({ height: '*' }))
                            ])
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfListViewComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: IterableDiffers }
    ]; };
    ThfListViewComponent.propDecorators = {
        listViewContentTemplate: [{ type: ContentChild, args: [ThfListViewContentTemplateDirective,] }],
        listViewDetailTemplate: [{ type: ContentChild, args: [ThfListViewDetailTemplateDirective,] }],
        thfPopupComponent: [{ type: ViewChild, args: ['popup',] }]
    };
    return ThfListViewComponent;
}(ThfListViewBaseComponent));
export { ThfListViewComponent };
if (false) {
    /** @type {?} */
    ThfListViewComponent.prototype.listViewContentTemplate;
    /** @type {?} */
    ThfListViewComponent.prototype.listViewDetailTemplate;
    /** @type {?} */
    ThfListViewComponent.prototype.thfPopupComponent;
    /**
     * @type {?}
     * @private
     */
    ThfListViewComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfListViewComponent.prototype.changeDetector;
}
