var __extends=this&&this.__extends||function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();import{animate,state,style,transition,trigger}from"@angular/animations";import{ChangeDetectorRef,Component,ContentChild,IterableDiffers,ViewChild}from"@angular/core";import{isTypeof}from"../../utils/util";import{ThfPopupComponent}from"../thf-popup/thf-popup.component";import{ThfListViewBaseComponent}from"./thf-list-view-base.component";import{ThfListViewContentTemplateDirective}from"./thf-list-view-content-template/thf-list-view-content-template.directive";import{ThfListViewDetailTemplateDirective}from"./thf-list-view-detail-template/thf-list-view-detail-template.directive";var ThfListViewComponent=function(t){function e(e,i){var n=t.call(this)||this;return n.changeDetector=e,n.differ=i.find([]).create(null),n}return __extends(e,t),Object.defineProperty(e.prototype,"hasContentTemplate",{get:function(){return!!this.listViewContentTemplate},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hasDetailTemplate",{get:function(){return!!this.listViewDetailTemplate},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"displayShowMoreButton",{get:function(){return this.items&&this.items.length>0&&this.showMore.observers.length>0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"showButtonsActions",{get:function(){return this.visibleActions&&this.visibleActions.length>0&&this.visibleActions.length<=2},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"showPopupActions",{get:function(){return this.visibleActions&&this.visibleActions.length>2},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"titleHasAction",{get:function(){return this.titleAction.observers.length>0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"visibleActions",{get:function(){return this.actions&&this.actions.filter(function(t){return!1!==t.visible})},enumerable:!0,configurable:!0}),e.prototype.ngAfterContentInit=function(){this.initShowDetail()},e.prototype.ngDoCheck=function(){this.checkItemsChange()},e.prototype.checkTitleType=function(t){return this.propertyLink&&t[this.propertyLink]?t[this.propertyLink].startsWith("http")?"externalLink":"internalLink":"noLink"},e.prototype.getItemTitle=function(t){return this.hasContentTemplate&&this.listViewContentTemplate.title?this.listViewContentTemplate.title(t):t[this.propertyTitle]},e.prototype.hasItems=function(){return this.items&&this.items.length>0},e.prototype.returnBooleanValue=function(t,e){return isTypeof(t.disabled,"function")?t.disabled(e):t.disabled},e.prototype.trackBy=function(t){return t},e.prototype.togglePopup=function(t,e){this.popupTarget=e,this.changeDetector.detectChanges(),this.thfPopupComponent.toggle(t)},e.prototype.checkItemsChange=function(){var t=this.differ.diff(this.items);t&&this.selectAll&&(this.selectAll=null),t&&this.items&&this.items.length&&this.select&&!this.hideSelectAll&&(this.showHeader=!0)},e.prototype.initShowDetail=function(){var t=this;this.items&&this.items.length>0&&this.hasDetailTemplate&&this.listViewDetailTemplate.showDetail&&this.items.forEach(function(e){return e.$showDetail=t.listViewDetailTemplate.showDetail(e)})},e.decorators=[{type:Component,args:[{selector:"thf-list-view",template:' <div [class.thf-list-view-main-container-header]="showHeader" [class.thf-list-view-main-container]="!showHeader" [style.height.px]="height"> <div *ngIf="showHeader" class="thf-list-view-main-header"> <div class="thf-checkbox-group-item"> <div class="thf-list-view-main-select"> <input class="thf-input thf-checkbox-group-input" type="checkbox" [class.thf-checkbox-group-input-checked]="selectAll" [class.thf-checkbox-group-input-indeterminate]="selectAll === null"> <label class="thf-checkbox-group-label thf-clickable" (click)="selectAllListItems()"> {{ literals.selectAll }} </label> </div> </div> </div> <div class="thf-list-view-main-content"> <div class="thf-list-view" *ngIf="!hasItems()"> <div class="thf-list-view-container-no-data thf-text-center"> <span> {{ literals.noData }} </span> </div> </div> <ng-container *ngFor="let item of items; let index = index; trackBy: trackBy"> <div class="thf-list-view"> <div class="thf-list-view-container"> <div class="thf-list-view-header"> <div class="thf-list-view-title" [ngSwitch]="checkTitleType(item)"> <div *ngIf="select" class="thf-list-view-select"> <input class="thf-input thf-checkbox-group-input" type="checkbox" [class.thf-checkbox-group-input-checked]="item.$selected"> <label class="thf-checkbox-group-label thf-clickable" (click)="selectListItem(item)"></label> </div> <a *ngSwitchCase="\'externalLink\'" class="thf-list-view-title-link" target="_blank" [href]="item[propertyLink]" (click)="runTitleAction($event)"> {{ getItemTitle(item) }} </a> <a *ngSwitchCase="\'internalLink\'" class="thf-list-view-title-link" [routerLink]="item[propertyLink]" (click)="runTitleAction($event)"> {{ getItemTitle(item) }} </a> <span *ngSwitchCase="\'noLink\'" class="thf-list-view-title-no-link" [class.thf-list-view-title-link]="titleHasAction" (click)="titleHasAction && runTitleAction($event)"> {{ getItemTitle(item) }} </span> </div> <div *ngIf="showButtonsActions" class="thf-list-view-actions"> <thf-button *ngFor="let action of visibleActions" t-small="true" [t-disabled]="returnBooleanValue(action, item)" [t-icon]="action.icon" [t-label]="action.label" [t-type]="action.type" (t-click)="onClickAction(action, item)"> </thf-button> </div> <div *ngIf="showPopupActions" class="thf-list-view-more-actions"> <span #popupTarget class="thf-icon thf-icon-more thf-list-view-more-icon thf-clickable" (click)="togglePopup(item, popupTarget)"> </span> </div> </div> <div *ngIf="hasContentTemplate" class="thf-list-view-content"> <ng-template [ngTemplateOutlet]="listViewContentTemplate.templateRef" [ngTemplateOutletContext]="{ $implicit: item, index: index }"> </ng-template> </div> <div @showHideDetail *ngIf="hasDetailTemplate && item.$showDetail" class="thf-list-view-detail"> <ng-template [ngTemplateOutlet]="listViewDetailTemplate.templateRef" [ngTemplateOutletContext]="{ $implicit: item, index: index }"> </ng-template> </div> </div> <div *ngIf="hasDetailTemplate" class="thf-list-view-detail-button"> <span class="thf-clickable" (click)="item.$showDetail = !item.$showDetail"> {{ item.$showDetail ? literals.hideDetails : literals.showDetails }} </span> </div> </div> </ng-container> </div> </div> <div *ngIf="displayShowMoreButton" class="thf-mb-2 thf-text-center"> <thf-button [t-disabled]="showMoreDisabled" [t-label]="literals.loadMoreData" (t-click)="onShowMore()"> </thf-button> </div> <thf-popup #popup [t-actions]="actions" [t-target]="popupTarget"> </thf-popup> ',animations:[trigger("showHideDetail",[state("*",style({"overflow-y":"visible"})),state("void",style({"overflow-y":"hidden"})),transition("* => void",[style({height:"*","overflow-y":"hidden"}),animate(100,style({height:0}))]),transition("void => *",[style({height:"0"}),animate(100,style({height:"*"}))])])]}]}],e.ctorParameters=function(){return[{type:ChangeDetectorRef},{type:IterableDiffers}]},e.propDecorators={listViewContentTemplate:[{type:ContentChild,args:[ThfListViewContentTemplateDirective]}],listViewDetailTemplate:[{type:ContentChild,args:[ThfListViewDetailTemplateDirective]}],thfPopupComponent:[{type:ViewChild,args:["popup"]}]},e}(ThfListViewBaseComponent);export{ThfListViewComponent};