/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
/**
 * \@description
 *
 * Este componente é utilizado em conjunto thf-list.
 */
var ThfListItemComponent = /** @class */ (function () {
    function ThfListItemComponent(viewRef, renderer) {
        var _this = this;
        /**
         * Lista de ações a ser executadas no item. Ao passar até duas ações é exibido apenas botões,
         * se passar de duas ações é exibido um menu com todas as opções.
         */
        this.actions = [];
        this.showAction = false;
        this.showLink = true;
        this.showDetail = false;
        this.showContent = true;
        this.closeListActionsWhenClickedOut = function (event) {
            if (_this.checkClickedOutActionsIcon(event)) {
                _this.closeActions();
            }
        };
        this._parentRef = viewRef['_view']['component'];
        this.collapsed = true;
        this.clickListener = renderer.listen('document', 'click', this.closeListActionsWhenClickedOut);
    }
    /**
     * @return {?}
     */
    ThfListItemComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.content && this.content.nativeElement.children.length === 0) {
            this.showContent = false;
        }
        if (this.detailsContent && this.detailsContent.nativeElement.children.length === 0) {
            this.showLink = false;
        }
    };
    /**
     * @return {?}
     */
    ThfListItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // remove click listener from document
        this.clickListener();
    };
    Object.defineProperty(ThfListItemComponent.prototype, "parentRef", {
        get: /**
         * @return {?}
         */
        function () {
            return this._parentRef;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfListItemComponent.prototype.checkClickedOutActionsIcon = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.actionsIconElement && !this.actionsIconElement.nativeElement.contains(event.target);
    };
    /**
     * @private
     * @return {?}
     */
    ThfListItemComponent.prototype.closeActions = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.actions) {
            this.showAction = false;
        }
    };
    ThfListItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-list-item', template: "<div class=\"thf-list-border\"> <div class=\"thf-list-header-container\"> <div *ngIf=\"title\" class=\"thf-list-title-container\"> <span class=\"thf-list-title\">{{title}}</span> </div> <div id=\"divActionButtonsId\" class=\"thf-list-actions-button\" *ngIf=\"actions.length > 0 && actions.length <= 2\"> <thf-button *ngFor=\"let action of actions\" [t-label]=\"action.label\" (t-click)=\"parentRef[action.function](index)\" t-small=\"true\"></thf-button> </div> <div class=\"thf-list-more-button\" (click)=\"showAction = !showAction\" *ngIf=\"actions.length > 0 && actions.length > 2\"> <span #actionsIconElement class=\"thf-icon thf-icon-more thf-list-icon-action\"></span> <div class=\"thf-list-actions\" [hidden]=\"!showAction\"> <div class=\"thf-list-action\" *ngFor=\"let action of actions\" (click)=\"parentRef[action.function](index)\"> {{action.label}} </div> </div> </div> </div> <div class=\"thf-list-item-container\" #content [hidden]=\"!showContent\"> <ng-content select=\"thf-list-item-content\"></ng-content> </div> <div class=\"thf-list-detail-container\" [hidden]=\"!showDetail\" #detailsContent> <ng-content select=\"thf-list-item-detail\"></ng-content> </div> <div select=\"details\" class=\"thf-list-details-link\" (click)=\"showDetail = !showDetail\" [hidden]=\"!showLink\"> <a class=\"thf-list-details\" *ngIf=\"!showDetail\">Exibir detalhes completamente</a> <a class=\"thf-list-details\" *ngIf=\"showDetail\">Ocultar detalhes completamente</a> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfListItemComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Renderer2 }
    ]; };
    ThfListItemComponent.propDecorators = {
        title: [{ type: Input, args: ['t-title',] }],
        index: [{ type: Input, args: ['t-index',] }],
        actions: [{ type: Input, args: ['t-actions',] }],
        actionsIconElement: [{ type: ViewChild, args: ['actionsIconElement', { read: ElementRef },] }],
        detailsContent: [{ type: ViewChild, args: ['detailsContent',] }],
        content: [{ type: ViewChild, args: ['content',] }]
    };
    return ThfListItemComponent;
}());
export { ThfListItemComponent };
if (false) {
    /**
     * Parâmetro que recebe um titulo a ser renderizado no item.
     * @type {?}
     */
    ThfListItemComponent.prototype.title;
    /**
     * Índice do for utilizado para controles internos do componente.
     * @type {?}
     */
    ThfListItemComponent.prototype.index;
    /**
     * Lista de ações a ser executadas no item. Ao passar até duas ações é exibido apenas botões,
     * se passar de duas ações é exibido um menu com todas as opções.
     * @type {?}
     */
    ThfListItemComponent.prototype.actions;
    /** @type {?} */
    ThfListItemComponent.prototype.actionsIconElement;
    /** @type {?} */
    ThfListItemComponent.prototype.detailsContent;
    /** @type {?} */
    ThfListItemComponent.prototype.content;
    /** @type {?} */
    ThfListItemComponent.prototype._parentRef;
    /** @type {?} */
    ThfListItemComponent.prototype.collapsed;
    /** @type {?} */
    ThfListItemComponent.prototype.showAction;
    /** @type {?} */
    ThfListItemComponent.prototype.showLink;
    /** @type {?} */
    ThfListItemComponent.prototype.showDetail;
    /** @type {?} */
    ThfListItemComponent.prototype.showContent;
    /**
     * @type {?}
     * @private
     */
    ThfListItemComponent.prototype.clickListener;
    /**
     * @type {?}
     * @private
     */
    ThfListItemComponent.prototype.closeListActionsWhenClickedOut;
}
