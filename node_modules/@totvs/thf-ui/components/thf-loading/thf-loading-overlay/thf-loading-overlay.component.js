var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectorRef } from '@angular/core';
import { ThfLoadingOverlayBaseComponent } from './thf-loading-overlay-base.component';
/**
 *
 * \@docsExtends ThfLoadingOverlayBaseComponent
 *
 * \@example
 *
 * <example name="thf-loading-overlay-basic" title="Totvs Loading Overlay Basic">
 *  <file name="sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.html"> </file>
 *  <file name="sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-loading-overlay-labs" title="Totvs Loading Overlay Labs">
 *  <file name="sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.html"> </file>
 *  <file name="sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-loading-overlay-connection-test" title="Totvs Loading Overlay - Connection Test">
 *  <file name="sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.html"> </file>
 *  <file name="sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.ts"> </file>
 * </example>
 */
var ThfLoadingOverlayComponent = /** @class */ (function (_super) {
    __extends(ThfLoadingOverlayComponent, _super);
    function ThfLoadingOverlayComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    ThfLoadingOverlayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-loading-overlay', template: "<div [class.thf-overlay-absolute]=\"!screenLock\" [class.thf-overlay-fixed]=\"screenLock\"> <thf-loading class=\"thf-loading-overlay-content\" [t-text]=\"text\"></thf-loading> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfLoadingOverlayComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return ThfLoadingOverlayComponent;
}(ThfLoadingOverlayBaseComponent));
export { ThfLoadingOverlayComponent };
if (false) {
    /** @type {?} */
    ThfLoadingOverlayComponent.prototype.changeDetector;
}
