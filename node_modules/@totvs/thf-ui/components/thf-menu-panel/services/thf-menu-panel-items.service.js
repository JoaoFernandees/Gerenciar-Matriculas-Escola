/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a comunicação entre os items do thf-menu-panel.
 */
var ThfMenuPanelItemsService = /** @class */ (function () {
    function ThfMenuPanelItemsService() {
        this.subjectChild = new Subject();
        this.subjectParent = new Subject();
    }
    // Recebe do thf-menu-panel-item sua informação de click.
    // Recebe do thf-menu-panel-item sua informação de click.
    /**
     * @return {?}
     */
    ThfMenuPanelItemsService.prototype.receiveFromChildMenuClicked = 
    // Recebe do thf-menu-panel-item sua informação de click.
    /**
     * @return {?}
     */
    function () {
        return this.subjectChild.asObservable();
    };
    // Recebe do thf-menu-panel as informações processadas do click de um thf-menu-panel-item.
    // Recebe do thf-menu-panel as informações processadas do click de um thf-menu-panel-item.
    /**
     * @return {?}
     */
    ThfMenuPanelItemsService.prototype.receiveFromParentMenuClicked = 
    // Recebe do thf-menu-panel as informações processadas do click de um thf-menu-panel-item.
    /**
     * @return {?}
     */
    function () {
        return this.subjectParent.asObservable();
    };
    // Envia informações do click do thf-menu-panel-item para o thf-menu
    // Envia informações do click do thf-menu-panel-item para o thf-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelItemsService.prototype.sendToParentMenuClicked = 
    // Envia informações do click do thf-menu-panel-item para o thf-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectChild.next(menu);
    };
    // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.
    // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelItemsService.prototype.sendToChildMenuClicked = 
    // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectParent.next(menu);
    };
    ThfMenuPanelItemsService.decorators = [
        { type: Injectable },
    ];
    return ThfMenuPanelItemsService;
}());
export { ThfMenuPanelItemsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfMenuPanelItemsService.prototype.subjectChild;
    /**
     * @type {?}
     * @private
     */
    ThfMenuPanelItemsService.prototype.subjectParent;
}
