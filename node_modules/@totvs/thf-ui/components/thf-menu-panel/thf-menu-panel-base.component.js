/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { v4 as uuid } from 'uuid';
import { isExternalLink } from '../../utils/util';
/**
 * \@description
 *
 * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
 * em páginas internas, externas da aplicação ou aciona uma ação.
 *
 * O componente `thf-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
 * itens de menu como textos, links para redirecionamento, ações e ícones.
 */
var ThfMenuPanelBaseComponent = /** @class */ (function () {
    function ThfMenuPanelBaseComponent() {
    }
    Object.defineProperty(ThfMenuPanelBaseComponent.prototype, "menus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._menus;
        },
        /** Lista dos itens do `thf-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
        set: /**
         * Lista dos itens do `thf-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         * @param {?} menus
         * @return {?}
         */
        function (menus) {
            this._menus = Array.isArray(menus) ? menus : [];
            this.setMenuExtraProperties(this._menus);
            this.validateMenus(this._menus);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.setMenuExtraProperties = /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        var _this = this;
        menus.forEach(function (menuItem) { return _this.setMenuItemProperties((/** @type {?} */ (menuItem))); });
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.setMenuItemProperties = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        menuItem.id = menuItem.id || uuid();
        menuItem.type = this.setMenuType(menuItem);
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.setMenuType = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.validateMenu = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (!menuItem.label) {
            throw new Error('O atributo ThfMenuPanelItem.label não pode ser vazio.');
        }
        if (!menuItem.icon) {
            throw new Error('O atributo ThfMenuPanelItem.icon não pode ser vazio.');
        }
    };
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.validateMenus = /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        var _this = this;
        menus.forEach(function (menu) { return _this.validateMenu(menu); });
    };
    ThfMenuPanelBaseComponent.propDecorators = {
        menus: [{ type: Input, args: ['t-menus',] }]
    };
    return ThfMenuPanelBaseComponent;
}());
export { ThfMenuPanelBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfMenuPanelBaseComponent.prototype._menus;
}
