/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ThfMenuPanelItemsService } from '../services/thf-menu-panel-items.service';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que implementa cada item do thf-menu-panel.
 */
var ThfMenuPanelItemComponent = /** @class */ (function () {
    function ThfMenuPanelItemComponent(menuItemsService) {
        this.menuItemsService = menuItemsService;
    }
    /**
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemsSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // subscribe to menu component messages
        this.subscribeMenuClickedFromParent();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.clickMenuItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked(this.menuItemInternal);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.activateMenu = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.menuItemInternal.isSelected = this.menuItemInternal.id === menu.id;
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.processMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (this.menuItemInternal.type === 'internalLink') {
            this.activateMenu(menu.active);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.subscribeMenuClickedFromParent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.itemsSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(function (menu) {
            _this.processMenuItem(menu);
        });
    };
    ThfMenuPanelItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-menu-panel-item', template: "<!-- menu com link interno --> <a *ngIf=\"menuItemInternal.type === 'internalLink'\" [routerLink]=\"menuItemInternal.link\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu com link externo --> <a *ngIf=\"menuItemInternal.type === 'externalLink'\" [href]=\"menuItemInternal.link\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu sem link --> <a *ngIf=\"menuItemInternal.type === 'noLink'\" href=\"javascript:;\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <ng-template #menuItemTemplate> <div class=\"thf-menu-panel-item\" t-tooltip-position=\"right\" [class.thf-menu-panel-item-selected]=\"menuItemInternal.isSelected\" [t-tooltip]=\"menuItemInternal.label\" (click)=\"clickMenuItem($event);\"> <span class=\"thf-icon {{menuItemInternal.icon}}\"></span> </div> </ng-template> "
                },] },
    ];
    /** @nocollapse */
    ThfMenuPanelItemComponent.ctorParameters = function () { return [
        { type: ThfMenuPanelItemsService }
    ]; };
    ThfMenuPanelItemComponent.propDecorators = {
        menuItemInternal: [{ type: Input, args: ['t-menu-item-internal',] }]
    };
    return ThfMenuPanelItemComponent;
}());
export { ThfMenuPanelItemComponent };
if (false) {
    /** @type {?} */
    ThfMenuPanelItemComponent.prototype.itemsSubscription;
    /** @type {?} */
    ThfMenuPanelItemComponent.prototype.menuItemInternal;
    /**
     * @type {?}
     * @private
     */
    ThfMenuPanelItemComponent.prototype.menuItemsService;
}
