var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a interface `ThfMenuFilter`, utilizado para fazer requisições ao serviço informado pelo usuário,
 * caso for uma URL, no componente `thf-menu`.
 */
var ThfMenuService = /** @class */ (function () {
    function ThfMenuService(http) {
        this.http = http;
    }
    Object.defineProperty(ThfMenuService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @return {?}
     */
    ThfMenuService.prototype.configProperties = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this._url = url;
    };
    /**
     * @param {?} search
     * @param {?=} params
     * @return {?}
     */
    ThfMenuService.prototype.getFilteredData = /**
     * @param {?} search
     * @param {?=} params
     * @return {?}
     */
    function (search, params) {
        /** @type {?} */
        var filterParams = __assign({ search: search }, params);
        return this.http.get(this.url, { params: filterParams })
            .pipe(map(function (response) { return response && response.items; }));
    };
    ThfMenuService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ThfMenuService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfMenuService;
}());
export { ThfMenuService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfMenuService.prototype._url;
    /**
     * @type {?}
     * @private
     */
    ThfMenuService.prototype.http;
}
