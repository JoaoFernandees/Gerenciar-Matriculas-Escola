/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ThfMenuItemsService } from '../services/thf-menu-items.service';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que implementa cada item do thf-menu.
 */
var ThfMenuItemComponent = /** @class */ (function () {
    function ThfMenuItemComponent(menuItemsService) {
        this.menuItemsService = menuItemsService;
        this.maxHeight = 0;
        this.subItemSize = 74;
    }
    /**
     * @return {?}
     */
    ThfMenuItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfMenuItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // subscribe to menu component messages
        this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(function (menu) {
            _this.processMenuItem(menu);
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMenuItemComponent.prototype.clickMenuItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked({
                link: this.link,
                action: this.action,
                id: this.id,
                icon: this.icon,
                label: this.label,
                level: this.level,
                subItems: this.subItems,
                isSelected: this.isSelected,
                isOpened: this.isOpened,
                shortLabel: this.shortLabel,
                type: this.type
            });
        }
    };
    /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @param {?} activatedByRoute
     * @return {?}
     */
    ThfMenuItemComponent.prototype.accordionAnimation = /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @param {?} activatedByRoute
     * @return {?}
     */
    function (menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
        if (this.id === menuOpened['id']) {
            this.maxHeight = this.subItems.length * this.subItemSize;
        }
        if (hasSubItemOpened) {
            this.maxHeight = menuOpened['isOpened'] ?
                (this.maxHeight + menuOpened.subItems.length * this.subItemSize) :
                (this.maxHeight - menuOpened.subItems.length * this.subItemSize);
            if (activatedByRoute) {
                this.maxHeight = this.getMinimumHeight(0, this, menuActive);
            }
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuItemComponent.prototype.activateMenu = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.isSelected = menu && this.id === menu.id;
    };
    /**
     * @private
     * @param {?} minimumHeight
     * @param {?} menuItem
     * @param {?} menuActive
     * @return {?}
     */
    ThfMenuItemComponent.prototype.getMinimumHeight = /**
     * @private
     * @param {?} minimumHeight
     * @param {?} menuItem
     * @param {?} menuActive
     * @return {?}
     */
    function (minimumHeight, menuItem, menuActive) {
        minimumHeight += this.subItemSize;
        if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
            for (var index = 0; index < menuItem.subItems.length; index++) {
                minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
            }
        }
        return minimumHeight;
    };
    /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?=} activatedByRoute
     * @return {?}
     */
    ThfMenuItemComponent.prototype.groupedMenu = /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?=} activatedByRoute
     * @return {?}
     */
    function (menuActive, menuOpened, activatedByRoute) {
        if (activatedByRoute === void 0) { activatedByRoute = false; }
        /** @type {?} */
        var hasSubItemOpened = (menuOpened && this.id !== menuOpened['id']) ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
        this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
        this.isSelected = (menuActive && !this.isOpened) ? this.hasSubItem(this.subItems, menuActive['id']) : false;
        if (!this.isOpened) {
            this.maxHeight = 0;
            return;
        }
        this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
    };
    /**
     * @private
     * @param {?} subItems
     * @param {?} id
     * @return {?}
     */
    ThfMenuItemComponent.prototype.hasSubItem = /**
     * @private
     * @param {?} subItems
     * @param {?} id
     * @return {?}
     */
    function (subItems, id) {
        var _this = this;
        if (subItems) {
            return subItems.some(function (item) {
                return item['id'] === id ? true : _this.hasSubItem(item.subItems, id);
            });
        }
    };
    /**
     * @private
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @return {?}
     */
    ThfMenuItemComponent.prototype.isMenuOpened = /**
     * @private
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @return {?}
     */
    function (menuOpened, hasSubItemOpened) {
        if (menuOpened) {
            return (this.id === menuOpened['id']) ? menuOpened['isOpened'] : hasSubItemOpened;
        }
        return false;
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuItemComponent.prototype.processMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (this.type === 'internalLink') {
            this.activateMenu(menu.active);
            return;
        }
        if (this.type === 'subItems') {
            this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
            return;
        }
    };
    ThfMenuItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-menu-item', template: "<!-- menu com link interno --> <a *ngIf=\"type === 'internalLink'\" class=\"thf-menu-item-link\" [routerLink]=\"link\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu com link externo --> <a *ngIf=\"type === 'externalLink'\" class=\"thf-menu-item-link\" [href]=\"link\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu sem link --> <a *ngIf=\"type === 'noLink'\" class=\"thf-menu-item-link\" href=\"javascript:;\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu com sub itens --> <div *ngIf=\"type === 'subItems'\" class=\"thf-menu-item-link thf-clickable\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate;\"></ng-container> <div [hidden]=\"collapsedMenu\" class=\"thf-menu-sub-items\" [style.maxHeight.px]=\"maxHeight\"> <div *ngFor=\"let subItem of subItems\"> <thf-menu-item [t-action]=\"subItem.action\" [t-id]=\"subItem.id\" [t-label]=\"subItem.label\" [t-level]=\"subItem.level\" [t-link]=\"subItem.link\" [t-sub-items]=\"subItem.subItems\" [t-type]=\"subItem.type\"> </thf-menu-item> </div> </div> </div> <ng-template #menuItemTemplate> <div class=\"thf-menu-item\" [class.thf-menu-icon-container]=\"level === 1 && icon\" [class.thf-menu-item-selected]=\"isSelected\" [class.thf-menu-item-level-two]=\"level === 2\" [class.thf-menu-item-level-three]=\"level === 3\" [class.thf-menu-item-level-four]=\"level === 4\" [class.thf-menu-item-grouper-up]=\"type === 'subItems' && isOpened\" [class.thf-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\" (click)=\"clickMenuItem($event);\"> <span *ngIf=\"level === 1 && icon\" class=\"thf-icon {{icon}} thf-menu-icon-item\"></span> <span *ngIf=\"type === 'subItems' && !collapsedMenu\" class=\"thf-icon thf-menu-group-icon\" [class.thf-icon-arrow-up]=\"isOpened\" [class.thf-icon-arrow-down]=\"!isOpened\"> </span> <div [class.thf-menu-icon-label]=\"level === 1 && icon\"> {{ label }} </div> <div *ngIf=\"collapsedMenu\" class=\"thf-menu-short-label\">{{ shortLabel }}</div> </div> </ng-template> "
                },] },
    ];
    /** @nocollapse */
    ThfMenuItemComponent.ctorParameters = function () { return [
        { type: ThfMenuItemsService }
    ]; };
    ThfMenuItemComponent.propDecorators = {
        action: [{ type: Input, args: ['t-action',] }],
        collapsedMenu: [{ type: Input, args: ['t-collapsed-menu',] }],
        icon: [{ type: Input, args: ['t-icon',] }],
        id: [{ type: Input, args: ['t-id',] }],
        isOpened: [{ type: Input, args: ['t-is-opened',] }],
        isSelected: [{ type: Input, args: ['t-is-selected',] }],
        label: [{ type: Input, args: ['t-label',] }],
        level: [{ type: Input, args: ['t-level',] }],
        link: [{ type: Input, args: ['t-link',] }],
        shortLabel: [{ type: Input, args: ['t-short-label',] }],
        subItems: [{ type: Input, args: ['t-sub-items',] }],
        type: [{ type: Input, args: ['t-type',] }]
    };
    return ThfMenuItemComponent;
}());
export { ThfMenuItemComponent };
if (false) {
    /** @type {?} */
    ThfMenuItemComponent.prototype.maxHeight;
    /**
     * @type {?}
     * @private
     */
    ThfMenuItemComponent.prototype.itemSubscription;
    /**
     * @type {?}
     * @private
     */
    ThfMenuItemComponent.prototype.subItemSize;
    /** @type {?} */
    ThfMenuItemComponent.prototype.action;
    /** @type {?} */
    ThfMenuItemComponent.prototype.collapsedMenu;
    /** @type {?} */
    ThfMenuItemComponent.prototype.icon;
    /** @type {?} */
    ThfMenuItemComponent.prototype.id;
    /** @type {?} */
    ThfMenuItemComponent.prototype.isOpened;
    /** @type {?} */
    ThfMenuItemComponent.prototype.isSelected;
    /** @type {?} */
    ThfMenuItemComponent.prototype.label;
    /** @type {?} */
    ThfMenuItemComponent.prototype.level;
    /** @type {?} */
    ThfMenuItemComponent.prototype.link;
    /** @type {?} */
    ThfMenuItemComponent.prototype.shortLabel;
    /** @type {?} */
    ThfMenuItemComponent.prototype.subItems;
    /** @type {?} */
    ThfMenuItemComponent.prototype.type;
    /**
     * @type {?}
     * @private
     */
    ThfMenuItemComponent.prototype.menuItemsService;
}
