var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewContainerRef } from '@angular/core';
import { NavigationCancel, NavigationEnd, Router } from '@angular/router';
import { map } from 'rxjs/operators';
import { getFormattedLink, isMobile, openExternalLink } from '../../utils/util';
import { ThfMenuBaseComponent } from './thf-menu-base.component';
import { ThfMenuItemsService } from './services/thf-menu-items.service';
import { ThfMenuService } from './services/thf-menu.service';
/** @type {?} */
var thfMenuDebounceTime = 400;
/** @type {?} */
var thfMenuMinLength = 3;
/** @type {?} */
var thfMenuRootLevel = 1;
/**
 * \@docsExtends ThfMenuBaseComponent
 *
 * \@description
 *
 * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
 *
 * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
 * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
 * então o menu alternará novamente para o estado aberto.
 *
 * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
 * um serviço customizado implementando a interface `ThfMenuFilter`.
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     ThfModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '\@angular/core';
 *
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * \@NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * \@example
 *
 * <example name="thf-menu-basic" title="Totvs Menu Basic">
 *   <file name="sample-thf-menu-basic/sample-thf-menu-basic.component.html"> </file>
 *   <file name="sample-thf-menu-basic/sample-thf-menu-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-menu-labs" title="Totvs Menu Labs">
 *   <file name="sample-thf-menu-labs/sample-thf-menu-labs.component.html"> </file>
 *   <file name="sample-thf-menu-labs/sample-thf-menu-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-menu-human-resources" title="Totvs Menu - Human Resources">
 *   <file name="sample-thf-menu-human-resources/sample-thf-menu-human-resources.component.html"> </file>
 *   <file name="sample-thf-menu-human-resources/sample-thf-menu-human-resources.component.ts"> </file>
 *   <file name="sample-thf-menu-human-resources/sample-thf-menu-human-resources.service.ts"> </file>
 * </example>
 */
var ThfMenuComponent = /** @class */ (function (_super) {
    __extends(ThfMenuComponent, _super);
    function ThfMenuComponent(viewRef, element, renderer, router, menuItemsService, changeDetector, menuService) {
        var _this = _super.call(this, menuService) || this;
        _this.element = element;
        _this.renderer = renderer;
        _this.router = router;
        _this.menuItemsService = menuItemsService;
        _this.changeDetector = changeDetector;
        _this.collapsedMenu = false;
        _this.filterLoading = false;
        _this.menuMobileOpened = false;
        _this.noData = false;
        _this.filteringItems = false;
        _this.menuInitialized = false;
        _this.menuPrevious = null;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    Object.defineProperty(ThfMenuComponent.prototype, "isActiveItemMenuSubMenu", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMenuComponent.prototype, "enableCollapseButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.allowCollapseMenu && !this.collapsedMenu && !this.menuMobileOpened;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.filteringItems && this.filter) {
            return;
        }
        /** @type {?} */
        var menuCurrent = JSON.stringify(this.menus);
        if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
            this.updateMenu();
        }
        this.validateCollapseClass();
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscribeToMenuItem();
        this.subscribeToRoute();
        setTimeout(function () {
            /** @type {?} */
            var urlRouter = _this.checkingRouterChildrenFragments();
            _this.checkActiveMenuByUrl(urlRouter);
        });
    };
    /**
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    ThfMenuComponent.prototype.activateMenuByUrl = /**
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    function (urlPath, menus) {
        var _this = this;
        if (menus) {
            return menus.some(function (menu) {
                /** @type {?} */
                var formattedLink = getFormattedLink(menu.link);
                if (formattedLink === urlPath) {
                    _this.linkActive = formattedLink;
                    _this.activateMenuItem(menu);
                    return true;
                }
                else {
                    return _this.activateMenuByUrl(urlPath, menu.subItems);
                }
            });
        }
    };
    /**
     * @param {?} urlPath
     * @return {?}
     */
    ThfMenuComponent.prototype.checkActiveMenuByUrl = /**
     * @param {?} urlPath
     * @return {?}
     */
    function (urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    ThfMenuComponent.prototype.debounceFilter = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        var _this = this;
        clearTimeout(this.timeoutFilter);
        this.timeoutFilter = setTimeout(function () {
            _this.filterProcess(filter);
        }, thfMenuDebounceTime);
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.subscribeToMenuItem = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe(function (menu) {
            _this.clickMenuItem(menu);
        });
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.subscribeToRoute = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.routeSubscription = this.router.events.subscribe(function (val) {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                /** @type {?} */
                var urlRouter = _this.checkingRouterChildrenFragments();
                _this.checkActiveMenuByUrl(urlRouter);
            }
        });
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.toggleMenuCollapse = /**
     * @return {?}
     */
    function () {
        this.collapsedMenu = !this.collapsedMenu;
        this.validateCollapseClass();
        if (this.groupedMenuItem) {
            this.groupedMenuItem = this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
            this.toggleGroupedMenuItem();
        }
        if (this.activeMenuItem) {
            this.activateCollapseSubMenuItem();
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
        this.updateMenu();
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.toggleMenuMobile = /**
     * @return {?}
     */
    function () {
        this.menuMobileOpened = !this.menuMobileOpened;
        if (isMobile()) {
            return;
        }
        if (this.menuMobileOpened) {
            this.createResizeListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.activateCollapseSubMenuItem = /**
     * @private
     * @return {?}
     */
    function () {
        this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
        if (!this.collapsedMenu && this.activeMenuItem['level'] > thfMenuRootLevel && this.isActiveItemMenuSubMenu) {
            this.openParentMenu(this.activeMenuItem);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.activateMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.activeMenuItem = menu;
        this.linkActive = menu.link;
        if (this.activeMenuItem['level'] > thfMenuRootLevel) {
            this.openParentMenu(this.activeMenuItem);
        }
        else {
            this.groupedMenuItem = null;
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
    };
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    ThfMenuComponent.prototype.areSubMenus = /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        return menus.every(function (menu) { return menu['level'] > thfMenuRootLevel; });
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.checkingRouterChildrenFragments = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? "/" + childrenPrimary.segments.map(function (it) { return it.path; }).join('/') : '';
    };
    /**
     * @private
     * @param {?} activeMenuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.clearGroupMenuIfFirstLevel = /**
     * @private
     * @param {?} activeMenuItem
     * @return {?}
     */
    function (activeMenuItem) {
        if (activeMenuItem['level'] === thfMenuRootLevel) {
            this.groupedMenuItem = undefined;
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.clickMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu['type'] === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu['type'] === 'internalLink') {
            this.activateMenuItem(menu);
        }
        else if (menu['type'] === 'subItems') {
            if (this.filteringItems) {
                this.filteringItems = false;
            }
            this.groupMenuItem(menu);
        }
        if (menu['type'] !== 'subItems') {
            this.menuMobileOpened = false;
        }
    };
    /**
     * @private
     * @param {?=} menuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.convertToMenuItemFiltered = /**
     * @private
     * @param {?=} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (menuItem === void 0) { menuItem = { label: '', link: '' }; }
        var label = menuItem.label, link = menuItem.link;
        /** @type {?} */
        var menuItemFiltered = { label: label, link: link };
        this.setMenuItemProperties(menuItemFiltered);
        return menuItemFiltered;
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.createResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function () {
            _this.menuMobileOpened = false;
            _this.resizeListener();
        });
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.executeMenuAction = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (typeof menu.action === 'string') {
            this.parentRef[menu.action](menu);
        }
        else {
            menu.action.call(this.parentRef, menu);
        }
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    ThfMenuComponent.prototype.filterItems = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            var trimFilter, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        trimFilter = filter && filter.trim();
                        if (!trimFilter) return [3 /*break*/, 4];
                        this.filteredItems = [];
                        _a = this;
                        if (!this.filterService) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.filterOnService(trimFilter)];
                    case 1:
                        _b = _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _b = this.filterLocalItems(trimFilter);
                        _c.label = 3;
                    case 3:
                        _a.filteredItems = _b;
                        this.filteringItems = true;
                        return [3 /*break*/, 5];
                    case 4:
                        this.filteredItems = this.menus.slice();
                        this.filteringItems = false;
                        _c.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    ThfMenuComponent.prototype.filterLocalItems = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        /** @type {?} */
        var filteredItems = [];
        this.findItems(this.menus, filter.toLowerCase(), filteredItems);
        return filteredItems;
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    ThfMenuComponent.prototype.filterProcess = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        var _this = this;
        this.filterLoading = true;
        this.filterItems(filter).then(function () {
            _this.filterLoading = false;
            _this.showNoData();
            _this.changeDetector.detectChanges();
            _this.menuItemsService.sendToChildMenuClicked({ active: _this.activeMenuItem, grouped: _this.groupedMenuItem });
        }).catch(function (error) {
            _this.filterLoading = false;
            Promise.reject(error);
        });
    };
    /**
     * @private
     * @param {?=} search
     * @return {?}
     */
    ThfMenuComponent.prototype.filterOnService = /**
     * @private
     * @param {?=} search
     * @return {?}
     */
    function (search) {
        if (search === void 0) { search = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(search.length >= thfMenuMinLength)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.filterService.getFilteredData(search, this.params)
                                .pipe(map(function (menuItemsFiltered) { return menuItemsFiltered.map(function (menuItem) { return _this.convertToMenuItemFiltered(menuItem); }); }))
                                .toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, this.filteredItems];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} filter
     * @param {?} filteredItems
     * @return {?}
     */
    ThfMenuComponent.prototype.findItems = /**
     * @private
     * @param {?} menus
     * @param {?} filter
     * @param {?} filteredItems
     * @return {?}
     */
    function (menus, filter, filteredItems) {
        var _this = this;
        menus.forEach(function (menu) {
            if ((menu.label.toLowerCase().includes(filter) && !menu.subItems) ||
                (menu.subItems && _this.findItems(menu.subItems, filter, filteredItems))) {
                filteredItems.push(menu);
            }
        });
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.findParent = /**
     * @private
     * @param {?} menus
     * @param {?} menuItem
     * @return {?}
     */
    function (menus, menuItem) {
        /** @type {?} */
        var getParent = function (menuItems, id) {
            if (menuItems) {
                for (var index = 0; index < menuItems.length; index++) {
                    /** @type {?} */
                    var menu = menuItems[index];
                    if (menu.subItems && menu.subItems.find(function (subItem) { return subItem['id'] === id; })) {
                        return menu;
                    }
                    /** @type {?} */
                    var found = getParent(menu.subItems, id);
                    if (found) {
                        return found;
                    }
                }
            }
        };
        return getParent(menus, menuItem['id']);
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.findRootParent = /**
     * @private
     * @param {?} menus
     * @param {?} menu
     * @return {?}
     */
    function (menus, menu) {
        /** @type {?} */
        var findParent = this.findParent;
        /** @type {?} */
        var getRootParent = function (menuItems, menuItem) {
            /** @type {?} */
            var parent = findParent(menuItems, menuItem);
            if (parent['level'] !== thfMenuRootLevel) {
                parent = getRootParent(menuItems, parent);
            }
            return parent;
        };
        return getRootParent(menus, menu);
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.getActiveMenuParent = /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    function (menus, activeMenuItem, groupedMenuItem) {
        if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
            return this.findRootParent(menus, activeMenuItem);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.groupMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (this.collapsedMenu) {
            this.toggleMenuCollapse();
        }
        menu['isOpened'] = !menu['isOpened'];
        this.groupedMenuItem = menu;
        if (this.activeMenuItem && menu['isOpened']
            && this.isActiveItemMenuSubMenu
            && this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
            this.activateMenuItem(this.activeMenuItem);
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.isRootMenuEqualGroupedMenu = /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    function (menus, activeMenuItem, groupedMenuItem) {
        /** @type {?} */
        var activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
        return activeMenuRootParent['id'] === groupedMenuItem['id'];
    };
    /**
     * @private
     * @param {?} childMenu
     * @return {?}
     */
    ThfMenuComponent.prototype.openParentMenu = /**
     * @private
     * @param {?} childMenu
     * @return {?}
     */
    function (childMenu) {
        /** @type {?} */
        var parent = this.findParent(this.menus, childMenu);
        parent['isOpened'] = true;
        this.groupedMenuItem = parent;
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.showNoData = /**
     * @private
     * @return {?}
     */
    function () {
        this.noData = this.filteredItems.length === 0;
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.toggleGroupedMenuItem = /**
     * @private
     * @return {?}
     */
    function () {
        this.groupedMenuItem['isOpened'] = !this.collapsedMenu && this.allowCollapseMenu;
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.updateMenu = /**
     * @private
     * @return {?}
     */
    function () {
        this.menuInitialized = true;
        this.setMenuExtraProperties();
        this.filteredItems = this.menus.slice();
        this.menuPrevious = JSON.stringify(this.menus);
        this.validateMenus(this.menus);
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.validateCollapseClass = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var wrapper = this.element.nativeElement.parentNode;
        this.renderer[this.collapsedMenu && this.allowCollapseMenu ? 'addClass' : 'removeClass'](wrapper, 'thf-collapsed-menu');
    };
    ThfMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-menu', template: "<div *ngIf=\"menuMobileOpened\" class=\"thf-menu-overlay\" (click)=\"toggleMenuMobile()\"></div> <div class=\"thf-menu-mobile thf-clickable\" (click)=\"toggleMenuMobile()\"> <span class=\"thf-icon thf-icon-menu\"></span> </div> <div class=\"thf-menu\" [ngClass]=\"{ 'thf-menu-animation' : menuMobileOpened }\"> <div class=\"thf-menu-header-container\" [class.thf-menu-header-filter]=\"filter\"> <a href=\"./\"> <div [ngClass]=\"allowCollapseMenu && collapsedMenu ? 'thf-menu-panel-logo' : 'thf-menu-logo'\"></div> </a> <a *ngIf=\"enableCollapseButton\" class=\"thf-collapse-button-icon thf-clickable\" (click)=\"toggleMenuCollapse()\"> </a> <thf-menu-filter *ngIf=\"filter && !collapsedMenu\" [t-loading]=\"filterLoading\" (t-filter)=\"debounceFilter($event)\"> </thf-menu-filter> </div> <nav class=\"thf-menu-container\"> <!-- Inner e outer para esconder scroll --> <div class=\"thf-menu-outer\"> <div class=\"thf-menu-inner\"> <div *ngIf=\"noData\" class=\"thf-menu-item-wrapper\"> <div class=\"thf-menu-item-first\"> <div class=\"thf-menu-icon-container thf-menu-item-no-data\"> <span class=\"thf-icon thf-icon-info thf-menu-icon-item thf-lg-2\"></span> <div class=\"thf-lg-10 thf-menu-icon-label\"> {{literals.itemNotFound}} </div> </div> </div> </div> <div *ngFor=\"let menu of filteredItems, let menuIndex = index;\" class=\"thf-menu-item-wrapper\"> <thf-menu-item [class.thf-menu-item-first]=\"menuIndex === 0\" [t-action]=\"menu.action\" [t-collapsed-menu]=\"collapsedMenu\" [t-id]=\"menu.id\" [t-label]=\"menu.label\" [t-icon]=\"allowIcons ? menu.icon : null\" [t-level]=\"menu.level\" [t-link]=\"menu.link\" [t-short-label]=\"menu.shortLabel\" [t-sub-items]=\"menu.subItems\" [t-type]=\"menu.type\"> </thf-menu-item> </div> </div> </div> </nav> <div *ngIf=\"allowCollapseMenu && collapsedMenu\" class=\"thf-collapse-button-bottom thf-clickable\" (click)=\"toggleMenuCollapse()\"> <a class=\"thf-collapse-button-bottom-icon\"><span class=\"thf-icon thf-icon-menu\"></span></a> </div> </div> ",
                    providers: [ThfMenuItemsService, ThfMenuService]
                },] },
    ];
    /** @nocollapse */
    ThfMenuComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: Router },
        { type: ThfMenuItemsService },
        { type: ChangeDetectorRef },
        { type: ThfMenuService }
    ]; };
    return ThfMenuComponent;
}(ThfMenuBaseComponent));
export { ThfMenuComponent };
if (false) {
    /** @type {?} */
    ThfMenuComponent.prototype.activeMenuItem;
    /** @type {?} */
    ThfMenuComponent.prototype.collapsedMenu;
    /** @type {?} */
    ThfMenuComponent.prototype.filterLoading;
    /** @type {?} */
    ThfMenuComponent.prototype.groupedMenuItem;
    /** @type {?} */
    ThfMenuComponent.prototype.linkActive;
    /** @type {?} */
    ThfMenuComponent.prototype.menuMobileOpened;
    /** @type {?} */
    ThfMenuComponent.prototype.noData;
    /** @type {?} */
    ThfMenuComponent.prototype.parentRef;
    /** @type {?} */
    ThfMenuComponent.prototype.timeoutFilter;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.filteringItems;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.menuInitialized;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.menuPrevious;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.resizeListener;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.itemSubscription;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.routeSubscription;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.menuItemsService;
    /**
     * @type {?}
     * @private
     */
    ThfMenuComponent.prototype.changeDetector;
}
