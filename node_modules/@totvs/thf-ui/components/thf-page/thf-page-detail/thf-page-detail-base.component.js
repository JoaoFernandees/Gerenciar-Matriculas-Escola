var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, ViewChild } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from './../../../utils/util';
import { ThfPageContentComponent } from '../thf-page-content/thf-page-content.component';
/** @type {?} */
export var thfPageDetailLiteralsDefault = {
    en: (/** @type {?} */ ({
        back: 'Back',
        edit: 'Edit',
        remove: 'Remove'
    })),
    es: (/** @type {?} */ ({
        back: 'Volver',
        edit: 'Editar',
        remove: 'Eliminar'
    })),
    pt: (/** @type {?} */ ({
        back: 'Voltar',
        edit: 'Editar',
        remove: 'Remover'
    }))
};
/**
 * \@description
 *
 * O componente **thf-page-detail** é utilizado como container principal para a tela de detalhamento de um registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o thf-page-detail,
 * são elas:
 *  - Voltar (função: back);
 *  - Editar (função: edit);
 *  - Remover (função: remove);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 */
var ThfPageDetailBaseComponent = /** @class */ (function () {
    function ThfPageDetailBaseComponent() {
    }
    Object.defineProperty(ThfPageDetailBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfPageDetailLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-page-detail`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageDetailLiterals = {
         *    edit: 'Edição',
         *    remove: 'Exclusão',
         *    back: 'Menu'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageDetailLiterals = {
         *    remove: 'Excluir registro permanentemente'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-detail
         *   [t-literals]="customLiterals">
         * </thf-page-detail>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-page-detail`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageDetailLiterals = {
         *    edit: 'Edição',
         *    remove: 'Exclusão',
         *    back: 'Menu'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageDetailLiterals = {
         *    remove: 'Excluir registro permanentemente'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-detail
         *   [t-literals]="customLiterals">
         * </thf-page-detail>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, thfPageDetailLiteralsDefault[thfLocaleDefault], thfPageDetailLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfPageDetailLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageDetailBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /** Título da página. */
        set: /**
         * Título da página.
         * @param {?} title
         * @return {?}
         */
        function (title) {
            this._title = title;
            this.thfPageContent.recalculateHeaderSize();
        },
        enumerable: true,
        configurable: true
    });
    ThfPageDetailBaseComponent.propDecorators = {
        thfPageContent: [{ type: ViewChild, args: [ThfPageContentComponent,] }],
        breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
        literals: [{ type: Input, args: ['t-literals',] }],
        title: [{ type: Input, args: ['t-title',] }]
    };
    return ThfPageDetailBaseComponent;
}());
export { ThfPageDetailBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageDetailBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfPageDetailBaseComponent.prototype._title;
    /** @type {?} */
    ThfPageDetailBaseComponent.prototype.thfPageContent;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    ThfPageDetailBaseComponent.prototype.breadcrumb;
}
