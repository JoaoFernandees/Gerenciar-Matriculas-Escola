var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from './../../../utils/util';
import { ThfPageDefaultBaseComponent } from '../thf-page-default/thf-page-default-base.component';
/** @type {?} */
export var thfPageListLiteralsDefault = {
    en: (/** @type {?} */ ({
        otherActions: 'Other actions'
    })),
    es: (/** @type {?} */ ({
        otherActions: 'Otras acciones'
    })),
    pt: (/** @type {?} */ ({
        otherActions: 'Outras ações'
    }))
};
/**
 * \@description
 *
 * O componente `thf-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [thf-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`thf-disclaimer-group`](/documentation/thf-disclaimer-group).
 * @abstract
 */
var ThfPageListBaseComponent = /** @class */ (function (_super) {
    __extends(ThfPageListBaseComponent, _super);
    function ThfPageListBaseComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ThfPageListBaseComponent.prototype, "disclaimerGroup", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disclaimerGroup;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                value = (/** @type {?} */ ({}));
            }
            this._disclaimerGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageListBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfPageListLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-page-list`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Mais ações'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Ações da página'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-list
         *   [t-literals]="customLiterals">
         * </thf-page-list>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-page-list`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Mais ações'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Ações da página'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-list
         *   [t-literals]="customLiterals">
         * </thf-page-list>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, thfPageListLiteralsDefault[thfLocaleDefault], thfPageListLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfPageListLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfPageListBaseComponent.propDecorators = {
        breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
        disclaimerGroup: [{ type: Input, args: ['t-disclaimer-group',] }],
        filter: [{ type: Input, args: ['t-filter',] }],
        literals: [{ type: Input, args: ['t-literals',] }]
    };
    return ThfPageListBaseComponent;
}(ThfPageDefaultBaseComponent));
export { ThfPageListBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageListBaseComponent.prototype._disclaimerGroup;
    /**
     * @type {?}
     * @private
     */
    ThfPageListBaseComponent.prototype._literals;
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que implementa as propriedades da interface `ThfBreadcrumb`.
     * @type {?}
     */
    ThfPageListBaseComponent.prototype.breadcrumb;
    /**
     * \@description
     *
     * Objeto que implementa as propriedades da interface `ThfPageFilter`.
     * @type {?}
     */
    ThfPageListBaseComponent.prototype.filter;
    /**
     * @type {?}
     * @protected
     */
    ThfPageListBaseComponent.prototype.resizeListener;
}
