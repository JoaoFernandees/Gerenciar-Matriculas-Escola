/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Input } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { THF_CONTROL_POSITIONS } from './../../services/thf-control-position/thf-control-position.constants';
/** @type {?} */
var THF_POPOVER_DEFAULT_POSITION = 'right';
/** @type {?} */
var THF_POPOVER_DEFAULT_TRIGGER = 'click';
/** @type {?} */
var THF_POPOVER_TRIGGERS = ['click', 'hover'];
/**
 * \@description
 *
 * O componente `thf-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
 * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
 *
 * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
 * [**thf-tooltip**](https://thf.totvs.com.br/documentation/thf-tooltip?view=doc).
 *
 * Para conteúdos maiores recomenda-se o uso do [**thf-modal**](https://thf.totvs.com.br/documentation/thf-modal?view=doc).
 *
 * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
 * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
 * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
 *
 * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
 * Os eventos permitidos são: `click` e `hover`.
 *
 */
var ThfPopoverBaseComponent = /** @class */ (function () {
    function ThfPopoverBaseComponent() {
        // Controla se o popover fica oculto ou visível, por padrão é oculto.
        this.isHidden = true;
        this._hideArrow = false;
        this._position = THF_POPOVER_DEFAULT_POSITION;
        this._trigger = THF_POPOVER_DEFAULT_TRIGGER;
    }
    Object.defineProperty(ThfPopoverBaseComponent.prototype, "hideArrow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideArrow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a seta do componente *popover*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a seta do componente *popover*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideArrow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPopoverBaseComponent.prototype, "position", {
        get: /**
         * @return {?}
         */
        function () {
            return this._position;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição que o thf-popover abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-popover no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-popover no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-popover no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-popover abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-popover abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-popover abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-popover no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-popover no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-popover no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-popover acima do componente alvo.
         * - `top-right`: Posiciona o thf-popover acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-popover acima e à esquerda do componente alvo.
         *
         *
         * @default right
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a posição que o thf-popover abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-popover no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-popover no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-popover no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-popover abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-popover abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-popover abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-popover no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-popover no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-popover no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-popover acima do componente alvo.
         * - `top-right`: Posiciona o thf-popover acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-popover acima e à esquerda do componente alvo.
         *
         *
         * \@default right
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._position = THF_CONTROL_POSITIONS.includes(value) ? value : THF_POPOVER_DEFAULT_POSITION;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPopoverBaseComponent.prototype, "trigger", {
        get: /**
         * @return {?}
         */
        function () {
            return this._trigger;
        },
        /**
         * @description
         *
         * Define o evento que abrirá o thf-popover.
         *
         * Valores válidos:
         *  - `click`: Abre ao clicar no componente alvo.
         *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
         *
         * @default click
         * @optional
         */
        set: /**
         * \@description
         *
         * Define o evento que abrirá o thf-popover.
         *
         * Valores válidos:
         *  - `click`: Abre ao clicar no componente alvo.
         *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
         *
         * \@default click
         * \@optional
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._trigger = THF_POPOVER_TRIGGERS.includes(value) ? value : THF_POPOVER_DEFAULT_TRIGGER;
        },
        enumerable: true,
        configurable: true
    });
    ThfPopoverBaseComponent.propDecorators = {
        hideArrow: [{ type: Input, args: ['t-hide-arrow',] }],
        position: [{ type: Input, args: ['t-position',] }],
        target: [{ type: Input, args: ['t-target',] }],
        title: [{ type: Input, args: ['t-title',] }],
        trigger: [{ type: Input, args: ['t-trigger',] }]
    };
    return ThfPopoverBaseComponent;
}());
export { ThfPopoverBaseComponent };
if (false) {
    /** @type {?} */
    ThfPopoverBaseComponent.prototype.isHidden;
    /**
     * @type {?}
     * @private
     */
    ThfPopoverBaseComponent.prototype._hideArrow;
    /**
     * @type {?}
     * @private
     */
    ThfPopoverBaseComponent.prototype._position;
    /**
     * @type {?}
     * @private
     */
    ThfPopoverBaseComponent.prototype._trigger;
    /**
     * \@description
     *
     * ElementRef do componente de origem responsável por abrir o popover.
     * Para utilizar o thf-popover deve-se colocar uma variável no componente que vai disparar o evento
     * de abertura, exemplo:
     *
     * ```
     * <thf-button
     *   t-label="Open Popover">
     * </thf-button>
     *
     * <thf-popover
     *   [t-origin]="thfButton"
     *   [t-title]="Totvs Popover">
     * </thf-popover>
     * ```
     *
     * Também deve-se criar um ViewChild para cada popover, passando como referência o elemento do
     * HTML que irá disparar o evento. Exemplo:
     *
     * ```
     * \@ViewChild(ThfButtonComponent, {read: ElementRef}) thfButton: ThfButtonComponent;
     * ```
     * @type {?}
     */
    ThfPopoverBaseComponent.prototype.target;
    /**
     * Título do popover.
     * @type {?}
     */
    ThfPopoverBaseComponent.prototype.title;
    /**
     * @type {?}
     * @protected
     */
    ThfPopoverBaseComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @protected
     */
    ThfPopoverBaseComponent.prototype.mouseEnterListener;
    /**
     * @type {?}
     * @protected
     */
    ThfPopoverBaseComponent.prototype.mouseLeaveListener;
    /**
     * @type {?}
     * @protected
     */
    ThfPopoverBaseComponent.prototype.resizeListener;
}
