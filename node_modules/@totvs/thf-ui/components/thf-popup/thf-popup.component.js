var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { callFunction, isExternalLink, isTypeof, openExternalLink } from '../../utils/util';
import { ThfControlPositionService } from '../../services/thf-control-position/thf-control-position.service';
import { ThfPopupBaseComponent } from './thf-popup-base.component';
/**
 *
 * \@docsExtends ThfPopupBaseComponent
 *
 * \@example
 *
 * <example name="thf-popup-basic" title="Totvs Popup - Basic">
 *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.html"> </file>
 *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popup-labs" title="Totvs Popup - Labs">
 *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.html"> </file>
 *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popup-email" title="Totvs Popup Email">
 *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.html"> </file>
 *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.ts"> </file>
 * </example>
 *
 */
var ThfPopupComponent = /** @class */ (function (_super) {
    __extends(ThfPopupComponent, _super);
    function ThfPopupComponent(viewContainerRef, renderer, router, thfControlPosition, changeDetector) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.router = router;
        _this.thfControlPosition = thfControlPosition;
        _this.changeDetector = changeDetector;
        _this.onScroll = function () {
            if (_this.showPopup) {
                _this.close();
            }
        };
        _this.parentRef = viewContainerRef['_view']['component'];
        return _this;
    }
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     */
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     * @return {?}
     */
    ThfPopupComponent.prototype.close = /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     * @return {?}
     */
    function () {
        this.removeListeners();
        this.showPopup = false;
    };
    /**
     * @param {?} popupAction
     * @return {?}
     */
    ThfPopupComponent.prototype.onActionClick = /**
     * @param {?} popupAction
     * @return {?}
     */
    function (popupAction) {
        /** @type {?} */
        var actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
        if (popupAction && popupAction.action && actionNoDisabled) {
            this.close();
            return callFunction(popupAction.action, this.parentRef, this.param || popupAction);
        }
        if (popupAction && popupAction.url && actionNoDisabled) {
            this.close();
            return this.openUrl(popupAction.url);
        }
    };
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    ThfPopupComponent.prototype.open = /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.oldTarget = this.target;
        this.param = param;
        this.showPopup = true;
        this.changeDetector.detectChanges();
        this.validateInitialContent();
    };
    /**
     * @param {?} popupAction
     * @param {?} property
     * @return {?}
     */
    ThfPopupComponent.prototype.returnBooleanValue = /**
     * @param {?} popupAction
     * @param {?} property
     * @return {?}
     */
    function (popupAction, property) {
        return isTypeof(popupAction[property], 'function') ? popupAction[property](this.param || popupAction) : popupAction[property];
    };
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    ThfPopupComponent.prototype.toggle = /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPopupComponent.prototype.clickedOutDisabledItem = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var containsItemDisabled = this.elementContains(event.target, 'thf-popup-item-disabled') ||
            this.elementContains(event.target.parentElement, 'thf-popup-item-disabled');
        return !containsItemDisabled;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPopupComponent.prototype.clickedOutHeaderTemplate = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[t-popup-header-template]');
        return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPopupComponent.prototype.clickedOutTarget = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.target && !this.target.contains(event.target);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPopupComponent.prototype.closePopupOnClickout = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
            this.close();
        }
    };
    /**
     * @private
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    ThfPopupComponent.prototype.elementContains = /**
     * @private
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        return element && element.classList.contains(className);
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.hasContentToShow = /**
     * @private
     * @return {?}
     */
    function () {
        return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function () {
            _this.close();
        });
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.closePopupOnClickout(event);
        });
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    ThfPopupComponent.prototype.openUrl = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.setPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.thfControlPosition.setElements(this.popupRef.nativeElement, 8, this.target);
        this.renderer.setStyle(this.popupRef.nativeElement, 'left', '0');
        this.thfControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.thfControlPosition.getArrowDirection();
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.validateInitialContent = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hasContentToShow()) {
            this.setPosition();
            this.initializeListeners();
        }
        else {
            this.close();
        }
    };
    ThfPopupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-popup', template: "<div #popupRef class=\"thf-popup\" *ngIf=\"showPopup\"> <div *ngIf=\"!hideArrow\" class=\"thf-popup-arrow thf-arrow-{{ arrowDirection }}\"></div> <ng-content select=\"[t-popup-header-template]\"></ng-content> <ng-container *ngFor=\"let action of actions; let actionIndex = index\"> <div *ngIf=\"action.visible !== false\" [class.thf-popup-item-default]=\"action.type !== 'danger'\" [class.thf-popup-item-danger]=\"action.type === 'danger'\" [class.thf-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\" [class.thf-popup-item-separator]=\"action.separator && actionIndex !== 0\" [class.thf-popup-item-selected]=\"action.selected\" (click)=\"onActionClick(action)\"> <span *ngIf=\"action.icon\" class=\"thf-icon {{ action.icon }} thf-popup-icon-item\"></span> {{ action.label }} </div> </ng-container> </div> ",
                    providers: [ThfControlPositionService]
                },] },
    ];
    /** @nocollapse */
    ThfPopupComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Renderer2 },
        { type: Router },
        { type: ThfControlPositionService },
        { type: ChangeDetectorRef }
    ]; };
    ThfPopupComponent.propDecorators = {
        popupRef: [{ type: ViewChild, args: ['popupRef', { read: ElementRef },] }]
    };
    return ThfPopupComponent;
}(ThfPopupBaseComponent));
export { ThfPopupComponent };
if (false) {
    /** @type {?} */
    ThfPopupComponent.prototype.popupRef;
    /**
     * @type {?}
     * @private
     */
    ThfPopupComponent.prototype.onScroll;
    /**
     * @type {?}
     * @private
     */
    ThfPopupComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfPopupComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ThfPopupComponent.prototype.thfControlPosition;
    /** @type {?} */
    ThfPopupComponent.prototype.changeDetector;
}
