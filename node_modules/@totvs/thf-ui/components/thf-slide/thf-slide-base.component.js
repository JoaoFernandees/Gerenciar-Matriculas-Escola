/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToInt } from './../../utils/util';
/** @type {?} */
var thfSlideIntervalDefault = 4000;
/**
 * \@description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[t-slide-content-template](/documentation/thf-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 * @abstract
 */
var ThfSlideBaseComponent = /** @class */ (function () {
    function ThfSlideBaseComponent() {
        this._interval = thfSlideIntervalDefault;
    }
    Object.defineProperty(ThfSlideBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * @default `336`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * \@default `336`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = convertToInt(value);
            this.setSlideHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideBaseComponent.prototype, "interval", {
        get: /**
         * @return {?}
         */
        function () {
            return this._interval;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * @default `4000`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * \@default `4000`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._interval = convertToInt(value, thfSlideIntervalDefault);
            this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideBaseComponent.prototype, "slides", {
        get: /**
         * @return {?}
         */
        function () {
            return this._slides;
        },
        /**
         * @description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `ThfSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         */
        set: /**
         * \@description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `ThfSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._slides = value;
            this.setSlideItems(value);
            if (value && value.length) {
                this.startSlide();
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfSlideBaseComponent.propDecorators = {
        height: [{ type: Input, args: ['t-height',] }],
        interval: [{ type: Input, args: ['t-interval',] }],
        slides: [{ type: Input, args: ['t-slides',] }]
    };
    return ThfSlideBaseComponent;
}());
export { ThfSlideBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfSlideBaseComponent.prototype._interval;
    /**
     * @type {?}
     * @private
     */
    ThfSlideBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfSlideBaseComponent.prototype._slides;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.setSlideHeight = function (height) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.cancelInterval = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.setSlideItems = function (value) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.startSlide = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.startInterval = function () { };
}
