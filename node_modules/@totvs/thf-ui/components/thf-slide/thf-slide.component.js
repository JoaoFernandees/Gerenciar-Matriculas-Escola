var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ElementRef, HostListener, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { ThfSlideBaseComponent } from './thf-slide-base.component';
import { ThfSlideContentTemplateDirective } from './directives/thf-slide-content-template.directive';
import { ThfSlideItemComponent } from './thf-slide-item/thf-slide-item.component';
/** @type {?} */
var thfSlideDefaultHeight = 336;
/** @type {?} */
var thfSlideIntervalMin = 1000;
/** @type {?} */
var thfSlideMinHeight = 192;
/** @type {?} */
var thfSlideTiming = '250ms ease';
/**
 * \@docsExtends ThfSlideBaseComponent
 *
 * \@example
 * <example name="thf-slide-basic" title="Totvs Slide Basic">
 *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.html"> </file>
 *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-labs" title="Totvs Slide Labs">
 *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.html"> </file>
 *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-useful-articles" title="Totvs Slide - Useful articles">
 *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.html"> </file>
 *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-landscapes" title="Totvs Slide - Landscapes">
 *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.html"> </file>
 *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.ts"> </file>
 * </example>
 */
var ThfSlideComponent = /** @class */ (function (_super) {
    __extends(ThfSlideComponent, _super);
    function ThfSlideComponent(builder) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.isLoaded = false;
        _this.currentSlideIndex = 0;
        _this.slideItems = [];
        return _this;
    }
    Object.defineProperty(ThfSlideComponent.prototype, "hasElements", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideComponent.prototype, "isImageSlide", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !this.slideContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideComponent.prototype, "offset", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.currentSlideIndex * this.slideItemWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideComponent.prototype, "hasSlides", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.slides && !!this.slides.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.slide) {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        }
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfSlideComponent.prototype.goToItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.nextControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.previous = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = ((this.currentSlideIndex - 1) + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.previousControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    };
    /**
     * @param {?} height
     * @return {?}
     */
    ThfSlideComponent.prototype.setSlideHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        this.setHeight(height);
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    ThfSlideComponent.prototype.animate = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        if (this.hasElements) {
            /** @type {?} */
            var animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    ThfSlideComponent.prototype.buildTransitionAnimation = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        return this.builder.build([
            animate(thfSlideTiming, keyframes([style({ transform: "translateX(-" + offset + "px)" })]))
        ]);
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    ThfSlideComponent.prototype.createArrayForTemplate = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        this.slideItems = slides.slice();
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    ThfSlideComponent.prototype.createArrayFromSlides = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        var _this = this;
        /** @type {?} */
        var isStringArray = slides.every(function (item) { return typeof item === 'string'; });
        if (isStringArray) {
            slides.forEach(function (element) { return _this.slideItems.push({ image: "" + element }); });
        }
        else {
            this.slideItems = (/** @type {?} */ (slides)).slice();
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    ThfSlideComponent.prototype.setDefaultHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height <= thfSlideMinHeight || !height && this.isImageSlide) {
            this.slide.nativeElement.style.height = thfSlideDefaultHeight + "px";
            this.imageHeight = thfSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    ThfSlideComponent.prototype.setHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height > thfSlideMinHeight) {
            this.slide.nativeElement.style.height = height + "px";
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfSlideComponent.prototype.setSlideItemWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ThfSlideComponent.prototype.cancelInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        clearInterval(this.setInterval);
    };
    /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    ThfSlideComponent.prototype.setSlideItems = /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ThfSlideComponent.prototype.startSlide = /**
     * @protected
     * @return {?}
     */
    function () {
        this.setSlideHeight(this.height);
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    };
    /**
     * @protected
     * @return {?}
     */
    ThfSlideComponent.prototype.startInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval = this.hasSlides && this.hasElements ? setInterval(function () { _this.next(); }, this.interval) : undefined;
    };
    ThfSlideComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-slide', template: "<div class=\"thf-slide-wrapper\"> <div class=\"thf-slide-outer\"> <div class=\"thf-slide-inner\" #slide> <ng-container *ngFor=\"let item of slideItems; let index = index;\"> <thf-slide-item [t-action]=\"item.action\" [t-data]=\"item\" [t-image]=\"item.image\" [t-image-height]=\"imageHeight\" [t-template]=\"slideContentTemplate\" [t-alt]=\"item.alt\" [t-link]=\"item.link\"> </thf-slide-item> </ng-container> </div> <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\"  t-control=\"previous\" (t-click)=\"previousControl()\"> </thf-slide-control> <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\" t-control=\"next\" (t-click)=\"nextControl()\"> </thf-slide-control> </div> <thf-slide-circles *ngIf=\"hasSlides && slides.length > 1\" [t-current-slide-index]=\"currentSlideIndex\" [t-items]=\"slideItems\" (t-click)=\"goToItem($event)\"> </thf-slide-circles> </div> ",
                },] },
    ];
    /** @nocollapse */
    ThfSlideComponent.ctorParameters = function () { return [
        { type: AnimationBuilder }
    ]; };
    ThfSlideComponent.propDecorators = {
        slideContentTemplate: [{ type: ContentChild, args: [ThfSlideContentTemplateDirective,] }],
        slide: [{ type: ViewChild, args: ['slide',] }],
        itemsElements: [{ type: ViewChildren, args: [ThfSlideItemComponent,] }],
        onResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return ThfSlideComponent;
}(ThfSlideBaseComponent));
export { ThfSlideComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.isLoaded;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.setInterval;
    /** @type {?} */
    ThfSlideComponent.prototype.currentSlideIndex;
    /** @type {?} */
    ThfSlideComponent.prototype.imageHeight;
    /** @type {?} */
    ThfSlideComponent.prototype.slideItems;
    /** @type {?} */
    ThfSlideComponent.prototype.slideItemWidth;
    /** @type {?} */
    ThfSlideComponent.prototype.slideContentTemplate;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.slide;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.itemsElements;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.builder;
}
