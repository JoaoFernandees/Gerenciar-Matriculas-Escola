(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/animations'), require('@angular/common'), require('@angular/router')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/animations', '@angular/common', '@angular/router'], factory) :
	(factory((global['thf-slide'] = {}),global.core,global.animations,global.common,global.router));
}(this, (function (exports,core,animations,common,router) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfSlideComponent
 *
 * \@description
 *
 * Interface que define cada objeto do `ThfSlideItem`.
 * @record
 */

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */

// Idioma padrão
/** @type {?} */

/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */

/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */
function convertToInt(value, valueDefault) {
    /** @type {?} */
    var validNumber = parseInt(value, 10);
    /** @type {?} */
    var validDefaultValue = parseInt(valueDefault, 10);
    /** @type {?} */
    var defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
    return validNumber || validNumber === 0 ? validNumber : defaultValue;
}
/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} date
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */

/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */

// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */
function isIEOrEdge() {
    /** @type {?} */
    var userAgent = window.navigator.userAgent;
    return /msie\s|trident\/|edge\//i.test(userAgent);
}
// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */

/**
 * @param {?} event
 * @return {?}
 */

/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */

/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} link
 * @return {?}
 */

/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @param {?} text
 * @return {?}
 */

/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfSlideIntervalDefault = 4000;
/**
 * \@description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[t-slide-content-template](/documentation/thf-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 * @abstract
 */
var ThfSlideBaseComponent = /** @class */ (function () {
    function ThfSlideBaseComponent() {
        this._interval = thfSlideIntervalDefault;
    }
    Object.defineProperty(ThfSlideBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * @default `336`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * \@default `336`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = convertToInt(value);
            this.setSlideHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideBaseComponent.prototype, "interval", {
        get: /**
         * @return {?}
         */
        function () {
            return this._interval;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * @default `4000`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * \@default `4000`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._interval = convertToInt(value, thfSlideIntervalDefault);
            this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideBaseComponent.prototype, "slides", {
        get: /**
         * @return {?}
         */
        function () {
            return this._slides;
        },
        /**
         * @description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `ThfSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         */
        set: /**
         * \@description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `ThfSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._slides = value;
            this.setSlideItems(value);
            if (value && value.length) {
                this.startSlide();
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfSlideBaseComponent.propDecorators = {
        height: [{ type: core.Input, args: ['t-height',] }],
        interval: [{ type: core.Input, args: ['t-interval',] }],
        slides: [{ type: core.Input, args: ['t-slides',] }]
    };
    return ThfSlideBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfSlideComponent
 *
 * \@description
 *
 * Esta diretiva permite a customização de um slide.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item do slide corrente.
 *  - Índice: `index` determina o índice do slide corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-slide
 *   [t-slides]="[{ id: 1, name: 'Register', email: 'register\@totvs.com' }]">
 *
 *   <ng-template t-slide-content-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="item.id"></thf-info>
 *       <thf-info class="thf-md-6" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-slide>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-slide
 *    [t-slides]="[{ id: 1, name: 'Register', email: 'register\@totvs.com' }]">
 *
 *    <div *t-slide-content-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-slide>
 * ...
 *
 * ```
 */
var ThfSlideContentTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfSlideContentTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfSlideContentTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[t-slide-content-template]'
                },] },
    ];
    /** @nocollapse */
    ThfSlideContentTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef }
    ]; };
    return ThfSlideContentTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para cada item do thf-slide.
 */
var ThfSlideItemComponent = /** @class */ (function () {
    function ThfSlideItemComponent() {
        this.isIEOrEdge = isIEOrEdge();
    }
    /**
     * @return {?}
     */
    ThfSlideItemComponent.prototype.setLinkType = /**
     * @return {?}
     */
    function () {
        if (!this.template && this.link) {
            return this.link.startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    };
    ThfSlideItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-slide-item', template: "<div #slideItem class=\"thf-slide-item\" [class.thf-slide-item-background-image]=\"!template && isIEOrEdge\" [style.background-image]=\"!template && isIEOrEdge ? 'url(' + image + ')' : ''\" [ngSwitch]=\"setLinkType()\"> <!-- slide com link interno --> <a *ngSwitchCase=\"'internalLink'\"  class=\"thf-slide-item-link\"  [routerLink]=\"link\"> <ng-container  [ngTemplateOutlet]=\"slideItemImage\"  [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\"> </ng-container> </a> <!-- slide com link externo --> <a  *ngSwitchCase=\"'externalLink'\" class=\"thf-slide-item-link\"  [href]=\"link\"> <ng-container  [ngTemplateOutlet]=\"slideItemImage\"  [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\"> </ng-container> </a> <!-- slide sem link --> <a  *ngSwitchCase=\"'noLink'\" [ngClass]=\"action ? 'thf-slide-item-link' : 'thf-slide-item-no-link'\" (click)=\"action ? action(data) : undefined\"> <ng-container  [ngTemplateOutlet]=\"template ? slideItemTemplate : slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image, data: data }}\"> </ng-container> </a> </div> <ng-template #slideItemTemplate let-item='item'> <div *ngIf=\"template\" class=\"thf-slide-item-content\"> <ng-template [ngTemplateOutlet]=\"template.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item.data, index: index }\"> </ng-template> </div> </ng-template> <ng-template #slideItemImage let-item='item'> <img *ngIf=\"item.image && !isIEOrEdge\" class=\"thf-slide-image\" [alt]=\"item.alt\" [src]=\"item.image\" [style.height.px]=\"imageHeight\"> </ng-template> "
                },] },
    ];
    ThfSlideItemComponent.propDecorators = {
        itemElement: [{ type: core.ViewChild, args: ['slideItem',] }],
        action: [{ type: core.Input, args: ['t-action',] }],
        alt: [{ type: core.Input, args: ['t-alt',] }],
        data: [{ type: core.Input, args: ['t-data',] }],
        image: [{ type: core.Input, args: ['t-image',] }],
        imageHeight: [{ type: core.Input, args: ['t-image-height',] }],
        template: [{ type: core.Input, args: ['t-template',] }],
        link: [{ type: core.Input, args: ['t-link',] }]
    };
    return ThfSlideItemComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfSlideDefaultHeight = 336;
/** @type {?} */
var thfSlideIntervalMin = 1000;
/** @type {?} */
var thfSlideMinHeight = 192;
/** @type {?} */
var thfSlideTiming = '250ms ease';
/**
 * \@docsExtends ThfSlideBaseComponent
 *
 * \@example
 * <example name="thf-slide-basic" title="Totvs Slide Basic">
 *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.html"> </file>
 *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-labs" title="Totvs Slide Labs">
 *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.html"> </file>
 *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-useful-articles" title="Totvs Slide - Useful articles">
 *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.html"> </file>
 *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-landscapes" title="Totvs Slide - Landscapes">
 *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.html"> </file>
 *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.ts"> </file>
 * </example>
 */
var ThfSlideComponent = /** @class */ (function (_super) {
    __extends(ThfSlideComponent, _super);
    function ThfSlideComponent(builder) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.isLoaded = false;
        _this.currentSlideIndex = 0;
        _this.slideItems = [];
        return _this;
    }
    Object.defineProperty(ThfSlideComponent.prototype, "hasElements", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideComponent.prototype, "isImageSlide", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !this.slideContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideComponent.prototype, "offset", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.currentSlideIndex * this.slideItemWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideComponent.prototype, "hasSlides", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.slides && !!this.slides.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.slide) {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        }
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfSlideComponent.prototype.goToItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.nextControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.previous = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = ((this.currentSlideIndex - 1) + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.previousControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    };
    /**
     * @param {?} height
     * @return {?}
     */
    ThfSlideComponent.prototype.setSlideHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        this.setHeight(height);
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    ThfSlideComponent.prototype.animate = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        if (this.hasElements) {
            /** @type {?} */
            var animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    ThfSlideComponent.prototype.buildTransitionAnimation = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        return this.builder.build([
            animations.animate(thfSlideTiming, animations.keyframes([animations.style({ transform: "translateX(-" + offset + "px)" })]))
        ]);
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    ThfSlideComponent.prototype.createArrayForTemplate = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        this.slideItems = slides.slice();
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    ThfSlideComponent.prototype.createArrayFromSlides = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        var _this = this;
        /** @type {?} */
        var isStringArray = slides.every(function (item) { return typeof item === 'string'; });
        if (isStringArray) {
            slides.forEach(function (element) { return _this.slideItems.push({ image: "" + element }); });
        }
        else {
            this.slideItems = (/** @type {?} */ (slides)).slice();
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    ThfSlideComponent.prototype.setDefaultHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height <= thfSlideMinHeight || !height && this.isImageSlide) {
            this.slide.nativeElement.style.height = thfSlideDefaultHeight + "px";
            this.imageHeight = thfSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    ThfSlideComponent.prototype.setHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height > thfSlideMinHeight) {
            this.slide.nativeElement.style.height = height + "px";
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfSlideComponent.prototype.setSlideItemWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ThfSlideComponent.prototype.cancelInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        clearInterval(this.setInterval);
    };
    /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    ThfSlideComponent.prototype.setSlideItems = /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ThfSlideComponent.prototype.startSlide = /**
     * @protected
     * @return {?}
     */
    function () {
        this.setSlideHeight(this.height);
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    };
    /**
     * @protected
     * @return {?}
     */
    ThfSlideComponent.prototype.startInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval = this.hasSlides && this.hasElements ? setInterval(function () { _this.next(); }, this.interval) : undefined;
    };
    ThfSlideComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-slide', template: "<div class=\"thf-slide-wrapper\"> <div class=\"thf-slide-outer\"> <div class=\"thf-slide-inner\" #slide> <ng-container *ngFor=\"let item of slideItems; let index = index;\"> <thf-slide-item [t-action]=\"item.action\" [t-data]=\"item\" [t-image]=\"item.image\" [t-image-height]=\"imageHeight\" [t-template]=\"slideContentTemplate\" [t-alt]=\"item.alt\" [t-link]=\"item.link\"> </thf-slide-item> </ng-container> </div> <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\"  t-control=\"previous\" (t-click)=\"previousControl()\"> </thf-slide-control> <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\" t-control=\"next\" (t-click)=\"nextControl()\"> </thf-slide-control> </div> <thf-slide-circles *ngIf=\"hasSlides && slides.length > 1\" [t-current-slide-index]=\"currentSlideIndex\" [t-items]=\"slideItems\" (t-click)=\"goToItem($event)\"> </thf-slide-circles> </div> ",
                },] },
    ];
    /** @nocollapse */
    ThfSlideComponent.ctorParameters = function () { return [
        { type: animations.AnimationBuilder }
    ]; };
    ThfSlideComponent.propDecorators = {
        slideContentTemplate: [{ type: core.ContentChild, args: [ThfSlideContentTemplateDirective,] }],
        slide: [{ type: core.ViewChild, args: ['slide',] }],
        itemsElements: [{ type: core.ViewChildren, args: [ThfSlideItemComponent,] }],
        onResize: [{ type: core.HostListener, args: ['window:resize',] }]
    };
    return ThfSlideComponent;
}(ThfSlideBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O `thf-container` é um componente que visa facilitar o agrupamento de conteúdos.
 * Por padrão o mesmo exibe um efeito de sombra ao seu redor e um espaçamento em sua parte interna, os quais podem ser
 * desabilitados. Além disso, sua altura acompanha a quantidade do conteúdo, porém pode ser fixada. Para controlar sua
 * largura, utilize o [Grid System](/guides/grid-system), assim possibilitando o tratamento para diferentes resoluções.
 */
var ThfContainerBaseComponent = /** @class */ (function () {
    function ThfContainerBaseComponent() {
        this._noPadding = false;
        this._noShadow = false;
    }
    Object.defineProperty(ThfContainerBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do `thf-container`.
         *
         * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do `thf-container`.
         *
         * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = convertToInt(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfContainerBaseComponent.prototype, "noPadding", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noPadding;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o espaçamento interno do `thf-container`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o espaçamento interno do `thf-container`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noPadding = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfContainerBaseComponent.prototype, "noShadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noShadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o sombreamento em torno do `thf-container`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o sombreamento em torno do `thf-container`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noShadow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ThfContainerBaseComponent.propDecorators = {
        height: [{ type: core.Input, args: ['t-height',] }],
        noPadding: [{ type: core.Input, args: ['t-no-padding',] }],
        noShadow: [{ type: core.Input, args: ['t-no-shadow',] }]
    };
    return ThfContainerBaseComponent;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfContainerBaseComponent
 *
 * \@example
 *
 * <example name="thf-container-basic" title="Totvs Container Basic">
 *  <file name="sample-thf-container-basic/sample-thf-container-basic.component.html"> </file>
 *  <file name="sample-thf-container-basic/sample-thf-container-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-container-labs" title="Totvs Container Labs">
 *  <file name="sample-thf-container-labs/sample-thf-container-labs.component.html"> </file>
 *  <file name="sample-thf-container-labs/sample-thf-container-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-container-dashboard" title="Totvs Container - Dashboard">
 *  <file name="sample-thf-container-dashboard/sample-thf-container-dashboard.component.html"> </file>
 *  <file name="sample-thf-container-dashboard/sample-thf-container-dashboard.component.ts"> </file>
 *  <file name="sample-thf-container-dashboard/sample-thf-container-dashboard.service.ts"> </file>
 * </example>
 */
var ThfContainerComponent = /** @class */ (function (_super) {
    __extends$1(ThfContainerComponent, _super);
    function ThfContainerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfContainerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-container', template: "<div class=\"thf-container\" [class.thf-container-no-padding]=\"noPadding\" [class.thf-container-no-shadow]=\"noShadow\" [style.height]=\"height ? height + 'px' : 'auto'\"> <ng-content></ng-content> </div> "
                },] },
    ];
    return ThfContainerComponent;
}(ThfContainerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `thf-container`.
 */
var ThfContainerModule = /** @class */ (function () {
    function ThfContainerModule() {
    }
    ThfContainerModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        ThfContainerComponent
                    ],
                    declarations: [
                        ThfContainerComponent
                    ]
                },] },
    ];
    return ThfContainerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para o conjunto de círculos que faz a passagem de itens do `thf-slide`.
 */
var ThfSlideCirclesComponent = /** @class */ (function () {
    function ThfSlideCirclesComponent() {
        /**
         * Evento emitido ao clicar em um controle.
         */
        this.click = new core.EventEmitter();
    }
    ThfSlideCirclesComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-slide-circles', template: "<div class=\"thf-slide-circles\"> <ng-container *ngFor=\"let item of items; let index = index;\"> <div class=\"thf-slide-circle\" [class.thf-slide-active-circle]=\"index === currentSlideIndex\" (click)=\"click.emit(index)\"> </div> </ng-container> </div> "
                },] },
    ];
    ThfSlideCirclesComponent.propDecorators = {
        currentSlideIndex: [{ type: core.Input, args: ['t-current-slide-index',] }],
        items: [{ type: core.Input, args: ['t-items',] }],
        click: [{ type: core.Output, args: ['t-click',] }]
    };
    return ThfSlideCirclesComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a seta que controla a passagem de itens do `thf-slide`.
 */
var ThfSlideControlComponent = /** @class */ (function () {
    function ThfSlideControlComponent() {
        /**
         * Evento emitido ao clicar em um controle.
         */
        this.click = new core.EventEmitter();
    }
    ThfSlideControlComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-slide-control', template: "<div class=\"thf-slide-control-{{control}}\"> <div class=\"thf-slide-arrow-circle\" (click)=\"click.emit();\"> <div class=\"thf-slide-arrow thf-slide-arrow-{{control}}\"></div> </div> </div> "
                },] },
    ];
    ThfSlideControlComponent.propDecorators = {
        control: [{ type: core.Input, args: ['t-control',] }],
        click: [{ type: core.Output, args: ['t-click',] }]
    };
    return ThfSlideControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `thf-slide`.
 *
 * > Para o correto funcionamento do componente `thf-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 * import { ThfModule } from '\@totvs/thf-ui/thf.module';
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     ThfModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var ThfSlideModule = /** @class */ (function () {
    function ThfSlideModule() {
    }
    ThfSlideModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule,
                        ThfContainerModule
                    ],
                    declarations: [
                        ThfSlideCirclesComponent,
                        ThfSlideComponent,
                        ThfSlideControlComponent,
                        ThfSlideContentTemplateDirective,
                        ThfSlideItemComponent,
                    ],
                    exports: [
                        ThfSlideComponent,
                        ThfSlideContentTemplateDirective
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfSlideModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfSlideComponent = ThfSlideComponent;
exports.ThfSlideModule = ThfSlideModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
