import { EventEmitter } from '@angular/core';
import { ThfStepperItem } from './thf-stepper-item.interface';
/**
 * @description
 *
 * O `thf-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Através dos modes, é possível identificar se o stepper será disposto horizontal ou verticalmente na tela
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-stepper` por página.
 */
export declare class ThfStepperBaseComponent {
    private _barLeftTop;
    private _barRightBottom;
    private _mode?;
    private _sequential?;
    private _step;
    private _steps;
    /**
     * @optional
     *
     * @description
     *
     * Define a disposição do `thf-stepper`.
     *
     * Valore válidos:
     *  - `horizontal`: estilo padrão do `thf-stepper`.
     *  - `vertical`: deixa o `thf-stepper` disposto verticalmente na página
     *
     * @default `horizontal`
     */
    mode: string;
    /**
     * @optional
     *
     * @description
     *
     * Controla o passo atual do `thf-stepper`.
     *
     * @default `1`
     */
    step: number;
    /** Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
    steps: Array<ThfStepperItem>;
    /**
     * @optional
     *
     * @description
     *
     * Define se o `thf-stepper` será sequencial ou aleatório.
     *
     * @default `true`
     */
    sequential: boolean;
    /** Ação que será executada quando o usuário mudar o passo do `thf-stepper`. */
    onChangeStep: EventEmitter<number>;
    readonly barLeftTop: string;
    readonly barRightBottom: string;
    toggleBarClass(): void;
}
