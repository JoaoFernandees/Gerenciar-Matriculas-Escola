/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, EventEmitter } from '@angular/core';
import { ThfStepperStatus } from './thf-stepper-status.enum';
import { convertToBoolean } from '../../utils/util';
/** @type {?} */
var THF_STEPPER_MODES = ['horizontal', 'vertical'];
/** @type {?} */
var THF_STEPPER_MODE_DEFAULT = 'horizontal';
/**
 * \@description
 *
 * O `thf-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Através dos modes, é possível identificar se o stepper será disposto horizontal ou verticalmente na tela
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-stepper` por página.
 */
var ThfStepperBaseComponent = /** @class */ (function () {
    function ThfStepperBaseComponent() {
        this._barLeftTop = 'left';
        this._barRightBottom = 'right';
        this._mode = THF_STEPPER_MODE_DEFAULT;
        this._sequential = true;
        this._step = 1;
        this._steps = [];
        /**
         * Ação que será executada quando o usuário mudar o passo do `thf-stepper`.
         */
        this.onChangeStep = new EventEmitter();
    }
    Object.defineProperty(ThfStepperBaseComponent.prototype, "mode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a disposição do `thf-stepper`.
         *
         * Valore válidos:
         *  - `horizontal`: estilo padrão do `thf-stepper`.
         *  - `vertical`: deixa o `thf-stepper` disposto verticalmente na página
         *
         * @default `horizontal`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a disposição do `thf-stepper`.
         *
         * Valore válidos:
         *  - `horizontal`: estilo padrão do `thf-stepper`.
         *  - `vertical`: deixa o `thf-stepper` disposto verticalmente na página
         *
         * \@default `horizontal`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._mode = THF_STEPPER_MODES.includes(value) ? value : THF_STEPPER_MODE_DEFAULT;
            this.toggleBarClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        /**
         * @optional
         *
         * @description
         *
         * Controla o passo atual do `thf-stepper`.
         *
         * @default `1`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Controla o passo atual do `thf-stepper`.
         *
         * \@default `1`
         * @param {?} step
         * @return {?}
         */
        function (step) {
            if (step >= 1 && step <= this.steps.length) {
                this._step = step;
                this._steps[this._step - 1].status = ThfStepperStatus.Active;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "steps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._steps;
        },
        /** Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
        set: /**
         * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         * @param {?} steps
         * @return {?}
         */
        function (steps) {
            this._steps = Array.isArray(steps) ? steps : [];
            this._steps.forEach(function (step) { return step.status = ThfStepperStatus.Default; });
            this.step = 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "sequential", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sequential;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o `thf-stepper` será sequencial ou aleatório.
         *
         * @default `true`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o `thf-stepper` será sequencial ou aleatório.
         *
         * \@default `true`
         * @param {?} sequential
         * @return {?}
         */
        function (sequential) {
            this._sequential = (/** @type {?} */ (sequential)) === '' ? true : convertToBoolean(sequential);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "barLeftTop", {
        get: /**
         * @return {?}
         */
        function () {
            return this._barLeftTop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "barRightBottom", {
        get: /**
         * @return {?}
         */
        function () {
            return this._barRightBottom;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfStepperBaseComponent.prototype.toggleBarClass = /**
     * @return {?}
     */
    function () {
        if (this._mode === THF_STEPPER_MODE_DEFAULT) {
            this._barLeftTop = 'left';
            this._barRightBottom = 'right';
        }
        else {
            this._barLeftTop = 'top';
            this._barRightBottom = 'bottom';
        }
    };
    ThfStepperBaseComponent.propDecorators = {
        mode: [{ type: Input, args: ['t-mode',] }],
        step: [{ type: Input, args: ['t-step',] }],
        steps: [{ type: Input, args: ['t-steps',] }],
        sequential: [{ type: Input, args: ['t-sequential',] }],
        onChangeStep: [{ type: Output, args: ['t-change-step',] }]
    };
    return ThfStepperBaseComponent;
}());
export { ThfStepperBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._barLeftTop;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._barRightBottom;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._mode;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._sequential;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._step;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._steps;
    /**
     * Ação que será executada quando o usuário mudar o passo do `thf-stepper`.
     * @type {?}
     */
    ThfStepperBaseComponent.prototype.onChangeStep;
}
