(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['thf-stepper'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfStepperComponent
 *
 * \@description
 *
 * Interface para os steps do componente thf-stepper.
 *
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfStepperStatus = {
    /** Enum para informações do tipo Completo */
    Done: 'done',
    /** Enum para informações do tipo Ativo */
    Active: 'active',
    /** Enum para informações do tipo Padrão */
    Default: 'default',
};

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */

// Idioma padrão
/** @type {?} */

/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */

/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */

/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} date
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */

/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */

// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */

// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */

/**
 * @param {?} event
 * @return {?}
 */

/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */

/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} link
 * @return {?}
 */

/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @param {?} text
 * @return {?}
 */

/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_STEPPER_MODES = ['horizontal', 'vertical'];
/** @type {?} */
var THF_STEPPER_MODE_DEFAULT = 'horizontal';
/**
 * \@description
 *
 * O `thf-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Através dos modes, é possível identificar se o stepper será disposto horizontal ou verticalmente na tela
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-stepper` por página.
 */
var ThfStepperBaseComponent = /** @class */ (function () {
    function ThfStepperBaseComponent() {
        this._barLeftTop = 'left';
        this._barRightBottom = 'right';
        this._mode = THF_STEPPER_MODE_DEFAULT;
        this._sequential = true;
        this._step = 1;
        this._steps = [];
        /**
         * Ação que será executada quando o usuário mudar o passo do `thf-stepper`.
         */
        this.onChangeStep = new core.EventEmitter();
    }
    Object.defineProperty(ThfStepperBaseComponent.prototype, "mode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a disposição do `thf-stepper`.
         *
         * Valore válidos:
         *  - `horizontal`: estilo padrão do `thf-stepper`.
         *  - `vertical`: deixa o `thf-stepper` disposto verticalmente na página
         *
         * @default `horizontal`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a disposição do `thf-stepper`.
         *
         * Valore válidos:
         *  - `horizontal`: estilo padrão do `thf-stepper`.
         *  - `vertical`: deixa o `thf-stepper` disposto verticalmente na página
         *
         * \@default `horizontal`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._mode = THF_STEPPER_MODES.includes(value) ? value : THF_STEPPER_MODE_DEFAULT;
            this.toggleBarClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        /**
         * @optional
         *
         * @description
         *
         * Controla o passo atual do `thf-stepper`.
         *
         * @default `1`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Controla o passo atual do `thf-stepper`.
         *
         * \@default `1`
         * @param {?} step
         * @return {?}
         */
        function (step) {
            if (step >= 1 && step <= this.steps.length) {
                this._step = step;
                this._steps[this._step - 1].status = ThfStepperStatus.Active;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "steps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._steps;
        },
        /** Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
        set: /**
         * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         * @param {?} steps
         * @return {?}
         */
        function (steps) {
            this._steps = Array.isArray(steps) ? steps : [];
            this._steps.forEach(function (step) { return step.status = ThfStepperStatus.Default; });
            this.step = 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "sequential", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sequential;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o `thf-stepper` será sequencial ou aleatório.
         *
         * @default `true`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o `thf-stepper` será sequencial ou aleatório.
         *
         * \@default `true`
         * @param {?} sequential
         * @return {?}
         */
        function (sequential) {
            this._sequential = (/** @type {?} */ (sequential)) === '' ? true : convertToBoolean(sequential);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "barLeftTop", {
        get: /**
         * @return {?}
         */
        function () {
            return this._barLeftTop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "barRightBottom", {
        get: /**
         * @return {?}
         */
        function () {
            return this._barRightBottom;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfStepperBaseComponent.prototype.toggleBarClass = /**
     * @return {?}
     */
    function () {
        if (this._mode === THF_STEPPER_MODE_DEFAULT) {
            this._barLeftTop = 'left';
            this._barRightBottom = 'right';
        }
        else {
            this._barLeftTop = 'top';
            this._barRightBottom = 'bottom';
        }
    };
    ThfStepperBaseComponent.propDecorators = {
        mode: [{ type: core.Input, args: ['t-mode',] }],
        step: [{ type: core.Input, args: ['t-step',] }],
        steps: [{ type: core.Input, args: ['t-steps',] }],
        sequential: [{ type: core.Input, args: ['t-sequential',] }],
        onChangeStep: [{ type: core.Output, args: ['t-change-step',] }]
    };
    return ThfStepperBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfStepperBaseComponent
 *
 * \@example
 *
 * <example name="thf-stepper-basic" title="Totvs Stepper Basic">
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.html"> </file>
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-labs" title="Totvs Stepper Labs">
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.html"> </file>
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-sales" title="Totvs Stepper - Sales">
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.html"> </file>
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.ts"> </file>
 * </example>
 */
var ThfStepperComponent = /** @class */ (function (_super) {
    __extends(ThfStepperComponent, _super);
    function ThfStepperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} stepNumber
     * @return {?}
     */
    ThfStepperComponent.prototype.changeStep = /**
     * @param {?} stepNumber
     * @return {?}
     */
    function (stepNumber) {
        if (stepNumber !== this.step && this.canJumpStep(stepNumber)) {
            this.onChangeStep.emit(stepNumber);
        }
    };
    /**
     * @param {?} stepNumber
     * @return {?}
     */
    ThfStepperComponent.prototype.canJumpStep = /**
     * @param {?} stepNumber
     * @return {?}
     */
    function (stepNumber) {
        if (!this.sequential) {
            return true;
        }
        return this.steps.slice(this.step, stepNumber - 1)
            .every(function (step) { return step.status === ThfStepperStatus.Done; });
    };
    ThfStepperComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-stepper', template: "<div class=\"thf-stepper-card-content\"> <div class=\"thf-stepper thf-stepper-{{mode}}\"> <div *ngFor=\"let step of steps; let i = index\" class=\"thf-stepper-step thf-stepper-step-{{step.status}}\" (click)=\"changeStep(i+1)\"> <div class=\"thf-stepper-circle thf-stepper-{{i < 9 ? 'one-digit' : 'two-digits'}}\"> <span class=\"thf-stepper-number\">{{i+1}}</span> </div> <div class=\"thf-stepper-title\"> {{step.label}} </div> <div class=\"thf-stepper-bar-{{barLeftTop}}\"></div> <div class=\"thf-stepper-bar-{{barRightBottom}}\"></div> </div> </div> </div> "
                },] },
    ];
    return ThfStepperComponent;
}(ThfStepperBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-stepper
 */
var ThfStepperModule = /** @class */ (function () {
    function ThfStepperModule() {
    }
    ThfStepperModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                    ],
                    declarations: [
                        ThfStepperComponent
                    ],
                    exports: [
                        ThfStepperComponent
                    ]
                },] },
    ];
    return ThfStepperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfStepperStatus = ThfStepperStatus;
exports.ThfStepperComponent = ThfStepperComponent;
exports.ThfStepperModule = ThfStepperModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
