var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToBoolean, isTypeof, sortValues, thfLocaleDefault } from '../../utils/util';
/** @type {?} */
export var thfTableContainer = ['border', 'shadow'];
/** @type {?} */
export var thfTableContainerDefault = 'border';
/** @type {?} */
export var thfTableLiteralsDefault = {
    en: (/** @type {?} */ ({
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle'
    })),
    es: (/** @type {?} */ ({
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo'
    })),
    pt: (/** @type {?} */ ({
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa'
    }))
};
/**
 * \@description
 *
 * Este componente de tabela é utilizado para exibição de listas, com diferentes tipos de dados que podem ser texto,
 * data, horário e número com formato personalizado.
 *
 * É possivel criar uma tabela com ordenação de dados, linhas com detalhes, coluna de seleção de linhas,
 * coluna com ações e também carregamento por demanda com o botão "Carregar mais resultados".
 *
 * Também existe a possibilidade de utilizar _template_ para os detalhes das linhas,
 * veja mais em **[t-table-row-template](/documentation/thf-table-row-template)**.
 *
 * Quando a largura de todas as colunas for definida, caso o tamanho total delas seja maior que a tabela, será exibido um scroll horizontal.
 *
 * @abstract
 */
var ThfTableBaseComponent = /** @class */ (function () {
    function ThfTableBaseComponent(thfDate) {
        this.thfDate = thfDate;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._hideTextOverflow = false;
        this._loading = false;
        /**
         * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allSelected = new EventEmitter();
        /**
         * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allUnselected = new EventEmitter();
        /**
         * Ação executada ao selecionar uma linha do `thf-table`.
         */
        this.selected = new EventEmitter();
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         */
        this.showMore = new EventEmitter();
        /**
         * Ação executada ao desmarcar a seleção de uma linha do `thf-table`.
         */
        this.unselected = new EventEmitter();
        this.selectAll = false;
        this.sortedColumn = { property: (/** @type {?} */ (null)), ascending: true };
    }
    Object.defineProperty(ThfTableBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens da tabela.
         * > Se falso, será inicializado como um *array* vazio.
         */
        set: /**
         * \@description
         *
         * Lista de itens da tabela.
         * > Se falso, será inicializado como um *array* vazio.
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = Array.isArray(items) ? items : [];
            // when haven't items, selectAll should be unchecked.
            if (!this.hasItems()) {
                this.selectAll = false;
            }
            else if (!this.hasColumns()) {
                this.columns = this.getDefaultColumns(items[0]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `ThfTableColumn`.
         * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
         * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `ThfTableColumn`.
         * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
         * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
         *
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            this._columns = columns || [];
            this.mapColumnToProperty();
            if (this._columns.length) {
                this.setColumnLink();
                this.calculateWidthHeaders();
            }
            else if (this.hasItems()) {
                this._columns = this.getDefaultColumns(this.items[0]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "container", {
        get: /**
         * @return {?}
         */
        function () {
            return this._container;
        },
        /**
         * @optional
         *
         * @description
         *
         * Adiciona um contorno arredondado ao `thf-table`, as opções são:
         * - `border`: com bordas/linhas.
         * - `shadow`: com sombras.
         *
         * @default `border`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Adiciona um contorno arredondado ao `thf-table`, as opções são:
         * - `border`: com bordas/linhas.
         * - `shadow`: com sombras.
         *
         * \@default `border`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._container = thfTableContainer.includes(value) ? value : thfTableContainerDefault;
            this.showContainer(this._container);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "hideTextOverflow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideTextOverflow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`thf-tooltip`](/documentation/thf-tooltip).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`thf-tooltip`](/documentation/thf-tooltip).
         * @param {?} hideTextOverflow
         * @return {?}
         */
        function (hideTextOverflow) {
            this._hideTextOverflow = convertToBoolean(hideTextOverflow);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura da tabela em *pixels* e fixa o cabeçalho.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura da tabela em *pixels* e fixa o cabeçalho.
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = height;
            this.calculateHeightTableContainer(height);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "hideDetail", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideDetail;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita a visualização da lista de detalhes de cada linha da coluna.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita a visualização da lista de detalhes de cada linha da coluna.
         *
         * \@default `false`
         * @param {?} hideDetail
         * @return {?}
         */
        function (hideDetail) {
            this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfTableLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-table`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfTableLiterals = {
         *    loadMoreData: 'Buscar mais dados',
         *    loadingData: 'Processando',
         *    noColumns: 'Sem colunas',
         *    noData: 'Sem dados',
         *    seeCompleteSubtitle: 'Mostrar legenda completa',
         *    completeSubtitle: 'Todas legendas'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfTableLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-table
         *   [t-literals]="customLiterals">
         * </thf-table>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-table`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfTableLiterals = {
         *    loadMoreData: 'Buscar mais dados',
         *    loadingData: 'Processando',
         *    noColumns: 'Sem colunas',
         *    noData: 'Sem dados',
         *    seeCompleteSubtitle: 'Mostrar legenda completa',
         *    completeSubtitle: 'Todas legendas'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfTableLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-table
         *   [t-literals]="customLiterals">
         * </thf-table>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, thfTableLiteralsDefault[thfLocaleDefault], thfTableLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfTableLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        /**
         * @optional
         *
         * @description
         *
         * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
         *
         * \@default `false`
         * @param {?} loading
         * @return {?}
         */
        function (loading) {
            this._loading = convertToBoolean(loading);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "checkbox", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checkbox;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita na primeira coluna a opção de selecionar linhas,
         * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
         * > Exemplo: `item.$selected` ou `item['$selected']`.
         * > Os itens filhos possuem comportamento independente do item pai.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita na primeira coluna a opção de selecionar linhas,
         * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
         * > Exemplo: `item.$selected` ou `item['$selected']`.
         * > Os itens filhos possuem comportamento independente do item pai.
         *
         * \@default `false`
         * @param {?} checkbox
         * @return {?}
         */
        function (checkbox) {
            this._checkbox = (/** @type {?} */ (checkbox)) === '' ? true : convertToBoolean(checkbox);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de ações.
         *
         * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
         * se encarrega de agrupá-las exibindo o ícone [**thf-icon-more**](/guides/icons) que listará as ações ao ser clicado.
         *
         * **A coluna de ações não será exibida quando:**
         *  - a lista conter valores inválidos ou indefinidos.
         *  - tenha uma única ação e a mesma não for visível.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de ações.
         *
         * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
         * se encarrega de agrupá-las exibindo o ícone [**thf-icon-more**](/guides/icons) que listará as ações ao ser clicado.
         *
         * **A coluna de ações não será exibida quando:**
         *  - a lista conter valores inválidos ou indefinidos.
         *  - tenha uma única ação e a mesma não for visível.
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            this._actions = actions;
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setSort", {
        set: /**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this.sort = sort === '' ? false : convertToBoolean(sort);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setShowMoreDisabled", {
        set: /**
         * @param {?} showMoreDisabled
         * @return {?}
         */
        function (showMoreDisabled) {
            this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setStriped", {
        set: /**
         * @param {?} striped
         * @return {?}
         */
        function (striped) {
            this.striped = striped === '' ? false : convertToBoolean(striped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setHideSelectAll", {
        set: /**
         * @param {?} hideSelectAll
         * @return {?}
         */
        function (hideSelectAll) {
            this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setSingleSelect", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.singleSelect = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "noData", {
        get: /**
         * @return {?}
         */
        function () {
            return this.literals.noData;
        },
        /**
         * @deprecated 4.x.x
         *
         * @optional
         *
         * @description
         *
         * Texto que será apresentado quando a tabela não houver dados.
         *
         * > Veja a nova propriedade `t-literals`
         *
         * @default **Nenhum dado encontrado.**
         */
        set: /**
         * @deprecated 4.x.x
         *
         * \@optional
         *
         * \@description
         *
         * Texto que será apresentado quando a tabela não houver dados.
         *
         * > Veja a nova propriedade `t-literals`
         *
         * \@default **Nenhum dado encontrado.**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.literals.noData = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
    };
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.selectAllRows = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(function (item) {
                item.$selected = _this.selectAll;
            });
            this.emitSelectAllEvents(this.selectAll, this.items);
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.selectRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.selectDetailRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.emitSelectEvents(row);
    };
    // Colunas que são inseridas no <head> da tabela
    // Colunas que são inseridas no <head> da tabela
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getMainColumns = 
    // Colunas que são inseridas no <head> da tabela
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var typesValid = ['string', 'number', 'boolean', 'date', 'time', 'dateTime', 'currency', 'subtitle', 'link', 'label', 'icon'];
        return this.columns.filter(function (col) { return !col.type || typesValid.includes(col.type); });
    };
    // Retorna a coluna da lista de colunas que é do tipo detail
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getColumnMasterDetail = 
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    function () {
        return this.columns.find(function (col) { return col.type === 'detail'; });
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getClassColor = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        return column.color ? "thf-column-text-" + this.getColumnColor(row, column) : '';
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getColumnColor = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        /** @type {?} */
        var columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    };
    // Retorna as colunas com status
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getSubtitleColumns = 
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    function () {
        return this.columns.filter(function (col) { return col.type === 'subtitle'; });
    };
    // Retorna as colunas com ícones
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getIconColumns = 
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    function () {
        return this.columns.filter(function (col) { return col.type === 'icon'; });
    };
    // Retorna o nome da coluna do tipo detail
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getNameColumnDetail = 
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var detail = this.getColumnMasterDetail();
        return detail ? detail.property : null;
    };
    /**
     * Retorna as linhas do `thf-table` que estão selecionadas.
     */
    /**
     * Retorna as linhas do `thf-table` que estão selecionadas.
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getSelectedRows = /**
     * Retorna as linhas do `thf-table` que estão selecionadas.
     * @return {?}
     */
    function () {
        return this.items.filter(function (item) { return item.$selected; });
    };
    /**
     * Retorna as linhas do `thf-table` que não estão selecionadas.
     */
    /**
     * Retorna as linhas do `thf-table` que não estão selecionadas.
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getUnselectedRows = /**
     * Retorna as linhas do `thf-table` que não estão selecionadas.
     * @return {?}
     */
    function () {
        return this.items.filter(function (item) { return !item.$selected; });
    };
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.hasColumns = /**
     * @return {?}
     */
    function () {
        return this.columns && this.columns.length > 0;
    };
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.hasItems = /**
     * @return {?}
     */
    function () {
        return this.items && this.items.length > 0;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.toggleRowAction = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var toggleShowAction = row.$showAction;
        this.items.forEach(function (item) {
            if (item.$showAction) {
                item.$showAction = false;
            }
        });
        row.$showAction = !toggleShowAction;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    ThfTableBaseComponent.prototype.sortColumn = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (!this.sort || column.type === 'detail') {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortedColumn.property = column;
    };
    /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    ThfTableBaseComponent.prototype.sortArray = /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    function (column, ascending) {
        var _this = this;
        this.items.sort(function (leftSide, rightSide) {
            if (column.type === 'date' || column.type === 'dateTime') {
                return _this.thfDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
            }
            else {
                return sortValues(leftSide[column.property], rightSide[column.property], ascending);
            }
        });
    };
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.onShowMore = /**
     * @return {?}
     */
    function () {
        this.showMore.emit(null);
    };
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getDefaultColumns = /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var keys = Object.keys(item);
        return keys.filter(function (key) { return (typeof item[key] !== 'object'); }).map(function (key) {
            return { label: capitalizeFirstLetter(key), property: key };
        });
    };
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.configAfterSelectRow = /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    function (rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    };
    /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    ThfTableBaseComponent.prototype.emitSelectAllEvents = /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    function (selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    };
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.emitSelectEvents = /**
     * @private
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    ThfTableBaseComponent.prototype.isEverySelected = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        /** @type {?} */
        var someCheckedOrIndeterminate = function (item) { return item.$selected || item.$selected === null; };
        /** @type {?} */
        var everyChecked = function (item) { return item.$selected; };
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableBaseComponent.prototype.mapColumnToProperty = /**
     * @private
     * @return {?}
     */
    function () {
        this._columns.forEach(function (column) { return column.property = column.property || column.column; });
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableBaseComponent.prototype.setColumnLink = /**
     * @private
     * @return {?}
     */
    function () {
        this.columns.forEach(function (column) {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        });
    };
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.unselectOtherRows = /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    function (rows, row) {
        rows.forEach(function (item) {
            if (item !== row) {
                item.$selected = false;
            }
        });
    };
    ThfTableBaseComponent.propDecorators = {
        items: [{ type: Input, args: ['t-items',] }],
        columns: [{ type: Input, args: ['t-columns',] }],
        container: [{ type: Input, args: ['t-container',] }],
        hideTextOverflow: [{ type: Input, args: ['t-hide-text-overflow',] }],
        height: [{ type: Input, args: ['t-height',] }],
        hideDetail: [{ type: Input, args: ['t-hide-detail',] }],
        literals: [{ type: Input, args: ['t-literals',] }],
        loading: [{ type: Input, args: ['t-loading',] }],
        checkbox: [{ type: Input, args: ['t-checkbox',] }],
        actions: [{ type: Input, args: ['t-actions',] }],
        setSort: [{ type: Input, args: ['t-sort',] }],
        setShowMoreDisabled: [{ type: Input, args: ['t-show-more-disabled',] }],
        setStriped: [{ type: Input, args: ['t-striped',] }],
        setHideSelectAll: [{ type: Input, args: ['t-hide-select-all',] }],
        setSingleSelect: [{ type: Input, args: ['t-single-select',] }],
        noData: [{ type: Input, args: ['t-no-data',] }],
        allSelected: [{ type: Output, args: ['t-all-selected',] }],
        allUnselected: [{ type: Output, args: ['t-all-unselected',] }],
        selected: [{ type: Output, args: ['t-selected',] }],
        showMore: [{ type: Output, args: ['t-show-more',] }],
        unselected: [{ type: Output, args: ['t-unselected',] }]
    };
    return ThfTableBaseComponent;
}());
export { ThfTableBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._checkbox;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._container;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._hideDetail;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._hideTextOverflow;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._loading;
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
     *
     * \@default `false`
     * @type {?}
     */
    ThfTableBaseComponent.prototype.sort;
    /**
     * \@description
     *
     * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
     *
     * \@default `false`
     * @type {?}
     */
    ThfTableBaseComponent.prototype.showMoreDisabled;
    /**
     * \@description
     *
     * Habilita ou desabilita o estilo listrado da tabela (`striped`).
     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
     *
     * \@default `false`
     * @type {?}
     */
    ThfTableBaseComponent.prototype.striped;
    /**
     * \@description
     *
     * Esconde o *checkbox* para seleção de todas as linhas.
     *
     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
     *
     * \@default `false`
     * @type {?}
     */
    ThfTableBaseComponent.prototype.hideSelectAll;
    /**
     * \@description
     *
     * Define que somente uma linha da tabela pode ser selecionada.
     *
     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.singleSelect;
    /**
     * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.allSelected;
    /**
     * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.allUnselected;
    /**
     * Ação executada ao selecionar uma linha do `thf-table`.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.selected;
    /**
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
     * não é visível.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.showMore;
    /**
     * Ação executada ao desmarcar a seleção de uma linha do `thf-table`.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.unselected;
    /** @type {?} */
    ThfTableBaseComponent.prototype.selectAll;
    /** @type {?} */
    ThfTableBaseComponent.prototype.sortedColumn;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype.thfDate;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    ThfTableBaseComponent.prototype.calculateHeightTableContainer = function (height) { };
    /**
     * @abstract
     * @return {?}
     */
    ThfTableBaseComponent.prototype.calculateWidthHeaders = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} container
     * @return {?}
     */
    ThfTableBaseComponent.prototype.showContainer = function (container) { };
}
