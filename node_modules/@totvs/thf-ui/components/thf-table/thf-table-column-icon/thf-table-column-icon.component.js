/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
var ThfTableColumnIconComponent = /** @class */ (function () {
    function ThfTableColumnIconComponent() {
    }
    Object.defineProperty(ThfTableColumnIconComponent.prototype, "icons", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icons;
        },
        /** Lista de um ou mais ícones que serão exibidos em sua respectiva coluna. */
        set: /**
         * Lista de um ou mais ícones que serão exibidos em sua respectiva coluna.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._icons = this.convertToColumnIcon(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} columnIcon
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.getIconColorClass = /**
     * @param {?} columnIcon
     * @return {?}
     */
    function (columnIcon) {
        /** @type {?} */
        var color = this.getIconColor(columnIcon) || this.getIconColor(this.column);
        return color ? "thf-column-text-" + color : '';
    };
    /**
     * @param {?} iconColumn
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.onIconClick = /**
     * @param {?} iconColumn
     * @return {?}
     */
    function (iconColumn) {
        if (iconColumn.action) {
            iconColumn.action(this.row, iconColumn);
        }
        else if (this.column.action) {
            this.column.action(this.row, iconColumn || this.column);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.convertToColumnIcon = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Array) {
            return value.map(function (val) {
                return typeof val === 'string' ? { value: val } : val;
            });
        }
        if (typeof value === 'string') {
            return [{ value: value }];
        }
        return [];
    };
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.getIconColor = /**
     * @private
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return typeof column.color === 'function' ? column.color(this.row, column) : column.color;
    };
    ThfTableColumnIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-table-column-icon', template: "<ng-container *ngFor=\"let iconColumn of icons\"> <span class=\"thf-icon\" [class.thf-clickable]=\"iconColumn.action || column.action\" [ngClass]=\"[getIconColorClass(iconColumn), iconColumn.icon || iconColumn.value]\" (click)=\"onIconClick(iconColumn)\"> </span> </ng-container> "
                },] },
    ];
    ThfTableColumnIconComponent.propDecorators = {
        column: [{ type: Input, args: ['t-column',] }],
        icons: [{ type: Input, args: ['t-icons',] }],
        row: [{ type: Input, args: ['t-row',] }]
    };
    return ThfTableColumnIconComponent;
}());
export { ThfTableColumnIconComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTableColumnIconComponent.prototype._icons;
    /** @type {?} */
    ThfTableColumnIconComponent.prototype.column;
    /** @type {?} */
    ThfTableColumnIconComponent.prototype.row;
}
