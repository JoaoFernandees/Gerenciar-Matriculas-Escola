/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ThfColorPaletteService } from './../../../services/thf-color-palette/thf-color-palette.service';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a criação da representação da legenda, em formato de texto .
 */
var ThfTableColumnLabelComponent = /** @class */ (function () {
    function ThfTableColumnLabelComponent(thfColorPaletteService) {
        this.thfColorPaletteService = thfColorPaletteService;
    }
    Object.defineProperty(ThfTableColumnLabelComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /** Objeto com os dados do label */
        set: /**
         * Objeto com os dados do label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                value.color = this.thfColorPaletteService.getColor(value);
            }
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    ThfTableColumnLabelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-table-column-label', template: "<span [class]=\"'thf-table-column-label thf-' + value?.color\"> {{ value?.label }} </span> "
                },] },
    ];
    /** @nocollapse */
    ThfTableColumnLabelComponent.ctorParameters = function () { return [
        { type: ThfColorPaletteService }
    ]; };
    ThfTableColumnLabelComponent.propDecorators = {
        value: [{ type: Input, args: ['t-value',] }]
    };
    return ThfTableColumnLabelComponent;
}());
export { ThfTableColumnLabelComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTableColumnLabelComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    ThfTableColumnLabelComponent.prototype.thfColorPaletteService;
}
