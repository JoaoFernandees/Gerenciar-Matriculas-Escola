/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DecimalPipe } from '@angular/common';
import { capitalizeFirstLetter, isTypeof } from '../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por apresentar o detalhe de cada linha da tabela.
 */
var ThfTableDetailComponent = /** @class */ (function () {
    function ThfTableDetailComponent(decimalPipe) {
        this.decimalPipe = decimalPipe;
        /**
         * Define se a tabela possui a opção de `checkbox` habilitada.
         */
        this.hasCheckbox = false;
        /**
         * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `thf-table`.
         */
        this.selectRow = new EventEmitter();
    }
    Object.defineProperty(ThfTableDetailComponent.prototype, "detail", {
        get: /**
         * @return {?}
         */
        function () {
            return this._detail;
        },
        /**
         * Configuração da linha de detalhes.
         */
        set: /**
         * Configuração da linha de detalhes.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._detail = this.returnThfTableDetailObject(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableDetailComponent.prototype, "detailColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.detail && this.detail.columns || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableDetailComponent.prototype, "typeHeaderInline", {
        get: /**
         * @return {?}
         */
        function () {
            return this.detail && !this.detail['typeHeader'] || this.detail['typeHeader'] === 'inline';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableDetailComponent.prototype, "typeHeaderTop", {
        get: /**
         * @return {?}
         */
        function () {
            return this.detail && this.detail['typeHeader'] === 'top';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    ThfTableDetailComponent.prototype.formatNumberDetail = /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    };
    /**
     * @param {?} detail
     * @return {?}
     */
    ThfTableDetailComponent.prototype.getColumnTitleLabel = /**
     * @param {?} detail
     * @return {?}
     */
    function (detail) {
        return detail.label || capitalizeFirstLetter(detail.property);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfTableDetailComponent.prototype.onSelectRow = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item.$selected = !item.$selected;
        this.selectRow.emit(item);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfTableDetailComponent.prototype.returnThfTableDetailObject = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && isTypeof(value, 'object')) {
            if (value.columns) {
                value.columns.forEach(function (column) { return column.property = column.property || column.column; });
            }
            if (Array.isArray(value)) {
                return { columns: value };
            }
            if (value.columns) {
                return value;
            }
        }
    };
    ThfTableDetailComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-table-detail', template: "<table class=\"thf-table-master-detail\"> <thead *ngIf=\"typeHeaderTop\"> <tr> <th class=\"thf-table-header thf-table-column-checkbox\" *ngIf=\"hasCheckbox\"></th> <th class=\"thf-table-header thf-table-header-column thf-table-header-master-detail\"></th> <th class=\"thf-table-header thf-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\"> {{ getColumnTitleLabel(detail) }} </th> </tr> </thead> <tbody> <tr class=\"thf-table-detail-row\" [class.thf-table-row-active]=\"item.$selected && hasCheckbox\" *ngFor=\"let item of items\"> <ng-container *ngIf=\"hasCheckbox; else masterDetailSpace\"> <td class=\"thf-table-column-master-detail-space-checkbox\"></td> <td class=\"thf-table-column thf-table-column-checkbox\"> <input class=\"thf-table-checkbox\" type=\"checkbox\" [class.thf-table-checkbox-checked]=\"item.$selected\"> <label class=\"thf-table-checkbox-label thf-clickable\" (click)=\"onSelectRow(item)\"> </label> </td> </ng-container> <ng-template #masterDetailSpace> <td class=\"thf-table-column-master-detail-space\"></td> </ng-template> <td class=\"thf-table-column-master-detail thf-table-master-detail-label\" (click)=\"hasCheckbox ? onSelectRow(item) : 'javascript:;'\" *ngFor=\"let detail of detailColumns\"> <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong> <ng-container [ngSwitch]=\"detail.type\"> <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span> <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span> <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | thf_time: detail.format || 'HH:mm:ss.ffffff' }}</span> <span *ngSwitchCase=\"'dateTime'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}</span> <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span> <span *ngSwitchDefault>{{ item[detail.property] }}</span> </ng-container> </td> </tr> </tbody> </table> "
                },] },
    ];
    /** @nocollapse */
    ThfTableDetailComponent.ctorParameters = function () { return [
        { type: DecimalPipe }
    ]; };
    ThfTableDetailComponent.propDecorators = {
        hasCheckbox: [{ type: Input, args: ['t-checkbox',] }],
        detail: [{ type: Input, args: ['t-detail',] }],
        items: [{ type: Input, args: ['t-items',] }],
        selectRow: [{ type: Output, args: ['t-select-row',] }]
    };
    return ThfTableDetailComponent;
}());
export { ThfTableDetailComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTableDetailComponent.prototype._detail;
    /**
     * Define se a tabela possui a opção de `checkbox` habilitada.
     * @type {?}
     */
    ThfTableDetailComponent.prototype.hasCheckbox;
    /**
     * Lista de itens do _detail_ da tabela.
     * @type {?}
     */
    ThfTableDetailComponent.prototype.items;
    /**
     * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `thf-table`.
     * @type {?}
     */
    ThfTableDetailComponent.prototype.selectRow;
    /**
     * @type {?}
     * @private
     */
    ThfTableDetailComponent.prototype.decimalPipe;
}
