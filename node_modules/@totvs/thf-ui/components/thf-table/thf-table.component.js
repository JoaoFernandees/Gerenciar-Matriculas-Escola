var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ContentChild, ElementRef, IterableDiffers, QueryList, Renderer2, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';
import { DecimalPipe } from '@angular/common';
import { Router } from '@angular/router';
import { capitalizeFirstLetter, convertToBoolean } from '../../utils/util';
import { ThfDateService } from '../../services/thf-date/thf-date.service';
import { ThfPopupComponent } from '../thf-popup/thf-popup.component';
import { ThfTableBaseComponent } from './thf-table-base.component';
import { ThfTableRowTemplateDirective } from './thf-table-row-template/thf-table-row-template.directive';
/**
 * \@docsExtends ThfTableBaseComponent
 *
 * \@example
 *
 * <example name="thf-table-basic" title="Totvs Table Basic">
 *  <file name="sample-thf-table-basic/sample-thf-table-basic.component.ts"> </file>
 *  <file name="sample-thf-table-basic/sample-thf-table-basic.component.html"> </file>
 * </example>
 *
 * <example name="thf-table-labs" title="Totvs Table Labs">
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.ts"> </file>
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.html"> </file>
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.po.ts"> </file>
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.service.ts"> </file>
 * </example>
 *
 * <example name="thf-table-transport" title="Totvs Table - Transport">
 *  <file name="sample-thf-table-transport/sample-thf-table-transport.component.ts"> </file>
 *  <file name="sample-thf-table-transport/sample-thf-table-transport.component.html"> </file>
 *  <file name="sample-thf-table-transport/sample-thf-table-transport.service.ts"> </file>
 * </example>
 *
 * <example name="thf-table-airfare" title="Totvs Table - Airfare">
 *  <file name="sample-thf-table-airfare/sample-thf-table-airfare.component.ts"> </file>
 *  <file name="sample-thf-table-airfare/sample-thf-table-airfare.component.html"> </file>
 *  <file name="sample-thf-table-airfare/sample-thf-table-airfare.service.ts"> </file>
 * </example>
 *
 * <example name="thf-table-components" title="Totvs Table - Thf Field Components">
 *  <file name="sample-thf-table-components/sample-thf-table-components.component.ts"> </file>
 *  <file name="sample-thf-table-components/sample-thf-table-components.component.html"> </file>
 * </example>
 */
var ThfTableComponent = /** @class */ (function (_super) {
    __extends(ThfTableComponent, _super);
    function ThfTableComponent(thfDate, differs, viewRef, renderer, changeDetector, decimalPipe, router) {
        var _this = _super.call(this, thfDate) || this;
        _this.changeDetector = changeDetector;
        _this.decimalPipe = decimalPipe;
        _this.router = router;
        _this.tableOpacity = 0;
        _this.initialized = false;
        _this.visibleElement = false;
        _this.parentRef = viewRef['_view']['component'];
        _this.differ = differs.find([]).create(null);
        // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas não sofrem
        // alteração de largura, pois o ngDoCheck não é executado.
        _this.clickListener = renderer.listen('document', 'click', function () { });
        _this.resizeListener = renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
        return _this;
    }
    Object.defineProperty(ThfTableComponent.prototype, "detailHideSelect", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var masterDetail = this.getColumnMasterDetail();
            return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableComponent.prototype, "firstAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableComponent.prototype, "hasRowTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.tableRowTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableComponent.prototype, "visibleActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.actions && this.actions.filter(function (action) { return action.visible !== false; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
        if (!this.container) {
            this.hideContainer();
        }
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkChangesItems();
        this.verifyCalculateHeightTableContainer();
        // Permite que os cabeçalhos sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (this.tableWrapperElement.nativeElement.offsetWidth && !this.visibleElement && this.initialized) {
            this.debounceResize();
            this.visibleElement = true;
        }
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    ThfTableComponent.prototype.executeTableAction = /**
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    function (row, tableAction) {
        if (!row.disabled && !this.validateTableAction(row, tableAction)) {
            if (typeof tableAction.action === 'string') {
                this.parentRef[tableAction.action](row);
            }
            else {
                tableAction.action.call(this.parentRef, row);
            }
            this.toggleRowAction(row);
        }
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.columnCountForMasterDetail = /**
     * @return {?}
     */
    function () {
        return (this.getMainColumns().length + 1) + (this.actions.length > 0 ? 1 : 0) + (this.checkbox ? 1 : 0);
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.columnCount = /**
     * @return {?}
     */
    function () {
        return (this.getMainColumns().length +
            (this.actions.length > 0 ? 1 : 0) +
            (this.checkbox ? 1 : 0) +
            (!this.hideDetail && this.getColumnMasterDetail() !== undefined ? 1 : 0));
    };
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    ThfTableComponent.prototype.formatNumber = /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    };
    /**
     * @param {?} row
     * @param {?} subtitleColumn
     * @return {?}
     */
    ThfTableComponent.prototype.getSubtitleColumn = /**
     * @param {?} row
     * @param {?} subtitleColumn
     * @return {?}
     */
    function (row, subtitleColumn) {
        return subtitleColumn.subtitles.find(function (subtitleItem) { return row[subtitleColumn.property] === subtitleItem.value; });
    };
    /**
     * @param {?} rowValue
     * @param {?} columnBoolean
     * @return {?}
     */
    ThfTableComponent.prototype.getBooleanLabel = /**
     * @param {?} rowValue
     * @param {?} columnBoolean
     * @return {?}
     */
    function (rowValue, columnBoolean) {
        if (rowValue || rowValue === false || rowValue === 0) {
            rowValue = convertToBoolean(rowValue);
            if (columnBoolean.boolean) {
                return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'Não';
            }
            else {
                return rowValue ? 'Sim' : 'Não';
            }
        }
        return rowValue;
    };
    /**
     * @param {?} row
     * @param {?} columnIcon
     * @return {?}
     */
    ThfTableComponent.prototype.getColumnIcons = /**
     * @param {?} row
     * @param {?} columnIcon
     * @return {?}
     */
    function (row, columnIcon) {
        /** @type {?} */
        var columnValues = row[columnIcon.property];
        if (columnIcon.icons) {
            if (columnValues instanceof Array) {
                return this.mergeCustomIcons(columnValues, columnIcon.icons);
            }
            if (typeof columnValues === 'string') {
                /** @type {?} */
                var customIcon = columnIcon.icons.find(function (icon) { return columnValues === icon.value; });
                if (customIcon) {
                    return [customIcon];
                }
            }
        }
        return columnValues;
    };
    /**
     * @param {?} row
     * @param {?} columnLabel
     * @return {?}
     */
    ThfTableComponent.prototype.getColumnLabel = /**
     * @param {?} row
     * @param {?} columnLabel
     * @return {?}
     */
    function (row, columnLabel) {
        return columnLabel.labels.find(function (labelItem) { return row[columnLabel.property] === labelItem.value; });
    };
    /**
     * @param {?} column
     * @return {?}
     */
    ThfTableComponent.prototype.getColumnTitleLabel = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.label || capitalizeFirstLetter(column.property);
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.verifyWidthColumnsPixels = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var columns = this.getMainColumns();
        return columns.length ? columns.every(function (column) { return column.width && column.width.includes('px'); }) : false;
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.calculateWidthHeaders = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (_this.height) {
                _this.headersTable.forEach(function (header) {
                    /** @type {?} */
                    var divHeader = header.nativeElement.querySelector('.thf-table-header-fixed-inner');
                    if (divHeader) {
                        divHeader.style.width = header.nativeElement.offsetWidth + "px";
                    }
                });
            }
        });
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableComponent.prototype.containsMasterDetail = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return row[this.getNameColumnDetail()] && row[this.getNameColumnDetail()].length;
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    ThfTableComponent.prototype.isShowRowTemplate = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        if (this.tableRowTemplate && this.tableRowTemplate.thfTableRowTemplateShow) {
            return this.tableRowTemplate.thfTableRowTemplateShow(row, index);
        }
        return true;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableComponent.prototype.isShowMasterDetail = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return !this.hideDetail &&
            this.getNameColumnDetail() &&
            row.$showDetail &&
            this.containsMasterDetail(row) &&
            !this.hasRowTemplate;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfTableComponent.prototype.tooltipMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.tooltipText = undefined;
        if (this.hideTextOverflow &&
            event.target.offsetWidth < event.target.scrollWidth &&
            event.target.innerText.trim()) {
            this.tooltipText = event.target.innerText;
        }
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.tooltipMouseLeave = /**
     * @return {?}
     */
    function () {
        this.tooltipText = undefined;
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.verifyChangeHeightInFooter = /**
     * @return {?}
     */
    function () {
        return this.footerHeight !== this.getHeightTableFooter();
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.verifyCalculateHeightTableContainer = /**
     * @return {?}
     */
    function () {
        if (this.height && this.verifyChangeHeightInFooter()) {
            this.footerHeight = this.getHeightTableFooter();
            this.calculateHeightTableContainer(this.height);
        }
    };
    /**
     * @param {?} height
     * @return {?}
     */
    ThfTableComponent.prototype.calculateHeightTableContainer = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        /** @type {?} */
        var value = parseFloat(height);
        this.heightTableContainer = value ? (value - this.getHeightTableFooter()) : undefined;
        this.setTableOpacity(1);
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    ThfTableComponent.prototype.getTypeColumnLink = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        /** @type {?} */
        var rowLink;
        if (column.action) {
            return 'action';
        }
        rowLink = row[column.link];
        if (rowLink && rowLink.startsWith('http')) {
            return 'externalLink';
        }
        return 'internalLink';
    };
    /**
     * @param {?} row
     * @param {?} targetRef
     * @return {?}
     */
    ThfTableComponent.prototype.togglePopup = /**
     * @param {?} row
     * @param {?} targetRef
     * @return {?}
     */
    function (row, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.thfPopupComponent.toggle(row);
    };
    /**
     * @protected
     * @param {?} container
     * @return {?}
     */
    ThfTableComponent.prototype.showContainer = /**
     * @protected
     * @param {?} container
     * @return {?}
     */
    function (container) {
        /** @type {?} */
        var containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;
        containerClassList.add('thf-container');
        container === 'border' ? containerClassList.add('thf-container-no-shadow') : containerClassList.remove('thf-container-no-shadow');
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.checkChangesItems = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && !this.hasColumns() && this.hasItems()) {
            this.columns = this.getDefaultColumns(this.items[0]);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.getHeightTableFooter = /**
     * @private
     * @return {?}
     */
    function () {
        return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.hideContainer = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;
        containerClassList.remove('thf-container');
    };
    /**
     * @private
     * @param {?} columnValues
     * @param {?} customIcons
     * @return {?}
     */
    ThfTableComponent.prototype.mergeCustomIcons = /**
     * @private
     * @param {?} columnValues
     * @param {?} customIcons
     * @return {?}
     */
    function (columnValues, customIcons) {
        /** @type {?} */
        var icons = [];
        columnValues.forEach(function (columnValue) {
            /** @type {?} */
            var foundCustomIcon = customIcons.find(function (customIcon) { return columnValue === customIcon.icon || columnValue === customIcon.value; });
            foundCustomIcon ? icons.push(foundCustomIcon) : icons.push(columnValue);
        });
        return icons;
    };
    /**
     * @private
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    ThfTableComponent.prototype.validateTableAction = /**
     * @private
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    function (row, tableAction) {
        if (typeof tableAction.disabled === 'function') {
            return tableAction.disabled.call(this.parentRef, row);
        }
        else {
            return tableAction.disabled;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.calculateWidthHeaders();
            // show the table
            _this.setTableOpacity(1);
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
        if (this.clickListener) {
            this.clickListener();
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfTableComponent.prototype.setTableOpacity = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.tableOpacity = value;
    };
    ThfTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-table', template: "<thf-container #tableContainer t-no-padding> <div [class.thf-table-container-relative]=\"loading\"> <div *ngIf=\"loading\" class=\"thf-table-overlay\"> <thf-loading class=\"thf-table-overlay-content\" [t-text]=\"literals.loadingData\"></thf-loading> </div> <div class=\"thf-table-main-container\"> <div #tableWrapper class=\"thf-table-wrapper\" [class.thf-table-header-fixed-columns-pixels]=\"verifyWidthColumnsPixels()\" [style.opacity]=\"tableOpacity\"> <div class=\"thf-table-container\" *ngIf=\"height\" [style.height.px]=\"heightTableContainer\"> <div class=\"thf-table-header-fixed thf-table-header\"></div> <div class=\"thf-table-container-fixed-inner\"> <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container> </div> </div> <div *ngIf=\"!height\"> <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container> </div> </div> </div> </div> <div class=\"thf-table-footer\" *ngIf=\"hasItems() && getSubtitleColumns().length\"> <div *ngFor=\"let column of getSubtitleColumns()\"> <thf-table-subtitle-footer [t-literals]=\"literals\" [t-subtitles]=\"column.subtitles\"></thf-table-subtitle-footer> </div> </div> </thf-container> <div class=\"thf-row thf-table-footer-show-more\" [class.thf-invisible]=\"showMore.observers.length === 0\" #tableFooter> <thf-button class=\"thf-offset-xl-4 thf-offset-lg-4 thf-offset-md-3 thf-lg-4 thf-md-6\" [t-disabled]=\"showMoreDisabled\" [t-label]=\"literals.loadMoreData\" (t-click)=\"onShowMore()\"> </thf-button> </div> <ng-template #tableTemplate> <table class=\"thf-table\" [class.thf-table-striped]=\"striped\" [class.thf-table-layout-fixed]=\"hideTextOverflow\"> <thead> <tr [class.thf-table-header]=\"!height\"> <th *ngIf=\"checkbox && hasItems()\" class=\"thf-table-column-checkbox\"> <div [class.thf-table-header-fixed-inner]=\"height\"> <input *ngIf=\"!hideSelectAll\" type=\"checkbox\" class=\"thf-table-checkbox\" [class.thf-table-checkbox-checked]=\"selectAll\" [class.thf-table-checkbox-indeterminate]=\"selectAll === null\"> <label *ngIf=\"!hideSelectAll\" class=\"thf-table-checkbox-label thf-clickable\" (click)=\"selectAllRows()\"></label> </div> </th> <th *ngIf=\"hasItems() && !hideDetail && getColumnMasterDetail() !== undefined || hasRowTemplate\" class=\"thf-table-header-column thf-table-header-master-detail\"> </th> <th *ngIf=\"!hasColumns()\" class=\"thf-table-header-column thf-text-center\">{{ literals.noColumns }}</th> <th *ngFor=\"let column of getMainColumns(); let i = index\" #headersTable class=\"thf-table-header-ellipsis\" [style.width]=\"column.width\" [style.max-width]=\"column.width\" [style.min-width]=\"column.width\" [class.thf-clickable]=\"sort\" [class.thf-table-column-right]= \"column.type === 'currency' || column.type === 'number'\" [class.thf-table-header-subtitle]=\"column.type === 'subtitle'\" (click)=\"sortColumn(column)\"> <div *ngIf=\"height\" class=\"thf-table-header-fixed-inner\"> <ng-container *ngTemplateOutlet=\"contentHeaderTemplate\"></ng-container> </div> <div *ngIf=\"!height\"> <ng-container *ngTemplateOutlet=\"contentHeaderTemplate\"></ng-container> </div> <ng-template #contentHeaderTemplate> <span *ngIf=\"sort\" [class.thf-table-header-icon-unselected]= \"sortedColumn?.property !== column\" [class.thf-table-header-icon-descending]= \"sortedColumn?.property === column && sortedColumn.ascending\" [class.thf-table-header-icon-ascending]= \"sortedColumn?.property === column && !sortedColumn.ascending\"> </span> <span class=\"thf-table-header-ellipsis thf-table-header-block\" [t-tooltip]=\"tooltipText\" (mouseenter)=\"tooltipMouseEnter($event)\" (mouseleave)=\"tooltipMouseLeave()\"> {{ getColumnTitleLabel(column) }} </span> </ng-template> </th> <th *ngIf=\"visibleActions.length > 1 && hasItems()\" class=\"thf-table-header-action\"></th> <th *ngIf=\"visibleActions.length === 1 && hasItems()\" class=\"thf-table-header-single-action\"></th> </tr> </thead> <tbody class=\"thf-table-group-row\" *ngIf=\"!hasItems()\"> <tr class=\"thf-table-row\"> <td [colSpan]=\"columnCount()\" class=\"thf-table-no-data thf-text-center\"> <span> {{ literals.noData }} </span> </td> </tr> </tbody> <tbody class=\"thf-table-group-row\" *ngFor=\"let row of items, let rowIndex = index;\"> <tr class=\"thf-table-row\" [class.thf-table-row-active]=\"row.$selected || row.$selected === null && checkbox\"> <td *ngIf=\"checkbox\" class=\"thf-table-column thf-table-column-checkbox\"> <ng-container *ngIf=\"singleSelect; then inputRadio; else inputCheckbox\"> </ng-container> <ng-template #inputRadio> <input type=\"radio\" class=\"thf-radio-group-input\" [class.thf-radio-group-input-checked]=\"row.$selected\"> <label class=\"thf-radio-group-label thf-clickable\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"></label> </ng-template> <ng-template #inputCheckbox> <input type=\"checkbox\" class=\"thf-table-checkbox\" [class.thf-table-checkbox-checked]=\"row.$selected\"> <label class=\"thf-table-checkbox-label thf-clickable\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"></label> </ng-template> </td> <td *ngIf=\"(getColumnMasterDetail() !== undefined) && !hideDetail || hasRowTemplate\" (click)=\"row.$showDetail = !row.$showDetail\" class=\"thf-table-column-detail-toggle\"> <span *ngIf=\"(containsMasterDetail(row) && !hasRowTemplate) || isShowRowTemplate(row, rowIndex) && hasRowTemplate\" [class.thf-icon-arrow-up]=\"row.$showDetail\" [class.thf-icon-arrow-down]=\"!row.$showDetail\" class=\"thf-icon thf-clickable\"> </span> </td> <td *ngFor=\"let column of getMainColumns(), let columnIndex = index;\" [style.width]=\"column.width\" [style.max-width]=\"column.width\" [style.min-width]=\"column.width\" [class.thf-table-column]=\"column.type !== 'icon'\" [class.thf-table-column-right]=\"column.type == 'currency' || column.type == 'number'\" [class.thf-table-column-center]=\"column.type === 'subtitle'\" [class.thf-table-column-icons]=\"column.type === 'icon'\" [ngClass]=\"getClassColor(row, column)\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"> <div [class.thf-table-body-ellipsis]=\"hideTextOverflow\" [ngSwitch]=\"column.type\" [t-tooltip]=\"tooltipText\" (mouseenter)=\"tooltipMouseEnter($event)\" (mouseleave)=\"tooltipMouseLeave()\"> <span *ngSwitchCase=\"'boolean'\">{{ getBooleanLabel(row[column.property], column) }}</span> <span *ngSwitchCase=\"'currency'\">{{ row[column.property] | currency:column.format:'symbol':'1.2-2' }}</span> <span *ngSwitchCase=\"'date'\" >{{ row[column.property] | date: column.format || 'dd/MM/yyyy' }}</span> <span *ngSwitchCase=\"'time'\" >{{ row[column.property] | thf_time: column.format || 'HH:mm:ss.ffffff' }}</span> <span *ngSwitchCase=\"'dateTime'\" >{{ row[column.property] | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}</span> <span *ngSwitchCase=\"'number'\">{{ formatNumber(row[column.property], column.format) }}</span> <span *ngSwitchCase=\"'link'\"> <a class=\"thf-table-link\" *ngIf=\"getTypeColumnLink(row, column) === 'action'\" (click)='column.action(row[column.property], row)'> {{ row[column.property] }} </a> <a class=\"thf-table-link\" *ngIf=\"getTypeColumnLink(row, column) === 'externalLink'\" [href]=\"row[column.link]\" target=\"_blank\"> {{ row[column.property] }} </a> <a class=\"thf-table-link\" *ngIf=\"getTypeColumnLink(row, column) === 'internalLink'\" [routerLink]=\"row[column.link]\"> {{ row[column.property] }} </a> </span> <span *ngSwitchCase=\"'icon'\"> <thf-table-column-icon [t-icons]=\"getColumnIcons(row, column)\" [t-column]=\"column\" [t-row]=\"row\"> </thf-table-column-icon> </span> <span *ngSwitchCase=\"'subtitle'\"> <thf-table-subtitle-circle [t-subtitle]=\"getSubtitleColumn(row, column)\"></thf-table-subtitle-circle> </span> <span *ngSwitchCase=\"'label'\"> <thf-table-column-label [t-value]=\"getColumnLabel(row, column)\"></thf-table-column-label> </span> <span *ngSwitchDefault>{{ row[column.property] }}</span> </div> </td> <td *ngIf=\"visibleActions.length === 1\" class=\"thf-table-column thf-table-column-single-action\"> <div *ngIf=\"firstAction.visible !== false\" class=\"thf-table-single-action thf-clickable\" [class.thf-table-action-disabled]= \"firstAction.disabled ? validateTableAction(row, firstAction) : false\" (click)=\"executeTableAction(row, firstAction)\"> <span *ngIf=\"firstAction.icon\" class=\"thf-icon {{ firstAction.icon }}\"></span> {{ firstAction.label }} </div> </td> <td *ngIf=\"visibleActions.length > 1\" class=\"thf-table-column-actions\"> <span #popupTarget class=\"thf-icon thf-icon-more thf-clickable\" (click)=\"togglePopup(row, popupTarget)\"> </span> </td> </tr> <tr *ngIf=\"hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\"> <td class=\"thf-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail()\"> <ng-template [ngTemplateOutlet]=\"tableRowTemplate.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\"> </ng-template> </td> </tr> <tr *ngIf=\"isShowMasterDetail(row)\"> <td class=\"thf-table-column-detail\" [colSpan]=\"columnCountForMasterDetail()\"> <thf-table-detail [t-checkbox]=\"checkbox && !detailHideSelect\" [t-detail]=\"getColumnMasterDetail().detail\" [t-items]=\"row[getNameColumnDetail()]\" (t-select-row)=\"selectDetailRow($event)\"> </thf-table-detail> </td> </tr> </tbody> </table> <thf-popup #popup [t-actions]=\"actions\" [t-target]=\"popupTarget\"> </thf-popup> </ng-template> ",
                    providers: [ThfDateService]
                },] },
    ];
    /** @nocollapse */
    ThfTableComponent.ctorParameters = function () { return [
        { type: ThfDateService },
        { type: IterableDiffers },
        { type: ViewContainerRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: DecimalPipe },
        { type: Router }
    ]; };
    ThfTableComponent.propDecorators = {
        tableRowTemplate: [{ type: ContentChild, args: [ThfTableRowTemplateDirective,] }],
        thfPopupComponent: [{ type: ViewChild, args: ['popup',] }],
        tableContainerElement: [{ type: ViewChild, args: ['tableContainer', { read: ElementRef },] }],
        tableFooterElement: [{ type: ViewChild, args: ['tableFooter', { read: ElementRef },] }],
        tableWrapperElement: [{ type: ViewChild, args: ['tableWrapper', { read: ElementRef },] }],
        actionsIconElement: [{ type: ViewChildren, args: ['actionsIconElement', { read: ElementRef },] }],
        actionsElement: [{ type: ViewChildren, args: ['actionsElement', { read: ElementRef },] }],
        headersTable: [{ type: ViewChildren, args: ['headersTable',] }]
    };
    return ThfTableComponent;
}(ThfTableBaseComponent));
export { ThfTableComponent };
if (false) {
    /** @type {?} */
    ThfTableComponent.prototype.tableRowTemplate;
    /** @type {?} */
    ThfTableComponent.prototype.thfPopupComponent;
    /** @type {?} */
    ThfTableComponent.prototype.tableContainerElement;
    /** @type {?} */
    ThfTableComponent.prototype.tableFooterElement;
    /** @type {?} */
    ThfTableComponent.prototype.tableWrapperElement;
    /** @type {?} */
    ThfTableComponent.prototype.actionsIconElement;
    /** @type {?} */
    ThfTableComponent.prototype.actionsElement;
    /** @type {?} */
    ThfTableComponent.prototype.headersTable;
    /** @type {?} */
    ThfTableComponent.prototype.heightTableContainer;
    /** @type {?} */
    ThfTableComponent.prototype.parentRef;
    /** @type {?} */
    ThfTableComponent.prototype.popupTarget;
    /** @type {?} */
    ThfTableComponent.prototype.tableOpacity;
    /** @type {?} */
    ThfTableComponent.prototype.tooltipText;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.footerHeight;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.timeoutResize;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.visibleElement;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.clickListener;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.resizeListener;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.decimalPipe;
    /**
     * @type {?}
     * @private
     */
    ThfTableComponent.prototype.router;
}
