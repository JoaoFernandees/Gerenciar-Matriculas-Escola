/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por manipular os botões de aba.
 */
var ThfTabButtonComponent = /** @class */ (function () {
    function ThfTabButtonComponent(elementRef) {
        this.elementRef = elementRef;
        // Função sera emitida quando a tab ficar ativada
        this.activated = new EventEmitter();
        // Função sera emitida quando a tab ficar desabilitada ou escondida
        this.changeState = new EventEmitter();
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.click = new EventEmitter();
    }
    Object.defineProperty(ThfTabButtonComponent.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        // Ativa o botão
        set: 
        // Ativa o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._active = value;
            this.emitActivated();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabButtonComponent.prototype, "hide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hide;
        },
        // Oculta o botão
        set: 
        // Oculta o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hide = convertToBoolean(value);
            this.setDisplayOnHide();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfTabButtonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    };
    /**
     * @return {?}
     */
    ThfTabButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTabButtonComponent.prototype.emitActivated = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.active) {
            this.activated.emit(this);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTabButtonComponent.prototype.setDisplayOnHide = /**
     * @private
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    };
    ThfTabButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-tab-button', template: "<div class=\"thf-tab-button-md\" [class.thf-tab-button-disabled]=\"disabled\" [class.thf-tab-button-active]=\"active\" [class.thf-tab-button-sm]=\"small\" (click)=\"onClick()\"> <span class=\"thf-tab-button-label\"> {{label}} </span> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfTabButtonComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ThfTabButtonComponent.propDecorators = {
        active: [{ type: Input, args: ['t-active',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        hide: [{ type: Input, args: ['t-hide',] }],
        id: [{ type: Input, args: ['t-id',] }],
        label: [{ type: Input, args: ['t-label',] }],
        small: [{ type: Input, args: ['t-small',] }],
        activated: [{ type: Output, args: ['t-activated',] }],
        changeState: [{ type: Output, args: ['t-change-state',] }],
        click: [{ type: Output, args: ['t-click',] }]
    };
    return ThfTabButtonComponent;
}());
export { ThfTabButtonComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTabButtonComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    ThfTabButtonComponent.prototype._hide;
    /** @type {?} */
    ThfTabButtonComponent.prototype.disabled;
    /** @type {?} */
    ThfTabButtonComponent.prototype.id;
    /** @type {?} */
    ThfTabButtonComponent.prototype.label;
    /** @type {?} */
    ThfTabButtonComponent.prototype.small;
    /** @type {?} */
    ThfTabButtonComponent.prototype.activated;
    /** @type {?} */
    ThfTabButtonComponent.prototype.changeState;
    /** @type {?} */
    ThfTabButtonComponent.prototype.click;
    /**
     * @type {?}
     * @private
     */
    ThfTabButtonComponent.prototype.elementRef;
}
