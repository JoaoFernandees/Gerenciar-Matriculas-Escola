/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para agrupamento de componentes `thf-tab-button` que os rendereiza em uma um caixa de diálogo
 * no formato de lista.
 */
var ThfTabDropdownComponent = /** @class */ (function () {
    function ThfTabDropdownComponent() {
        // Lista de abas
        this.tabs = [];
        // Evento que será emitido ao ativar uma aba
        this.activated = new EventEmitter();
        // Evento que será emitido a aba for desabilitada ou ocultada
        this.changeState = new EventEmitter();
        // Evento de click
        this.click = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ThfTabDropdownComponent.prototype.getContainerClass = /**
     * @return {?}
     */
    function () {
        return this.small ? 'thf-tab-dropdown-container-sm' : 'thf-tab-dropdown-container';
    };
    ThfTabDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-tab-dropdown', template: "<div #tabDrop class=\"thf-tab-dropdown-content thf-tab-button-md\" [class.thf-tab-button-sm]=\"small\"> <div class=\"thf-tab-button-label\"> {{ label }} <span class=\"thf-icon\" [ngClass]=\"(popover.isHidden ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up')\"> </span> </div> </div> <thf-popover #popover t-hide-arrow t-position=\"bottom\" [t-target]=\"tabDropdown\"> <div [ngClass]=\"getContainerClass()\"> <thf-tab-button *ngFor=\"let tab of tabs\" class=\"thf-tab-dropdown-button\" [class.thf-tab-dropdown-button-active]=\"tab.active\" [t-active]=\"tab.active\" [t-disabled]=\"tab.disabled\" [t-hide]=\"tab.hide\" [t-id]=\"tab.id\" [t-label]=\"tab.label\" [t-small]=\"small\" (t-activated)=\"activated.emit(tab)\" (t-change-state)=\"changeState.emit(tab)\" (t-click)=\"popover.close();click.emit(tab);\"> </thf-tab-button> </div> </thf-popover> "
                },] },
    ];
    ThfTabDropdownComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        small: [{ type: Input, args: ['t-small',] }],
        tabs: [{ type: Input, args: ['t-tabs',] }],
        activated: [{ type: Output, args: ['t-activated',] }],
        changeState: [{ type: Output, args: ['t-change-state',] }],
        click: [{ type: Output, args: ['t-click',] }],
        tabDropdown: [{ type: ViewChild, args: ['tabDrop', { read: ElementRef },] }]
    };
    return ThfTabDropdownComponent;
}());
export { ThfTabDropdownComponent };
if (false) {
    /** @type {?} */
    ThfTabDropdownComponent.prototype.label;
    /** @type {?} */
    ThfTabDropdownComponent.prototype.small;
    /** @type {?} */
    ThfTabDropdownComponent.prototype.tabs;
    /** @type {?} */
    ThfTabDropdownComponent.prototype.activated;
    /** @type {?} */
    ThfTabDropdownComponent.prototype.changeState;
    /** @type {?} */
    ThfTabDropdownComponent.prototype.click;
    /** @type {?} */
    ThfTabDropdownComponent.prototype.tabDropdown;
}
