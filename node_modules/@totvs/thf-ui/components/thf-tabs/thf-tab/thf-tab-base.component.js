/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, uuid } from '../../../utils/util';
/**
 * \@description
 *
 * O componente `thf-tab` renderiza uma aba na qual envolve um conteúdo HTML.
 *
 * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
 * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
 *
 * > Para controlar a navegação entre diversas abas, utilizar o componente [`thf-tabs`](/documentation/thf-tabs).
 * @abstract
 */
var ThfTabBaseComponent = /** @class */ (function () {
    function ThfTabBaseComponent() {
        this._active = false;
        this._disabled = false;
        this._hide = false;
        // ID da aba
        this.id = uuid();
        /**
         * Método disparado ao clicar na aba.
         */
        this.click = new EventEmitter();
    }
    Object.defineProperty(ThfTabBaseComponent.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        /**
         * @optional
         *
         * @description
         *
         * Ativa a aba exibindo seu conteúdo.
         *
         * > Sugere-se utilizar na aba de conteúdo inicial.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Ativa a aba exibindo seu conteúdo.
         *
         * > Sugere-se utilizar na aba de conteúdo inicial.
         *
         * \@default `false`
         * @param {?} active
         * @return {?}
         */
        function (active) {
            this._active = convertToBoolean(active);
            this.setDisplayOnActive();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a aba.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a aba.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabBaseComponent.prototype, "hide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hide;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta a aba.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta a aba.
         *
         * \@default `false`
         * @param {?} hide
         * @return {?}
         */
        function (hide) {
            this._hide = convertToBoolean(hide);
        },
        enumerable: true,
        configurable: true
    });
    ThfTabBaseComponent.propDecorators = {
        active: [{ type: Input, args: ['t-active',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        hide: [{ type: Input, args: ['t-hide',] }],
        label: [{ type: Input, args: ['t-label',] }],
        click: [{ type: Output, args: ['t-click',] }]
    };
    return ThfTabBaseComponent;
}());
export { ThfTabBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTabBaseComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    ThfTabBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfTabBaseComponent.prototype._hide;
    /** @type {?} */
    ThfTabBaseComponent.prototype.id;
    /**
     * Rótulo da aba.
     * @type {?}
     */
    ThfTabBaseComponent.prototype.label;
    /**
     * Método disparado ao clicar na aba.
     * @type {?}
     */
    ThfTabBaseComponent.prototype.click;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfTabBaseComponent.prototype.setDisplayOnActive = function () { };
}
