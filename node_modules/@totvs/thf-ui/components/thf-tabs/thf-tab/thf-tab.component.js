var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef } from '@angular/core';
import { ThfTabBaseComponent } from './thf-tab-base.component';
/**
 * \@docsExtends ThfTabBaseComponent
 */
var ThfTabComponent = /** @class */ (function (_super) {
    __extends(ThfTabComponent, _super);
    function ThfTabComponent(elementRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfTabComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setDisplayOnActive();
    };
    /**
     * @protected
     * @return {?}
     */
    ThfTabComponent.prototype.setDisplayOnActive = /**
     * @protected
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
    };
    ThfTabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-tab', template: "<ng-content></ng-content> "
                },] },
    ];
    /** @nocollapse */
    ThfTabComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ThfTabComponent;
}(ThfTabBaseComponent));
export { ThfTabComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTabComponent.prototype.elementRef;
}
