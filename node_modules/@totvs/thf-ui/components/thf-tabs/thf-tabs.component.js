var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ContentChildren, QueryList } from '@angular/core';
import { ThfTabComponent } from './thf-tab/thf-tab.component';
import { ThfTabsBaseComponent } from './thf-tabs-base.component';
/** @type {?} */
var thfTabsMaxNumberOfTabs = 5;
/**
 * \@docsExtends ThfTabsBaseComponent
 *
 * \@example
 *
 * <example name="thf-tabs-basic" title="Totvs Tabs Basic">
 *  <file name="sample-thf-tabs-basic/sample-thf-tabs-basic.component.html"> </file>
 *  <file name="sample-thf-tabs-basic/sample-thf-tabs-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tabs-labs" title="Totvs Tabs Labs">
 *  <file name="sample-thf-tabs-labs/sample-thf-tabs-labs.component.html"> </file>
 *  <file name="sample-thf-tabs-labs/sample-thf-tabs-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tabs-travel" title="Totvs Tabs - Travel">
 *  <file name="sample-thf-tabs-travel/sample-thf-tabs-travel.component.html"> </file>
 *  <file name="sample-thf-tabs-travel/sample-thf-tabs-travel.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tabs-business-conf" title="Totvs Tabs - Business Conference">
 *  <file name="sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.html"> </file>
 *  <file name="sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.ts"> </file>
 * </example>
 */
var ThfTabsComponent = /** @class */ (function (_super) {
    __extends(ThfTabsComponent, _super);
    function ThfTabsComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.maxNumberOfTabs = thfTabsMaxNumberOfTabs;
        return _this;
    }
    Object.defineProperty(ThfTabsComponent.prototype, "isShowTabDropdown", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleTabs.length > this.maxNumberOfTabs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabsComponent.prototype, "overflowedTabs", {
        // tabs que serão apresentadas na aba "Mais"
        get: 
        // tabs que serão apresentadas na aba "Mais"
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.visibleTabs.filter(function (_tab, index) { return index > (_this.maxNumberOfTabs - 2); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabsComponent.prototype, "visibleTabs", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tabs.filter(function (tab) { return !tab.hide; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.isVisibleTab = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        /** @type {?} */
        var visibleTabIndex = this.visibleTabs.findIndex(function (visibleTab) { return visibleTab.id === tab.id; });
        return (this.visibleTabs.length <= this.maxNumberOfTabs) || (visibleTabIndex < (this.maxNumberOfTabs - 1));
    };
    // Função disparada quando alguma tab ficar ativa
    // Função disparada quando alguma tab ficar ativa
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.onTabActive = 
    // Função disparada quando alguma tab ficar ativa
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        this.previousActiveTab = this.tabs.find(function (tabChild) { return tabChild.active && tabChild.id !== tab.id; });
        this.deactivateTab();
    };
    // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
    // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.onTabChangeState = 
    // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        if (tab.active) {
            tab.active = false;
            this.activeDistinctTab();
            this.changeDetector.detectChanges();
        }
    };
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.selectedTab = 
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        tab.active = true;
        if (tab.click) {
            tab.click.emit(tab);
        }
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} _i
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.trackByFn = /**
     * @param {?} _i
     * @param {?} tab
     * @return {?}
     */
    function (_i, tab) {
        return tab.id;
    };
    // ativa a previousActiveTab ou primeira tab encontrada.
    // ativa a previousActiveTab ou primeira tab encontrada.
    /**
     * @private
     * @return {?}
     */
    ThfTabsComponent.prototype.activeDistinctTab = 
    // ativa a previousActiveTab ou primeira tab encontrada.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = true;
        }
        else {
            this.activeFirstTab();
        }
    };
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    /**
     * @private
     * @return {?}
     */
    ThfTabsComponent.prototype.activeFirstTab = 
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    /**
     * @private
     * @return {?}
     */
    function () {
        this.tabs.some(function (tabChild) {
            if (!tabChild.disabled && !tabChild.hide) {
                tabChild.active = true;
                return true;
            }
        });
    };
    // desativa previousActiveTab e dispara a detecção de mudança.
    // desativa previousActiveTab e dispara a detecção de mudança.
    /**
     * @private
     * @return {?}
     */
    ThfTabsComponent.prototype.deactivateTab = 
    // desativa previousActiveTab e dispara a detecção de mudança.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = false;
            this.changeDetector.detectChanges();
        }
    };
    ThfTabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-tabs', template: "<div class=\"thf-tabs-header\"> <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\"> <thf-tab-button *ngIf=\"isVisibleTab(tab)\" class=\"thf-tab-button\" [t-active]=\"tab.active\" [t-disabled]=\"tab.disabled\" [t-id]=\"tab.id\" [t-hide]=\"tab.hide\" [t-label]=\"tab.label\" [t-small]=\"small\" (t-activated)=\"onTabActive(tab)\" (t-change-state)=\"onTabChangeState(tab)\" (t-click)=\"selectedTab(tab)\"> </thf-tab-button> </ng-container> <thf-tab-dropdown *ngIf=\"isShowTabDropdown\" class=\"thf-tab-button thf-tab-dropdown\" t-label=\"Mais\" [t-small]=\"small\" [t-tabs]=\"overflowedTabs\" (t-activated)=\"onTabActive($event)\" (t-change-state)=\"onTabChangeState($event)\" (t-click)=\"selectedTab($event)\"> </thf-tab-dropdown> </div> <div class=\"thf-tabs-container\"> <ng-content></ng-content> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfTabsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    ThfTabsComponent.propDecorators = {
        tabs: [{ type: ContentChildren, args: [ThfTabComponent,] }]
    };
    return ThfTabsComponent;
}(ThfTabsBaseComponent));
export { ThfTabsComponent };
if (false) {
    /** @type {?} */
    ThfTabsComponent.prototype.maxNumberOfTabs;
    /**
     * @type {?}
     * @private
     */
    ThfTabsComponent.prototype.previousActiveTab;
    /** @type {?} */
    ThfTabsComponent.prototype.tabs;
    /**
     * @type {?}
     * @private
     */
    ThfTabsComponent.prototype.changeDetector;
}
