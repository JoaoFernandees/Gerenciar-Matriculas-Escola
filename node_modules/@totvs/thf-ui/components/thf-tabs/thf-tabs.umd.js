(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['thf-tabs'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */

// Idioma padrão
/** @type {?} */

/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */

/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */

/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} date
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */

/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */

// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */

// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */

/**
 * @param {?} event
 * @return {?}
 */

/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */

/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} link
 * @return {?}
 */

/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */

/**
 * @return {?}
 */
function uuid() {
    /**
     * @return {?}
     */
    function hex4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' +
        hex4() + '-' + hex4() + hex4() + hex4();
}
/**
 * @param {?} text
 * @return {?}
 */

/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-tab` renderiza uma aba na qual envolve um conteúdo HTML.
 *
 * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
 * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
 *
 * > Para controlar a navegação entre diversas abas, utilizar o componente [`thf-tabs`](/documentation/thf-tabs).
 * @abstract
 */
var ThfTabBaseComponent = /** @class */ (function () {
    function ThfTabBaseComponent() {
        this._active = false;
        this._disabled = false;
        this._hide = false;
        // ID da aba
        this.id = uuid();
        /**
         * Método disparado ao clicar na aba.
         */
        this.click = new core.EventEmitter();
    }
    Object.defineProperty(ThfTabBaseComponent.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        /**
         * @optional
         *
         * @description
         *
         * Ativa a aba exibindo seu conteúdo.
         *
         * > Sugere-se utilizar na aba de conteúdo inicial.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Ativa a aba exibindo seu conteúdo.
         *
         * > Sugere-se utilizar na aba de conteúdo inicial.
         *
         * \@default `false`
         * @param {?} active
         * @return {?}
         */
        function (active) {
            this._active = convertToBoolean(active);
            this.setDisplayOnActive();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a aba.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a aba.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabBaseComponent.prototype, "hide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hide;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta a aba.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta a aba.
         *
         * \@default `false`
         * @param {?} hide
         * @return {?}
         */
        function (hide) {
            this._hide = convertToBoolean(hide);
        },
        enumerable: true,
        configurable: true
    });
    ThfTabBaseComponent.propDecorators = {
        active: [{ type: core.Input, args: ['t-active',] }],
        disabled: [{ type: core.Input, args: ['t-disabled',] }],
        hide: [{ type: core.Input, args: ['t-hide',] }],
        label: [{ type: core.Input, args: ['t-label',] }],
        click: [{ type: core.Output, args: ['t-click',] }]
    };
    return ThfTabBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfTabBaseComponent
 */
var ThfTabComponent = /** @class */ (function (_super) {
    __extends(ThfTabComponent, _super);
    function ThfTabComponent(elementRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfTabComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setDisplayOnActive();
    };
    /**
     * @protected
     * @return {?}
     */
    ThfTabComponent.prototype.setDisplayOnActive = /**
     * @protected
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
    };
    ThfTabComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-tab', template: "<ng-content></ng-content> "
                },] },
    ];
    /** @nocollapse */
    ThfTabComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    return ThfTabComponent;
}(ThfTabBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTabComponent
 *
 * \@description
 *
 * Interface que define o `thf-tab`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-tabs` é responsável por agrupar [abas](/documentation/thf-tab) dispostas numa linha horizontal,
 * ideal para facilitar a organização de conteúdos.
 *
 * Até cinco abas o componente exibe todas normalmente. Contudo, a partir de seis abas, o componente torna visível
 * apenas as quatro primeiras, agrupando todas as demais na quinta aba rotulada de **Mais**.
 *
 * > As abas que estiverem agrupadas serão dispostas numa cascata suspensa que será exibida ao clicar no botão **Mais**.
 *
 * #### Boas práticas
 *
 * - Evite utilizar uma quantidade excessiva de abas, pois irá gerar um *scroll* muito longo no `dropdown`;
 * - Evite `labels` extensos para as `tabs` pois podem quebrar seu *layout*, use `labels` diretos, curtos e intuitivos.
 */
var ThfTabsBaseComponent = /** @class */ (function () {
    function ThfTabsBaseComponent() {
        this._small = false;
    }
    Object.defineProperty(ThfTabsBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optinal
         *
         * @description
         *
         * Diminui o tamanho das abas.
         *
         * @default `false`
         */
        set: /**
         * \@optinal
         *
         * \@description
         *
         * Diminui o tamanho das abas.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ThfTabsBaseComponent.propDecorators = {
        small: [{ type: core.Input, args: ['t-small',] }]
    };
    return ThfTabsBaseComponent;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfTabsMaxNumberOfTabs = 5;
/**
 * \@docsExtends ThfTabsBaseComponent
 *
 * \@example
 *
 * <example name="thf-tabs-basic" title="Totvs Tabs Basic">
 *  <file name="sample-thf-tabs-basic/sample-thf-tabs-basic.component.html"> </file>
 *  <file name="sample-thf-tabs-basic/sample-thf-tabs-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tabs-labs" title="Totvs Tabs Labs">
 *  <file name="sample-thf-tabs-labs/sample-thf-tabs-labs.component.html"> </file>
 *  <file name="sample-thf-tabs-labs/sample-thf-tabs-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tabs-travel" title="Totvs Tabs - Travel">
 *  <file name="sample-thf-tabs-travel/sample-thf-tabs-travel.component.html"> </file>
 *  <file name="sample-thf-tabs-travel/sample-thf-tabs-travel.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tabs-business-conf" title="Totvs Tabs - Business Conference">
 *  <file name="sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.html"> </file>
 *  <file name="sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.ts"> </file>
 * </example>
 */
var ThfTabsComponent = /** @class */ (function (_super) {
    __extends$1(ThfTabsComponent, _super);
    function ThfTabsComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.maxNumberOfTabs = thfTabsMaxNumberOfTabs;
        return _this;
    }
    Object.defineProperty(ThfTabsComponent.prototype, "isShowTabDropdown", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleTabs.length > this.maxNumberOfTabs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabsComponent.prototype, "overflowedTabs", {
        // tabs que serão apresentadas na aba "Mais"
        get: 
        // tabs que serão apresentadas na aba "Mais"
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.visibleTabs.filter(function (_tab, index) { return index > (_this.maxNumberOfTabs - 2); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabsComponent.prototype, "visibleTabs", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tabs.filter(function (tab) { return !tab.hide; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.isVisibleTab = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        /** @type {?} */
        var visibleTabIndex = this.visibleTabs.findIndex(function (visibleTab) { return visibleTab.id === tab.id; });
        return (this.visibleTabs.length <= this.maxNumberOfTabs) || (visibleTabIndex < (this.maxNumberOfTabs - 1));
    };
    // Função disparada quando alguma tab ficar ativa
    // Função disparada quando alguma tab ficar ativa
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.onTabActive = 
    // Função disparada quando alguma tab ficar ativa
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        this.previousActiveTab = this.tabs.find(function (tabChild) { return tabChild.active && tabChild.id !== tab.id; });
        this.deactivateTab();
    };
    // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
    // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.onTabChangeState = 
    // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        if (tab.active) {
            tab.active = false;
            this.activeDistinctTab();
            this.changeDetector.detectChanges();
        }
    };
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.selectedTab = 
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        tab.active = true;
        if (tab.click) {
            tab.click.emit(tab);
        }
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} _i
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.trackByFn = /**
     * @param {?} _i
     * @param {?} tab
     * @return {?}
     */
    function (_i, tab) {
        return tab.id;
    };
    // ativa a previousActiveTab ou primeira tab encontrada.
    // ativa a previousActiveTab ou primeira tab encontrada.
    /**
     * @private
     * @return {?}
     */
    ThfTabsComponent.prototype.activeDistinctTab = 
    // ativa a previousActiveTab ou primeira tab encontrada.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = true;
        }
        else {
            this.activeFirstTab();
        }
    };
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    /**
     * @private
     * @return {?}
     */
    ThfTabsComponent.prototype.activeFirstTab = 
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    /**
     * @private
     * @return {?}
     */
    function () {
        this.tabs.some(function (tabChild) {
            if (!tabChild.disabled && !tabChild.hide) {
                tabChild.active = true;
                return true;
            }
        });
    };
    // desativa previousActiveTab e dispara a detecção de mudança.
    // desativa previousActiveTab e dispara a detecção de mudança.
    /**
     * @private
     * @return {?}
     */
    ThfTabsComponent.prototype.deactivateTab = 
    // desativa previousActiveTab e dispara a detecção de mudança.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = false;
            this.changeDetector.detectChanges();
        }
    };
    ThfTabsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-tabs', template: "<div class=\"thf-tabs-header\"> <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\"> <thf-tab-button *ngIf=\"isVisibleTab(tab)\" class=\"thf-tab-button\" [t-active]=\"tab.active\" [t-disabled]=\"tab.disabled\" [t-id]=\"tab.id\" [t-hide]=\"tab.hide\" [t-label]=\"tab.label\" [t-small]=\"small\" (t-activated)=\"onTabActive(tab)\" (t-change-state)=\"onTabChangeState(tab)\" (t-click)=\"selectedTab(tab)\"> </thf-tab-button> </ng-container> <thf-tab-dropdown *ngIf=\"isShowTabDropdown\" class=\"thf-tab-button thf-tab-dropdown\" t-label=\"Mais\" [t-small]=\"small\" [t-tabs]=\"overflowedTabs\" (t-activated)=\"onTabActive($event)\" (t-change-state)=\"onTabChangeState($event)\" (t-click)=\"selectedTab($event)\"> </thf-tab-dropdown> </div> <div class=\"thf-tabs-container\"> <ng-content></ng-content> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfTabsComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef }
    ]; };
    ThfTabsComponent.propDecorators = {
        tabs: [{ type: core.ContentChildren, args: [ThfTabComponent,] }]
    };
    return ThfTabsComponent;
}(ThfTabsBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 * \@description
 *
 * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
 * seguintes posições:
 *
 * - `right`: Posiciona o elemento no lado direito do componente alvo.
 * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
 * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
 * - `bottom`: Posiciona o elemento abaixo do componente alvo.
 * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
 * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
 * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
 * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
 * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
 * - `top`: Posiciona o elemento acima do componente alvo.
 * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
 * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
 *
 * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
 * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
 * @type {?}
 */
var thfControlPositionSidesDefault = [
    'bottom', 'bottom-left', 'bottom-right',
    'left', 'left-top', 'left-bottom',
    'top', 'top-right', 'top-left',
    'right', 'right-bottom', 'right-top'
];
var ThfControlPositionService = /** @class */ (function () {
    function ThfControlPositionService() {
        this.differenceDiagonalToWidthArrow = 3;
        this.isSetElementWidth = false;
        // offset da seta em relação ao canto do componente
        this.offsetArrow = 12;
    }
    /**
     * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param position posição para exibição do elemento
     */
    /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} position posição para exibição do elemento
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustPosition = /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} position posição para exibição do elemento
     * @return {?}
     */
    function (position) {
        this.elementPosition(position);
        this.customPositions && this.customPositions.length ? this.adjustCustomPosition(position) : this.adjustDefaultPosition(position);
    };
    /**
     * @description Retorna a direção da seta, conforme a posição do elemento.
     */
    /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    ThfControlPositionService.prototype.getArrowDirection = /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    function () {
        return this.arrowDirection;
    };
    /**
     * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param element elemento que será exibido
     * @param elementOffset offSet do elemento
     * @param targetElement elemento de onde deve partir a exibição
     * @param customPositions posições que sobrescreve as posições padrões
     * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     */
    /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    ThfControlPositionService.prototype.setElements = /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    function (element, elementOffset, targetElement, customPositions, isSetElementWidth, isCornerAligned) {
        if (isSetElementWidth === void 0) { isSetElementWidth = false; }
        if (isCornerAligned === void 0) { isCornerAligned = false; }
        this.element = (element instanceof core.ElementRef) ? element.nativeElement : element;
        this.targetElement = (targetElement instanceof core.ElementRef) ? targetElement.nativeElement : targetElement;
        this.elementOffset = elementOffset;
        this.customPositions = customPositions;
        this.isSetElementWidth = isSetElementWidth;
        this.isCornerAligned = isCornerAligned;
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustCustomPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var positionLength = this.customPositions.length;
        /** @type {?} */
        var sidesCount = 0;
        while (sidesCount++ < positionLength) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions);
                this.elementPosition(position);
            }
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustDefaultPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var mainPositions = this.getMainPositions();
        /** @type {?} */
        var mainPositionLength = mainPositions.length;
        /** @type {?} */
        var mainSidesCount = 0;
        while (mainSidesCount++ < mainPositionLength) {
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            if (this.overflowMain(mainPosition)) {
                position = this.nextPosition(mainPosition, mainPositions);
                continue;
            }
            else if (this.overflowAllSides(position)) {
                this.verifySubPositions(position);
                // TODO: Não está indo para a proxima main position, o problema acontece somente quando utiliza as posições default
                return;
            }
            return;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.elementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return (position.indexOf('-') > -1) ? position.substring(0, position.indexOf('-')) : position;
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPositions = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultMainPositions = ['top', 'right', 'bottom', 'left'];
        return this.customPositions && this.customPositions.length ?
            this.getMainPositionsByCustomPositions(this.customPositions) : defaultMainPositions;
    };
    /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPositionsByCustomPositions = /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    function (customPositions) {
        /** @type {?} */
        var mainPositions = [];
        /** @type {?} */
        var customPositionsLength = customPositions.length;
        for (var i = 0; i < customPositionsLength; i++) {
            /** @type {?} */
            var position = customPositions[i];
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            if (!mainPositions.includes(mainPosition)) {
                mainPositions.push(mainPosition);
            }
        }
        return mainPositions;
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getOverflows = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        return {
            right: (sizesAndPositions.element.right > sizesAndPositions.window.innerWidth),
            top: (sizesAndPositions.element.top <= 0),
            left: (sizesAndPositions.element.left <= 0),
            bottom: (sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight)
        };
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getSizesAndPositions = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            window: {
                scrollY: window.scrollY,
                scrollX: window.scrollX,
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            },
            element: this.element.getBoundingClientRect(),
            target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
        };
    };
    /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    ThfControlPositionService.prototype.nextPosition = /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    function (position, positions) {
        if (positions === void 0) { positions = []; }
        /** @type {?} */
        var index = positions.indexOf(position);
        /** @type {?} */
        var nextIndex = index + 1;
        if (index > -1 && nextIndex < positions.length) {
            return positions[nextIndex];
        }
        else {
            return positions[0];
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.overflowAllSides = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top || overflows.right || overflows.left;
            case 'top-right': return overflows.top || overflows.right;
            case 'top-left': return overflows.top || overflows.left;
            case 'right': return overflows.right || overflows.top || overflows.bottom;
            case 'right-top': return overflows.right || overflows.top;
            case 'right-bottom': return overflows.right || overflows.bottom;
            case 'bottom': return overflows.bottom || overflows.right || overflows.left;
            case 'bottom-right': return overflows.bottom || overflows.right;
            case 'bottom-left': return overflows.bottom || overflows.left;
            case 'left': return overflows.left || overflows.top || overflows.bottom;
            case 'left-top': return overflows.left || overflows.top;
            case 'left-bottom': return overflows.left || overflows.bottom;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.overflowMain = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top;
            case 'right': return overflows.right;
            case 'bottom': return overflows.bottom;
            case 'left': return overflows.left;
        }
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top-left': return 'bottom-left';
            case 'top-right': return 'bottom-right';
            case 'bottom-right': return 'top-right';
            case 'bottom-left': return 'top-left';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'bottom-left':
                this.setAlignedBottomPositions(0, sizesAndPositions);
                break;
            case 'bottom-right':
                this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
            case 'top-left':
                this.setAlignedTopPositions(0, sizesAndPositions);
                break;
            case 'top-right':
                this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setAlignedArrowDirection(position);
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    ThfControlPositionService.prototype.setArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top': return 'bottom';
            case 'top-left': return 'bottom-right';
            case 'top-right': return 'bottom-left';
            case 'right': return 'left';
            case 'right-top': return 'left-bottom';
            case 'right-bottom': return 'left-top';
            case 'bottom': return 'top';
            case 'bottom-right': return 'top-left';
            case 'bottom-left': return 'top-right';
            case 'left': return 'right';
            case 'left-bottom': return 'right-top';
            case 'left-top': return 'right-bottom';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.setElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'top':
                this.setTopPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'top-left':
                this.setTopPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'top-right':
                this.setTopPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right':
                this.setRightPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'right-top':
                this.setRightPositions((sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right-bottom':
                this.setRightPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'bottom':
                this.setBottomPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'bottom-right':
                this.setBottomPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'bottom-left':
                this.setBottomPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'left':
                this.setLeftPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'left-bottom':
                this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'left-top':
                this.setLeftPositions((sizesAndPositions.element.height - this.offsetArrow), sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setArrowDirection(position);
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.setElementWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isSetElementWidth && this.targetElement) {
            this.element.style.width = this.targetElement.clientWidth + "px";
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setLeftPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setRightPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.verifySubPositions = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (position.indexOf('-') > -1) {
            position = position.substring(0, position.indexOf('-'));
            this.elementPosition(position);
        }
        /** @type {?} */
        var align = 0;
        while (align++ < 3) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions || thfControlPositionSidesDefault);
                this.elementPosition(position);
            }
            else {
                return null;
            }
        }
    };
    ThfControlPositionService.decorators = [
        { type: core.Injectable },
    ];
    return ThfControlPositionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Array de posições.
/** @type {?} */
var THF_CONTROL_POSITIONS = [
    'right',
    'right-top',
    'right-bottom',
    'top',
    'top-left',
    'top-right',
    'left',
    'left-top',
    'left-bottom',
    'bottom',
    'bottom-left',
    'bottom-right'
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_POPOVER_DEFAULT_POSITION = 'right';
/** @type {?} */
var THF_POPOVER_DEFAULT_TRIGGER = 'click';
/** @type {?} */
var THF_POPOVER_TRIGGERS = ['click', 'hover'];
/**
 * \@description
 *
 * O componente `thf-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
 * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
 *
 * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
 * [**thf-tooltip**](https://thf.totvs.com.br/documentation/thf-tooltip?view=doc).
 *
 * Para conteúdos maiores recomenda-se o uso do [**thf-modal**](https://thf.totvs.com.br/documentation/thf-modal?view=doc).
 *
 * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
 * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
 * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
 *
 * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
 * Os eventos permitidos são: `click` e `hover`.
 *
 */
var ThfPopoverBaseComponent = /** @class */ (function () {
    function ThfPopoverBaseComponent() {
        // Controla se o popover fica oculto ou visível, por padrão é oculto.
        this.isHidden = true;
        this._hideArrow = false;
        this._position = THF_POPOVER_DEFAULT_POSITION;
        this._trigger = THF_POPOVER_DEFAULT_TRIGGER;
    }
    Object.defineProperty(ThfPopoverBaseComponent.prototype, "hideArrow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideArrow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a seta do componente *popover*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a seta do componente *popover*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideArrow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPopoverBaseComponent.prototype, "position", {
        get: /**
         * @return {?}
         */
        function () {
            return this._position;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição que o thf-popover abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-popover no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-popover no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-popover no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-popover abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-popover abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-popover abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-popover no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-popover no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-popover no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-popover acima do componente alvo.
         * - `top-right`: Posiciona o thf-popover acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-popover acima e à esquerda do componente alvo.
         *
         *
         * @default right
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a posição que o thf-popover abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-popover no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-popover no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-popover no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-popover abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-popover abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-popover abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-popover no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-popover no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-popover no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-popover acima do componente alvo.
         * - `top-right`: Posiciona o thf-popover acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-popover acima e à esquerda do componente alvo.
         *
         *
         * \@default right
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._position = THF_CONTROL_POSITIONS.includes(value) ? value : THF_POPOVER_DEFAULT_POSITION;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPopoverBaseComponent.prototype, "trigger", {
        get: /**
         * @return {?}
         */
        function () {
            return this._trigger;
        },
        /**
         * @description
         *
         * Define o evento que abrirá o thf-popover.
         *
         * Valores válidos:
         *  - `click`: Abre ao clicar no componente alvo.
         *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
         *
         * @default click
         * @optional
         */
        set: /**
         * \@description
         *
         * Define o evento que abrirá o thf-popover.
         *
         * Valores válidos:
         *  - `click`: Abre ao clicar no componente alvo.
         *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
         *
         * \@default click
         * \@optional
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._trigger = THF_POPOVER_TRIGGERS.includes(value) ? value : THF_POPOVER_DEFAULT_TRIGGER;
        },
        enumerable: true,
        configurable: true
    });
    ThfPopoverBaseComponent.propDecorators = {
        hideArrow: [{ type: core.Input, args: ['t-hide-arrow',] }],
        position: [{ type: core.Input, args: ['t-position',] }],
        target: [{ type: core.Input, args: ['t-target',] }],
        title: [{ type: core.Input, args: ['t-title',] }],
        trigger: [{ type: core.Input, args: ['t-trigger',] }]
    };
    return ThfPopoverBaseComponent;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@docsExtends ThfPopoverBaseComponent
 *
 * \@example
 *
 * <example name="thf-popover-basic" title="Totvs Popover Basic">
 *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.html"> </file>
 *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popover-labs" title="Totvs Popover Labs">
 *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.html"> </file>
 *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popover-credit-card" title="Totvs Popover - Credit Card">
 *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.html"> </file>
 *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.ts"> </file>
 * </example>
 */
var ThfPopoverComponent = /** @class */ (function (_super) {
    __extends$2(ThfPopoverComponent, _super);
    function ThfPopoverComponent(renderer, thfControlPosition) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.thfControlPosition = thfControlPosition;
        _this.arrowDirection = 'left';
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initEventListenerFunction();
        /** @type {?} */
        var popoverOffset = 8;
        this.thfControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
        this.setRendererListenInit();
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.isHidden = true;
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.debounceResize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.setPopoverPosition();
        }, 200);
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.addScrollEventListener();
        this.isHidden = false;
        this.setOpacity(0);
        setTimeout(function () {
            _this.thfControlPosition.adjustPosition(_this.position);
            _this.arrowDirection = _this.thfControlPosition.getArrowDirection();
            _this.setOpacity(1);
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfPopoverComponent.prototype.setOpacity = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.popoverElement.nativeElement.style.opacity = value;
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.setPopoverPosition = /**
     * @return {?}
     */
    function () {
        this.thfControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.thfControlPosition.getArrowDirection();
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.setRendererListenInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            if (!_this.isHidden) {
                _this.debounceResize();
            }
        });
        if (this.trigger === 'hover') {
            this.mouseEnterListener = this.renderer.listen(this.target.nativeElement, 'mouseenter', function (event) {
                _this.open();
            });
            this.mouseLeaveListener = this.renderer.listen(this.target.nativeElement, 'mouseleave', function (event) {
                _this.close();
            });
        }
        else {
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.togglePopup(event);
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfPopoverComponent.prototype.togglePopup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isHidden && !this.popoverElement.nativeElement.contains(event.target) &&
            !this.target.nativeElement.contains(event.target)) {
            this.close();
        }
        else if (this.target.nativeElement.contains(event.target)) {
            this.popoverElement.nativeElement.hidden ? this.open() : this.close();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopoverComponent.prototype.addScrollEventListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopoverComponent.prototype.initEventListenerFunction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventListenerFunction = function () {
            _this.setPopoverPosition();
        };
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopoverComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.mouseEnterListener) {
            this.mouseEnterListener();
        }
        if (this.mouseLeaveListener) {
            this.mouseLeaveListener();
        }
        this.resizeListener();
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    };
    ThfPopoverComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-popover', template: "<div [hidden]=\"isHidden\" class=\"thf-popover\" #popoverElement> <div *ngIf=\"!hideArrow\" class=\"thf-popover-arrow thf-arrow-{{ arrowDirection }}\"></div> <div class=\"thf-popover-content\"> <span *ngIf=\"title\" class=\"thf-popover-title\">{{ title }}</span> <ng-content></ng-content> </div> </div> ",
                    providers: [ThfControlPositionService]
                },] },
    ];
    /** @nocollapse */
    ThfPopoverComponent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: ThfControlPositionService }
    ]; };
    ThfPopoverComponent.propDecorators = {
        popoverElement: [{ type: core.ViewChild, args: ['popoverElement', { read: core.ElementRef },] }]
    };
    return ThfPopoverComponent;
}(ThfPopoverBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-popover.
 */
var ThfPopoverModule = /** @class */ (function () {
    function ThfPopoverModule() {
    }
    ThfPopoverModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfPopoverComponent],
                    exports: [ThfPopoverComponent]
                },] },
    ];
    return ThfPopoverModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por manipular os botões de aba.
 */
var ThfTabButtonComponent = /** @class */ (function () {
    function ThfTabButtonComponent(elementRef) {
        this.elementRef = elementRef;
        // Função sera emitida quando a tab ficar ativada
        this.activated = new core.EventEmitter();
        // Função sera emitida quando a tab ficar desabilitada ou escondida
        this.changeState = new core.EventEmitter();
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.click = new core.EventEmitter();
    }
    Object.defineProperty(ThfTabButtonComponent.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        // Ativa o botão
        set: 
        // Ativa o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._active = value;
            this.emitActivated();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabButtonComponent.prototype, "hide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hide;
        },
        // Oculta o botão
        set: 
        // Oculta o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hide = convertToBoolean(value);
            this.setDisplayOnHide();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfTabButtonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    };
    /**
     * @return {?}
     */
    ThfTabButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTabButtonComponent.prototype.emitActivated = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.active) {
            this.activated.emit(this);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTabButtonComponent.prototype.setDisplayOnHide = /**
     * @private
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    };
    ThfTabButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-tab-button', template: "<div class=\"thf-tab-button-md\" [class.thf-tab-button-disabled]=\"disabled\" [class.thf-tab-button-active]=\"active\" [class.thf-tab-button-sm]=\"small\" (click)=\"onClick()\"> <span class=\"thf-tab-button-label\"> {{label}} </span> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfTabButtonComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    ThfTabButtonComponent.propDecorators = {
        active: [{ type: core.Input, args: ['t-active',] }],
        disabled: [{ type: core.Input, args: ['t-disabled',] }],
        hide: [{ type: core.Input, args: ['t-hide',] }],
        id: [{ type: core.Input, args: ['t-id',] }],
        label: [{ type: core.Input, args: ['t-label',] }],
        small: [{ type: core.Input, args: ['t-small',] }],
        activated: [{ type: core.Output, args: ['t-activated',] }],
        changeState: [{ type: core.Output, args: ['t-change-state',] }],
        click: [{ type: core.Output, args: ['t-click',] }]
    };
    return ThfTabButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para agrupamento de componentes `thf-tab-button` que os rendereiza em uma um caixa de diálogo
 * no formato de lista.
 */
var ThfTabDropdownComponent = /** @class */ (function () {
    function ThfTabDropdownComponent() {
        // Lista de abas
        this.tabs = [];
        // Evento que será emitido ao ativar uma aba
        this.activated = new core.EventEmitter();
        // Evento que será emitido a aba for desabilitada ou ocultada
        this.changeState = new core.EventEmitter();
        // Evento de click
        this.click = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    ThfTabDropdownComponent.prototype.getContainerClass = /**
     * @return {?}
     */
    function () {
        return this.small ? 'thf-tab-dropdown-container-sm' : 'thf-tab-dropdown-container';
    };
    ThfTabDropdownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-tab-dropdown', template: "<div #tabDrop class=\"thf-tab-dropdown-content thf-tab-button-md\" [class.thf-tab-button-sm]=\"small\"> <div class=\"thf-tab-button-label\"> {{ label }} <span class=\"thf-icon\" [ngClass]=\"(popover.isHidden ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up')\"> </span> </div> </div> <thf-popover #popover t-hide-arrow t-position=\"bottom\" [t-target]=\"tabDropdown\"> <div [ngClass]=\"getContainerClass()\"> <thf-tab-button *ngFor=\"let tab of tabs\" class=\"thf-tab-dropdown-button\" [class.thf-tab-dropdown-button-active]=\"tab.active\" [t-active]=\"tab.active\" [t-disabled]=\"tab.disabled\" [t-hide]=\"tab.hide\" [t-id]=\"tab.id\" [t-label]=\"tab.label\" [t-small]=\"small\" (t-activated)=\"activated.emit(tab)\" (t-change-state)=\"changeState.emit(tab)\" (t-click)=\"popover.close();click.emit(tab);\"> </thf-tab-button> </div> </thf-popover> "
                },] },
    ];
    ThfTabDropdownComponent.propDecorators = {
        label: [{ type: core.Input, args: ['t-label',] }],
        small: [{ type: core.Input, args: ['t-small',] }],
        tabs: [{ type: core.Input, args: ['t-tabs',] }],
        activated: [{ type: core.Output, args: ['t-activated',] }],
        changeState: [{ type: core.Output, args: ['t-change-state',] }],
        click: [{ type: core.Output, args: ['t-click',] }],
        tabDropdown: [{ type: core.ViewChild, args: ['tabDrop', { read: core.ElementRef },] }]
    };
    return ThfTabDropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-tabs
 */
var ThfTabsModule = /** @class */ (function () {
    function ThfTabsModule() {
    }
    ThfTabsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfPopoverModule
                    ],
                    declarations: [
                        ThfTabButtonComponent,
                        ThfTabComponent,
                        ThfTabDropdownComponent,
                        ThfTabsComponent
                    ],
                    entryComponents: [
                        ThfTabButtonComponent,
                        ThfTabDropdownComponent
                    ],
                    exports: [
                        ThfTabComponent,
                        ThfTabsComponent
                    ]
                },] },
    ];
    return ThfTabsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfTabComponent = ThfTabComponent;
exports.ThfTabsComponent = ThfTabsComponent;
exports.ThfTabsModule = ThfTabsModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
