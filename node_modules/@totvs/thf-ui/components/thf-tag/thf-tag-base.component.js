/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { ThfTagIcon } from './enums/thf-tag-icon.enum';
import { ThfTagOrientation } from './enums/thf-tag-orientation.enum';
import { ThfTagType } from './enums/thf-tag-type.enum';
/** @type {?} */
var thfTagOrientationDefault = ThfTagOrientation.Vertical;
/** @type {?} */
var thfTagTypeDefault = ThfTagType.Info;
/**
 * \@description
 *
 * Este componente apresenta um valor em um marcador colorido que pode conter ícone e *label*, as cores são definidas conforme o tipo
 * escolhido.
 * Seu uso é indicado para informações que necessitam de destaque em forma de marcação.
 */
var ThfTagBaseComponent = /** @class */ (function () {
    function ThfTagBaseComponent() {
        this._orientation = thfTagOrientationDefault;
        this._type = thfTagTypeDefault;
        this.thfTagOrientation = ThfTagOrientation;
    }
    Object.defineProperty(ThfTagBaseComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        /**
         * @optional
         *
         * @description
         *
         * Apresenta um ícone na tag conforme o tipo:
         * - `danger`: <span class="thf-icon thf-icon-close"></span>
         * - `info`: <span class="thf-icon thf-icon-info"></span>
         * - `success`: <span class="thf-icon thf-icon-ok"></span>
         * - `warning`: <span class="thf-icon thf-icon-warning"></span>
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Apresenta um ícone na tag conforme o tipo:
         * - `danger`: <span class="thf-icon thf-icon-close"></span>
         * - `info`: <span class="thf-icon thf-icon-info"></span>
         * - `success`: <span class="thf-icon thf-icon-ok"></span>
         * - `warning`: <span class="thf-icon thf-icon-warning"></span>
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._icon = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTagBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o layout de exibição.
         *
         * @default `vertical`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o layout de exibição.
         *
         * \@default `vertical`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(ThfTagOrientation).includes(value) ? value : thfTagOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTagBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o tipo e determina a cor do `thf-tag`.
         *
         * Valores válidos:
         *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
         *  - `warning`: cor amarela que representa aviso ou advertência.
         *  - `danger`: cor vermelha para erro ou aviso crítico.
         *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
         *
         * @default `info`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o tipo e determina a cor do `thf-tag`.
         *
         * Valores válidos:
         *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
         *  - `warning`: cor amarela que representa aviso ou advertência.
         *  - `danger`: cor vermelha para erro ou aviso crítico.
         *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
         *
         * \@default `info`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = ((/** @type {?} */ (Object))).values(ThfTagType).includes(value) ? value : thfTagTypeDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTagBaseComponent.prototype, "iconFromType", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.type) {
                case ThfTagType.Danger: return ThfTagIcon.Danger;
                case ThfTagType.Info: return ThfTagIcon.Info;
                case ThfTagType.Success: return ThfTagIcon.Success;
                case ThfTagType.Warning: return ThfTagIcon.Warning;
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfTagBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        icon: [{ type: Input, args: ['t-icon',] }],
        orientation: [{ type: Input, args: ['t-orientation',] }],
        type: [{ type: Input, args: ['t-type',] }],
        value: [{ type: Input, args: ['t-value',] }]
    };
    return ThfTagBaseComponent;
}());
export { ThfTagBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTagBaseComponent.prototype._icon;
    /**
     * @type {?}
     * @private
     */
    ThfTagBaseComponent.prototype._orientation;
    /**
     * @type {?}
     * @private
     */
    ThfTagBaseComponent.prototype._type;
    /** @type {?} */
    ThfTagBaseComponent.prototype.thfTagOrientation;
    /**
     * \@optional
     *
     * \@description
     *
     * Texto antes da tag.
     * @type {?}
     */
    ThfTagBaseComponent.prototype.label;
    /**
     * Texto da tag.
     * @type {?}
     */
    ThfTagBaseComponent.prototype.value;
}
