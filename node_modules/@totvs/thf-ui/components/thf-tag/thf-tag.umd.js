(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['thf-tag'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfTagOrientation = {
    /** A tag será exibida na horizontal, ao lado direito em relação ao label. */
    Horizontal: 'horizontal',
    /** Exibe a tag na vertical, ou seja, abaixo do label. */
    Vertical: 'vertical',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfTagType = {
    /** Erro, perigo, problema ou aviso crítico. */
    Danger: 'danger',
    /** Informativo ou explicativo. */
    Info: 'info',
    /** Confirmação, resultados positivos ou êxito */
    Success: 'success',
    /** Aviso ou advertência. */
    Warning: 'warning',
};

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */

// Idioma padrão
/** @type {?} */

/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */

/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */

/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} date
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */

/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */

// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */

// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */

/**
 * @param {?} event
 * @return {?}
 */

/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */

/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} link
 * @return {?}
 */

/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @param {?} text
 * @return {?}
 */

/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfTagIcon = {
    /** Ícone fechar */
    Danger: 'close',
    /** Ícone de informação */
    Info: 'info',
    /** Ícone que representa confirmação */
    Success: 'ok',
    /** Ícone com ponto de exclamação */
    Warning: 'warning',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfTagOrientationDefault = ThfTagOrientation.Vertical;
/** @type {?} */
var thfTagTypeDefault = ThfTagType.Info;
/**
 * \@description
 *
 * Este componente apresenta um valor em um marcador colorido que pode conter ícone e *label*, as cores são definidas conforme o tipo
 * escolhido.
 * Seu uso é indicado para informações que necessitam de destaque em forma de marcação.
 */
var ThfTagBaseComponent = /** @class */ (function () {
    function ThfTagBaseComponent() {
        this._orientation = thfTagOrientationDefault;
        this._type = thfTagTypeDefault;
        this.thfTagOrientation = ThfTagOrientation;
    }
    Object.defineProperty(ThfTagBaseComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        /**
         * @optional
         *
         * @description
         *
         * Apresenta um ícone na tag conforme o tipo:
         * - `danger`: <span class="thf-icon thf-icon-close"></span>
         * - `info`: <span class="thf-icon thf-icon-info"></span>
         * - `success`: <span class="thf-icon thf-icon-ok"></span>
         * - `warning`: <span class="thf-icon thf-icon-warning"></span>
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Apresenta um ícone na tag conforme o tipo:
         * - `danger`: <span class="thf-icon thf-icon-close"></span>
         * - `info`: <span class="thf-icon thf-icon-info"></span>
         * - `success`: <span class="thf-icon thf-icon-ok"></span>
         * - `warning`: <span class="thf-icon thf-icon-warning"></span>
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._icon = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTagBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o layout de exibição.
         *
         * @default `vertical`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o layout de exibição.
         *
         * \@default `vertical`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(ThfTagOrientation).includes(value) ? value : thfTagOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTagBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o tipo e determina a cor do `thf-tag`.
         *
         * Valores válidos:
         *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
         *  - `warning`: cor amarela que representa aviso ou advertência.
         *  - `danger`: cor vermelha para erro ou aviso crítico.
         *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
         *
         * @default `info`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o tipo e determina a cor do `thf-tag`.
         *
         * Valores válidos:
         *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
         *  - `warning`: cor amarela que representa aviso ou advertência.
         *  - `danger`: cor vermelha para erro ou aviso crítico.
         *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
         *
         * \@default `info`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = ((/** @type {?} */ (Object))).values(ThfTagType).includes(value) ? value : thfTagTypeDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTagBaseComponent.prototype, "iconFromType", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.type) {
                case ThfTagType.Danger: return ThfTagIcon.Danger;
                case ThfTagType.Info: return ThfTagIcon.Info;
                case ThfTagType.Success: return ThfTagIcon.Success;
                case ThfTagType.Warning: return ThfTagIcon.Warning;
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfTagBaseComponent.propDecorators = {
        label: [{ type: core.Input, args: ['t-label',] }],
        icon: [{ type: core.Input, args: ['t-icon',] }],
        orientation: [{ type: core.Input, args: ['t-orientation',] }],
        type: [{ type: core.Input, args: ['t-type',] }],
        value: [{ type: core.Input, args: ['t-value',] }]
    };
    return ThfTagBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfTagBaseComponent
 *
 * \@example
 *
 * <example name="thf-tag-basic" title="Totvs Tag Basic">
 *  <file name="sample-thf-tag-basic/sample-thf-tag-basic.component.html"> </file>
 *  <file name="sample-thf-tag-basic/sample-thf-tag-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tag-labs" title="Totvs Tag Labs">
 *  <file name="sample-thf-tag-labs/sample-thf-tag-labs.component.html"> </file>
 *  <file name="sample-thf-tag-labs/sample-thf-tag-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tag-bank-account" title="Totvs Tag - Bank Account">
 *  <file name="sample-thf-tag-bank-account/sample-thf-tag-bank-account.component.html"> </file>
 *  <file name="sample-thf-tag-bank-account/sample-thf-tag-bank-account.component.ts"> </file>
 * </example>
 */
var ThfTagComponent = /** @class */ (function (_super) {
    __extends(ThfTagComponent, _super);
    function ThfTagComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfTagComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-tag', template: "<div class=\"thf-tag-container\" [class.thf-tag-container-horizontal]=\"orientation === thfTagOrientation.Horizontal\"> <div *ngIf=\"label\" class=\"thf-tag-title thf-text-nowrap\"> <span class=\"thf-tag-label\">{{ orientation === thfTagOrientation.Horizontal ? label + ':' : label }}</span> </div> <div class=\"thf-tag thf-tag-{{ type }}\"> <span *ngIf=\"icon\" class=\"thf-icon thf-icon-{{ iconFromType }}\"></span> <span class=\"thf-tag-value\">{{value}}</span> </div> </div> "
                },] },
    ];
    return ThfTagComponent;
}(ThfTagBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `thf-tag`.
 */
var ThfTagModule = /** @class */ (function () {
    function ThfTagModule() {
    }
    ThfTagModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfTagComponent
                    ],
                    exports: [
                        ThfTagComponent
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfTagModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfTagOrientation = ThfTagOrientation;
exports.ThfTagType = ThfTagType;
exports.ThfTagComponent = ThfTagComponent;
exports.ThfTagModule = ThfTagModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
