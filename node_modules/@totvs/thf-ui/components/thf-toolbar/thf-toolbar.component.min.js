var __extends=this&&this.__extends||function(){var t=function(o,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var n in o)o.hasOwnProperty(n)&&(t[n]=o[n])})(o,n)};return function(o,n){function i(){this.constructor=o}t(o,n),o.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();import{Component,ViewContainerRef}from"@angular/core";import{Title}from"@angular/platform-browser";import{ThfToolbarBaseComponent}from"./thf-toolbar-base.component";var ThfToolbarComponent=function(t){function o(o,n){var i=t.call(this)||this;return i.titleService=o,i.parentRef=n._view.component,i}return __extends(o,t),o.prototype.ngOnInit=function(){this.setTitle(this.title)},o.prototype.setTitle=function(t){this.titleService.setTitle(t)},o.decorators=[{type:Component,args:[{selector:"thf-toolbar",template:'<div class="thf-toolbar"> <div class="thf-toolbar-title"> {{title}} </div> <div class="thf-toolbar-group-icon"> <thf-toolbar-actions *ngIf="actions && actions.length" [t-actions]="actions" [t-actions-icon]="actionsIcon"> </thf-toolbar-actions> <thf-toolbar-notification *ngIf="showNotification && notificationActions" [t-notification-actions]="notificationActions" [t-notification-number]="notificationNumber"> </thf-toolbar-notification> <thf-toolbar-profile *ngIf="isShowProfile" [t-profile]="profile || { avatar: userSrc, title: userName }" [t-profile-actions]="profileActions || userActions"> </thf-toolbar-profile> </div> </div> '}]}],o.ctorParameters=function(){return[{type:Title},{type:ViewContainerRef}]},o}(ThfToolbarBaseComponent);export{ThfToolbarComponent};