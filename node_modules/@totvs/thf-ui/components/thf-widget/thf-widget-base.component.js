/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, EventEmitter } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
/**
 *
 * \@description
 *
 * O componente `thf-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
 * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
 *
 * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
 * para ajuda, como também possibilita ser utilizado com ou sem sombra.
 *
 * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
 * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
 * @abstract
 */
var ThfWidgetBaseComponent = /** @class */ (function () {
    function ThfWidgetBaseComponent() {
        this._noShadow = false;
        this._primary = false;
        this._size = 'thf-widget-xl';
        /**
         * Ação que será executada quando o usuário clicar sobre a área total do `thf-widget`.
         */
        this.click = new EventEmitter();
        /**
         * Função que será chamada na primeira ação.
         */
        this.primaryAction = new EventEmitter();
        /**
         * Função que será chamada na segunda ação.
         */
        this.secondaryAction = new EventEmitter();
        /**
         * Função que será chamada ao clicar no título.
         */
        this.titleAction = new EventEmitter();
    }
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "background", {
        get: /**
         * @return {?}
         */
        function () {
            return this._background;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplicação de imagem de fundo.
         * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,
         * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplicação de imagem de fundo.
         * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,
         * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._background = (value && typeof value === 'string') ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Altura do thf-widget.
         * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Altura do thf-widget.
         * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = parseInt((/** @type {?} */ (value)), 10);
            this.setHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "noShadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noShadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a sombra do thf-widget.
         *
         * @default `true`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a sombra do thf-widget.
         *
         * \@default `true`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noShadow = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "primary", {
        get: /**
         * @return {?}
         */
        function () {
            return this._primary;
        },
        /**
         * @optional
         *
         * @description
         *
         * Opção para que o `thf-widget` fique em destaque.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Opção para que o `thf-widget` fique em destaque.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._primary = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * @deprecated 5.x.x
         *
         * @optional
         *
         * @description
         *
         * Largura do `thf-widget`.
         *
         * > Utilize o [Grid System](/guides/grid-system) para difinir a largura.
         *
         * @default `xl`
         */
        set: /**
         * @deprecated 5.x.x
         *
         * \@optional
         *
         * \@description
         *
         * Largura do `thf-widget`.
         *
         * > Utilize o [Grid System](/guides/grid-system) para difinir a largura.
         *
         * \@default `xl`
         * @param {?} size
         * @return {?}
         */
        function (size) {
            /** @type {?} */
            var sizes = ['sm', 'md', 'lg', 'xl'];
            this._size = (sizes.indexOf(size) > -1) ? "thf-widget-" + size : 'thf-widget-xl';
        },
        enumerable: true,
        configurable: true
    });
    ThfWidgetBaseComponent.propDecorators = {
        background: [{ type: Input, args: ['t-background',] }],
        height: [{ type: Input, args: ['t-height',] }],
        help: [{ type: Input, args: ['t-help',] }],
        noShadow: [{ type: Input, args: ['t-no-shadow',] }],
        click: [{ type: Output, args: ['t-click',] }],
        primary: [{ type: Input, args: ['t-primary',] }],
        primaryAction: [{ type: Output, args: ['t-primary-action',] }],
        primaryLabel: [{ type: Input, args: ['t-primary-label',] }],
        secondaryAction: [{ type: Output, args: ['t-secondary-action',] }],
        secondaryLabel: [{ type: Input, args: ['t-secondary-label',] }],
        size: [{ type: Input, args: ['t-size',] }],
        title: [{ type: Input, args: ['t-title',] }],
        titleAction: [{ type: Output, args: ['t-title-action',] }]
    };
    return ThfWidgetBaseComponent;
}());
export { ThfWidgetBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._background;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._noShadow;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._primary;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._size;
    /**
     * Link de ajuda
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.help;
    /**
     * Ação que será executada quando o usuário clicar sobre a área total do `thf-widget`.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.click;
    /**
     * Função que será chamada na primeira ação.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.primaryAction;
    /**
     * Descrição da primeira ação.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.primaryLabel;
    /**
     * Função que será chamada na segunda ação.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.secondaryAction;
    /**
     * Descrição da segunda ação.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.secondaryLabel;
    /**
     * Título do thf-widget.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.title;
    /**
     * Função que será chamada ao clicar no título.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.titleAction;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    ThfWidgetBaseComponent.prototype.setHeight = function (height) { };
}
