var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Output, ViewChild, ViewContainerRef } from '@angular/core';
import { ThfWidgetBaseComponent } from './thf-widget-base.component';
/**
 * \@docsExtends ThfWidgetBaseComponent
 *
 * \@example
 *
 * <example name="thf-widget-basic" title="Totvs Widget Basic">
 *  <file name="sample-thf-widget-basic/sample-thf-widget-basic.component.html"> </file>
 *  <file name="sample-thf-widget-basic/sample-thf-widget-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-widget-labs" title="Totvs Widget Labs">
 *  <file name="sample-thf-widget-labs/sample-thf-widget-labs.component.html"> </file>
 *  <file name="sample-thf-widget-labs/sample-thf-widget-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-widget-finance-dashboard" title="Totvs Widget - Finance dashboard">
 *  <file name="sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.html"> </file>
 *  <file name="sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.ts"> </file>
 * </example>
 *
 * <example name="thf-widget-card" title="Totvs Widget - Card">
 *  <file name="sample-thf-widget-card/sample-thf-widget-card.component.html"> </file>
 *  <file name="sample-thf-widget-card/sample-thf-widget-card.component.ts"> </file>
 * </example>
 *
 */
var ThfWidgetComponent = /** @class */ (function (_super) {
    __extends(ThfWidgetComponent, _super);
    function ThfWidgetComponent(viewRef) {
        var _this = _super.call(this) || this;
        /**
         * Função chamada ao clicar no ícone de configuração
         */
        _this.setting = new EventEmitter();
        return _this;
    }
    Object.defineProperty(ThfWidgetComponent.prototype, "showTitleAction", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.titleAction.observers[0];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setHeight(this.height);
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.hasTitleHelpOrSetting = /**
     * @return {?}
     */
    function () {
        return !!this.title || !!this.help || !!this.setting.observers[0];
    };
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfWidgetComponent.prototype.isTypeof = /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    function (object, type) {
        return typeof object === type;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.click.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.openHelp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        window.open(this.help, '_blank');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.runPrimaryAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.primaryAction.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.runSecondaryAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.secondaryAction.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.runTitleAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.titleAction.emit();
    };
    /**
     * @param {?} height
     * @return {?}
     */
    ThfWidgetComponent.prototype.setHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height) {
            /** @type {?} */
            var heightBody = height - 32;
            // Calcula tamanho restante para o Body, subtraindo title e footer se existirem
            if (this.title) {
                heightBody = heightBody - 40;
            }
            if (this.primaryLabel) {
                heightBody = heightBody - 40;
            }
            // Seta o corpo do widget com o tamanho calculado
            this.elBody.nativeElement.style.height = heightBody + "px";
        }
        else {
            this.elBody.nativeElement.style.height = "auto";
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.settingOutput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.setting.emit();
    };
    ThfWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-widget', template: "<div [class.thf-clickable]=\"click.observers.length\" [class.thf-widget]=\"!primary\" [class.thf-widget-primary]=\"primary\" [class.thf-widget-no-shadow]=\"noShadow\" [ngClass]=\"size\" [style.background-image]=\"background ? 'url(' + background + ')' : undefined\" (click)=\"onClick($event)\"> <div *ngIf=\"hasTitleHelpOrSetting()\" class=\"thf-widget-header\"> <span *ngIf=\"showTitleAction; else noTitleAction\" class=\"thf-widget-title-action\" (click)=\"runTitleAction($event)\"> {{ title }} </span> <ng-template #noTitleAction>{{ title }}</ng-template> <div *ngIf=\"setting.observers[0] || help\" class=\"thf-pull-right\"> <span id=\"settingAction\" *ngIf=\"setting.observers[0]\" class=\"thf-clickable thf-icon thf-icon-settings\" (click)=\"settingOutput($event)\"> </span> <span id=\"helpLink\" *ngIf=\"help\" class=\"thf-clickable thf-icon thf-icon-help\" (click)=\"openHelp($event)\"> </span> </div> </div> <div class=\"thf-widget-body\" #elemBody> <ng-content></ng-content> </div> <div *ngIf=\"!isTypeof(primaryLabel, 'undefined')\" class=\"thf-widget-footer\"> <div class=\"thf-widget-xl\" *ngIf=\"isTypeof(secondaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secondaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secondaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='secondaryAct' (click)=\"runSecondaryAction($event)\">{{ secondaryLabel }}</a> </div> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfWidgetComponent.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    ThfWidgetComponent.propDecorators = {
        setting: [{ type: Output, args: ['t-setting',] }],
        elBody: [{ type: ViewChild, args: ['elemBody', { read: ElementRef },] }]
    };
    return ThfWidgetComponent;
}(ThfWidgetBaseComponent));
export { ThfWidgetComponent };
if (false) {
    /**
     * Função chamada ao clicar no ícone de configuração
     * @type {?}
     */
    ThfWidgetComponent.prototype.setting;
    /** @type {?} */
    ThfWidgetComponent.prototype.elBody;
}
