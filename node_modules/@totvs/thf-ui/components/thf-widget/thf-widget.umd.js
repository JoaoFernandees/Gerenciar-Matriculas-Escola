(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['thf-widget'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */

// Idioma padrão
/** @type {?} */

/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */

/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */

/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} date
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */

/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */

// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */

// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */

/**
 * @param {?} event
 * @return {?}
 */

/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */

/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} link
 * @return {?}
 */

/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @param {?} text
 * @return {?}
 */

/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * O componente `thf-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
 * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
 *
 * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
 * para ajuda, como também possibilita ser utilizado com ou sem sombra.
 *
 * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
 * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
 * @abstract
 */
var ThfWidgetBaseComponent = /** @class */ (function () {
    function ThfWidgetBaseComponent() {
        this._noShadow = false;
        this._primary = false;
        this._size = 'thf-widget-xl';
        /**
         * Ação que será executada quando o usuário clicar sobre a área total do `thf-widget`.
         */
        this.click = new core.EventEmitter();
        /**
         * Função que será chamada na primeira ação.
         */
        this.primaryAction = new core.EventEmitter();
        /**
         * Função que será chamada na segunda ação.
         */
        this.secondaryAction = new core.EventEmitter();
        /**
         * Função que será chamada ao clicar no título.
         */
        this.titleAction = new core.EventEmitter();
    }
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "background", {
        get: /**
         * @return {?}
         */
        function () {
            return this._background;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplicação de imagem de fundo.
         * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,
         * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplicação de imagem de fundo.
         * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,
         * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._background = (value && typeof value === 'string') ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Altura do thf-widget.
         * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Altura do thf-widget.
         * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = parseInt((/** @type {?} */ (value)), 10);
            this.setHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "noShadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noShadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a sombra do thf-widget.
         *
         * @default `true`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a sombra do thf-widget.
         *
         * \@default `true`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noShadow = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "primary", {
        get: /**
         * @return {?}
         */
        function () {
            return this._primary;
        },
        /**
         * @optional
         *
         * @description
         *
         * Opção para que o `thf-widget` fique em destaque.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Opção para que o `thf-widget` fique em destaque.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._primary = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * @deprecated 5.x.x
         *
         * @optional
         *
         * @description
         *
         * Largura do `thf-widget`.
         *
         * > Utilize o [Grid System](/guides/grid-system) para difinir a largura.
         *
         * @default `xl`
         */
        set: /**
         * @deprecated 5.x.x
         *
         * \@optional
         *
         * \@description
         *
         * Largura do `thf-widget`.
         *
         * > Utilize o [Grid System](/guides/grid-system) para difinir a largura.
         *
         * \@default `xl`
         * @param {?} size
         * @return {?}
         */
        function (size) {
            /** @type {?} */
            var sizes = ['sm', 'md', 'lg', 'xl'];
            this._size = (sizes.indexOf(size) > -1) ? "thf-widget-" + size : 'thf-widget-xl';
        },
        enumerable: true,
        configurable: true
    });
    ThfWidgetBaseComponent.propDecorators = {
        background: [{ type: core.Input, args: ['t-background',] }],
        height: [{ type: core.Input, args: ['t-height',] }],
        help: [{ type: core.Input, args: ['t-help',] }],
        noShadow: [{ type: core.Input, args: ['t-no-shadow',] }],
        click: [{ type: core.Output, args: ['t-click',] }],
        primary: [{ type: core.Input, args: ['t-primary',] }],
        primaryAction: [{ type: core.Output, args: ['t-primary-action',] }],
        primaryLabel: [{ type: core.Input, args: ['t-primary-label',] }],
        secondaryAction: [{ type: core.Output, args: ['t-secondary-action',] }],
        secondaryLabel: [{ type: core.Input, args: ['t-secondary-label',] }],
        size: [{ type: core.Input, args: ['t-size',] }],
        title: [{ type: core.Input, args: ['t-title',] }],
        titleAction: [{ type: core.Output, args: ['t-title-action',] }]
    };
    return ThfWidgetBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfWidgetBaseComponent
 *
 * \@example
 *
 * <example name="thf-widget-basic" title="Totvs Widget Basic">
 *  <file name="sample-thf-widget-basic/sample-thf-widget-basic.component.html"> </file>
 *  <file name="sample-thf-widget-basic/sample-thf-widget-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-widget-labs" title="Totvs Widget Labs">
 *  <file name="sample-thf-widget-labs/sample-thf-widget-labs.component.html"> </file>
 *  <file name="sample-thf-widget-labs/sample-thf-widget-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-widget-finance-dashboard" title="Totvs Widget - Finance dashboard">
 *  <file name="sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.html"> </file>
 *  <file name="sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.ts"> </file>
 * </example>
 *
 * <example name="thf-widget-card" title="Totvs Widget - Card">
 *  <file name="sample-thf-widget-card/sample-thf-widget-card.component.html"> </file>
 *  <file name="sample-thf-widget-card/sample-thf-widget-card.component.ts"> </file>
 * </example>
 *
 */
var ThfWidgetComponent = /** @class */ (function (_super) {
    __extends(ThfWidgetComponent, _super);
    function ThfWidgetComponent(viewRef) {
        var _this = _super.call(this) || this;
        /**
         * Função chamada ao clicar no ícone de configuração
         */
        _this.setting = new core.EventEmitter();
        return _this;
    }
    Object.defineProperty(ThfWidgetComponent.prototype, "showTitleAction", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.titleAction.observers[0];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setHeight(this.height);
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.hasTitleHelpOrSetting = /**
     * @return {?}
     */
    function () {
        return !!this.title || !!this.help || !!this.setting.observers[0];
    };
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfWidgetComponent.prototype.isTypeof = /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    function (object, type) {
        return typeof object === type;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.click.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.openHelp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        window.open(this.help, '_blank');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.runPrimaryAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.primaryAction.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.runSecondaryAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.secondaryAction.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.runTitleAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.titleAction.emit();
    };
    /**
     * @param {?} height
     * @return {?}
     */
    ThfWidgetComponent.prototype.setHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height) {
            /** @type {?} */
            var heightBody = height - 32;
            // Calcula tamanho restante para o Body, subtraindo title e footer se existirem
            if (this.title) {
                heightBody = heightBody - 40;
            }
            if (this.primaryLabel) {
                heightBody = heightBody - 40;
            }
            // Seta o corpo do widget com o tamanho calculado
            this.elBody.nativeElement.style.height = heightBody + "px";
        }
        else {
            this.elBody.nativeElement.style.height = "auto";
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.settingOutput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.setting.emit();
    };
    ThfWidgetComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-widget', template: "<div [class.thf-clickable]=\"click.observers.length\" [class.thf-widget]=\"!primary\" [class.thf-widget-primary]=\"primary\" [class.thf-widget-no-shadow]=\"noShadow\" [ngClass]=\"size\" [style.background-image]=\"background ? 'url(' + background + ')' : undefined\" (click)=\"onClick($event)\"> <div *ngIf=\"hasTitleHelpOrSetting()\" class=\"thf-widget-header\"> <span *ngIf=\"showTitleAction; else noTitleAction\" class=\"thf-widget-title-action\" (click)=\"runTitleAction($event)\"> {{ title }} </span> <ng-template #noTitleAction>{{ title }}</ng-template> <div *ngIf=\"setting.observers[0] || help\" class=\"thf-pull-right\"> <span id=\"settingAction\" *ngIf=\"setting.observers[0]\" class=\"thf-clickable thf-icon thf-icon-settings\" (click)=\"settingOutput($event)\"> </span> <span id=\"helpLink\" *ngIf=\"help\" class=\"thf-clickable thf-icon thf-icon-help\" (click)=\"openHelp($event)\"> </span> </div> </div> <div class=\"thf-widget-body\" #elemBody> <ng-content></ng-content> </div> <div *ngIf=\"!isTypeof(primaryLabel, 'undefined')\" class=\"thf-widget-footer\"> <div class=\"thf-widget-xl\" *ngIf=\"isTypeof(secondaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secondaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secondaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='secondaryAct' (click)=\"runSecondaryAction($event)\">{{ secondaryLabel }}</a> </div> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfWidgetComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef }
    ]; };
    ThfWidgetComponent.propDecorators = {
        setting: [{ type: core.Output, args: ['t-setting',] }],
        elBody: [{ type: core.ViewChild, args: ['elemBody', { read: core.ElementRef },] }]
    };
    return ThfWidgetComponent;
}(ThfWidgetBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-widget
 */
var ThfWidgetModule = /** @class */ (function () {
    function ThfWidgetModule() {
    }
    ThfWidgetModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        ThfWidgetComponent
                    ],
                    declarations: [ThfWidgetComponent]
                },] },
    ];
    return ThfWidgetModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfWidgetComponent = ThfWidgetComponent;
exports.ThfWidgetModule = ThfWidgetModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
