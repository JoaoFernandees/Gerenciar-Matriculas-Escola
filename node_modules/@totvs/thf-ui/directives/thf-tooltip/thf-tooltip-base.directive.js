/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { THF_CONTROL_POSITIONS } from './../../services/thf-control-position/thf-control-position.constants';
/** @type {?} */
var CONTENT_MAX_LENGTH = 140;
/** @type {?} */
var THF_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * \@description
 *
 * A diretiva thf-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**thf-popover**](https://thf.totvs.com.br/documentation/thf-popover?view=doc).
 */
var ThfTooltipBaseDirective = /** @class */ (function () {
    function ThfTooltipBaseDirective() {
        this._tooltip = '';
        this._tooltipPosition = 'bottom';
    }
    Object.defineProperty(ThfTooltipBaseDirective.prototype, "tooltip", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tooltip;
        },
        /**
         * @description
         *
         * Habilita e atribui um texto ao thf-tooltip, com limitação de 140 caracteres.
         */
        set: /**
         * \@description
         *
         * Habilita e atribui um texto ao thf-tooltip, com limitação de 140 caracteres.
         * @param {?} tooltip
         * @return {?}
         */
        function (tooltip) {
            if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
                this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
            }
            else {
                this._tooltip = tooltip;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTooltipBaseDirective.prototype, "tooltipPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tooltipPosition;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição que o thf-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-tooltip no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-tooltip no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-tooltip no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-tooltip abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-tooltip abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-tooltip abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-tooltip no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-tooltip no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-tooltip no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-tooltip acima do componente alvo.
         * - `top-right`: Posiciona o thf-tooltip acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-tooltip acima e à esquerda do componente alvo.
         *
         * @default bottom
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a posição que o thf-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-tooltip no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-tooltip no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-tooltip no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-tooltip abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-tooltip abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-tooltip abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-tooltip no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-tooltip no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-tooltip no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-tooltip acima do componente alvo.
         * - `top-right`: Posiciona o thf-tooltip acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-tooltip acima e à esquerda do componente alvo.
         *
         * \@default bottom
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this._tooltipPosition = THF_CONTROL_POSITIONS.includes(position) ? position : THF_TOOLTIP_POSITION_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    ThfTooltipBaseDirective.propDecorators = {
        tooltip: [{ type: Input, args: ['t-tooltip',] }],
        tooltipPosition: [{ type: Input, args: ['t-tooltip-position',] }]
    };
    return ThfTooltipBaseDirective;
}());
export { ThfTooltipBaseDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTooltipBaseDirective.prototype._tooltip;
    /**
     * @type {?}
     * @protected
     */
    ThfTooltipBaseDirective.prototype._tooltipPosition;
}
