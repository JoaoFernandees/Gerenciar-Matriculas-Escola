/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpResponse } from '@angular/common/http';
import { tap } from 'rxjs/operators';
/** @type {?} */
var NO_ERROR_HEADER_PARAM = 'X-Totvs-No-Error';
/**
 * \@description
 *
 * O serviço Totvs Http Interceptor realiza o tratamento de requisições HTTP conforme o padrão do
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444) para adaptá-lo
 * ao modelo do THF.
 *
 * Ao analisar o objeto totvs_messages retornado pela requisição, o serviço exibirá notificações com mensagens na tela.
 * Os retornos de erros com códigos 4xx e 5xx são tratados automaticamente, sem a necessidade de incluir o totvs_messages.
 *
 * Também existe a possibilidade de não apresentar a notificação quando houver algum erro com códigos 4xx e 5xx,
 * utilizando o parâmetro `X-Totvs-No-Error` que foi definido conforme o
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444) (em Cabeçalhos Customizados).
 * O parâmetro `X-Totvs-No-Error` deve ser informado no cabeçalho da requisição com o valor `'true'` para funcionar corretamente,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-No-Error': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * O `Content-Type` deve ser `application/json` e a estrutura de mensagem recebida pelo serviço é:
 *  - totvs_messages: lista de mensagens de erro ou informativo resultante do serviço.
 *    - type: success, warning, error, e information;
 *    - code: título ou código da mensagem;
 *    - detail: detalhamento ou texto da mensagem.
 *
 * Ao importar o módulo `ThfModule` na aplicação, o thf-http-interceptor é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class UserService {
 *
 *   constructor(private http: HttpClient) { }
 *
 *   getUsers() {
 *     return this.http.get('/api/users');
 *   }
 *
 *   ...
 *
 * }
 * ```
 *
 * @abstract
 */
var /**
 * \@description
 *
 * O serviço Totvs Http Interceptor realiza o tratamento de requisições HTTP conforme o padrão do
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444) para adaptá-lo
 * ao modelo do THF.
 *
 * Ao analisar o objeto totvs_messages retornado pela requisição, o serviço exibirá notificações com mensagens na tela.
 * Os retornos de erros com códigos 4xx e 5xx são tratados automaticamente, sem a necessidade de incluir o totvs_messages.
 *
 * Também existe a possibilidade de não apresentar a notificação quando houver algum erro com códigos 4xx e 5xx,
 * utilizando o parâmetro `X-Totvs-No-Error` que foi definido conforme o
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444) (em Cabeçalhos Customizados).
 * O parâmetro `X-Totvs-No-Error` deve ser informado no cabeçalho da requisição com o valor `'true'` para funcionar corretamente,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-No-Error': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * O `Content-Type` deve ser `application/json` e a estrutura de mensagem recebida pelo serviço é:
 *  - totvs_messages: lista de mensagens de erro ou informativo resultante do serviço.
 *    - type: success, warning, error, e information;
 *    - code: título ou código da mensagem;
 *    - detail: detalhamento ou texto da mensagem.
 *
 * Ao importar o módulo `ThfModule` na aplicação, o thf-http-interceptor é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class UserService {
 *
 *   constructor(private http: HttpClient) { }
 *
 *   getUsers() {
 *     return this.http.get('/api/users');
 *   }
 *
 *   ...
 *
 * }
 * ```
 *
 * @abstract
 */
ThfHttpInterceptorBaseService = /** @class */ (function () {
    function ThfHttpInterceptorBaseService(notification, dialog) {
        this.notification = notification;
        this.dialog = dialog;
        this.notificationTypes = ['success', 'warning', 'error', 'information'];
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /** @type {?} */
        var cloneRequest = request.clone();
        request = request.headers.has(NO_ERROR_HEADER_PARAM) ? this.cloneRequestWithoutNoErrorHeaderParam(request) : request;
        return next.handle(request).pipe(tap(function (response) {
            if (response instanceof HttpResponse) {
                _this.processResponse(response);
            }
        }, function (error) {
            _this.processErrorResponse(error, cloneRequest);
        }));
    };
    /**
     * @param {?} response
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.processResponse = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        var _this = this;
        if (response.body && response.body.totvs_messages) {
            /** @type {?} */
            var totvsMessages = response.body.totvs_messages;
            if (totvsMessages instanceof Array) {
                totvsMessages.forEach(function (totvsMessage) {
                    _this.showNotification(totvsMessage);
                });
            }
            else {
                this.showNotification(totvsMessages);
            }
        }
    };
    /**
     * @param {?} response
     * @param {?} request
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.processErrorResponse = /**
     * @param {?} response
     * @param {?} request
     * @return {?}
     */
    function (response, request) {
        /** @type {?} */
        var errorResponse = response.status !== 0
            ? response.error
            : { code: 0, message: 'Servidor não está respondendo.', detailedMessage: response.message };
        /** @type {?} */
        var hasNoErrorParam = this.hasNoErrorParam(request);
        // not show the notification when has NoError parameter on header of request.
        if (errorResponse && errorResponse.message && !hasNoErrorParam) {
            this.showErrorNotification(errorResponse);
        }
    };
    /**
     * @private
     * @param {?} request
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.cloneRequestWithoutNoErrorHeaderParam = /**
     * @private
     * @param {?} request
     * @return {?}
     */
    function (request) {
        return request && request.clone({ headers: request.headers.delete(NO_ERROR_HEADER_PARAM) });
    };
    /**
     * @private
     * @param {?} request
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.hasNoErrorParam = /**
     * @private
     * @param {?} request
     * @return {?}
     */
    function (request) {
        /** @type {?} */
        var noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);
        return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';
    };
    /**
     * @private
     * @param {?} totvsMessage
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.showNotification = /**
     * @private
     * @param {?} totvsMessage
     * @return {?}
     */
    function (totvsMessage) {
        if (this.notificationTypes.includes(totvsMessage.type)) {
            this.notification[totvsMessage.type]({ message: totvsMessage.detail });
        }
    };
    /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.showErrorNotification = /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    function (errorResponse) {
        /** @type {?} */
        var notificationAction = this.generateErrorNotificationAction(errorResponse);
        this.notification.error({
            message: errorResponse.message,
            actionLabel: notificationAction.label,
            action: notificationAction.action
        });
    };
    /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.generateErrorNotificationAction = /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    function (errorResponse) {
        /** @type {?} */
        var notificationAction;
        /** @type {?} */
        var notificationLabel;
        /** @type {?} */
        var notificationMessage = errorResponse.message.concat(" " + errorResponse.detailedMessage);
        if (errorResponse.details && errorResponse.details instanceof Array) {
            errorResponse.details.forEach(function (detailError) {
                notificationMessage += "\n" + detailError.message;
            });
        }
        if (errorResponse.helpUrl && !(errorResponse.detailedMessage || errorResponse.details)) {
            notificationLabel = 'Ajuda';
            notificationAction = this.generateUrlHelpFunction(errorResponse.helpUrl);
        }
        else if (errorResponse.detailedMessage || errorResponse.details) {
            notificationLabel = 'Detalhes';
            notificationAction = this.generateDialogDetailFunction(errorResponse, notificationMessage);
        }
        return { label: notificationLabel, action: notificationAction };
    };
    /**
     * @private
     * @param {?} helpUrl
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.generateUrlHelpFunction = /**
     * @private
     * @param {?} helpUrl
     * @return {?}
     */
    function (helpUrl) {
        return function () { window.open(helpUrl, '_blank'); };
    };
    /**
     * @private
     * @param {?} errorResponse
     * @param {?} notificationMessage
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.generateDialogDetailFunction = /**
     * @private
     * @param {?} errorResponse
     * @param {?} notificationMessage
     * @return {?}
     */
    function (errorResponse, notificationMessage) {
        var _this = this;
        return function () {
            _this.dialog.alert({
                title: errorResponse.code,
                message: notificationMessage,
                ok: errorResponse.helpUrl ? _this.generateUrlHelpFunction(errorResponse.helpUrl) : undefined
            });
        };
    };
    return ThfHttpInterceptorBaseService;
}());
/**
 * \@description
 *
 * O serviço Totvs Http Interceptor realiza o tratamento de requisições HTTP conforme o padrão do
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444) para adaptá-lo
 * ao modelo do THF.
 *
 * Ao analisar o objeto totvs_messages retornado pela requisição, o serviço exibirá notificações com mensagens na tela.
 * Os retornos de erros com códigos 4xx e 5xx são tratados automaticamente, sem a necessidade de incluir o totvs_messages.
 *
 * Também existe a possibilidade de não apresentar a notificação quando houver algum erro com códigos 4xx e 5xx,
 * utilizando o parâmetro `X-Totvs-No-Error` que foi definido conforme o
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444) (em Cabeçalhos Customizados).
 * O parâmetro `X-Totvs-No-Error` deve ser informado no cabeçalho da requisição com o valor `'true'` para funcionar corretamente,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-No-Error': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * O `Content-Type` deve ser `application/json` e a estrutura de mensagem recebida pelo serviço é:
 *  - totvs_messages: lista de mensagens de erro ou informativo resultante do serviço.
 *    - type: success, warning, error, e information;
 *    - code: título ou código da mensagem;
 *    - detail: detalhamento ou texto da mensagem.
 *
 * Ao importar o módulo `ThfModule` na aplicação, o thf-http-interceptor é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class UserService {
 *
 *   constructor(private http: HttpClient) { }
 *
 *   getUsers() {
 *     return this.http.get('/api/users');
 *   }
 *
 *   ...
 *
 * }
 * ```
 *
 * @abstract
 */
export { ThfHttpInterceptorBaseService };
if (false) {
    /** @type {?} */
    ThfHttpInterceptorBaseService.prototype.notificationTypes;
    /**
     * @type {?}
     * @private
     */
    ThfHttpInterceptorBaseService.prototype.notification;
    /**
     * @type {?}
     * @private
     */
    ThfHttpInterceptorBaseService.prototype.dialog;
}
