import{Injectable}from"@angular/core";import{HttpResponse}from"@angular/common/http";import{throwError}from"rxjs";import{catchError,tap}from"rxjs/operators";import{ThfComponentInjectorService}from"../../services/thf-component-injector/thf-component-injector.service";import{ThfLoadingOverlayComponent}from"../../components/thf-loading/thf-loading-overlay/thf-loading-overlay.component";import{ThfHttpRequesControltService}from"./thf-http-request-control-service";import*as i0 from"@angular/core";import*as i1 from"./thf-http-request-control-service";import*as i2 from"../../services/thf-component-injector/thf-component-injector.service";var noCountPendingRequests="X-Totvs-No-Count-Pending-Requests",screenLock="X-Totvs-Screen-Lock",ThfHttpRequestInterceptorService=function(){function e(e,t){this.controlHttpRequest=e,this.thfComponentInjector=t,this.loadingOverlayComponent=void 0,this.pendingRequests=0,this.overlayRequests=0}return e.prototype.intercept=function(e,t){var o=this,n=e.clone();return e=this.requestCloneWithoutHeaderParam([noCountPendingRequests,screenLock],e),this.setCountPendingRequests(!0,n),this.setCountOverlayRequests(!0,n),t.handle(e).pipe(tap(function(e){e instanceof HttpResponse&&(o.setCountPendingRequests(!1,n),o.setCountOverlayRequests(!1,n))}),catchError(function(e){return o.setCountPendingRequests(!1,n),o.setCountOverlayRequests(!1,n),throwError(e)}))},e.prototype.getCountPendingRequests=function(){return this.controlHttpRequest.getControlHttpRequest()},e.prototype.buildLoading=function(){this.loadingOverlayComponent||(this.loadingOverlayComponent=this.thfComponentInjector.createComponentInApplication(ThfLoadingOverlayComponent),this.loadingOverlayComponent.instance.screenLock=!0,this.loadingOverlayComponent.instance.changeDetector.detectChanges())},e.prototype.destroyLoading=function(){this.loadingOverlayComponent&&(this.thfComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent),this.loadingOverlayComponent=void 0)},e.prototype.requestCloneWithoutHeaderParam=function(e,t){var o=!1;return e.forEach(function(e){t.headers.has(e)&&(t.headers.delete(e),o=!0)}),o?t.clone({headers:t.headers}):t},e.prototype.setCountPendingRequests=function(e,t){var o=t.headers.has(noCountPendingRequests),n=t.headers.get(noCountPendingRequests);o&&"true"===n.toString().toLowerCase()||(this.pendingRequests+=e?1:-1,this.controlHttpRequest.send(this.pendingRequests))},e.prototype.setCountOverlayRequests=function(e,t){if(t.headers.has(screenLock)){if("false"===t.headers.get(screenLock).toString().toLowerCase())return;this.overlayRequests+=e?1:-1,this.overlayRequests>0?this.buildLoading():this.destroyLoading()}},e.decorators=[{type:Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:ThfHttpRequesControltService},{type:ThfComponentInjectorService}]},e.ngInjectableDef=i0.defineInjectable({factory:function(){return new e(i0.inject(i1.ThfHttpRequesControltService),i0.inject(i2.ThfComponentInjectorService))},token:e,providedIn:"root"}),e}();export{ThfHttpRequestInterceptorService};