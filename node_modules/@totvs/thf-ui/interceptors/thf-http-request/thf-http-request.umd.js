(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/operators'], factory) :
	(factory((global['thf-http-request'] = {}),global.core,global.http,global.rxjs,global.operators));
}(this, (function (exports,i0,http,rxjs,operators) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfComponentInjectorService = /** @class */ (function () {
    function ThfComponentInjectorService(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    // Cria um dinamicamente no ApplicationRef
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    ThfComponentInjectorService.prototype.createComponentInApplication = 
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElem = ((/** @type {?} */ (componentRef.hostView))).rootNodes[0];
        document.body.appendChild(domElem);
        return componentRef;
    };
    // Destrói o componente e remove do ApplicationRef
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ThfComponentInjectorService.prototype.destroyComponentInApplication = 
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    ThfComponentInjectorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ThfComponentInjectorService.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: i0.ApplicationRef },
        { type: i0.Injector }
    ]; };
    /** @nocollapse */ ThfComponentInjectorService.ngInjectableDef = i0.defineInjectable({ factory: function ThfComponentInjectorService_Factory() { return new ThfComponentInjectorService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.ApplicationRef), i0.inject(i0.INJECTOR)); }, token: ThfComponentInjectorService, providedIn: "root" });
    return ThfComponentInjectorService;
}());

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */

// Idioma padrão
/** @type {?} */

/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */

/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */

/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} date
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */

/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */

// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */

// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */

/**
 * @param {?} event
 * @return {?}
 */

/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */

/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} link
 * @return {?}
 */

/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @param {?} text
 * @return {?}
 */

/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
var ThfLoadingOverlayBaseComponent = /** @class */ (function () {
    function ThfLoadingOverlayBaseComponent() {
        this._screenLock = false;
        /**
         * \@optional
         *
         * \@description
         *
         * Texto a ser exibido no componente.
         *
         * \@default `Carregando`
         */
        this.text = 'Carregando';
    }
    Object.defineProperty(ThfLoadingOverlayBaseComponent.prototype, "screenLock", {
        get: /**
         * @return {?}
         */
        function () {
            return this._screenLock;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * \@default `false`
         * @param {?} screenLock
         * @return {?}
         */
        function (screenLock) {
            this._screenLock = convertToBoolean(screenLock);
        },
        enumerable: true,
        configurable: true
    });
    ThfLoadingOverlayBaseComponent.propDecorators = {
        screenLock: [{ type: i0.Input, args: ['t-screen-lock',] }],
        text: [{ type: i0.Input, args: ['t-text',] }]
    };
    return ThfLoadingOverlayBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@docsExtends ThfLoadingOverlayBaseComponent
 *
 * \@example
 *
 * <example name="thf-loading-overlay-basic" title="Totvs Loading Overlay Basic">
 *  <file name="sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.html"> </file>
 *  <file name="sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-loading-overlay-labs" title="Totvs Loading Overlay Labs">
 *  <file name="sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.html"> </file>
 *  <file name="sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-loading-overlay-connection-test" title="Totvs Loading Overlay - Connection Test">
 *  <file name="sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.html"> </file>
 *  <file name="sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.ts"> </file>
 * </example>
 */
var ThfLoadingOverlayComponent = /** @class */ (function (_super) {
    __extends(ThfLoadingOverlayComponent, _super);
    function ThfLoadingOverlayComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    ThfLoadingOverlayComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-loading-overlay', template: "<div [class.thf-overlay-absolute]=\"!screenLock\" [class.thf-overlay-fixed]=\"screenLock\"> <thf-loading class=\"thf-loading-overlay-content\" [t-text]=\"text\"></thf-loading> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfLoadingOverlayComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    return ThfLoadingOverlayComponent;
}(ThfLoadingOverlayBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * Serviço responsável por efetuar o controle de interação com o serviço de interceptor `ThfHttpRequestInterceptorService`
 * gerenciando o seu estado.
 */
var ThfHttpRequesControltService = /** @class */ (function () {
    function ThfHttpRequesControltService() {
        this.controlHttpRequest = new rxjs.Subject();
    }
    /**
     * @return {?}
     */
    ThfHttpRequesControltService.prototype.getControlHttpRequest = /**
     * @return {?}
     */
    function () {
        return this.controlHttpRequest.asObservable();
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    ThfHttpRequesControltService.prototype.send = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = 0; }
        this.controlHttpRequest.next(value);
    };
    ThfHttpRequesControltService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfHttpRequesControltService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var noCountPendingRequests = 'X-Totvs-No-Count-Pending-Requests';
/** @type {?} */
var screenLock = 'X-Totvs-Screen-Lock';
/**
 * \@description
 *
 * O serviço Totvs Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-Totvs-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `ThfHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-Totvs-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `ThfModule` na aplicação, o `thf-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-Totvs-No-Count-Pending-Requests': true, 'X-Totvs-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: ThfHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * \@example
 * <example name='thf-http-request-interceptor-labs' title='Totvs Http Request Interceptor Labs'>
 *  <file name='sample-thf-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-thf-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
var ThfHttpRequestInterceptorService = /** @class */ (function () {
    function ThfHttpRequestInterceptorService(controlHttpRequest, thfComponentInjector) {
        this.controlHttpRequest = controlHttpRequest;
        this.thfComponentInjector = thfComponentInjector;
        this.loadingOverlayComponent = undefined;
        this.pendingRequests = 0;
        this.overlayRequests = 0;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /** @type {?} */
        var requestClone = request.clone();
        request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
        this.setCountPendingRequests(true, requestClone);
        this.setCountOverlayRequests(true, requestClone);
        return next.handle(request).pipe(operators.tap(function (response) {
            if (response instanceof http.HttpResponse) {
                _this.setCountPendingRequests(false, requestClone);
                _this.setCountOverlayRequests(false, requestClone);
            }
        }), operators.catchError(function (error) {
            _this.setCountPendingRequests(false, requestClone);
            _this.setCountOverlayRequests(false, requestClone);
            return rxjs.throwError(error);
        }));
    };
    /**
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.getCountPendingRequests = /**
     * @return {?}
     */
    function () {
        return this.controlHttpRequest.getControlHttpRequest();
    };
    /**
     * @private
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.buildLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.loadingOverlayComponent) {
            this.loadingOverlayComponent = this.thfComponentInjector.createComponentInApplication(ThfLoadingOverlayComponent);
            this.loadingOverlayComponent.instance.screenLock = true;
            this.loadingOverlayComponent.instance.changeDetector.detectChanges();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.destroyLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.loadingOverlayComponent) {
            this.thfComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
            this.loadingOverlayComponent = undefined;
        }
    };
    /**
     * @private
     * @param {?} headersParams
     * @param {?} request
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.requestCloneWithoutHeaderParam = /**
     * @private
     * @param {?} headersParams
     * @param {?} request
     * @return {?}
     */
    function (headersParams, request) {
        /** @type {?} */
        var isRequestClone = false;
        headersParams.forEach(function (headerParam) {
            if (request.headers.has(headerParam)) {
                request.headers.delete(headerParam);
                isRequestClone = true;
            }
        });
        return isRequestClone ? request.clone({ headers: request.headers }) : request;
    };
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.setCountPendingRequests = /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    function (isIncrement, request) {
        /** @type {?} */
        var hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
        /** @type {?} */
        var headerParam = request.headers.get(noCountPendingRequests);
        if (hasCountPendingRequestHeaderParam && (headerParam.toString().toLowerCase() === 'true')) {
            return;
        }
        this.pendingRequests += isIncrement ? 1 : -1;
        this.controlHttpRequest.send(this.pendingRequests);
    };
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.setCountOverlayRequests = /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    function (isIncrement, request) {
        /** @type {?} */
        var hasOverlayRequestHeaderParam = request.headers.has(screenLock);
        if (hasOverlayRequestHeaderParam) {
            /** @type {?} */
            var headerParam = request.headers.get(screenLock);
            if (headerParam.toString().toLowerCase() === 'false') {
                return;
            }
            this.overlayRequests += isIncrement ? 1 : -1;
            this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
        }
    };
    ThfHttpRequestInterceptorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ThfHttpRequestInterceptorService.ctorParameters = function () { return [
        { type: ThfHttpRequesControltService },
        { type: ThfComponentInjectorService }
    ]; };
    /** @nocollapse */ ThfHttpRequestInterceptorService.ngInjectableDef = i0.defineInjectable({ factory: function ThfHttpRequestInterceptorService_Factory() { return new ThfHttpRequestInterceptorService(i0.inject(ThfHttpRequesControltService), i0.inject(ThfComponentInjectorService)); }, token: ThfHttpRequestInterceptorService, providedIn: "root" });
    return ThfHttpRequestInterceptorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Este componente tem o objetivo de mostrar visualmente aos usuários que a aplicação está processando
 * ou aguardando a resposta de alguma requisição.
 */
var ThfLoadingBaseComponent = /** @class */ (function () {
    function ThfLoadingBaseComponent() {
        /**
         * Texto a ser exibido no componente.
         */
        this.text = 'Carregando';
    }
    ThfLoadingBaseComponent.propDecorators = {
        text: [{ type: i0.Input, args: ['t-text',] }]
    };
    return ThfLoadingBaseComponent;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfLoadingBaseComponent
 */
var ThfLoadingComponent = /** @class */ (function (_super) {
    __extends$1(ThfLoadingComponent, _super);
    function ThfLoadingComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfLoadingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-loading', template: "<div class=\"thf-loading\"> <span class=\"thf-loading-icon\"></span> <span class=\"thf-loading-label thf-text-ellipsis\" *ngIf=\"text\">{{text}}</span> </div> "
                },] },
    ];
    return ThfLoadingComponent;
}(ThfLoadingBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfHttpRequestModule = /** @class */ (function () {
    function ThfHttpRequestModule() {
    }
    ThfHttpRequestModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        ThfHttpRequesControltService,
                        ThfHttpRequestInterceptorService,
                        ThfComponentInjectorService,
                        {
                            provide: http.HTTP_INTERCEPTORS,
                            useClass: ThfHttpRequestInterceptorService,
                            multi: true
                        }
                    ],
                    entryComponents: [ThfLoadingOverlayComponent, ThfLoadingComponent]
                },] },
    ];
    return ThfHttpRequestModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfHttpRequestInterceptorService = ThfHttpRequestInterceptorService;
exports.ThfHttpRequestModule = ThfHttpRequestModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
