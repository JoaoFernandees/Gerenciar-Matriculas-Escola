/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isTypeof } from '../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API da Totvs.
 */
var ThfTimePipe = /** @class */ (function () {
    function ThfTimePipe() {
    }
    /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    ThfTimePipe.prototype.transform = /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    function (time, format) {
        /** @type {?} */
        var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            /** @type {?} */
            var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            /** @type {?} */
            var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            /** @type {?} */
            var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    };
    /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    ThfTimePipe.prototype.addDotMiliseconds = /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    function (miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    };
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    ThfTimePipe.prototype.formatValue = /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    function (time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            /** @type {?} */
            var hour = time.substring(0, 2);
            /** @type {?} */
            var minutes = time.substring(3, 5);
            /** @type {?} */
            var seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace("." + formatMiliseconds, miliseconds);
            return format;
        }
        else {
            return time;
        }
    };
    /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    ThfTimePipe.prototype.getFormatMiliseconds = /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    function (amountOfF) {
        /** @type {?} */
        var formatMiliseconds = '';
        for (var i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    };
    ThfTimePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'thf_time'
                },] },
    ];
    return ThfTimePipe;
}());
export { ThfTimePipe };
