(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('uuid'), require('rxjs'), require('@angular/common/http')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'uuid', 'rxjs', '@angular/common/http'], factory) :
	(factory((global.services = {}),global.core,global.common,global.uuid,global.rxjs,global.http));
}(this, (function (exports,i0,common,uuid,rxjs,http) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfColorPaletteEnum = {
    /** #0c9abe */
    Color01: 'color-01',
    /** #2c85c8 */
    Color02: 'color-02',
    /** #2c43c8 */
    Color03: 'color-03',
    /** #5843c8 */
    Color04: 'color-04',
    /** #ab43c8 */
    Color05: 'color-05',
    /** #ab4391 */
    Color06: 'color-06',
    /** #c64840 */
    Color07: 'color-07',
    /** #ea9b3e */
    Color08: 'color-08',
    /** #abc249 */
    Color09: 'color-09',
    /** #56b96b */
    Color10: 'color-10',
    /** #00b28e */
    Color11: 'color-11',
    /** #06a6a5 */
    Color12: 'color-12',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfColorPaletteService = /** @class */ (function () {
    function ThfColorPaletteService() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ThfColorPaletteService.prototype.getColor = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return ((/** @type {?} */ (Object))).values(ThfColorPaletteEnum).includes(value.color) ?
            value.color : this.getColorFromType(value.type || value.color);
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    ThfColorPaletteService.prototype.getColorFromType = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        switch (type) {
            case 'danger':
                return ThfColorPaletteEnum.Color07;
            case 'success':
                return ThfColorPaletteEnum.Color11;
            case 'warning':
                return ThfColorPaletteEnum.Color08;
            default:
                return ThfColorPaletteEnum.Color01;
        }
    };
    ThfColorPaletteService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfColorPaletteService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço `thf-color-palette`.
 */
var ThfColorPaletteModule = /** @class */ (function () {
    function ThfColorPaletteModule() {
    }
    ThfColorPaletteModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        ThfColorPaletteService
                    ],
                    bootstrap: []
                },] },
    ];
    return ThfColorPaletteModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfComponentInjectorService = /** @class */ (function () {
    function ThfComponentInjectorService(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    // Cria um dinamicamente no ApplicationRef
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    ThfComponentInjectorService.prototype.createComponentInApplication = 
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElem = ((/** @type {?} */ (componentRef.hostView))).rootNodes[0];
        document.body.appendChild(domElem);
        return componentRef;
    };
    // Destrói o componente e remove do ApplicationRef
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ThfComponentInjectorService.prototype.destroyComponentInApplication = 
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    ThfComponentInjectorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ThfComponentInjectorService.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: i0.ApplicationRef },
        { type: i0.Injector }
    ]; };
    /** @nocollapse */ ThfComponentInjectorService.ngInjectableDef = i0.defineInjectable({ factory: function ThfComponentInjectorService_Factory() { return new ThfComponentInjectorService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.ApplicationRef), i0.inject(i0.INJECTOR)); }, token: ThfComponentInjectorService, providedIn: "root" });
    return ThfComponentInjectorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfComponentInjectorModule = /** @class */ (function () {
    function ThfComponentInjectorModule() {
    }
    ThfComponentInjectorModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [
                        ThfComponentInjectorService
                    ],
                    bootstrap: []
                },] },
    ];
    return ThfComponentInjectorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 * \@description
 *
 * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
 * seguintes posições:
 *
 * - `right`: Posiciona o elemento no lado direito do componente alvo.
 * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
 * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
 * - `bottom`: Posiciona o elemento abaixo do componente alvo.
 * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
 * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
 * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
 * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
 * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
 * - `top`: Posiciona o elemento acima do componente alvo.
 * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
 * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
 *
 * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
 * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
 * @type {?}
 */
var thfControlPositionSidesDefault = [
    'bottom', 'bottom-left', 'bottom-right',
    'left', 'left-top', 'left-bottom',
    'top', 'top-right', 'top-left',
    'right', 'right-bottom', 'right-top'
];
var ThfControlPositionService = /** @class */ (function () {
    function ThfControlPositionService() {
        this.differenceDiagonalToWidthArrow = 3;
        this.isSetElementWidth = false;
        // offset da seta em relação ao canto do componente
        this.offsetArrow = 12;
    }
    /**
     * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param position posição para exibição do elemento
     */
    /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} position posição para exibição do elemento
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustPosition = /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} position posição para exibição do elemento
     * @return {?}
     */
    function (position) {
        this.elementPosition(position);
        this.customPositions && this.customPositions.length ? this.adjustCustomPosition(position) : this.adjustDefaultPosition(position);
    };
    /**
     * @description Retorna a direção da seta, conforme a posição do elemento.
     */
    /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    ThfControlPositionService.prototype.getArrowDirection = /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    function () {
        return this.arrowDirection;
    };
    /**
     * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param element elemento que será exibido
     * @param elementOffset offSet do elemento
     * @param targetElement elemento de onde deve partir a exibição
     * @param customPositions posições que sobrescreve as posições padrões
     * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     */
    /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    ThfControlPositionService.prototype.setElements = /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    function (element, elementOffset, targetElement, customPositions, isSetElementWidth, isCornerAligned) {
        if (isSetElementWidth === void 0) { isSetElementWidth = false; }
        if (isCornerAligned === void 0) { isCornerAligned = false; }
        this.element = (element instanceof i0.ElementRef) ? element.nativeElement : element;
        this.targetElement = (targetElement instanceof i0.ElementRef) ? targetElement.nativeElement : targetElement;
        this.elementOffset = elementOffset;
        this.customPositions = customPositions;
        this.isSetElementWidth = isSetElementWidth;
        this.isCornerAligned = isCornerAligned;
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustCustomPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var positionLength = this.customPositions.length;
        /** @type {?} */
        var sidesCount = 0;
        while (sidesCount++ < positionLength) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions);
                this.elementPosition(position);
            }
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustDefaultPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var mainPositions = this.getMainPositions();
        /** @type {?} */
        var mainPositionLength = mainPositions.length;
        /** @type {?} */
        var mainSidesCount = 0;
        while (mainSidesCount++ < mainPositionLength) {
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            if (this.overflowMain(mainPosition)) {
                position = this.nextPosition(mainPosition, mainPositions);
                continue;
            }
            else if (this.overflowAllSides(position)) {
                this.verifySubPositions(position);
                // TODO: Não está indo para a proxima main position, o problema acontece somente quando utiliza as posições default
                return;
            }
            return;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.elementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return (position.indexOf('-') > -1) ? position.substring(0, position.indexOf('-')) : position;
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPositions = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultMainPositions = ['top', 'right', 'bottom', 'left'];
        return this.customPositions && this.customPositions.length ?
            this.getMainPositionsByCustomPositions(this.customPositions) : defaultMainPositions;
    };
    /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPositionsByCustomPositions = /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    function (customPositions) {
        /** @type {?} */
        var mainPositions = [];
        /** @type {?} */
        var customPositionsLength = customPositions.length;
        for (var i = 0; i < customPositionsLength; i++) {
            /** @type {?} */
            var position = customPositions[i];
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            if (!mainPositions.includes(mainPosition)) {
                mainPositions.push(mainPosition);
            }
        }
        return mainPositions;
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getOverflows = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        return {
            right: (sizesAndPositions.element.right > sizesAndPositions.window.innerWidth),
            top: (sizesAndPositions.element.top <= 0),
            left: (sizesAndPositions.element.left <= 0),
            bottom: (sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight)
        };
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getSizesAndPositions = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            window: {
                scrollY: window.scrollY,
                scrollX: window.scrollX,
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            },
            element: this.element.getBoundingClientRect(),
            target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
        };
    };
    /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    ThfControlPositionService.prototype.nextPosition = /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    function (position, positions) {
        if (positions === void 0) { positions = []; }
        /** @type {?} */
        var index = positions.indexOf(position);
        /** @type {?} */
        var nextIndex = index + 1;
        if (index > -1 && nextIndex < positions.length) {
            return positions[nextIndex];
        }
        else {
            return positions[0];
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.overflowAllSides = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top || overflows.right || overflows.left;
            case 'top-right': return overflows.top || overflows.right;
            case 'top-left': return overflows.top || overflows.left;
            case 'right': return overflows.right || overflows.top || overflows.bottom;
            case 'right-top': return overflows.right || overflows.top;
            case 'right-bottom': return overflows.right || overflows.bottom;
            case 'bottom': return overflows.bottom || overflows.right || overflows.left;
            case 'bottom-right': return overflows.bottom || overflows.right;
            case 'bottom-left': return overflows.bottom || overflows.left;
            case 'left': return overflows.left || overflows.top || overflows.bottom;
            case 'left-top': return overflows.left || overflows.top;
            case 'left-bottom': return overflows.left || overflows.bottom;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.overflowMain = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top;
            case 'right': return overflows.right;
            case 'bottom': return overflows.bottom;
            case 'left': return overflows.left;
        }
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top-left': return 'bottom-left';
            case 'top-right': return 'bottom-right';
            case 'bottom-right': return 'top-right';
            case 'bottom-left': return 'top-left';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'bottom-left':
                this.setAlignedBottomPositions(0, sizesAndPositions);
                break;
            case 'bottom-right':
                this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
            case 'top-left':
                this.setAlignedTopPositions(0, sizesAndPositions);
                break;
            case 'top-right':
                this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setAlignedArrowDirection(position);
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    ThfControlPositionService.prototype.setArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top': return 'bottom';
            case 'top-left': return 'bottom-right';
            case 'top-right': return 'bottom-left';
            case 'right': return 'left';
            case 'right-top': return 'left-bottom';
            case 'right-bottom': return 'left-top';
            case 'bottom': return 'top';
            case 'bottom-right': return 'top-left';
            case 'bottom-left': return 'top-right';
            case 'left': return 'right';
            case 'left-bottom': return 'right-top';
            case 'left-top': return 'right-bottom';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.setElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'top':
                this.setTopPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'top-left':
                this.setTopPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'top-right':
                this.setTopPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right':
                this.setRightPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'right-top':
                this.setRightPositions((sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right-bottom':
                this.setRightPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'bottom':
                this.setBottomPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'bottom-right':
                this.setBottomPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'bottom-left':
                this.setBottomPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'left':
                this.setLeftPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'left-bottom':
                this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'left-top':
                this.setLeftPositions((sizesAndPositions.element.height - this.offsetArrow), sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setArrowDirection(position);
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.setElementWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isSetElementWidth && this.targetElement) {
            this.element.style.width = this.targetElement.clientWidth + "px";
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setLeftPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setRightPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.verifySubPositions = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (position.indexOf('-') > -1) {
            position = position.substring(0, position.indexOf('-'));
            this.elementPosition(position);
        }
        /** @type {?} */
        var align = 0;
        while (align++ < 3) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions || thfControlPositionSidesDefault);
                this.elementPosition(position);
            }
            else {
                return null;
            }
        }
    };
    ThfControlPositionService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfControlPositionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço thf-control-position.
 */
var ThfControlPositionModule = /** @class */ (function () {
    function ThfControlPositionModule() {
    }
    ThfControlPositionModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [
                        ThfControlPositionService
                    ],
                    bootstrap: []
                },] },
    ];
    return ThfControlPositionModule;
}());

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */
var thfLocales = ['pt', 'en', 'es'];
// Idioma padrão
/** @type {?} */
var thfLocaleDefault = 'pt';
/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */
function browserLanguage() {
    /** @type {?} */
    var language = navigator.language.toLowerCase().substring(0, 2);
    if (!thfLocales.includes(language)) {
        return thfLocaleDefault;
    }
    return language;
}
/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */

/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} date
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */

/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */

// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */

// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */

/**
 * @param {?} event
 * @return {?}
 */

/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */

/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} link
 * @return {?}
 */

/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */
function sortValues(leftSide, rightSide, ascending) {
    if (ascending === void 0) { ascending = true; }
    if (ascending) {
        if (leftSide < rightSide) {
            return -1;
        }
        else if (leftSide > rightSide) {
            return 1;
        }
    }
    else if (ascending === false) {
        if (leftSide < rightSide) {
            return 1;
        }
        else if (leftSide > rightSide) {
            return -1;
        }
    }
    return 0;
}
/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @param {?} text
 * @return {?}
 */

/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.
 */
var ThfDateService = /** @class */ (function () {
    function ThfDateService() {
        this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])$');
        this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
    }
    /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param minDate Definir `true` caso seja `minDate`.
     * @param maxDate Definir `true` caso seja `maxDate`.
     */
    /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param {?} dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} minDate Definir `true` caso seja `minDate`.
     * @param {?} maxDate Definir `true` caso seja `maxDate`.
     * @return {?}
     */
    ThfDateService.prototype.convertIsoToDate = /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param {?} dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} minDate Definir `true` caso seja `minDate`.
     * @param {?} maxDate Definir `true` caso seja `maxDate`.
     * @return {?}
     */
    function (dateString, minDate, maxDate) {
        if (dateString) {
            var _a = this.getDateFromIso(dateString), year = _a.year, month = _a.month, day = _a.day;
            if (minDate) {
                /** @type {?} */
                var date = new Date(year, month - 1, day, 0, 0, 0);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else if (maxDate) {
                /** @type {?} */
                var date = new Date(year, month - 1, day, 23, 59, 59);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else {
                /** @type {?} */
                var miliseconds = Date.parse(dateString);
                /** @type {?} */
                var timezone = new Date().getTimezoneOffset() * 60000;
                return new Date(miliseconds + timezone);
            }
        }
    };
    /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param date Data no formato `Date`.
     */
    /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param {?} date Data no formato `Date`.
     * @return {?}
     */
    ThfDateService.prototype.convertDateToISO = /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param {?} date Data no formato `Date`.
     * @return {?}
     */
    function (date) {
        if (date) {
            /** @type {?} */
            var fullYear = date.getFullYear();
            /** @type {?} */
            var getMonth = date.getMonth() + 1;
            /** @type {?} */
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            /** @type {?} */
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            /** @type {?} */
            var year = this.formatYear(fullYear);
            return year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    };
    /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param year Ano a ser validado.
     */
    /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param {?} year Ano a ser validado.
     * @return {?}
     */
    ThfDateService.prototype.formatYear = /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param {?} year Ano a ser validado.
     * @return {?}
     */
    function (year) {
        if (year > 999) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return "0" + year;
        }
        if (year > 9 && year < 100) {
            return "00" + year;
        }
        if (year >= 0 && year < 10) {
            return "000" + year;
        }
    };
    /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param isoDate Ano em formato string.
     */
    /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param {?} isoDate Ano em formato string.
     * @return {?}
     */
    ThfDateService.prototype.getDateFromIso = /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param {?} isoDate Ano em formato string.
     * @return {?}
     */
    function (isoDate) {
        /** @type {?} */
        var day = parseInt(isoDate.substring(8, 10), 10);
        /** @type {?} */
        var month = parseInt(isoDate.substring(5, 7), 10);
        /** @type {?} */
        var year = parseInt(isoDate.substring(0, 4), 10);
        return { year: year, month: month, day: day };
    };
    /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     */
    /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param {?} date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     * @return {?}
     */
    ThfDateService.prototype.getDateForDateRange = /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param {?} date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     * @return {?}
     */
    function (date, isMinDate) {
        /** @type {?} */
        var lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];
        if (date instanceof Date) {
            var _a = this.splitDate(date), year = _a.year, month = _a.month, day = _a.day;
            /** @type {?} */
            var validDate = new (Date.bind.apply(Date, [void 0, year, month, day].concat(lastHour)))();
            this.setYearFrom0To100(validDate, year);
            return validDate;
        }
        else if (this.isValidIso(date)) {
            return this.convertIsoToDate(date, isMinDate, !isMinDate);
        }
    };
    /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param dateA primeira data
     * @param dateB segunda data
     */
    /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param {?=} dateA primeira data
     * @param {?=} dateB segunda data
     * @return {?}
     */
    ThfDateService.prototype.isDateRangeValid = /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param {?=} dateA primeira data
     * @param {?=} dateB segunda data
     * @return {?}
     */
    function (dateA, dateB) {
        if (dateA === void 0) { dateA = ''; }
        if (dateB === void 0) { dateB = ''; }
        /** @type {?} */
        var dateASplitted = dateA.split('-').map(function (item) { return parseInt(item, 10); });
        /** @type {?} */
        var dateBSplitted = dateB.split('-').map(function (item) { return parseInt(item, 10); });
        for (var index = 0; index <= dateASplitted.length; index++) {
            if (dateASplitted[index] > dateBSplitted[index]) {
                return true;
            }
            else if (dateASplitted[index] < dateBSplitted[index]) {
                return false;
            }
        }
        return true;
    };
    /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param stringDate Data.
     */
    /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param {?} stringDate Data.
     * @return {?}
     */
    ThfDateService.prototype.isValidIso = /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param {?} stringDate Data.
     * @return {?}
     */
    function (stringDate) {
        return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);
    };
    /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param date Data.
     * @param year .
     */
    /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param {?} date Data.
     * @param {?} year .
     * @return {?}
     */
    ThfDateService.prototype.setYearFrom0To100 = /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param {?} date Data.
     * @param {?} year .
     * @return {?}
     */
    function (date, year) {
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
    };
    /**
     * Método responsável por ordenar duas datas.
     *
     * @param leftSide Primeira data a ser comparada.
     * @param rightSide Segunda data a ser comparada.
     * @param ascending Determina se será em ordem crescente ou decrescente.
     */
    /**
     * Método responsável por ordenar duas datas.
     *
     * @param {?} leftSide Primeira data a ser comparada.
     * @param {?} rightSide Segunda data a ser comparada.
     * @param {?} ascending Determina se será em ordem crescente ou decrescente.
     * @return {?}
     */
    ThfDateService.prototype.sortDate = /**
     * Método responsável por ordenar duas datas.
     *
     * @param {?} leftSide Primeira data a ser comparada.
     * @param {?} rightSide Segunda data a ser comparada.
     * @param {?} ascending Determina se será em ordem crescente ou decrescente.
     * @return {?}
     */
    function (leftSide, rightSide, ascending) {
        return sortValues(this.validateDate(leftSide), this.validateDate(rightSide), ascending);
    };
    /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param date Valor da data.
     */
    /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param {?} date Valor da data.
     * @return {?}
     */
    ThfDateService.prototype.splitDate = /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param {?} date Valor da data.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var year = date.getFullYear();
        /** @type {?} */
        var month = date.getMonth();
        /** @type {?} */
        var day = date.getDate();
        return { year: year, month: month, day: day };
    };
    /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param date Data a ser validada.
     * @param minDate Data inicial.
     * @param maxDate Data final.
     */
    /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param {?} date Data a ser validada.
     * @param {?} minDate Data inicial.
     * @param {?} maxDate Data final.
     * @return {?}
     */
    ThfDateService.prototype.validateDateRange = /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param {?} date Data a ser validada.
     * @param {?} minDate Data inicial.
     * @param {?} maxDate Data final.
     * @return {?}
     */
    function (date, minDate, maxDate) {
        if (minDate && maxDate) {
            return (date >= minDate && date <= maxDate);
        }
        else if (minDate && !maxDate) {
            return (date >= minDate);
        }
        else if (!minDate && maxDate) {
            return (date <= maxDate);
        }
        else {
            return true;
        }
    };
    /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @param date Data que será validada.
     */
    /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @private
     * @param {?} date Data que será validada.
     * @return {?}
     */
    ThfDateService.prototype.validateDate = /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @private
     * @param {?} date Data que será validada.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var validDate = date instanceof Date ? this.convertDateToISO(date) : date;
        return this.isValidIso(validDate) ? validDate : undefined;
    };
    ThfDateService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfDateService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço `thf-date`.
 */
var ThfDateTimeModule = /** @class */ (function () {
    function ThfDateTimeModule() {
    }
    ThfDateTimeModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        ThfDateService
                    ],
                    bootstrap: []
                },] },
    ];
    return ThfDateTimeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
/** @type {?} */
var THF_BUTTON_TYPE_DEFAULT = 'default';
/**
 * \@description
 *
 * O `thf-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
 * ação irreversível (`danger`), como a exclusão de um registro.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre o tipo `danger`.
 */
var ThfButtonBaseComponent = /** @class */ (function () {
    function ThfButtonBaseComponent() {
        this._disabled = false;
        this._loading = false;
        this._small = false;
        this._type = 'default';
        /**
         * Ação que será executada quando o usuário clicar sobre o `thf-button`.
         */
        this.click = new i0.EventEmitter();
    }
    Object.defineProperty(ThfButtonBaseComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        /**
         * @optional
         *
         * @description
         *
         * Exibe um ícone de carregamento à esquerda do _label_ do botão.
         *
         * > Quando esta propriedade estiver habilitada, desabilitará o botão.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Exibe um ícone de carregamento à esquerda do _label_ do botão.
         *
         * > Quando esta propriedade estiver habilitada, desabilitará o botão.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Deixa o botão menor.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Deixa o botão menor.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o estilo do `thf-button`.
         *
         * Valore válidos:
         *  - `default`: estilo padrão do `thf-button`.
         *  - `primary`: deixa o `thf-button` com destaque, deve ser usado para ações primárias.
         *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
         *  - `link`: o `thf-button` recebe o estilo de um link.
         *
         * @default `default`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o estilo do `thf-button`.
         *
         * Valore válidos:
         *  - `default`: estilo padrão do `thf-button`.
         *  - `primary`: deixa o `thf-button` com destaque, deve ser usado para ações primárias.
         *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
         *  - `link`: o `thf-button` recebe o estilo de um link.
         *
         * \@default `default`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = THF_BUTTON_TYPES.includes(value) ? value : THF_BUTTON_TYPE_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o `thf-button` e não permite que o usuário interaja com o mesmo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o `thf-button` e não permite que o usuário interaja com o mesmo.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ThfButtonBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        loading: [{ type: i0.Input, args: ['t-loading',] }],
        icon: [{ type: i0.Input, args: ['t-icon',] }],
        small: [{ type: i0.Input, args: ['t-small',] }],
        type: [{ type: i0.Input, args: ['t-type',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        click: [{ type: i0.Output, args: ['t-click',] }]
    };
    return ThfButtonBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfButtonBaseComponent
 *
 * \@example
 *
 * <example name="thf-button-basic" title="Totvs Button Basic">
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.html"> </file>
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.ts"> </file>
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-button-labs" title="Totvs Button Labs">
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.html"> </file>
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.ts"> </file>
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.po.ts"> </file>
 * </example>
 */
var ThfButtonComponent = /** @class */ (function (_super) {
    __extends(ThfButtonComponent, _super);
    function ThfButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    ThfButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.click.emit(null);
    };
    ThfButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-button', template: "<button class=\"thf-button thf-text-ellipsis\" type=\"button\" [class.thf-button-danger]=\"type === 'danger'\" [class.thf-button-link]=\"type === 'link'\" [class.thf-button-primary]=\"type === 'primary'\" [class.thf-button-sm] = \"small\" [class.thf-clickable]=\"type === 'link'\" [disabled]=\"disabled || loading\" (click)=\"onClick()\"> <span *ngIf=\"loading\" class=\"thf-icon thf-button-loading-icon\"></span> <span *ngIf=\"icon\" class=\"thf-icon {{ icon }}\" aria-hidden=\"true\"></span> <span *ngIf=\"label\" class=\"thf-button-label\">{{ label }}</span> </button> "
                },] },
    ];
    return ThfButtonComponent;
}(ThfButtonBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-button.
 */
var ThfButtonModule = /** @class */ (function () {
    function ThfButtonModule() {
    }
    ThfButtonModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfButtonComponent
                    ],
                    exports: [
                        ThfButtonComponent
                    ]
                },] },
    ];
    return ThfButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-modal` é utilizado para incluir conteúdos rápidos e informativos.
 *
 * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
 *
 * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `thf-chart`,
 * `thf-table` e os demais componentes do THF.
 *
 * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
 * definir um estado de carregando e / ou desabilitado. Também é possível definir o botão com o tipo *danger*.
 *
 * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `t-hide-close` não estiver habilitada.
 */
var ThfModalBaseComponent = /** @class */ (function () {
    function ThfModalBaseComponent() {
        this._hideClose = false;
        this._size = 'md';
        /**
         * Define o fechamento da modal ao clicar fora da mesma.
         * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
         */
        this.clickOut = false;
        // Controla se a modal fica oculto ou visível, por padrão é oculto
        this.isHidden = true;
        // Event emmiter para quando a modal é fechada pelo 'X'.
        this.onXClosed = new i0.EventEmitter();
    }
    Object.defineProperty(ThfModalBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         */
        set: /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
            this._size = sizes.indexOf(value) > -1 ? value : 'md';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "setClickOut", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.clickOut = (value === '') ? false : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "hideClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideClose;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideClose = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Função para fechar a modal. */
    /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    ThfModalBaseComponent.prototype.close = /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    function (xClosed) {
        if (xClosed === void 0) { xClosed = false; }
        this.isHidden = true;
        if (xClosed) {
            this.onXClosed.emit(xClosed);
        }
    };
    /** Função para abrir a modal. */
    /**
     * Função para abrir a modal.
     * @return {?}
     */
    ThfModalBaseComponent.prototype.open = /**
     * Função para abrir a modal.
     * @return {?}
     */
    function () {
        this.validPrimaryAction();
        this.isHidden = false;
    };
    /**
     * @return {?}
     */
    ThfModalBaseComponent.prototype.validPrimaryAction = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.primaryAction) {
            this.primaryAction = {
                action: function () { return _this.close(); },
                label: 'Ok',
            };
        }
        if (!this.primaryAction['action']) {
            this.primaryAction['action'] = function () { return _this.close(); };
        }
        if (!this.primaryAction['label']) {
            this.primaryAction['label'] = 'Ok';
        }
    };
    ThfModalBaseComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['t-title',] }],
        primaryAction: [{ type: i0.Input, args: ['t-primary-action',] }],
        secondaryAction: [{ type: i0.Input, args: ['t-secondary-action',] }],
        size: [{ type: i0.Input, args: ['t-size',] }],
        setClickOut: [{ type: i0.Input, args: ['t-click-out',] }],
        hideClose: [{ type: i0.Input, args: ['t-hide-close',] }]
    };
    return ThfModalBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfModalService = /** @class */ (function () {
    function ThfModalService() {
    }
    ThfModalService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfModalService;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfModalBaseComponent
 *
 * \@example
 *
 * <example name="thf-modal-basic" title="Totvs Modal Basic">
 *  <file name="sample-thf-modal-basic/sample-thf-modal-basic.component.html"> </file>
 *  <file name="sample-thf-modal-basic/sample-thf-modal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-modal-labs" title="Totvs Modal Labs">
 *  <file name="sample-thf-modal-labs/sample-thf-modal-labs.component.html"> </file>
 *  <file name="sample-thf-modal-labs/sample-thf-modal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-modal-fruits-salad" title="Totvs Modal - Fruits Salad">
 *  <file name="sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.html"> </file>
 *  <file name="sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.ts"> </file>
 * </example>
 */
var ThfModalComponent = /** @class */ (function (_super) {
    __extends$1(ThfModalComponent, _super);
    function ThfModalComponent(thfModalService) {
        var _this = _super.call(this) || this;
        _this.thfModalService = thfModalService;
        _this.focusableElements = 'input, select, textarea, button:not([disabled]), a';
        _this.id = uuid.v4();
        return _this;
    }
    /**
     * @param {?=} xClosed
     * @return {?}
     */
    ThfModalComponent.prototype.close = /**
     * @param {?=} xClosed
     * @return {?}
     */
    function (xClosed) {
        if (xClosed === void 0) { xClosed = false; }
        this.thfModalService.modalActive = undefined;
        _super.prototype.close.call(this, xClosed);
        document.removeEventListener('focus', this.focusFunction, true);
        if (this.sourceElement) {
            this.sourceElement.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfModalComponent.prototype.closeModalOnEscapeKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.hideClose) {
            event.preventDefault();
            event.stopPropagation();
            this.close();
        }
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.getPrimaryActionButtonType = /**
     * @return {?}
     */
    function () {
        return this.primaryAction.danger ? 'danger' : 'primary';
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.getSecondaryActionButtonType = /**
     * @return {?}
     */
    function () {
        return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'danger' : 'default';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfModalComponent.prototype.onClickOut = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {
            this.close();
        }
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        this.sourceElement = document.activeElement;
        _super.prototype.open.call(this);
        this.handleFocus();
    };
    /**
     * @private
     * @return {?}
     */
    ThfModalComponent.prototype.handleFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.thfModalService.modalActive = this.id;
        setTimeout(function () {
            if (_this.modalContent) {
                _this.initFocus();
                document.addEventListener('focus', _this.focusFunction, true);
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfModalComponent.prototype.initFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.focusFunction = function (event) {
            _this.thfModalService.modalActive = _this.thfModalService.modalActive || _this.id;
            /** @type {?} */
            var modalElement = _this.modalContent.nativeElement;
            if (!modalElement.contains(event.target) && _this.thfModalService.modalActive === _this.id) {
                event.stopPropagation();
                _this.firstElement.focus();
            }
        };
        this.setFirstElement();
        if (this.hideClose) {
            this.firstElement.focus();
        }
        else {
            /** @type {?} */
            var firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] ||
                this.modalContent.nativeElement;
            firstFieldElement.focus();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfModalComponent.prototype.setFirstElement = /**
     * @private
     * @return {?}
     */
    function () {
        this.firstElement = this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;
    };
    ThfModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-modal', template: "<div *ngIf=\"!isHidden\" class=\"thf-modal\" tabindex=\"0\" (keydown.esc)=\"closeModalOnEscapeKey($event)\"> <div class=\"thf-modal-overlay\"> <div class=\"thf-modal-container thf-pb-2 thf-pt-2\" (click)=\"onClickOut($event)\"> <div class=\"thf-modal-vertical-align\"> <div #modalContent class=\"thf-modal-content thf-modal-{{ size }}\" tabindex=\"-1\"> <div class=\"thf-modal-header\"> <div class=\"thf-modal-title\"> <a *ngIf=\"!hideClose\" class=\"thf-modal-header-close-button\" tabindex=\"0\" (click)=\"close(true)\"> <span class=\"thf-icon thf-icon-close\"></span> </a> {{ title }} </div> </div> <div class=\"thf-modal-body\"> <ng-content></ng-content> </div> <div class=\"thf-modal-footer\"> <thf-button *ngIf=\"secondaryAction\" [t-disabled]=\"secondaryAction.disabled\" [t-label]=\"secondaryAction.label\" [t-loading]=\"secondaryAction.loading\" [t-type]=\"getSecondaryActionButtonType()\" (t-click)=\"secondaryAction.action()\"> </thf-button> <thf-button class=\"thf-button-modal-first-action\" [t-disabled]=\"primaryAction.disabled\" [t-label]=\"primaryAction.label\" [t-loading]=\"primaryAction.loading\" [t-type]=\"getPrimaryActionButtonType()\" (t-click)=\"primaryAction.action()\"> </thf-button> </div> </div> </div> </div> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfModalComponent.ctorParameters = function () { return [
        { type: ThfModalService }
    ]; };
    ThfModalComponent.propDecorators = {
        modalContent: [{ type: i0.ViewChild, args: ['modalContent', { read: i0.ElementRef },] }]
    };
    return ThfModalComponent;
}(ThfModalBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-modal
 */
var ThfModalModule = /** @class */ (function () {
    function ThfModalModule() {
    }
    ThfModalModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfButtonModule
                    ],
                    declarations: [
                        ThfModalComponent
                    ],
                    exports: [ThfModalComponent],
                    providers: [ThfModalService]
                },] },
    ];
    return ThfModalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfDialogType = {
    // Enum para alert
    Alert: 0,
    // Enum para confirm
    Confirm: 1,
};
ThfDialogType[ThfDialogType.Alert] = 'Alert';
ThfDialogType[ThfDialogType.Confirm] = 'Confirm';

var __assign$1 = (undefined && undefined.__assign) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfDialogAlertLiteralsDefault = {
    en: (/** @type {?} */ ({ ok: 'Ok' })),
    es: (/** @type {?} */ ({ ok: 'Ok' })),
    pt: (/** @type {?} */ ({ ok: 'Ok' }))
};
/** @type {?} */
var thfDialogConfirmLiteralsDefault = {
    en: (/** @type {?} */ ({ cancel: 'Cancel', confirm: 'Confirm' })),
    es: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
    pt: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' }))
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do thf-dialog.service
 */
var ThfDialogComponent = /** @class */ (function () {
    function ThfDialogComponent() {
        // Objeto primary do thfModal
        this.primaryAction = { label: 'ok', action: function () { } };
    }
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.closeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.closeSubscription = this.thfModal.onXClosed.subscribe(function (close) { return _this.destroy(); });
    };
    // Fecha o thfModal
    // Fecha o thfModal
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.close = 
    // Fecha o thfModal
    /**
     * @return {?}
     */
    function () {
        this.thfModal.close();
        this.destroy();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    // Insere os valores recebidos de this.open para o thfModal
    // Insere os valores recebidos de this.open para o thfModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    ThfDialogComponent.prototype.configDialog = 
    // Insere os valores recebidos de this.open para o thfModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                }
            };
        }
    };
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    ThfDialogComponent.prototype.open = 
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case ThfDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, ((/** @type {?} */ (dialogOptions))).confirm, this.literalsConfirm.cancel, ((/** @type {?} */ (dialogOptions))).cancel);
                break;
            }
            case ThfDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, ((/** @type {?} */ (dialogOptions))).ok);
                break;
            }
        }
        this.thfModal.open();
    };
    /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    ThfDialogComponent.prototype.setDialogLiterals = /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    function (dialogOptions, dialogType) {
        /** @type {?} */
        var alertLiterals = thfDialogAlertLiteralsDefault;
        /** @type {?} */
        var confirmLiterals = thfDialogConfirmLiteralsDefault;
        /** @type {?} */
        var literals = dialogOptions.literals;
        if (dialogType === ThfDialogType.Alert) {
            this.literalsAlert = __assign$1({}, alertLiterals[thfLocaleDefault], alertLiterals[browserLanguage()], literals);
        }
        else {
            this.literalsConfirm = __assign$1({}, confirmLiterals[thfLocaleDefault], confirmLiterals[browserLanguage()], literals);
        }
    };
    ThfDialogComponent.decorators = [
        { type: i0.Component, args: [{ template: "<thf-modal [t-title]=\"title\" [t-primary-action]=\"primaryAction\" [t-secondary-action]=\"secondaryAction\"> {{ message }} </thf-modal> "
                },] },
    ];
    ThfDialogComponent.propDecorators = {
        thfModal: [{ type: i0.ViewChild, args: [ThfModalComponent,] }]
    };
    return ThfDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O thf-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
 * necessidade do desenvolvedor.
 * @abstract
 */
var ThfDialogBaseService = /** @class */ (function () {
    function ThfDialogBaseService() {
    }
    /** Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento. */
    /**
     * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
     * @param {?} confirmOptions
     * @return {?}
     */
    ThfDialogBaseService.prototype.confirm = /**
     * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
     * @param {?} confirmOptions
     * @return {?}
     */
    function (confirmOptions) {
        this.openDialog(ThfDialogType.Confirm, confirmOptions);
    };
    /** Exibe um diálogo de alerta. */
    /**
     * Exibe um diálogo de alerta.
     * @param {?} alertOptions
     * @return {?}
     */
    ThfDialogBaseService.prototype.alert = /**
     * Exibe um diálogo de alerta.
     * @param {?} alertOptions
     * @return {?}
     */
    function (alertOptions) {
        this.openDialog(ThfDialogType.Alert, alertOptions);
    };
    return ThfDialogBaseService;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfDialogBaseService
 *
 * \@example
 *
 * <example name="thf-dialog-basic" title="Totvs Dialog Basic">
 *  <file name="sample-thf-dialog-basic/sample-thf-dialog-basic.component.html"> </file>
 *  <file name="sample-thf-dialog-basic/sample-thf-dialog-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dialog-labs" title="Totvs Dialog Labs">
 *  <file name="sample-thf-dialog-labs/sample-thf-dialog-labs.component.html"> </file>
 *  <file name="sample-thf-dialog-labs/sample-thf-dialog-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dialog-cancel-credit-card" title="Totvs Dialog - Cancel Credit Card">
 *  <file name="sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.html"> </file>
 *  <file name="sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.ts"> </file>
 * </example>
 */
var ThfDialogService = /** @class */ (function (_super) {
    __extends$2(ThfDialogService, _super);
    function ThfDialogService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    ThfDialogService.prototype.openDialog = /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    function (dialogType, dialogOptions) {
        /** @type {?} */
        var componentRef = this.thfComponentInjector.createComponentInApplication(ThfDialogComponent);
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.open(dialogOptions, dialogType, componentRef);
    };
    ThfDialogService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfDialogService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    return ThfDialogService;
}(ThfDialogBaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfDialogModule = /** @class */ (function () {
    function ThfDialogModule() {
    }
    ThfDialogModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ThfDialogComponent
                    ],
                    imports: [
                        ThfModalModule
                    ],
                    exports: [
                        ThfDialogComponent
                    ],
                    entryComponents: [
                        ThfDialogComponent
                    ],
                    providers: [
                        ThfDialogService
                    ]
                },] },
    ];
    return ThfDialogModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O pipe thf-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | thfI18n:[1,10] }}
 * {{ i18nPT.totalPages | thfI18n:10 }}
 * ```
 */
var ThfI18nBasePipe = /** @class */ (function () {
    function ThfI18nBasePipe() {
    }
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    ThfI18nBasePipe.prototype.transform = /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    function (value, args) {
        if (!value) {
            return '';
        }
        if (!(args instanceof Array)) {
            args = [args];
        }
        for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
            var arg = args_1[_i];
            value = value.replace(/(\{\w*\})+/, arg);
        }
        return value;
    };
    return ThfI18nBasePipe;
}());

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfI18nBasePipe
 *
 * \@example
 * <example name='thf-i18n-pipe-labs' title='Totvs i18n Pipe Labs' >
 *  <file name='sample-thf-i18n-pipe-labs.component.html'> </file>
 *  <file name='sample-thf-i18n-pipe-labs.component.ts'> </file>
 *  <file name='sample-thf-i18n-pipe.component.html'> </file>
 *  <file name='sample-thf-i18n-pipe.component.ts'> </file>
 * </example>
 */
var ThfI18nPipe = /** @class */ (function (_super) {
    __extends$3(ThfI18nPipe, _super);
    function ThfI18nPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfI18nPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'thfI18n'
                },] },
    ];
    return ThfI18nPipe;
}(ThfI18nBasePipe));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfToasterOrientation = {
    /** Orientção do componente fica no rodapé */
    Bottom: 0,
    /** Orientção do componente fica no topo */
    Top: 1,
};
ThfToasterOrientation[ThfToasterOrientation.Bottom] = 'Bottom';
ThfToasterOrientation[ThfToasterOrientation.Top] = 'Top';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente thf-toaster foi construído para exibir notificações para o usuário.
 * @abstract
 */
var ThfToasterBaseComponent = /** @class */ (function () {
    function ThfToasterBaseComponent() {
        /**
         * Orientação da notificação, a mesma pode ser exibida na parte superior ou inferior da página.
         */
        this.orientation = ThfToasterOrientation.Bottom;
    }
    return ThfToasterBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfToasterType = {
    /** Enum para informações do tipo "Erro" */
    Error: 0,
    /** Enum para informações do tipo "Informação" */
    Information: 1,
    /** Enum para informações do tipo "Sucesso" */
    Success: 2,
    /** Enum para informações do tipo "Atenção" */
    Warning: 3,
};
ThfToasterType[ThfToasterType.Error] = 'Error';
ThfToasterType[ThfToasterType.Information] = 'Information';
ThfToasterType[ThfToasterType.Success] = 'Success';
ThfToasterType[ThfToasterType.Warning] = 'Warning';

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfToasterBaseComponent
 */
var ThfToasterComponent = /** @class */ (function (_super) {
    __extends$4(ThfToasterComponent, _super);
    function ThfToasterComponent(changeDetector, elementeRef) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.elementeRef = elementeRef;
        /* Margem do Toaster referênte à sua orientação e posição*/
        _this.margin = 20;
        /* Observable para monitorar o Close to Toaster */
        _this.observableOnClose = new rxjs.Subject();
        /* Mostra ou oculta o Toaster */
        _this.showToaster = true;
        /* Posição do Toaster*/
        _this.toasterPosition = 'thf-toaster-bottom';
        return _this;
    }
    /* Muda a posição do Toaster na tela*/
    /* Muda a posição do Toaster na tela*/
    /**
     * @param {?} position
     * @return {?}
     */
    ThfToasterComponent.prototype.changePosition = /* Muda a posição do Toaster na tela*/
    /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.elementeRef.nativeElement.style.display = 'table';
        this.margin = 6 + (44 * (position)) + position * 6;
        if (this.orientation === ThfToasterOrientation.Top) {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
    };
    /* Fecha o componente Toaster */
    /* Fecha o componente Toaster */
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.close = /* Fecha o componente Toaster */
    /**
     * @return {?}
     */
    function () {
        this.showToaster = false;
        this.observableOnClose.next(true);
    };
    /* Configura o Toaster com os atributos passados para ele */
    /* Configura o Toaster com os atributos passados para ele */
    /**
     * @param {?} thfToaster
     * @return {?}
     */
    ThfToasterComponent.prototype.configToaster = /* Configura o Toaster com os atributos passados para ele */
    /**
     * @param {?} thfToaster
     * @return {?}
     */
    function (thfToaster) {
        this.type = thfToaster.type;
        this.message = thfToaster.message;
        this.orientation = thfToaster.orientation;
        this.position = thfToaster.position;
        this.action = thfToaster.action;
        this.actionLabel = (thfToaster.actionLabel) ? thfToaster.actionLabel : 'Fechar';
        this.componentRef = thfToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === ThfToasterOrientation.Top) {
            this.toasterPosition = 'thf-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case ThfToasterType.Error: {
                this.toasterType = 'thf-toaster-error';
                this.icon = 'thf-icon-close';
                break;
            }
            case ThfToasterType.Information: {
                this.toasterType = 'thf-toaster-info';
                this.icon = 'thf-icon-info';
                break;
            }
            case ThfToasterType.Success: {
                this.toasterType = 'thf-toaster-success';
                this.icon = 'thf-icon-ok';
                break;
            }
            case ThfToasterType.Warning: {
                this.toasterType = 'thf-toaster-warning';
                this.icon = 'thf-icon-warning';
                break;
            }
        }
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getShowToaster = /**
     * @return {?}
     */
    function () {
        return this.showToaster;
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getIcon = /**
     * @return {?}
     */
    function () {
        return this.icon;
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getToasterPosition = /**
     * @return {?}
     */
    function () {
        return this.toasterPosition;
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getToasterType = /**
     * @return {?}
     */
    function () {
        return this.toasterType;
    };
    /* Chama a função passada pelo atributo `action` */
    /* Chama a função passada pelo atributo `action` */
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.thfToasterAction = /* Chama a função passada pelo atributo `action` */
    /**
     * @return {?}
     */
    function () {
        this.action(this);
    };
    ThfToasterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-toaster', template: "<div #toaster *ngIf=\"getShowToaster()\" class=\"thf-toaster {{ getToasterType() }} {{ getToasterPosition() }} thf-clickable\" (click)=\"close()\"> <div class=\"thf-toaster-message\"> <span class=\"thf-icon {{ getIcon() }}\"></span> {{ message }} </div> <div *ngIf=\"action !== undefined\" (click)=\"thfToasterAction()\" class=\"thf-toaster-action\"> {{ actionLabel }} </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfToasterComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef }
    ]; };
    ThfToasterComponent.propDecorators = {
        toaster: [{ type: i0.ViewChild, args: ['toaster',] }]
    };
    return ThfToasterComponent;
}(ThfToasterBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfNotificationModule = /** @class */ (function () {
    function ThfNotificationModule() {
    }
    ThfNotificationModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ThfToasterComponent
                    ],
                    imports: [
                        common.CommonModule
                    ],
                    exports: [],
                    entryComponents: [
                        ThfToasterComponent
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfNotificationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfServicesModule = /** @class */ (function () {
    function ThfServicesModule() {
    }
    ThfServicesModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ThfI18nPipe
                    ],
                    imports: [
                        ThfColorPaletteModule,
                        ThfComponentInjectorModule,
                        ThfControlPositionModule,
                        ThfDateTimeModule,
                        ThfDialogModule,
                        ThfNotificationModule
                    ],
                    exports: [
                        ThfColorPaletteModule,
                        ThfComponentInjectorModule,
                        ThfControlPositionModule,
                        ThfDateTimeModule,
                        ThfDialogModule,
                        ThfI18nPipe,
                        ThfNotificationModule
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfServicesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDialogService
 *
 * \@description
 *
 * Interface para definição das literais usadas no serviço `thf-dialog` para o tipo alerta.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDialogService
 *
 * \@description
 *
 * Interface para definição das literais usadas no serviço `thf-dialog` para o tipo confirmação.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@usedBy ThfDialogService
 *
 * \@description
 *
 * Interface para o título e a mensagem do serviço thf-dialog.
 * @record
 */
/**
 * \@usedBy ThfDialogService
 *
 * \@docsExtends ThfDialogOptions
 *
 * \@description
 *
 * Interface com as propriedades da caixa de diálogo de alerta do serviço thf-dialog.
 * @record
 */

/**
 * \@usedBy ThfDialogService
 *
 * \@docsExtends ThfDialogOptions
 *
 * \@description
 *
 * Interface com as propriedades da caixa de diálogo de confirmação do serviço thf-dialog.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Interface para a configuração do módulo ThfI18nModule.
 *
 * \@usedBy ThfI18nModule
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Interface para o método `getLiterals()` do serviço ThfI18nService.
 *
 * \@usedBy ThfI18nService
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var I18N_CONFIG = new i0.InjectionToken('I18N_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O serviço thfI18nService possibilita adicionar múltiplos idiomas e contextos à aplicação.
 *
 * A primeira configuração para a utilização do serviço thfI18nService é a importação do módulo
 * ThfI18nModule no módulo principal da aplicação.
 *
 * Ao importar o módulo ThfI18nModule devem ser definidos os contextos e idiomas que a aplicação
 * irá suportar, além de alguns padrões como idioma e contexto.
 *
 * No arquivo do módulo principal da aplicação deve ser definido uma constante implementando a
 * interface ThfI18nConfig. Nesta constante é possivel definir todos os contextos suportados pela
 * aplicação.
 *
 * Para cada contexto é possível definir a origem das literais, que podem ser de um serviço REST ou
 * de um objeto.
 * Exemplo:
 *
 * > Arquivo general-pt.ts
 *
 * ```
 * export const generalPt = {
 *  add: 'Adicionar',
 *  remove: 'Remover',
 *  people: '{0} Pessoas,
 *  greeting: 'Prazer, {0} {1}'
 * }
 *
 * ```
 *
 * > Arquivo general-en.ts
 *
 * ```
 * export const generalEn = {
 *  add: 'Add',
 *  remove: 'Remove',
 *  people: '{0} People,
 *  greeting: 'Nice to meet you, {0} {1}'
 * }
 *
 * ```
 *
 * ```
 * import { ThfI18nConfig } from '\@totvs/thf-ui/services/thf-i18n';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: ThfI18nConfig = {
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt,
 *       'en-US': generalEn
 *     },
 *     crm: {
 *       url: 'http://10.0.0.1:3000/api/translations/crm'
 *     }
 *   },
 *   default: {}
 * }
 * ```
 *
 * Ao optar por utilizar um serviço, deverá ser definida a URL específica do contexto,
 * como nos exemplos abaixo:
 *  - http://10.0.0.1:3000/api/translations/crm
 *  - http://10.0.0.1:3000/api/translations/general
 *
 * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
 * - language: o idioma será sempre passado por parâmetro e é recomendado utilizar o padrão suportado
 * pelos navegadores (pt-br, en-us)
 * - literals: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
 * serviço deve retornar todas as literais do idioma.
 *
 * Exemplos de requisição:
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text
 *
 * > Sempre que o idioma solicitado não for encontrado, será buscado por **pt-br**.
 *
 *
 * Conforme citado anteriormente, além dos contextos, é possível definir os padrões do sistema na
 * configuração do módulo:
 *  - language (string): idioma que será buscado por padrão pelo serviço, caso não seja especificado
 * será usado o idioma do navegador do usuário.
 *  - context (string): contexto que será buscado por padrão pelo serviço, caso não seja especificado
 * será usado o primeiro contexto da lista de contextos.
 *  - cache (boolean): define se as literais buscadas no serviço deverão ser armanezadas no cache do
 * navegador, lembrando que cada navegador possui sua própria limitação de cache. Para contextos com
 * grande quantidade de literais, recomenda-se o uso de constantes ao invés de serviços, desta forma
 * não será usado o cache do navegador.
 *
 * Exemplo de padrões definidos:
 * ```
 * const i18nConfig: ThfI18nConfig = {
 *   contexts: {
 *     general: { }
 *   },
 *   default: {
 *    language: 'pt-BR',
 *    context: 'general',
 *    cache: true
 *   }
 * }
 * ```
 *
 * Depois de criada a constante de configuração, deve-se passá-la para a função "config", diretamente
 * na importação do módulo.
 * ```
 *  imports: [
 *    ...
 *    ThfModule,
 *    ThfI18nModule.config(i18nConfig)
 *  ]
 * ```
 *
 * Feito isso, está finalizada a configuração do módulo e a aplicação está apta à utilizar o serviço
 * ThfI18nService.
 *
 * Para utilizar o serviço, deve-se importá-lo em todos os componentes que necessitarem de literais:
 * ```
 *  import { ThfI18nService } from '\@totvs/thf-ui/services/thf-i18n';
 * ```
 *
 * Em seguinda, fazer a injeção de dependência no construtor do componente:
 * ```
 *  constructor(private thfI18nService: ThfI18nService) { }
 * ```
 *
 * E por fim, fazer a busca pelas literais, se inscrevendo no Observable pelo método `getLiterals()`.
 * Este método pode receber um objeto com três atributos como parâmetro:
 *  - context (string): Para definir o contexto a ser buscado.
 *  - language (string): Para escolher o idioma a ser buscado.
 *  - literals (Array&#60;string&#62;): Para escolher quais literais devem ser buscadas.
 *
 * Todos esses parâmetros são opcionais, ou seja, caso nenhum parâmetro seja passado, serão trazidas
 * todas as literais do contexto definido com padrão, no idioma definido como padrão.
 *
 * Exemplos de requisição:
 * ```
 * literals = {};
 * literalsEn = {};
 * literalsCrm = {};
 *
 * constructor(private thfI18nService: ThfI18nService) {
 *   thfI18nService.getLiterals()
 *     .subscribe((literals) => {
 *       this.literals = literals;
 *     });
 *
 *   thfI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
 *     .subscribe((literals) => {
 *       this.literalsCrm = literals;
 *     });
 *
 *   thfI18nService.getLiterals({language: 'en-us'})
 *     .subscribe((literals) => {
 *       this.literalsEn = literals;
 *     });
 * }
 * ```
 *
 * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
 * seguinte código:
 *
 * <pre ngNonBindable>
 * {{ literals?.add }}
 * {{ literals?.remove }}
 * </pre>
 *
 * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o pipe thfI18n.
 * É possível informar propriedades do componente como `name` e `nickname` ou
 * informar o valor diretamente com "" ou número, confome o exemplo abaixo:
 *
 * <pre ngNonBindable>
 * {{ literals?.people | thfI18n:[120] }}
 * {{ literals?.greeting | thfI18n:[name, nickname] }}
 * {{ literals?.greeting | thfI18n:["Brad", "Green"] }}
 * </pre>
 *
 * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
 *
 * ### Teste unitário
 *
 * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `ThfI18nService`:
 *
 * ```
 * import { async, TestBed } from '\@angular/core/testing';
 * import { HttpClientTestingModule } from '\@angular/common/http/testing';
 *
 * import { ThfI18nModule } from '\@totvs/thf-ui/services/thf-i18n';
 *
 * import { AppComponent } from './app.component';
 *
 * describe('AppComponent', () => {
 *   const anotherPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const generalPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const config = {
 *     default: {
 *       language: 'pt-BR',
 *       context: 'general',
 *       cache: false
 *     },
 *     contexts: {
 *       general: {
 *         'pt-br': generalPT
 *       },
 *       another: {
 *         'pt-br': anotherPT
 *       }
 *     }
 *   };
 *
 *   beforeEach(async(() => {
 *     TestBed.configureTestingModule({
 *       declarations: [
 *         AppComponent
 *       ],
 *       imports: [
 *         HttpClientTestingModule,
 *         ThfI18nModule.config(config)
 *       ]
 *     }).compileComponents();
 *   }));
 *
 *   it('should create the app', async(() => {
 *     const fixture = TestBed.createComponent(AppComponent);
 *     const app = fixture.debugElement.componentInstance;
 *
 *     expect(app).toBeTruthy();
 *   }));
 *
 * });
 * ```
 */
var ThfI18nBaseService = /** @class */ (function () {
    function ThfI18nBaseService(config, http$$1) {
        this.config = config;
        this.http = http$$1;
        this.varI18n = {};
        this.useCache = false;
        this.servicesContext = {};
        this.setConfig(config);
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    ThfI18nBaseService.prototype.setConfig = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        // Seta as configurações padrões definidas no importação do módulo
        if (config['default']) {
            if (config['default']['language']) {
                this.languageDefault = config['default']['language'].toLowerCase();
            }
            else {
                this.languageDefault = navigator.language.toLowerCase();
            }
            this.contextDefault = (config['default']['context']) ? config['default']['context'] : '';
            this.useCache = (config['default']['cache']) ? config['default']['cache'] : false;
        }
        // Carrega a lista dos contextos e as contantes informadas
        if (config['contexts']) {
            this.setVarI18n(config['contexts']);
            // Se nenhum contexto foi definido como padrão,
            // então define o primeiro contexto
            if (!this.contextDefault) {
                for (var context in config['contexts']) {
                    if (this.config['contexts'].hasOwnProperty(context)) {
                        this.contextDefault = context;
                        break;
                    }
                }
            }
        }
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiterals = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var language = (options['language']) ? options['language'].toLowerCase() : this.languageDefault.toLowerCase();
        /** @type {?} */
        var context = (options['context']) ? options['context'] : this.contextDefault;
        /** @type {?} */
        var literals = (options['literals']) ? options['literals'] : [];
        return new rxjs.Observable(function (observer) {
            if (_this.servicesContext[context]) {
                // Faz o processo de busca de um contexto que contém serviço
                _this.getLiteralsFromContextService(language, context, literals, observer);
            }
            else {
                // Faz o processo de busca de um contexto que utiliza constante
                _this.getLiteralsFromContextConstant(language, context, literals, observer);
            }
        });
    };
    // Processo de busca de um contexto que contém serviço.
    //
    // Quando está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Se não encontrar todas as literais, procura no local storage (Se o cache estiver definido
    //        como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se não encontrar todas as literais desejadas e o idioma não for Português,
    //        então refaz o processo trocando o idioma para pt-BR
    //
    // Quando não está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    // Processo de busca de um contexto que contém serviço.
    //
    // Quando está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Se não encontrar todas as literais, procura no local storage (Se o cache estiver definido
    //        como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se não encontrar todas as literais desejadas e o idioma não for Português,
    //        então refaz o processo trocando o idioma para pt-BR
    //
    // Quando não está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiteralsFromContextService = 
    // Processo de busca de um contexto que contém serviço.
    //
    // Quando está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Se não encontrar todas as literais, procura no local storage (Se o cache estiver definido
    //        como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se não encontrar todas as literais desejadas e o idioma não for Português,
    //        então refaz o processo trocando o idioma para pt-BR
    //
    // Quando não está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    function (language, context, literals, observer, translations, languageAlternative) {
        if (translations === void 0) { translations = {}; }
        if (languageAlternative === void 0) { languageAlternative = null; }
        // Idioma usado para tentar buscar as literais faltantes
        /** @type {?} */
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // Se foi pesquisado por literais
        if (literals.length > 0) {
            // Se não encontrou todas as literais pesquisadas no idioma
            if (literals.length > this.countObject(translations)) {
                this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
            }
        }
        else {
            this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
        }
    };
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiteralsLocalStorageAndCache = 
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    function (language, context, literals, observer, translations, languageAlternative) {
        var _this = this;
        if (languageAlternative === void 0) { languageAlternative = null; }
        /** @type {?} */
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        /** @type {?} */
        var translationTemp;
        // Verifica se usa cache
        if (this.useCache) {
            translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
            if (this.countObject(translationTemp) > 0) {
                this.updateVarI18n(language, context, translationTemp);
                translations = this.mergeObject(translations, translationTemp);
                observer.next(translations);
            }
        }
        // Busca do Serviço
        this.getHttpService(this.servicesContext[context], languageSearch, literals)
            .subscribe(function (response) {
            if (response) {
                _this.updateLocalStorage(language, context, response);
                _this.updateVarI18n(language, context, response);
                translationTemp = _this.searchInVarI18n(language, context, literals);
                translations = _this.mergeObject(translations, translationTemp);
                observer.next(translations);
            }
            // Se não encontrou todas as literais pesquisadas no idioma
            // Então refaz o processo procurando em português
            if (literals.length > _this.countObject(translations)) {
                if (languageAlternative === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = _this.completeFaultLiterals(language, context, literals, translations);
                    _this.updateLocalStorage(language, context, translations);
                    _this.updateVarI18n(language, context, translations);
                    observer.next(translations);
                }
                else {
                    _this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                }
            }
        });
    };
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiteralsFromContextConstant = 
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @return {?}
     */
    function (language, context, literals, observer, translations) {
        if (translations === void 0) { translations = {}; }
        translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // Se foi pesquisado por literais
        if (literals.length > 0) {
            // Se não encontrou todas as literais pesquisadas no idioma, procura em português
            if (literals.length > this.countObject(translations)) {
                if (language === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = this.completeFaultLiterals(language, context, literals, translations);
                    observer.next(translations);
                }
                else {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
            }
        }
        else {
            // Se não encontrar nenhuma literal, procura em português
            if (this.countObject(translations) === 0 && language !== 'pt-br') {
                this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
            }
            // caso não informar literais e não houver tradução
            observer.next(translations);
            observer.complete();
        }
    };
    // Busca pelas literais no local storage
    // Busca pelas literais no local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    ThfI18nBaseService.prototype.searchInLocalStorage = 
    // Busca pelas literais no local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    function (language, context, literals) {
        /** @type {?} */
        var translations = {};
        if (literals.length > 0) {
            for (var i = 0; i < literals.length; i++) {
                /** @type {?} */
                var literal = literals[i];
                /** @type {?} */
                var translation = localStorage.getItem(language + '-' + context + '-' + literal);
                if (translation) {
                    translations[literal] = translation;
                }
            }
        }
        return translations;
    };
    // Busca pelas literais na variável do serviço
    // Busca pelas literais na variável do serviço
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    ThfI18nBaseService.prototype.searchInVarI18n = 
    // Busca pelas literais na variável do serviço
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    function (language, context, literals) {
        /** @type {?} */
        var translations = {};
        if (this.varI18n[language] && this.varI18n[language][context]) {
            /** @type {?} */
            var content = this.varI18n[language][context];
            if (literals.length > 0) {
                // Busca as literais desejadas
                for (var i = 0; i < literals.length; i++) {
                    /** @type {?} */
                    var literal = literals[i];
                    if (content.hasOwnProperty(literal)) {
                        translations[literal] = content[literal];
                    }
                }
            }
            else {
                // Atribui todas as literais
                translations = content;
            }
        }
        return translations;
    };
    // Atualiza o local storage
    // Atualiza o local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    ThfI18nBaseService.prototype.updateLocalStorage = 
    // Atualiza o local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    function (language, context, data) {
        if (this.useCache) {
            for (var literal in data) {
                if (data.hasOwnProperty(literal)) {
                    localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
                }
            }
        }
    };
    // Atualiza a variável local com as literais com os objetos passados na configuração
    // Atualiza a variável local com as literais com os objetos passados na configuração
    /**
     * @private
     * @param {?} contexts
     * @return {?}
     */
    ThfI18nBaseService.prototype.setVarI18n = 
    // Atualiza a variável local com as literais com os objetos passados na configuração
    /**
     * @private
     * @param {?} contexts
     * @return {?}
     */
    function (contexts) {
        // Percorre os contextos
        for (var context in contexts) {
            if (contexts.hasOwnProperty(context)) {
                /** @type {?} */
                var contextContent = contexts[context];
                // Percorre os idiomas dentro do contexto
                for (var language in contextContent) {
                    if (contextContent.hasOwnProperty(language)) {
                        /** @type {?} */
                        var languageContent = contextContent[language];
                        if (language === 'url') {
                            this.servicesContext[context] = languageContent;
                        }
                        else {
                            this.updateVarI18n(language, context, languageContent);
                        }
                    }
                }
            }
        }
    };
    // Atualiza a variável local com as literais idioma e contexto
    // Atualiza a variável local com as literais idioma e contexto
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    ThfI18nBaseService.prototype.updateVarI18n = 
    // Atualiza a variável local com as literais idioma e contexto
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    function (language, context, data) {
        var _a;
        language = language.toLowerCase();
        if (!this.varI18n[language]) {
            this.varI18n[language] = (_a = {}, _a[context] = {}, _a);
        }
        if (!this.varI18n[language][context]) {
            this.varI18n[language][context] = {};
        }
        // Cria ou atualiza o contexto dentro do storage
        this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
    };
    /**
     * @private
     * @param {?} url
     * @param {?} language
     * @param {?} literals
     * @return {?}
     */
    ThfI18nBaseService.prototype.getHttpService = /**
     * @private
     * @param {?} url
     * @param {?} language
     * @param {?} literals
     * @return {?}
     */
    function (url, language, literals) {
        /** @type {?} */
        var param = '?language=' + language;
        if (literals.length > 0) {
            param += '&literals=' + literals.join();
        }
        // Remove a barra final do endereço
        url = (url.lastIndexOf('/') === url.length - 1) ? url.substr(0, url.length - 1) : url;
        return this.http.get(url + param);
    };
    // Completa com o nome da literais, as que não foram encontradas
    // Completa com o nome da literais, as que não foram encontradas
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} translations
     * @return {?}
     */
    ThfI18nBaseService.prototype.completeFaultLiterals = 
    // Completa com o nome da literais, as que não foram encontradas
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} translations
     * @return {?}
     */
    function (language, context, literals, translations) {
        for (var i = 0; i < literals.length; i++) {
            /** @type {?} */
            var literal = literals[i];
            if (!translations[literal]) {
                translations[literal] = literal;
            }
        }
        return translations;
    };
    // Conta os atributos do objeto
    // Conta os atributos do objeto
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    ThfI18nBaseService.prototype.countObject = 
    // Conta os atributos do objeto
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return Object.keys(obj).length;
    };
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    /**
     * @private
     * @param {?} objPermanent
     * @param {?} obj
     * @return {?}
     */
    ThfI18nBaseService.prototype.mergeObject = 
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    /**
     * @private
     * @param {?} objPermanent
     * @param {?} obj
     * @return {?}
     */
    function (objPermanent, obj) {
        for (var literal in objPermanent) {
            if (objPermanent.hasOwnProperty(literal)) {
                obj[literal] = objPermanent[literal];
            }
        }
        return obj;
    };
    /** @nocollapse */
    ThfI18nBaseService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [I18N_CONFIG,] }] },
        { type: http.HttpClient, decorators: [{ type: i0.Inject, args: [http.HttpClient,] }] }
    ]; };
    return ThfI18nBaseService;
}());

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfI18nBaseService
 */
var ThfI18nService = /** @class */ (function (_super) {
    __extends$5(ThfI18nService, _super);
    function ThfI18nService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfI18nService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfI18nService;
}(ThfI18nBaseService));
// Função usada para retornar instância para o módulo thf-i18n.module
/**
 * @param {?} config
 * @param {?} http
 * @return {?}
 */
function returnThfI18nService(config, http$$1) {
    return new ThfI18nService(config, http$$1);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo para controle de idiomas com THF.
 *
 * Para utilização do serviço de idiomas **thfI18nService**, deve-se importar este módulo mesmo já tendo importado
 * o módulo ThfModule.
 * Na importação deve ser invocado o método **config** informando um objeto para configuração.
 *
 * Exemplo de configuração:
 * ```
 * import { ThfI18nConfig } from '\@totvs/thf-ui/services/thf-i18n';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: ThfI18nConfig = {
 *   default: {
 *     language: 'pt-BR',
 *     context: 'general',
 *     cache: true
 *   },
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt,
 *       'en-US': generalEn
 *     },
 *     hcm: {
 *       url: 'http://10.1.1.1/api/translations/hcm/'
 *     }
 *   }
 * };
 *
 * \@NgModule({
 *   declarations: [],
 *   imports: [
 *     ThfModule,
 *     ThfI18nModule.config(i18nConfig)
 *   ],
 *   bootstrap: [AppComponent]
 * })
 * ```
 */
var ThfI18nModule = /** @class */ (function () {
    function ThfI18nModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    ThfI18nModule.config = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: ThfI18nModule,
            providers: [
                {
                    provide: I18N_CONFIG,
                    useValue: config
                },
                {
                    provide: ThfI18nService,
                    useFactory: returnThfI18nService,
                    deps: [I18N_CONFIG, http.HttpClient]
                }
            ]
        };
    };
    ThfI18nModule.decorators = [
        { type: i0.NgModule, args: [{},] },
    ];
    return ThfI18nModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfNotificationService
 *
 * \@description
 *
 * Interface para uso do serviço thf-notification.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto "ThfNotification" que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos, após este tempo a mesma é removida automaticamente.
 * @abstract
 */
var ThfNotificationBaseService = /** @class */ (function () {
    function ThfNotificationBaseService() {
        // Array responsável por guardar a instância de thf-toaster's superiores.
        this.stackTop = [];
        // Array responsável por guardar a instância de thf-toaster's inferiores.
        this.stackBottom = [];
        // Duração do toaster ativo.
        this.durationToaster = 10000;
    }
    /**
     * Emite uma notificação de sucesso.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     */
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.success = /**
     * Emite uma notificação de sucesso.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Success));
    };
    /**
     * Emite uma notificação de atenção.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    /**
     * Emite uma notificação de atenção.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.warning = /**
     * Emite uma notificação de atenção.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Warning));
    };
    /**
     * Emite uma notificação de erro.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    /**
     * Emite uma notificação de erro.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.error = /**
     * Emite uma notificação de erro.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Error));
    };
    /**
     * Emite uma notificação de informação.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    /**
     * Emite uma notificação de informação.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.information = /**
     * Emite uma notificação de informação.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Information));
    };
    /**
     * @docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @param notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     */
    /**
     * \@docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @private
     * @param {?} notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     * @param {?} type
     * @return {?}
     */
    ThfNotificationBaseService.prototype.buildToaster = /**
     * \@docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @private
     * @param {?} notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     * @param {?} type
     * @return {?}
     */
    function (notification, type) {
        var _this = this;
        /** @type {?} */
        var index = 0;
        /** @type {?} */
        var orientation;
        if (((/** @type {?} */ (notification))).orientation === undefined ||
            ((/** @type {?} */ (notification))).orientation === ThfToasterOrientation.Bottom) {
            index = this.stackBottom.length;
            orientation = ThfToasterOrientation.Bottom;
        }
        else {
            index = this.stackTop.length;
            orientation = ThfToasterOrientation.Top;
        }
        /** @type {?} */
        var toaster = {
            componentRef: undefined,
            message: ((/** @type {?} */ (notification))).message || (/** @type {?} */ (notification)),
            type: type,
            orientation: orientation,
            action: ((/** @type {?} */ (notification))).action,
            actionLabel: ((/** @type {?} */ (notification))).actionLabel,
            position: index
        };
        if (((/** @type {?} */ (notification))).action) {
            toaster.action = function (param) {
                ((/** @type {?} */ (notification))).action();
                _this.destroyToaster(param.componentRef);
            };
        }
        return toaster;
    };
    return ThfNotificationBaseService;
}());

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfNotificationBaseService
 *
 * \@example
 *
 * <example name="thf-notification-basic" title="Totvs Notification Basic">
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.html"> </file>
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-labs" title="Totvs Notification Labs">
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.html"> </file>
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-sales" title="Totvs Notification - Sales">
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.html"> </file>
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.ts"> </file>
 * </example>
 */
var ThfNotificationService = /** @class */ (function (_super) {
    __extends$6(ThfNotificationService, _super);
    function ThfNotificationService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.createToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        var _this = this;
        /** @type {?} */
        var componentRef = this.thfComponentInjector.createComponentInApplication(ThfToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === ThfToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout(function () {
                _this.destroyToaster(componentRef);
            }, this.durationToaster);
        }
    };
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.destroyToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        /** @type {?} */
        var stack;
        if (toaster.instance.orientation === ThfToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        /** @type {?} */
        var index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.thfComponentInjector.destroyComponentInApplication(toaster);
        for (var count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    };
    /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    ThfNotificationService.prototype.observableOnClose = /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        var _this = this;
        componentRef.instance.observableOnClose.subscribe(function () {
            _this.destroyToaster(componentRef);
        });
    };
    ThfNotificationService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ThfNotificationService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    /** @nocollapse */ ThfNotificationService.ngInjectableDef = i0.defineInjectable({ factory: function ThfNotificationService_Factory() { return new ThfNotificationService(i0.inject(ThfComponentInjectorService)); }, token: ThfNotificationService, providedIn: "root" });
    return ThfNotificationService;
}(ThfNotificationBaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfServicesModule = ThfServicesModule;
exports.ThfDialogType = ThfDialogType;
exports.ThfDialogService = ThfDialogService;
exports.ThfDialogModule = ThfDialogModule;
exports.ThfI18nPipe = ThfI18nPipe;
exports.returnThfI18nService = returnThfI18nService;
exports.ThfI18nService = ThfI18nService;
exports.ThfI18nModule = ThfI18nModule;
exports.ThfNotificationService = ThfNotificationService;
exports.ThfToasterOrientation = ThfToasterOrientation;
exports.ThfToasterType = ThfToasterType;
exports.ThfNotificationModule = ThfNotificationModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
