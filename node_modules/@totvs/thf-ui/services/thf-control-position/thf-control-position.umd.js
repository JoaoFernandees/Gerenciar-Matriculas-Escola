(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global['thf-control-position'] = {}),global.core));
}(this, (function (exports,core) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Array de posições.
/** @type {?} */
var THF_CONTROL_POSITIONS = [
    'right',
    'right-top',
    'right-bottom',
    'top',
    'top-left',
    'top-right',
    'left',
    'left-top',
    'left-bottom',
    'bottom',
    'bottom-left',
    'bottom-right'
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 * \@description
 *
 * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
 * seguintes posições:
 *
 * - `right`: Posiciona o elemento no lado direito do componente alvo.
 * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
 * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
 * - `bottom`: Posiciona o elemento abaixo do componente alvo.
 * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
 * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
 * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
 * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
 * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
 * - `top`: Posiciona o elemento acima do componente alvo.
 * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
 * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
 *
 * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
 * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
 * @type {?}
 */
var thfControlPositionSidesDefault = [
    'bottom', 'bottom-left', 'bottom-right',
    'left', 'left-top', 'left-bottom',
    'top', 'top-right', 'top-left',
    'right', 'right-bottom', 'right-top'
];
var ThfControlPositionService = /** @class */ (function () {
    function ThfControlPositionService() {
        this.differenceDiagonalToWidthArrow = 3;
        this.isSetElementWidth = false;
        // offset da seta em relação ao canto do componente
        this.offsetArrow = 12;
    }
    /**
     * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param position posição para exibição do elemento
     */
    /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} position posição para exibição do elemento
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustPosition = /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} position posição para exibição do elemento
     * @return {?}
     */
    function (position) {
        this.elementPosition(position);
        this.customPositions && this.customPositions.length ? this.adjustCustomPosition(position) : this.adjustDefaultPosition(position);
    };
    /**
     * @description Retorna a direção da seta, conforme a posição do elemento.
     */
    /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    ThfControlPositionService.prototype.getArrowDirection = /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    function () {
        return this.arrowDirection;
    };
    /**
     * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param element elemento que será exibido
     * @param elementOffset offSet do elemento
     * @param targetElement elemento de onde deve partir a exibição
     * @param customPositions posições que sobrescreve as posições padrões
     * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     */
    /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    ThfControlPositionService.prototype.setElements = /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    function (element, elementOffset, targetElement, customPositions, isSetElementWidth, isCornerAligned) {
        if (isSetElementWidth === void 0) { isSetElementWidth = false; }
        if (isCornerAligned === void 0) { isCornerAligned = false; }
        this.element = (element instanceof core.ElementRef) ? element.nativeElement : element;
        this.targetElement = (targetElement instanceof core.ElementRef) ? targetElement.nativeElement : targetElement;
        this.elementOffset = elementOffset;
        this.customPositions = customPositions;
        this.isSetElementWidth = isSetElementWidth;
        this.isCornerAligned = isCornerAligned;
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustCustomPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var positionLength = this.customPositions.length;
        /** @type {?} */
        var sidesCount = 0;
        while (sidesCount++ < positionLength) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions);
                this.elementPosition(position);
            }
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustDefaultPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var mainPositions = this.getMainPositions();
        /** @type {?} */
        var mainPositionLength = mainPositions.length;
        /** @type {?} */
        var mainSidesCount = 0;
        while (mainSidesCount++ < mainPositionLength) {
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            if (this.overflowMain(mainPosition)) {
                position = this.nextPosition(mainPosition, mainPositions);
                continue;
            }
            else if (this.overflowAllSides(position)) {
                this.verifySubPositions(position);
                // TODO: Não está indo para a proxima main position, o problema acontece somente quando utiliza as posições default
                return;
            }
            return;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.elementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return (position.indexOf('-') > -1) ? position.substring(0, position.indexOf('-')) : position;
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPositions = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultMainPositions = ['top', 'right', 'bottom', 'left'];
        return this.customPositions && this.customPositions.length ?
            this.getMainPositionsByCustomPositions(this.customPositions) : defaultMainPositions;
    };
    /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPositionsByCustomPositions = /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    function (customPositions) {
        /** @type {?} */
        var mainPositions = [];
        /** @type {?} */
        var customPositionsLength = customPositions.length;
        for (var i = 0; i < customPositionsLength; i++) {
            /** @type {?} */
            var position = customPositions[i];
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            if (!mainPositions.includes(mainPosition)) {
                mainPositions.push(mainPosition);
            }
        }
        return mainPositions;
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getOverflows = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        return {
            right: (sizesAndPositions.element.right > sizesAndPositions.window.innerWidth),
            top: (sizesAndPositions.element.top <= 0),
            left: (sizesAndPositions.element.left <= 0),
            bottom: (sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight)
        };
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getSizesAndPositions = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            window: {
                scrollY: window.scrollY,
                scrollX: window.scrollX,
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            },
            element: this.element.getBoundingClientRect(),
            target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
        };
    };
    /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    ThfControlPositionService.prototype.nextPosition = /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    function (position, positions) {
        if (positions === void 0) { positions = []; }
        /** @type {?} */
        var index = positions.indexOf(position);
        /** @type {?} */
        var nextIndex = index + 1;
        if (index > -1 && nextIndex < positions.length) {
            return positions[nextIndex];
        }
        else {
            return positions[0];
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.overflowAllSides = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top || overflows.right || overflows.left;
            case 'top-right': return overflows.top || overflows.right;
            case 'top-left': return overflows.top || overflows.left;
            case 'right': return overflows.right || overflows.top || overflows.bottom;
            case 'right-top': return overflows.right || overflows.top;
            case 'right-bottom': return overflows.right || overflows.bottom;
            case 'bottom': return overflows.bottom || overflows.right || overflows.left;
            case 'bottom-right': return overflows.bottom || overflows.right;
            case 'bottom-left': return overflows.bottom || overflows.left;
            case 'left': return overflows.left || overflows.top || overflows.bottom;
            case 'left-top': return overflows.left || overflows.top;
            case 'left-bottom': return overflows.left || overflows.bottom;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.overflowMain = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top;
            case 'right': return overflows.right;
            case 'bottom': return overflows.bottom;
            case 'left': return overflows.left;
        }
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top-left': return 'bottom-left';
            case 'top-right': return 'bottom-right';
            case 'bottom-right': return 'top-right';
            case 'bottom-left': return 'top-left';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'bottom-left':
                this.setAlignedBottomPositions(0, sizesAndPositions);
                break;
            case 'bottom-right':
                this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
            case 'top-left':
                this.setAlignedTopPositions(0, sizesAndPositions);
                break;
            case 'top-right':
                this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setAlignedArrowDirection(position);
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    ThfControlPositionService.prototype.setArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top': return 'bottom';
            case 'top-left': return 'bottom-right';
            case 'top-right': return 'bottom-left';
            case 'right': return 'left';
            case 'right-top': return 'left-bottom';
            case 'right-bottom': return 'left-top';
            case 'bottom': return 'top';
            case 'bottom-right': return 'top-left';
            case 'bottom-left': return 'top-right';
            case 'left': return 'right';
            case 'left-bottom': return 'right-top';
            case 'left-top': return 'right-bottom';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.setElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'top':
                this.setTopPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'top-left':
                this.setTopPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'top-right':
                this.setTopPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right':
                this.setRightPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'right-top':
                this.setRightPositions((sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right-bottom':
                this.setRightPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'bottom':
                this.setBottomPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'bottom-right':
                this.setBottomPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'bottom-left':
                this.setBottomPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'left':
                this.setLeftPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'left-bottom':
                this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'left-top':
                this.setLeftPositions((sizesAndPositions.element.height - this.offsetArrow), sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setArrowDirection(position);
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.setElementWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isSetElementWidth && this.targetElement) {
            this.element.style.width = this.targetElement.clientWidth + "px";
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setLeftPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setRightPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.verifySubPositions = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (position.indexOf('-') > -1) {
            position = position.substring(0, position.indexOf('-'));
            this.elementPosition(position);
        }
        /** @type {?} */
        var align = 0;
        while (align++ < 3) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions || thfControlPositionSidesDefault);
                this.elementPosition(position);
            }
            else {
                return null;
            }
        }
    };
    ThfControlPositionService.decorators = [
        { type: core.Injectable },
    ];
    return ThfControlPositionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço thf-control-position.
 */
var ThfControlPositionModule = /** @class */ (function () {
    function ThfControlPositionModule() {
    }
    ThfControlPositionModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [
                        ThfControlPositionService
                    ],
                    bootstrap: []
                },] },
    ];
    return ThfControlPositionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.THF_CONTROL_POSITIONS = THF_CONTROL_POSITIONS;
exports.ThfControlPositionModule = ThfControlPositionModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
