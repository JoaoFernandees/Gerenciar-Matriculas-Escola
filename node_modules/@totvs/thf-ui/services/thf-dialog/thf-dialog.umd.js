(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('uuid'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'uuid', '@angular/common'], factory) :
	(factory((global['thf-dialog'] = {}),global.core,global.uuid,global.common));
}(this, (function (exports,i0,uuid,common) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfDialogType = {
    // Enum para alert
    Alert: 0,
    // Enum para confirm
    Confirm: 1,
};
ThfDialogType[ThfDialogType.Alert] = 'Alert';
ThfDialogType[ThfDialogType.Confirm] = 'Confirm';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDialogService
 *
 * \@description
 *
 * Interface para definição das literais usadas no serviço `thf-dialog` para o tipo alerta.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDialogService
 *
 * \@description
 *
 * Interface para definição das literais usadas no serviço `thf-dialog` para o tipo confirmação.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@usedBy ThfDialogService
 *
 * \@description
 *
 * Interface para o título e a mensagem do serviço thf-dialog.
 * @record
 */
/**
 * \@usedBy ThfDialogService
 *
 * \@docsExtends ThfDialogOptions
 *
 * \@description
 *
 * Interface com as propriedades da caixa de diálogo de alerta do serviço thf-dialog.
 * @record
 */

/**
 * \@usedBy ThfDialogService
 *
 * \@docsExtends ThfDialogOptions
 *
 * \@description
 *
 * Interface com as propriedades da caixa de diálogo de confirmação do serviço thf-dialog.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfComponentInjectorService = /** @class */ (function () {
    function ThfComponentInjectorService(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    // Cria um dinamicamente no ApplicationRef
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    ThfComponentInjectorService.prototype.createComponentInApplication = 
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElem = ((/** @type {?} */ (componentRef.hostView))).rootNodes[0];
        document.body.appendChild(domElem);
        return componentRef;
    };
    // Destrói o componente e remove do ApplicationRef
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ThfComponentInjectorService.prototype.destroyComponentInApplication = 
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    ThfComponentInjectorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ThfComponentInjectorService.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: i0.ApplicationRef },
        { type: i0.Injector }
    ]; };
    /** @nocollapse */ ThfComponentInjectorService.ngInjectableDef = i0.defineInjectable({ factory: function ThfComponentInjectorService_Factory() { return new ThfComponentInjectorService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.ApplicationRef), i0.inject(i0.INJECTOR)); }, token: ThfComponentInjectorService, providedIn: "root" });
    return ThfComponentInjectorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O thf-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
 * necessidade do desenvolvedor.
 * @abstract
 */
var ThfDialogBaseService = /** @class */ (function () {
    function ThfDialogBaseService() {
    }
    /** Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento. */
    /**
     * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
     * @param {?} confirmOptions
     * @return {?}
     */
    ThfDialogBaseService.prototype.confirm = /**
     * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
     * @param {?} confirmOptions
     * @return {?}
     */
    function (confirmOptions) {
        this.openDialog(ThfDialogType.Confirm, confirmOptions);
    };
    /** Exibe um diálogo de alerta. */
    /**
     * Exibe um diálogo de alerta.
     * @param {?} alertOptions
     * @return {?}
     */
    ThfDialogBaseService.prototype.alert = /**
     * Exibe um diálogo de alerta.
     * @param {?} alertOptions
     * @return {?}
     */
    function (alertOptions) {
        this.openDialog(ThfDialogType.Alert, alertOptions);
    };
    return ThfDialogBaseService;
}());

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */
var thfLocales = ['pt', 'en', 'es'];
// Idioma padrão
/** @type {?} */
var thfLocaleDefault = 'pt';
/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */
function browserLanguage() {
    /** @type {?} */
    var language = navigator.language.toLowerCase().substring(0, 2);
    if (!thfLocales.includes(language)) {
        return thfLocaleDefault;
    }
    return language;
}
/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */

/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} date
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */

/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */

// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */

// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */

/**
 * @param {?} event
 * @return {?}
 */

/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */

/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} list
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} url
 * @return {?}
 */

/**
 * @param {?} link
 * @return {?}
 */

/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */

/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @param {?} text
 * @return {?}
 */

/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-modal` é utilizado para incluir conteúdos rápidos e informativos.
 *
 * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
 *
 * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `thf-chart`,
 * `thf-table` e os demais componentes do THF.
 *
 * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
 * definir um estado de carregando e / ou desabilitado. Também é possível definir o botão com o tipo *danger*.
 *
 * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `t-hide-close` não estiver habilitada.
 */
var ThfModalBaseComponent = /** @class */ (function () {
    function ThfModalBaseComponent() {
        this._hideClose = false;
        this._size = 'md';
        /**
         * Define o fechamento da modal ao clicar fora da mesma.
         * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
         */
        this.clickOut = false;
        // Controla se a modal fica oculto ou visível, por padrão é oculto
        this.isHidden = true;
        // Event emmiter para quando a modal é fechada pelo 'X'.
        this.onXClosed = new i0.EventEmitter();
    }
    Object.defineProperty(ThfModalBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         */
        set: /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
            this._size = sizes.indexOf(value) > -1 ? value : 'md';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "setClickOut", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.clickOut = (value === '') ? false : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "hideClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideClose;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideClose = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Função para fechar a modal. */
    /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    ThfModalBaseComponent.prototype.close = /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    function (xClosed) {
        if (xClosed === void 0) { xClosed = false; }
        this.isHidden = true;
        if (xClosed) {
            this.onXClosed.emit(xClosed);
        }
    };
    /** Função para abrir a modal. */
    /**
     * Função para abrir a modal.
     * @return {?}
     */
    ThfModalBaseComponent.prototype.open = /**
     * Função para abrir a modal.
     * @return {?}
     */
    function () {
        this.validPrimaryAction();
        this.isHidden = false;
    };
    /**
     * @return {?}
     */
    ThfModalBaseComponent.prototype.validPrimaryAction = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.primaryAction) {
            this.primaryAction = {
                action: function () { return _this.close(); },
                label: 'Ok',
            };
        }
        if (!this.primaryAction['action']) {
            this.primaryAction['action'] = function () { return _this.close(); };
        }
        if (!this.primaryAction['label']) {
            this.primaryAction['label'] = 'Ok';
        }
    };
    ThfModalBaseComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['t-title',] }],
        primaryAction: [{ type: i0.Input, args: ['t-primary-action',] }],
        secondaryAction: [{ type: i0.Input, args: ['t-secondary-action',] }],
        size: [{ type: i0.Input, args: ['t-size',] }],
        setClickOut: [{ type: i0.Input, args: ['t-click-out',] }],
        hideClose: [{ type: i0.Input, args: ['t-hide-close',] }]
    };
    return ThfModalBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfModalService = /** @class */ (function () {
    function ThfModalService() {
    }
    ThfModalService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfModalService;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfModalBaseComponent
 *
 * \@example
 *
 * <example name="thf-modal-basic" title="Totvs Modal Basic">
 *  <file name="sample-thf-modal-basic/sample-thf-modal-basic.component.html"> </file>
 *  <file name="sample-thf-modal-basic/sample-thf-modal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-modal-labs" title="Totvs Modal Labs">
 *  <file name="sample-thf-modal-labs/sample-thf-modal-labs.component.html"> </file>
 *  <file name="sample-thf-modal-labs/sample-thf-modal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-modal-fruits-salad" title="Totvs Modal - Fruits Salad">
 *  <file name="sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.html"> </file>
 *  <file name="sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.ts"> </file>
 * </example>
 */
var ThfModalComponent = /** @class */ (function (_super) {
    __extends(ThfModalComponent, _super);
    function ThfModalComponent(thfModalService) {
        var _this = _super.call(this) || this;
        _this.thfModalService = thfModalService;
        _this.focusableElements = 'input, select, textarea, button:not([disabled]), a';
        _this.id = uuid.v4();
        return _this;
    }
    /**
     * @param {?=} xClosed
     * @return {?}
     */
    ThfModalComponent.prototype.close = /**
     * @param {?=} xClosed
     * @return {?}
     */
    function (xClosed) {
        if (xClosed === void 0) { xClosed = false; }
        this.thfModalService.modalActive = undefined;
        _super.prototype.close.call(this, xClosed);
        document.removeEventListener('focus', this.focusFunction, true);
        if (this.sourceElement) {
            this.sourceElement.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfModalComponent.prototype.closeModalOnEscapeKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.hideClose) {
            event.preventDefault();
            event.stopPropagation();
            this.close();
        }
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.getPrimaryActionButtonType = /**
     * @return {?}
     */
    function () {
        return this.primaryAction.danger ? 'danger' : 'primary';
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.getSecondaryActionButtonType = /**
     * @return {?}
     */
    function () {
        return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'danger' : 'default';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfModalComponent.prototype.onClickOut = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {
            this.close();
        }
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        this.sourceElement = document.activeElement;
        _super.prototype.open.call(this);
        this.handleFocus();
    };
    /**
     * @private
     * @return {?}
     */
    ThfModalComponent.prototype.handleFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.thfModalService.modalActive = this.id;
        setTimeout(function () {
            if (_this.modalContent) {
                _this.initFocus();
                document.addEventListener('focus', _this.focusFunction, true);
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfModalComponent.prototype.initFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.focusFunction = function (event) {
            _this.thfModalService.modalActive = _this.thfModalService.modalActive || _this.id;
            /** @type {?} */
            var modalElement = _this.modalContent.nativeElement;
            if (!modalElement.contains(event.target) && _this.thfModalService.modalActive === _this.id) {
                event.stopPropagation();
                _this.firstElement.focus();
            }
        };
        this.setFirstElement();
        if (this.hideClose) {
            this.firstElement.focus();
        }
        else {
            /** @type {?} */
            var firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] ||
                this.modalContent.nativeElement;
            firstFieldElement.focus();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfModalComponent.prototype.setFirstElement = /**
     * @private
     * @return {?}
     */
    function () {
        this.firstElement = this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;
    };
    ThfModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-modal', template: "<div *ngIf=\"!isHidden\" class=\"thf-modal\" tabindex=\"0\" (keydown.esc)=\"closeModalOnEscapeKey($event)\"> <div class=\"thf-modal-overlay\"> <div class=\"thf-modal-container thf-pb-2 thf-pt-2\" (click)=\"onClickOut($event)\"> <div class=\"thf-modal-vertical-align\"> <div #modalContent class=\"thf-modal-content thf-modal-{{ size }}\" tabindex=\"-1\"> <div class=\"thf-modal-header\"> <div class=\"thf-modal-title\"> <a *ngIf=\"!hideClose\" class=\"thf-modal-header-close-button\" tabindex=\"0\" (click)=\"close(true)\"> <span class=\"thf-icon thf-icon-close\"></span> </a> {{ title }} </div> </div> <div class=\"thf-modal-body\"> <ng-content></ng-content> </div> <div class=\"thf-modal-footer\"> <thf-button *ngIf=\"secondaryAction\" [t-disabled]=\"secondaryAction.disabled\" [t-label]=\"secondaryAction.label\" [t-loading]=\"secondaryAction.loading\" [t-type]=\"getSecondaryActionButtonType()\" (t-click)=\"secondaryAction.action()\"> </thf-button> <thf-button class=\"thf-button-modal-first-action\" [t-disabled]=\"primaryAction.disabled\" [t-label]=\"primaryAction.label\" [t-loading]=\"primaryAction.loading\" [t-type]=\"getPrimaryActionButtonType()\" (t-click)=\"primaryAction.action()\"> </thf-button> </div> </div> </div> </div> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfModalComponent.ctorParameters = function () { return [
        { type: ThfModalService }
    ]; };
    ThfModalComponent.propDecorators = {
        modalContent: [{ type: i0.ViewChild, args: ['modalContent', { read: i0.ElementRef },] }]
    };
    return ThfModalComponent;
}(ThfModalBaseComponent));

var __assign$1 = (undefined && undefined.__assign) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfDialogAlertLiteralsDefault = {
    en: (/** @type {?} */ ({ ok: 'Ok' })),
    es: (/** @type {?} */ ({ ok: 'Ok' })),
    pt: (/** @type {?} */ ({ ok: 'Ok' }))
};
/** @type {?} */
var thfDialogConfirmLiteralsDefault = {
    en: (/** @type {?} */ ({ cancel: 'Cancel', confirm: 'Confirm' })),
    es: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
    pt: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' }))
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do thf-dialog.service
 */
var ThfDialogComponent = /** @class */ (function () {
    function ThfDialogComponent() {
        // Objeto primary do thfModal
        this.primaryAction = { label: 'ok', action: function () { } };
    }
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.closeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.closeSubscription = this.thfModal.onXClosed.subscribe(function (close) { return _this.destroy(); });
    };
    // Fecha o thfModal
    // Fecha o thfModal
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.close = 
    // Fecha o thfModal
    /**
     * @return {?}
     */
    function () {
        this.thfModal.close();
        this.destroy();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    // Insere os valores recebidos de this.open para o thfModal
    // Insere os valores recebidos de this.open para o thfModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    ThfDialogComponent.prototype.configDialog = 
    // Insere os valores recebidos de this.open para o thfModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                }
            };
        }
    };
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    ThfDialogComponent.prototype.open = 
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case ThfDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, ((/** @type {?} */ (dialogOptions))).confirm, this.literalsConfirm.cancel, ((/** @type {?} */ (dialogOptions))).cancel);
                break;
            }
            case ThfDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, ((/** @type {?} */ (dialogOptions))).ok);
                break;
            }
        }
        this.thfModal.open();
    };
    /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    ThfDialogComponent.prototype.setDialogLiterals = /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    function (dialogOptions, dialogType) {
        /** @type {?} */
        var alertLiterals = thfDialogAlertLiteralsDefault;
        /** @type {?} */
        var confirmLiterals = thfDialogConfirmLiteralsDefault;
        /** @type {?} */
        var literals = dialogOptions.literals;
        if (dialogType === ThfDialogType.Alert) {
            this.literalsAlert = __assign$1({}, alertLiterals[thfLocaleDefault], alertLiterals[browserLanguage()], literals);
        }
        else {
            this.literalsConfirm = __assign$1({}, confirmLiterals[thfLocaleDefault], confirmLiterals[browserLanguage()], literals);
        }
    };
    ThfDialogComponent.decorators = [
        { type: i0.Component, args: [{ template: "<thf-modal [t-title]=\"title\" [t-primary-action]=\"primaryAction\" [t-secondary-action]=\"secondaryAction\"> {{ message }} </thf-modal> "
                },] },
    ];
    ThfDialogComponent.propDecorators = {
        thfModal: [{ type: i0.ViewChild, args: [ThfModalComponent,] }]
    };
    return ThfDialogComponent;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfDialogBaseService
 *
 * \@example
 *
 * <example name="thf-dialog-basic" title="Totvs Dialog Basic">
 *  <file name="sample-thf-dialog-basic/sample-thf-dialog-basic.component.html"> </file>
 *  <file name="sample-thf-dialog-basic/sample-thf-dialog-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dialog-labs" title="Totvs Dialog Labs">
 *  <file name="sample-thf-dialog-labs/sample-thf-dialog-labs.component.html"> </file>
 *  <file name="sample-thf-dialog-labs/sample-thf-dialog-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dialog-cancel-credit-card" title="Totvs Dialog - Cancel Credit Card">
 *  <file name="sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.html"> </file>
 *  <file name="sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.ts"> </file>
 * </example>
 */
var ThfDialogService = /** @class */ (function (_super) {
    __extends$1(ThfDialogService, _super);
    function ThfDialogService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    ThfDialogService.prototype.openDialog = /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    function (dialogType, dialogOptions) {
        /** @type {?} */
        var componentRef = this.thfComponentInjector.createComponentInApplication(ThfDialogComponent);
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.open(dialogOptions, dialogType, componentRef);
    };
    ThfDialogService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfDialogService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    return ThfDialogService;
}(ThfDialogBaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
/** @type {?} */
var THF_BUTTON_TYPE_DEFAULT = 'default';
/**
 * \@description
 *
 * O `thf-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
 * ação irreversível (`danger`), como a exclusão de um registro.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre o tipo `danger`.
 */
var ThfButtonBaseComponent = /** @class */ (function () {
    function ThfButtonBaseComponent() {
        this._disabled = false;
        this._loading = false;
        this._small = false;
        this._type = 'default';
        /**
         * Ação que será executada quando o usuário clicar sobre o `thf-button`.
         */
        this.click = new i0.EventEmitter();
    }
    Object.defineProperty(ThfButtonBaseComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        /**
         * @optional
         *
         * @description
         *
         * Exibe um ícone de carregamento à esquerda do _label_ do botão.
         *
         * > Quando esta propriedade estiver habilitada, desabilitará o botão.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Exibe um ícone de carregamento à esquerda do _label_ do botão.
         *
         * > Quando esta propriedade estiver habilitada, desabilitará o botão.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Deixa o botão menor.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Deixa o botão menor.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o estilo do `thf-button`.
         *
         * Valore válidos:
         *  - `default`: estilo padrão do `thf-button`.
         *  - `primary`: deixa o `thf-button` com destaque, deve ser usado para ações primárias.
         *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
         *  - `link`: o `thf-button` recebe o estilo de um link.
         *
         * @default `default`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o estilo do `thf-button`.
         *
         * Valore válidos:
         *  - `default`: estilo padrão do `thf-button`.
         *  - `primary`: deixa o `thf-button` com destaque, deve ser usado para ações primárias.
         *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
         *  - `link`: o `thf-button` recebe o estilo de um link.
         *
         * \@default `default`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = THF_BUTTON_TYPES.includes(value) ? value : THF_BUTTON_TYPE_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o `thf-button` e não permite que o usuário interaja com o mesmo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o `thf-button` e não permite que o usuário interaja com o mesmo.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ThfButtonBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        loading: [{ type: i0.Input, args: ['t-loading',] }],
        icon: [{ type: i0.Input, args: ['t-icon',] }],
        small: [{ type: i0.Input, args: ['t-small',] }],
        type: [{ type: i0.Input, args: ['t-type',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        click: [{ type: i0.Output, args: ['t-click',] }]
    };
    return ThfButtonBaseComponent;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfButtonBaseComponent
 *
 * \@example
 *
 * <example name="thf-button-basic" title="Totvs Button Basic">
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.html"> </file>
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.ts"> </file>
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-button-labs" title="Totvs Button Labs">
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.html"> </file>
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.ts"> </file>
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.po.ts"> </file>
 * </example>
 */
var ThfButtonComponent = /** @class */ (function (_super) {
    __extends$2(ThfButtonComponent, _super);
    function ThfButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    ThfButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.click.emit(null);
    };
    ThfButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-button', template: "<button class=\"thf-button thf-text-ellipsis\" type=\"button\" [class.thf-button-danger]=\"type === 'danger'\" [class.thf-button-link]=\"type === 'link'\" [class.thf-button-primary]=\"type === 'primary'\" [class.thf-button-sm] = \"small\" [class.thf-clickable]=\"type === 'link'\" [disabled]=\"disabled || loading\" (click)=\"onClick()\"> <span *ngIf=\"loading\" class=\"thf-icon thf-button-loading-icon\"></span> <span *ngIf=\"icon\" class=\"thf-icon {{ icon }}\" aria-hidden=\"true\"></span> <span *ngIf=\"label\" class=\"thf-button-label\">{{ label }}</span> </button> "
                },] },
    ];
    return ThfButtonComponent;
}(ThfButtonBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-button.
 */
var ThfButtonModule = /** @class */ (function () {
    function ThfButtonModule() {
    }
    ThfButtonModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfButtonComponent
                    ],
                    exports: [
                        ThfButtonComponent
                    ]
                },] },
    ];
    return ThfButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-modal
 */
var ThfModalModule = /** @class */ (function () {
    function ThfModalModule() {
    }
    ThfModalModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfButtonModule
                    ],
                    declarations: [
                        ThfModalComponent
                    ],
                    exports: [ThfModalComponent],
                    providers: [ThfModalService]
                },] },
    ];
    return ThfModalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfDialogModule = /** @class */ (function () {
    function ThfDialogModule() {
    }
    ThfDialogModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ThfDialogComponent
                    ],
                    imports: [
                        ThfModalModule
                    ],
                    exports: [
                        ThfDialogComponent
                    ],
                    entryComponents: [
                        ThfDialogComponent
                    ],
                    providers: [
                        ThfDialogService
                    ]
                },] },
    ];
    return ThfDialogModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfDialogType = ThfDialogType;
exports.ThfDialogService = ThfDialogService;
exports.ThfDialogModule = ThfDialogModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
