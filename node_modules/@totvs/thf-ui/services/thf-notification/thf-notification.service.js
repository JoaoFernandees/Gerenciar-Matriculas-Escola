var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ThfComponentInjectorService } from './../thf-component-injector/thf-component-injector.service';
import { ThfNotificationBaseService } from './thf-notification-base.service';
import { ThfToasterOrientation } from './thf-toaster/thf-toaster-orientation.enum';
import { ThfToasterComponent } from './thf-toaster/thf-toaster.component';
import * as i0 from "@angular/core";
import * as i1 from "../thf-component-injector/thf-component-injector.service";
/**
 * \@docsExtends ThfNotificationBaseService
 *
 * \@example
 *
 * <example name="thf-notification-basic" title="Totvs Notification Basic">
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.html"> </file>
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-labs" title="Totvs Notification Labs">
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.html"> </file>
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-sales" title="Totvs Notification - Sales">
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.html"> </file>
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.ts"> </file>
 * </example>
 */
var ThfNotificationService = /** @class */ (function (_super) {
    __extends(ThfNotificationService, _super);
    function ThfNotificationService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.createToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        var _this = this;
        /** @type {?} */
        var componentRef = this.thfComponentInjector.createComponentInApplication(ThfToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === ThfToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout(function () {
                _this.destroyToaster(componentRef);
            }, this.durationToaster);
        }
    };
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.destroyToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        /** @type {?} */
        var stack;
        if (toaster.instance.orientation === ThfToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        /** @type {?} */
        var index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.thfComponentInjector.destroyComponentInApplication(toaster);
        for (var count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    };
    /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    ThfNotificationService.prototype.observableOnClose = /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        var _this = this;
        componentRef.instance.observableOnClose.subscribe(function () {
            _this.destroyToaster(componentRef);
        });
    };
    ThfNotificationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ThfNotificationService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    /** @nocollapse */ ThfNotificationService.ngInjectableDef = i0.defineInjectable({ factory: function ThfNotificationService_Factory() { return new ThfNotificationService(i0.inject(i1.ThfComponentInjectorService)); }, token: ThfNotificationService, providedIn: "root" });
    return ThfNotificationService;
}(ThfNotificationBaseService));
export { ThfNotificationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfNotificationService.prototype.thfComponentInjector;
}
