(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('@angular/common/http'), require('@angular/forms'), require('rxjs'), require('uuid'), require('@angular/platform-browser'), require('rxjs/operators'), require('@angular/animations')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/router', '@angular/common/http', '@angular/forms', 'rxjs', 'uuid', '@angular/platform-browser', 'rxjs/operators', '@angular/animations'], factory) :
	(factory((global['thf-ui'] = {}),global.core,global.common,global.router,global.http,global.forms,global.rxjs,global.uuid,global.platformBrowser,global.operators,global.animations));
}(this, (function (exports,i0,common,router,http,forms,rxjs,uuid,platformBrowser,operators,animations) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
/** @type {?} */
var THF_AVATAR_SIZE_DEFAULT = 'md';
/**
 * \@description
 *
 * O componente `thf-avatar` é um container para imagens em miniatura, possui um formato redondo e cinco opções de
 * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuário, entre outras possibilidades.
 *
 * Além de poder ser utilizado separadamente, é possível usar o `thf-avatar` juntamente com outros componentes e criar
 * layouts ricos e bem interessantes para os usuários, como por exemplo, uma lista de itens ou produtos.
 */
var ThfAvatarBaseComponent = /** @class */ (function () {
    function ThfAvatarBaseComponent() {
        this._size = 'md';
    }
    Object.defineProperty(ThfAvatarBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * @optional
         *
         * @description
         *
         * Tamanho de exibição do componente.
         *
         * Valores válidos:
         *  - `xs` (24x24)
         *  - `sm` (32x32)
         *  - `md` (64x64)
         *  - `lg` (96x96)
         *  - `xl` (144x144)
         *
         * @default `md`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Tamanho de exibição do componente.
         *
         * Valores válidos:
         *  - `xs` (24x24)
         *  - `sm` (32x32)
         *  - `md` (64x64)
         *  - `lg` (96x96)
         *  - `xl` (144x144)
         *
         * \@default `md`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = THF_AVATAR_SIZES.includes(value) ? value : THF_AVATAR_SIZE_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    ThfAvatarBaseComponent.propDecorators = {
        src: [{ type: i0.Input, args: ['t-src',] }],
        size: [{ type: i0.Input, args: ['t-size',] }]
    };
    return ThfAvatarBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Imagem default caso não seja informada a propriedade 't-src' ou houver algum erro na requisição da mesma.
/** @type {?} */
var THF_AVATAR_DEFAULT_SRC = './assets/images/totvs-avatar-default.svg';
/**
 * \@docsExtends ThfAvatarBaseComponent
 *
 * \@example
 *
 * <example name="thf-avatar-basic" title="Totvs Avatar Basic" >
 *  <file name="sample-thf-avatar-basic/sample-thf-avatar-basic.component.html"> </file>
 *  <file name="sample-thf-avatar-basic/sample-thf-avatar-basic.component.ts"> </file>
 *  <file name="sample-thf-avatar-basic/sample-thf-avatar-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-avatar-basic/sample-thf-avatar-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-avatar-labs" title="Totvs Avatar Labs" >
 *  <file name="sample-thf-avatar-labs/sample-thf-avatar-labs.component.html"> </file>
 *  <file name="sample-thf-avatar-labs/sample-thf-avatar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-avatar-business-card" title="Totvs Avatar - Business Card" >
 *  <file name="sample-thf-avatar-business-card/sample-thf-avatar-business-card.component.html"> </file>
 *  <file name="sample-thf-avatar-business-card/sample-thf-avatar-business-card.component.ts"> </file>
 * </example>
 */
var ThfAvatarComponent = /** @class */ (function (_super) {
    __extends(ThfAvatarComponent, _super);
    function ThfAvatarComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    ThfAvatarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.src) {
            this.src = THF_AVATAR_DEFAULT_SRC;
        }
    };
    /**
     * @return {?}
     */
    ThfAvatarComponent.prototype.onError = /**
     * @return {?}
     */
    function () {
        this.src = THF_AVATAR_DEFAULT_SRC;
    };
    ThfAvatarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-avatar', template: "<div class=\"thf-avatar thf-avatar-{{ size }}\"> <img class=\"thf-avatar-image\" [src]=\"src\" alt=\"\" (error)=\"onError()\"> </div> "
                },] },
    ];
    return ThfAvatarComponent;
}(ThfAvatarBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-avatar.
 */
var ThfAvatarModule = /** @class */ (function () {
    function ThfAvatarModule() {
    }
    ThfAvatarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfAvatarComponent
                    ],
                    exports: [
                        ThfAvatarComponent
                    ]
                },] },
    ];
    return ThfAvatarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `t-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `t-params-service` que recebe um objeto contendo as informações.
 */
var ThfBreadcrumbBaseComponent = /** @class */ (function () {
    function ThfBreadcrumbBaseComponent() {
        this.itemsView = [];
        this._items = [];
    }
    Object.defineProperty(ThfBreadcrumbBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens do _breadcrumb_.
         *
         * **Exemplo:**
         * ```
         * { label: 'Thf Portal', link: 'portal' }
         * ```
         */
        set: /**
         * \@description
         *
         * Lista de itens do _breadcrumb_.
         *
         * **Exemplo:**
         * ```
         * { label: 'Thf Portal', link: 'portal' }
         * ```
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = items;
            this.itemsView = [].concat(items);
        },
        enumerable: true,
        configurable: true
    });
    ThfBreadcrumbBaseComponent.propDecorators = {
        favoriteService: [{ type: i0.Input, args: ['t-favorite-service',] }],
        items: [{ type: i0.Input, args: ['t-items',] }],
        paramsService: [{ type: i0.Input, args: ['t-params-service',] }]
    };
    return ThfBreadcrumbBaseComponent;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfBreadcrumbBaseComponent
 *
 * \@example
 *
 * <example name="thf-breadcrumb-basic" title="Totvs Breadcrumb Basic">
 *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-breadcrumb-labs" title="Totvs Breadcrumb Labs">
 *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
var ThfBreadcrumbComponent = /** @class */ (function (_super) {
    __extends$1(ThfBreadcrumbComponent, _super);
    function ThfBreadcrumbComponent(differs, element, renderer) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.renderer = renderer;
        _this.showDropdown = false;
        _this.showDropdownToggle = false;
        _this._breadcrumbItemsLenght = 0;
        _this.calculatedElement = false;
        _this.hiddenWithoutResize = false;
        _this.initialized = false;
        _this.wasClickedonDropdown = function (event) {
            /** @type {?} */
            var clickedOutIconDropdown = _this.checkClickOutElement(event, _this.dropdownIcon);
            if (clickedOutIconDropdown) {
                _this.showDropdown = false;
                _this.removeClickoutListener();
            }
        };
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
        this.initializeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeClickoutListener();
        this.removeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.toggleDropdown = /**
     * @return {?}
     */
    function () {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    };
    /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.checkClickOutElement = /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    function (event, element) {
        return element && !element.nativeElement.contains(event.target);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.checkChangeOnItems = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.calcBreadcrumb = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        /** @type {?} */
        var breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.getBreadcrumbFavoriteWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.favoriteService ? this.element.nativeElement
            .querySelector('.thf-breadcrumb-favorite').offsetWidth + 20 : 0;
    };
    /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.getBreadcrumbWidth = /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    function (breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.thf-breadcrumb').offsetWidth - breadcrumbFavorite;
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.calcBreadcrumbItemsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbItem = this.element.nativeElement
            .querySelectorAll('.thf-breadcrumb-item, .thf-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map(function (breadcrumb) { return breadcrumb['offsetWidth']; })
            .reduce(function (a, b) { return a + b; }, 16);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.enableBreadcrumbResponsive = /**
     * @private
     * @return {?}
     */
    function () {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.disableBreadcrumbResponsive = /**
     * @private
     * @return {?}
     */
    function () {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            if (_this.calculatedElement && !_this.hiddenWithoutResize && _this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                _this.hiddenWithoutResize = true;
            }
            else {
                _this.calcBreadcrumb();
            }
        }, 50);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.initBreadcrumbSize = /**
     * @private
     * @return {?}
     */
    function () {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.initializeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.initializeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.removeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.removeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    ThfBreadcrumbComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-breadcrumb', template: "<div class=\"thf-breadcrumb\" #breadcrumb> <ul class=\"thf-breadcrumb-items\"> <li #dropdownIcon *ngIf=\"showDropdownToggle\" class=\"thf-breadcrumb-item thf-clickable\" (click)=\"toggleDropdown()\"> <span class=\"thf-breadcrumb-icon-more thf-icon thf-icon-more\"></span> <div class=\"thf-breadcrumb-arrow\"></div> </li> <div *ngFor=\"let item of itemsView, let itemIndex = index;\"> <thf-breadcrumb-item [t-action]=\"item.action\" [t-label]=\"item.label\" [t-link]=\"item.link\" [t-item-active]=\"itemIndex === (itemsView.length - 1)\"> </thf-breadcrumb-item> </div> </ul> <thf-breadcrumb-favorite *ngIf=\"favoriteService\" [t-favorite-service]=\"favoriteService\" [t-item-active]=\"items[items.length - 1]\" [t-params-service]=\"paramsService\"> </thf-breadcrumb-favorite> <thf-breadcrumb-dropdown *ngIf=\"showDropdown\" [t-items]=\"dropdownItems\"> </thf-breadcrumb-dropdown> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfBreadcrumbComponent.ctorParameters = function () { return [
        { type: i0.IterableDiffers },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    ThfBreadcrumbComponent.propDecorators = {
        breadcrumbElement: [{ type: i0.ViewChild, args: ['breadcrumb', { read: i0.ElementRef },] }],
        dropdownIcon: [{ type: i0.ViewChild, args: ['dropdownIcon', { read: i0.ElementRef },] }]
    };
    return ThfBreadcrumbComponent;
}(ThfBreadcrumbBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza o dropdown do thf-breadcrumb.
 */
var ThfBreadcrumbDropdownComponent = /** @class */ (function () {
    function ThfBreadcrumbDropdownComponent() {
    }
    ThfBreadcrumbDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-breadcrumb-dropdown', template: "<ul class=\"thf-breadcrumb-dropdown\"> <li class=\"thf-breadcrumb-dropdown-item\" *ngFor=\"let item of items\" [routerLink]=\"item.link\"> {{ item.label }} </li> </ul> "
                },] },
    ];
    ThfBreadcrumbDropdownComponent.propDecorators = {
        items: [{ type: i0.Input, args: ['t-items',] }]
    };
    return ThfBreadcrumbDropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente thf-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
var ThfBreadcrumbFavoriteService = /** @class */ (function () {
    function ThfBreadcrumbFavoriteService(http$$1) {
        this.http = http$$1;
    }
    Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "bodyParams", {
        get: /**
         * @return {?}
         */
        function () { return this._bodyParams; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.configService = /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    function (url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    };
    /**
     * @param {?} status
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.sendStatusFavorite = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.getFavorite = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    };
    ThfBreadcrumbFavoriteService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfBreadcrumbFavoriteService.ctorParameters = function () { return [
        { type: http.HttpClient }
    ]; };
    return ThfBreadcrumbFavoriteService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza o serviço de favoritar do thf-breadcrumb.
 */
var ThfBreadcrumbFavoriteComponent = /** @class */ (function () {
    function ThfBreadcrumbFavoriteComponent(service) {
        this.service = service;
        this.favorite = false;
    }
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
        this.getStatusFavorite();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.setSubscription) {
            this.setSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.toggleFavoriteAction = /**
     * @return {?}
     */
    function () {
        this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.getStatusFavorite = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.getSubscription = this.service.getFavorite().subscribe(function (result) { return _this.favorite = result.isFavorite; });
    };
    /**
     * @private
     * @param {?} status
     * @return {?}
     */
    ThfBreadcrumbFavoriteComponent.prototype.setStatusFavorite = /**
     * @private
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        this.setSubscription = this.service.sendStatusFavorite(status).subscribe(function (result) { return _this.favorite = result.isFavorite; });
    };
    ThfBreadcrumbFavoriteComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-breadcrumb-favorite', template: "<div class=\"thf-breadcrumb-favorite thf-clickable\" (click)=\"toggleFavoriteAction()\"> <span class=\"thf-icon thf-icon-star thf-breadcrumb-favorite-star thf-clickable\" [class.thf-breadcrumb-favorite-star-active]=\"favorite\"> </span> <span class=\"thf-hidden-sm thf-breadcrumb-favorite-label\" *ngIf=\"favorite\">Desfavoritar</span> <span class=\"thf-hidden-sm thf-breadcrumb-favorite-label\" *ngIf=\"!favorite\">Favoritar</span> </div> ",
                    providers: [ThfBreadcrumbFavoriteService]
                },] },
    ];
    /** @nocollapse */
    ThfBreadcrumbFavoriteComponent.ctorParameters = function () { return [
        { type: ThfBreadcrumbFavoriteService }
    ]; };
    ThfBreadcrumbFavoriteComponent.propDecorators = {
        favoriteService: [{ type: i0.Input, args: ['t-favorite-service',] }],
        itemActive: [{ type: i0.Input, args: ['t-item-active',] }],
        paramsService: [{ type: i0.Input, args: ['t-params-service',] }]
    };
    return ThfBreadcrumbFavoriteComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza cada item do thf-breadcrumb.
 */
var ThfBreadcrumbItemComponent = /** @class */ (function () {
    function ThfBreadcrumbItemComponent() {
        // Especifica se item é o link ativo.
        this.itemActive = false;
    }
    ThfBreadcrumbItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-breadcrumb-item', template: "<li *ngIf=\"!itemActive\" [class.thf-breadcrumb-item]=\"link || action\" [class.thf-breadcrumb-item-unclickable]=\"!link && !action\"> <a *ngIf=\"link\" [routerLink]=\"link\"> <label class=\"thf-breadcrumb-label\">{{ label }}</label> <div class=\"thf-breadcrumb-arrow\"></div> </a> <a *ngIf=\"!link && action\" (click)=\"action(label)\"> <label class=\"thf-breadcrumb-label\">{{ label }}</label> <div class=\"thf-breadcrumb-arrow\"></div> </a> <a *ngIf=\"!link && !action\"> <label class=\"thf-breadcrumb-label\">{{ label }}</label> <div class=\"thf-breadcrumb-arrow\"></div> </a> </li> <li *ngIf=\"itemActive\" class=\"thf-breadcrumb-item-unclickable\"> <label class=\"thf-breadcrumb-label\">{{ label }}</label> </li> "
                },] },
    ];
    ThfBreadcrumbItemComponent.propDecorators = {
        action: [{ type: i0.Input, args: ['t-action',] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        link: [{ type: i0.Input, args: ['t-link',] }],
        itemActive: [{ type: i0.Input, args: ['t-item-active',] }]
    };
    return ThfBreadcrumbItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-breadcrumb.
 *
 */
var ThfBreadcrumbModule = /** @class */ (function () {
    function ThfBreadcrumbModule() {
    }
    ThfBreadcrumbModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule
                    ],
                    declarations: [
                        ThfBreadcrumbComponent,
                        ThfBreadcrumbDropdownComponent,
                        ThfBreadcrumbFavoriteComponent,
                        ThfBreadcrumbItemComponent
                    ],
                    exports: [ThfBreadcrumbComponent]
                },] },
    ];
    return ThfBreadcrumbModule;
}());

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */
var thfLocales = ['pt', 'en', 'es'];
// Idioma padrão
/** @type {?} */
var thfLocaleDefault = 'pt';
/**
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */
function browserLanguage() {
    /** @type {?} */
    var language = navigator.language.toLowerCase().substring(0, 2);
    if (!thfLocales.includes(language)) {
        return thfLocaleDefault;
    }
    return language;
}
/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */
function convertToInt(value, valueDefault) {
    /** @type {?} */
    var validNumber = parseInt(value, 10);
    /** @type {?} */
    var validDefaultValue = parseInt(valueDefault, 10);
    /** @type {?} */
    var defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
    return validNumber || validNumber === 0 ? validNumber : defaultValue;
}
/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */
function isTypeof(object, type) {
    return typeof object === type;
}
/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */
function callFunction(fn, context, param) {
    if (isTypeof(fn, 'function')) {
        fn.call(context, param);
    }
    else {
        context[fn](param);
    }
}
/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */
function convertIsoToDate(value, start, end) {
    if (value) {
        /** @type {?} */
        var day = parseInt(value.substring(8, 10), 10);
        /** @type {?} */
        var month = parseInt(value.substring(5, 7), 10);
        /** @type {?} */
        var year = parseInt(value.substring(0, 4), 10);
        if (start) {
            /** @type {?} */
            var date = new Date(year, month - 1, day, 0, 0, 0);
            setYearFrom0To100(date, year);
            return date;
        }
        else if (end) {
            /** @type {?} */
            var date = new Date(year, month - 1, day, 23, 59, 59);
            setYearFrom0To100(date, year);
            return date;
        }
        else {
            /** @type {?} */
            var milliseconds = Date.parse(value);
            /** @type {?} */
            var timezone = new Date().getTimezoneOffset() * 60000;
            return new Date(milliseconds + timezone);
        }
    }
}
/**
 * @param {?} date
 * @return {?}
 */
function convertDateToISODate(date) {
    if (date) {
        /** @type {?} */
        var getMonth = date.getMonth() + 1;
        /** @type {?} */
        var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        /** @type {?} */
        var month = getMonth < 10 ? '0' + getMonth : getMonth;
        /** @type {?} */
        var year = formatYear(date.getFullYear());
        return year + '-' + month + '-' + day;
    }
    else {
        return null;
    }
}
/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */
function convertDateToISOExtended(date, time) {
    if (date) {
        /** @type {?} */
        var getMonth = date.getMonth() + 1;
        /** @type {?} */
        var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        /** @type {?} */
        var month = getMonth < 10 ? '0' + getMonth : getMonth;
        /** @type {?} */
        var year = formatYear(date.getFullYear());
        /** @type {?} */
        var dateString = date.toString();
        if (time !== null) {
            return year + '-' + month + '-' + day + time;
        }
        else {
            return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +
                dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
        }
    }
    else {
        return null;
    }
}
/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */
function formatYear(year) {
    if (year >= 1000) {
        return year.toString();
    }
    if (year > 99 && year < 1000) {
        return "0" + year;
    }
    if (year > 9 && year < 100) {
        return "00" + year;
    }
    if (year >= 0 && year < 10) {
        return "000" + year;
    }
}
// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */
function isIEOrEdge() {
    /** @type {?} */
    var userAgent = window.navigator.userAgent;
    return /msie\s|trident\/|edge\//i.test(userAgent);
}
// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */
function isMobile() {
    /** @type {?} */
    var userAgent = window.navigator.userAgent;
    return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);
}
/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */
function isEquals(value, comparedValue) {
    return JSON.stringify(value) === JSON.stringify(comparedValue);
}
/**
 * @param {?} event
 * @return {?}
 */
function isKeyCodeEnter(event) {
    return event.keyCode === 13 || event.which === 13;
}
/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */
function setYearFrom0To100(date, year) {
    if (year >= 0 && year < 100) {
        date.setFullYear(year);
    }
}
/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */
function sortOptionsByProperty(options, property) {
    options.sort(function (optionA, optionB) {
        optionA = optionA[property].toString().toLowerCase();
        optionB = optionB[property].toString().toLowerCase();
        if (optionA < optionB) {
            return -1;
        }
        if (optionA > optionB) {
            return 1;
        }
        return 0;
    });
}
/**
 * @param {?} list
 * @return {?}
 */
function removeDuplicatedOptions(list) {
    var _loop_1 = function (i) {
        if (i === 0) {
            return out_i_1 = i, "continue";
        }
        if (list.findIndex(function (op) { return op.value === list[i].value; }) !== i) {
            list.splice(i, 1);
            i--;
        }
        out_i_1 = i;
    };
    var out_i_1;
    for (var i = 0; i < list.length; i++) {
        _loop_1(i);
        i = out_i_1;
    }
}
/**
 * @param {?} list
 * @return {?}
 */
function removeUndefinedAndNullOptions(list) {
    for (var i = 0; i < list.length; i++) {
        if (list[i].value === undefined || list[i].value === null) {
            list.splice(i, 1);
            i--;
        }
    }
}
/**
 * @param {?} value
 * @return {?}
 */
function validValue(value) {
    return (value !== null && value !== undefined && value !== '') || value === false;
}
/**
 * @param {?} url
 * @return {?}
 */
function isExternalLink(url) {
    return url ? url.startsWith('http') : false;
}
/**
 * @param {?} url
 * @return {?}
 */
function openExternalLink(url) {
    window.open(url, '_blank');
}
/**
 * @param {?} link
 * @return {?}
 */
function getFormattedLink(link) {
    /** @type {?} */
    var formattedLink = '';
    // Retira todos os pontos no começo da URL.
    if (link) {
        formattedLink = link.replace(/^(\.)+/g, '');
    }
    // Verifica se foi utilizado uma rota que não comece com barra.
    if (!formattedLink.startsWith('/')) {
        formattedLink = '/'.concat(formattedLink);
    }
    return formattedLink;
}
/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */
function sortValues(leftSide, rightSide, ascending) {
    if (ascending === void 0) { ascending = true; }
    if (ascending) {
        if (leftSide < rightSide) {
            return -1;
        }
        else if (leftSide > rightSide) {
            return 1;
        }
    }
    else if (ascending === false) {
        if (leftSide < rightSide) {
            return 1;
        }
        else if (leftSide > rightSide) {
            return -1;
        }
    }
    return 0;
}
/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */
function validateDateRange(date, dateStart, dateEnd) {
    if (dateStart && dateEnd) {
        return (date >= dateStart && date <= dateEnd);
    }
    else if (dateStart && !dateEnd) {
        return (date >= dateStart);
    }
    else if (!dateStart && dateEnd) {
        return (date <= dateEnd);
    }
    else {
        return true;
    }
}
/**
 * @return {?}
 */
function uuid$1() {
    /**
     * @return {?}
     */
    function hex4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' +
        hex4() + '-' + hex4() + hex4() + hex4();
}
/**
 * @param {?} text
 * @return {?}
 */
function capitalizeFirstLetter(text) {
    return "" + text.charAt(0).toUpperCase() + text.slice(1);
}
/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */

/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
/** @type {?} */
var THF_BUTTON_TYPE_DEFAULT = 'default';
/**
 * \@description
 *
 * O `thf-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
 * ação irreversível (`danger`), como a exclusão de um registro.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre o tipo `danger`.
 */
var ThfButtonBaseComponent = /** @class */ (function () {
    function ThfButtonBaseComponent() {
        this._disabled = false;
        this._loading = false;
        this._small = false;
        this._type = 'default';
        /**
         * Ação que será executada quando o usuário clicar sobre o `thf-button`.
         */
        this.click = new i0.EventEmitter();
    }
    Object.defineProperty(ThfButtonBaseComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        /**
         * @optional
         *
         * @description
         *
         * Exibe um ícone de carregamento à esquerda do _label_ do botão.
         *
         * > Quando esta propriedade estiver habilitada, desabilitará o botão.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Exibe um ícone de carregamento à esquerda do _label_ do botão.
         *
         * > Quando esta propriedade estiver habilitada, desabilitará o botão.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Deixa o botão menor.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Deixa o botão menor.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o estilo do `thf-button`.
         *
         * Valore válidos:
         *  - `default`: estilo padrão do `thf-button`.
         *  - `primary`: deixa o `thf-button` com destaque, deve ser usado para ações primárias.
         *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
         *  - `link`: o `thf-button` recebe o estilo de um link.
         *
         * @default `default`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o estilo do `thf-button`.
         *
         * Valore válidos:
         *  - `default`: estilo padrão do `thf-button`.
         *  - `primary`: deixa o `thf-button` com destaque, deve ser usado para ações primárias.
         *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
         *  - `link`: o `thf-button` recebe o estilo de um link.
         *
         * \@default `default`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = THF_BUTTON_TYPES.includes(value) ? value : THF_BUTTON_TYPE_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o `thf-button` e não permite que o usuário interaja com o mesmo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o `thf-button` e não permite que o usuário interaja com o mesmo.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ThfButtonBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        loading: [{ type: i0.Input, args: ['t-loading',] }],
        icon: [{ type: i0.Input, args: ['t-icon',] }],
        small: [{ type: i0.Input, args: ['t-small',] }],
        type: [{ type: i0.Input, args: ['t-type',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        click: [{ type: i0.Output, args: ['t-click',] }]
    };
    return ThfButtonBaseComponent;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfButtonBaseComponent
 *
 * \@example
 *
 * <example name="thf-button-basic" title="Totvs Button Basic">
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.html"> </file>
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.ts"> </file>
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-button-labs" title="Totvs Button Labs">
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.html"> </file>
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.ts"> </file>
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.po.ts"> </file>
 * </example>
 */
var ThfButtonComponent = /** @class */ (function (_super) {
    __extends$2(ThfButtonComponent, _super);
    function ThfButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    ThfButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.click.emit(null);
    };
    ThfButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-button', template: "<button class=\"thf-button thf-text-ellipsis\" type=\"button\" [class.thf-button-danger]=\"type === 'danger'\" [class.thf-button-link]=\"type === 'link'\" [class.thf-button-primary]=\"type === 'primary'\" [class.thf-button-sm] = \"small\" [class.thf-clickable]=\"type === 'link'\" [disabled]=\"disabled || loading\" (click)=\"onClick()\"> <span *ngIf=\"loading\" class=\"thf-icon thf-button-loading-icon\"></span> <span *ngIf=\"icon\" class=\"thf-icon {{ icon }}\" aria-hidden=\"true\"></span> <span *ngIf=\"label\" class=\"thf-button-label\">{{ label }}</span> </button> "
                },] },
    ];
    return ThfButtonComponent;
}(ThfButtonBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-button.
 */
var ThfButtonModule = /** @class */ (function () {
    function ThfButtonModule() {
    }
    ThfButtonModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfButtonComponent
                    ],
                    exports: [
                        ThfButtonComponent
                    ]
                },] },
    ];
    return ThfButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfButtonGroupToggle = {
    /** Seleção múltipla. */
    Multiple: 'multiple',
    /** Seleção desabilitada. */
    None: 'none',
    /** Seleção única. */
    Single: 'single',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * \@description
 *
 * O componente `thf-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `thf-button-group` com apenas 1 ação, para isso utilize o `thf-button`.
 * - Procure utilizar no máximo 3 ações para cada `thf-button-group`.
 *
 * > As recomendações do `thf-button` também valem para o `thf-button-group`.
 */
var ThfButtonGroupBaseComponent = /** @class */ (function () {
    function ThfButtonGroupBaseComponent() {
        this._small = false;
        this._toggle = THF_TOGGLE_TYPE_DEFAULT;
        /**
         * Lista de botões.
         */
        this.buttons = [];
    }
    Object.defineProperty(ThfButtonGroupBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonGroupBaseComponent.prototype, "toggle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._toggle;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `ThfMultiselectFilterMode`.
         *
         * @default `none`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `ThfMultiselectFilterMode`.
         *
         * \@default `none`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._toggle = ((/** @type {?} */ (Object))).values(ThfButtonGroupToggle).includes(value) ? value : THF_TOGGLE_TYPE_DEFAULT;
            this.checkSelecteds(this._toggle);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    ThfButtonGroupBaseComponent.prototype.onButtonClick = /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    function (buttonClicked, buttonIndex) {
        if (this.toggle === ThfButtonGroupToggle.Single) {
            this.buttons.forEach(function (button, index) {
                return button.selected = index === buttonIndex ? !buttonClicked.selected : false;
            });
        }
        else if (this.toggle === ThfButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    };
    /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    ThfButtonGroupBaseComponent.prototype.checkSelecteds = /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    function (toggleMode) {
        if (toggleMode === ThfButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === ThfButtonGroupToggle.Single) {
            /** @type {?} */
            var hasMoreOneSelected = this.buttons.filter(function (button) { return button.selected; }).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfButtonGroupBaseComponent.prototype.deselectAllButtons = /**
     * @private
     * @return {?}
     */
    function () {
        this.buttons.forEach(function (button) { return button.selected = false; });
    };
    ThfButtonGroupBaseComponent.propDecorators = {
        buttons: [{ type: i0.Input, args: ['t-buttons',] }],
        small: [{ type: i0.Input, args: ['t-small',] }],
        toggle: [{ type: i0.Input, args: ['t-toggle',] }]
    };
    return ThfButtonGroupBaseComponent;
}());

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfButtonGroupBaseComponent
 *
 * \@example
 *
 * <example name="thf-button-group-basic" title="Totvs Button Group Basic">
 *  <file name="sample-thf-button-group-basic/sample-thf-button-group-basic.component.html"> </file>
 *  <file name="sample-thf-button-group-basic/sample-thf-button-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-button-group-labs" title="Totvs Button Group Labs">
 *  <file name="sample-thf-button-group-labs/sample-thf-button-group-labs.component.html"> </file>
 *  <file name="sample-thf-button-group-labs/sample-thf-button-group-labs.component.ts"> </file>
 * </example>
 *
 *
 * <example name="thf-button-group-attendance" title="Totvs Button Group - Attendance">
 *  <file name="sample-thf-button-group-attendance/sample-thf-button-group-attendance.component.html"> </file>
 *  <file name="sample-thf-button-group-attendance/sample-thf-button-group-attendance.component.ts"> </file>
 * </example>
 *
 * <example name="thf-button-group-post" title="Totvs Button Group - Post">
 *  <file name="sample-thf-button-group-post/sample-thf-button-group-post.component.html"> </file>
 *  <file name="sample-thf-button-group-post/sample-thf-button-group-post.component.ts"> </file>
 * </example>
 */
var ThfButtonGroupComponent = /** @class */ (function (_super) {
    __extends$3(ThfButtonGroupComponent, _super);
    function ThfButtonGroupComponent(viewRef) {
        var _this = _super.call(this) || this;
        // Get instance of parent to execute the actions
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    ThfButtonGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-button-group', template: "<div class=\"thf-button-group-container\"> <thf-button *ngFor=\"let button of buttons; index as i\" class=\"thf-sm-12 thf-button-group\" [class.thf-button-group-button-selected]=\"button.selected\" [class.thf-button-group-disabled]=\"button.disabled\" [t-disabled]=\"button.disabled\" [t-icon]=\"button.icon\" [t-label]=\"button.label\" [t-small]=\"small\" (t-click)=\"button.action.call(parentRef, button); onButtonClick(button, i)\"> </thf-button> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfButtonGroupComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };
    return ThfButtonGroupComponent;
}(ThfButtonGroupBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-button-group.
 */
var ThfButtonGroupModule = /** @class */ (function () {
    function ThfButtonGroupModule() {
    }
    ThfButtonGroupModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfButtonModule
                    ],
                    declarations: [
                        ThfButtonGroupComponent
                    ],
                    exports: [
                        ThfButtonGroupComponent
                    ]
                },] },
    ];
    return ThfButtonGroupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfCalendarLocales = ['pt', 'en', 'es'];
/** @type {?} */
var thfCalendarLocaleDefault = 'pt';
/**
 * \@description
 *
 * O `thf-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
var ThfCalendarBaseComponent = /** @class */ (function () {
    function ThfCalendarBaseComponent(thfDate, thfCalendarLangService) {
        this.thfDate = thfDate;
        this.thfCalendarLangService = thfCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeekDays = Array();
        this.monthVisible = false;
        this.yearVisible = false;
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        /**
         * Evento disparado ao selecionar um dia do calendário.
         */
        this.change = new i0.EventEmitter();
    }
    Object.defineProperty(ThfCalendarBaseComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * @default `pt`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * \@default `pt`
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            this._locale = thfCalendarLocales.includes(locale) ? locale : thfCalendarLocaleDefault;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarBaseComponent.prototype, "maxDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} maxDate
         * @return {?}
         */
        function (maxDate) {
            this._maxDate = this.thfDate.getDateForDateRange(maxDate, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarBaseComponent.prototype, "minDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} minDate
         * @return {?}
         */
        function (minDate) {
            this._minDate = this.thfDate.getDateForDateRange(minDate, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCalendarBaseComponent.prototype.initializeLanguage = /**
     * @return {?}
     */
    function () {
        this.thfCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.thfCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.thfCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
    };
    ThfCalendarBaseComponent.propDecorators = {
        locale: [{ type: i0.Input, args: ['t-locale',] }],
        maxDate: [{ type: i0.Input, args: ['t-max-date',] }],
        minDate: [{ type: i0.Input, args: ['t-min-date',] }],
        change: [{ type: i0.Output, args: ['t-change',] }]
    };
    return ThfCalendarBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfCalendarLangService = /** @class */ (function () {
    function ThfCalendarLangService() {
        this.language = 'pt';
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.monthLabel = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.yearLabel = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
    }
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarLangService.prototype.getMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        return this.months[month][this.language];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getMonthLabel = /**
     * @return {?}
     */
    function () {
        return this.monthLabel[this.language];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getMonthsArray = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrMonths = Array();
        for (var i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.language]);
        }
        return arrMonths;
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWeekDays = /**
     * @param {?} day
     * @return {?}
     */
    function (day) {
        return this.shortWeekDays[day][this.language];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWeekDaysArray = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrWeekDays = Array();
        for (var i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.language]);
        }
        return arrWeekDays;
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getYearLabel = /**
     * @return {?}
     */
    function () {
        return this.yearLabel[this.language];
    };
    /**
     * @param {?} language
     * @return {?}
     */
    ThfCalendarLangService.prototype.setLanguage = /**
     * @param {?} language
     * @return {?}
     */
    function (language) {
        if (language && language.length >= 2) {
            language = language.toLowerCase().slice(0, 2);
            this.language = (language === 'pt' || language === 'en' || language === 'es') ? language : 'pt';
        }
    };
    ThfCalendarLangService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfCalendarLangService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfCalendarServiceFirstWeekDayDefault = 0;
var ThfCalendarService = /** @class */ (function () {
    function ThfCalendarService() {
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    ThfCalendarService.prototype.monthDates = /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        var weeks = [];
        /** @type {?} */
        var week = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarService.prototype.monthDays = /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarService.prototype.weekStartDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var startDate = new Date(date.getTime());
        while (startDate.getDay() !== thfCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    ThfCalendarService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfCalendarService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.
 */
var ThfDateService = /** @class */ (function () {
    function ThfDateService() {
        this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])$');
        this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
    }
    /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param minDate Definir `true` caso seja `minDate`.
     * @param maxDate Definir `true` caso seja `maxDate`.
     */
    /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param {?} dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} minDate Definir `true` caso seja `minDate`.
     * @param {?} maxDate Definir `true` caso seja `maxDate`.
     * @return {?}
     */
    ThfDateService.prototype.convertIsoToDate = /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param {?} dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} minDate Definir `true` caso seja `minDate`.
     * @param {?} maxDate Definir `true` caso seja `maxDate`.
     * @return {?}
     */
    function (dateString, minDate, maxDate) {
        if (dateString) {
            var _a = this.getDateFromIso(dateString), year = _a.year, month = _a.month, day = _a.day;
            if (minDate) {
                /** @type {?} */
                var date = new Date(year, month - 1, day, 0, 0, 0);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else if (maxDate) {
                /** @type {?} */
                var date = new Date(year, month - 1, day, 23, 59, 59);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else {
                /** @type {?} */
                var miliseconds = Date.parse(dateString);
                /** @type {?} */
                var timezone = new Date().getTimezoneOffset() * 60000;
                return new Date(miliseconds + timezone);
            }
        }
    };
    /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param date Data no formato `Date`.
     */
    /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param {?} date Data no formato `Date`.
     * @return {?}
     */
    ThfDateService.prototype.convertDateToISO = /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param {?} date Data no formato `Date`.
     * @return {?}
     */
    function (date) {
        if (date) {
            /** @type {?} */
            var fullYear = date.getFullYear();
            /** @type {?} */
            var getMonth = date.getMonth() + 1;
            /** @type {?} */
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            /** @type {?} */
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            /** @type {?} */
            var year = this.formatYear(fullYear);
            return year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    };
    /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param year Ano a ser validado.
     */
    /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param {?} year Ano a ser validado.
     * @return {?}
     */
    ThfDateService.prototype.formatYear = /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param {?} year Ano a ser validado.
     * @return {?}
     */
    function (year) {
        if (year > 999) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return "0" + year;
        }
        if (year > 9 && year < 100) {
            return "00" + year;
        }
        if (year >= 0 && year < 10) {
            return "000" + year;
        }
    };
    /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param isoDate Ano em formato string.
     */
    /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param {?} isoDate Ano em formato string.
     * @return {?}
     */
    ThfDateService.prototype.getDateFromIso = /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param {?} isoDate Ano em formato string.
     * @return {?}
     */
    function (isoDate) {
        /** @type {?} */
        var day = parseInt(isoDate.substring(8, 10), 10);
        /** @type {?} */
        var month = parseInt(isoDate.substring(5, 7), 10);
        /** @type {?} */
        var year = parseInt(isoDate.substring(0, 4), 10);
        return { year: year, month: month, day: day };
    };
    /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     */
    /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param {?} date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     * @return {?}
     */
    ThfDateService.prototype.getDateForDateRange = /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param {?} date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     * @return {?}
     */
    function (date, isMinDate) {
        /** @type {?} */
        var lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];
        if (date instanceof Date) {
            var _a = this.splitDate(date), year = _a.year, month = _a.month, day = _a.day;
            /** @type {?} */
            var validDate = new (Date.bind.apply(Date, [void 0, year, month, day].concat(lastHour)))();
            this.setYearFrom0To100(validDate, year);
            return validDate;
        }
        else if (this.isValidIso(date)) {
            return this.convertIsoToDate(date, isMinDate, !isMinDate);
        }
    };
    /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param dateA primeira data
     * @param dateB segunda data
     */
    /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param {?=} dateA primeira data
     * @param {?=} dateB segunda data
     * @return {?}
     */
    ThfDateService.prototype.isDateRangeValid = /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param {?=} dateA primeira data
     * @param {?=} dateB segunda data
     * @return {?}
     */
    function (dateA, dateB) {
        if (dateA === void 0) { dateA = ''; }
        if (dateB === void 0) { dateB = ''; }
        /** @type {?} */
        var dateASplitted = dateA.split('-').map(function (item) { return parseInt(item, 10); });
        /** @type {?} */
        var dateBSplitted = dateB.split('-').map(function (item) { return parseInt(item, 10); });
        for (var index = 0; index <= dateASplitted.length; index++) {
            if (dateASplitted[index] > dateBSplitted[index]) {
                return true;
            }
            else if (dateASplitted[index] < dateBSplitted[index]) {
                return false;
            }
        }
        return true;
    };
    /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param stringDate Data.
     */
    /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param {?} stringDate Data.
     * @return {?}
     */
    ThfDateService.prototype.isValidIso = /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param {?} stringDate Data.
     * @return {?}
     */
    function (stringDate) {
        return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);
    };
    /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param date Data.
     * @param year .
     */
    /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param {?} date Data.
     * @param {?} year .
     * @return {?}
     */
    ThfDateService.prototype.setYearFrom0To100 = /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param {?} date Data.
     * @param {?} year .
     * @return {?}
     */
    function (date, year) {
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
    };
    /**
     * Método responsável por ordenar duas datas.
     *
     * @param leftSide Primeira data a ser comparada.
     * @param rightSide Segunda data a ser comparada.
     * @param ascending Determina se será em ordem crescente ou decrescente.
     */
    /**
     * Método responsável por ordenar duas datas.
     *
     * @param {?} leftSide Primeira data a ser comparada.
     * @param {?} rightSide Segunda data a ser comparada.
     * @param {?} ascending Determina se será em ordem crescente ou decrescente.
     * @return {?}
     */
    ThfDateService.prototype.sortDate = /**
     * Método responsável por ordenar duas datas.
     *
     * @param {?} leftSide Primeira data a ser comparada.
     * @param {?} rightSide Segunda data a ser comparada.
     * @param {?} ascending Determina se será em ordem crescente ou decrescente.
     * @return {?}
     */
    function (leftSide, rightSide, ascending) {
        return sortValues(this.validateDate(leftSide), this.validateDate(rightSide), ascending);
    };
    /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param date Valor da data.
     */
    /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param {?} date Valor da data.
     * @return {?}
     */
    ThfDateService.prototype.splitDate = /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param {?} date Valor da data.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var year = date.getFullYear();
        /** @type {?} */
        var month = date.getMonth();
        /** @type {?} */
        var day = date.getDate();
        return { year: year, month: month, day: day };
    };
    /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param date Data a ser validada.
     * @param minDate Data inicial.
     * @param maxDate Data final.
     */
    /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param {?} date Data a ser validada.
     * @param {?} minDate Data inicial.
     * @param {?} maxDate Data final.
     * @return {?}
     */
    ThfDateService.prototype.validateDateRange = /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param {?} date Data a ser validada.
     * @param {?} minDate Data inicial.
     * @param {?} maxDate Data final.
     * @return {?}
     */
    function (date, minDate, maxDate) {
        if (minDate && maxDate) {
            return (date >= minDate && date <= maxDate);
        }
        else if (minDate && !maxDate) {
            return (date >= minDate);
        }
        else if (!minDate && maxDate) {
            return (date <= maxDate);
        }
        else {
            return true;
        }
    };
    /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @param date Data que será validada.
     */
    /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @private
     * @param {?} date Data que será validada.
     * @return {?}
     */
    ThfDateService.prototype.validateDate = /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @private
     * @param {?} date Data que será validada.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var validDate = date instanceof Date ? this.convertDateToISO(date) : date;
        return this.isValidIso(validDate) ? validDate : undefined;
    };
    ThfDateService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfDateService;
}());

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfCalendarBaseComponent
 *
 * \@example
 *
 * <example name="thf-calendar-basic" title="Totvs Calendar Basic" >
 *  <file name="sample-thf-calendar-basic/sample-thf-calendar-basic.component.html"> </file>
 *  <file name="sample-thf-calendar-basic/sample-thf-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-calendar-labs" title="Totvs Calendar Labs" >
 *  <file name="sample-thf-calendar-labs/sample-thf-calendar-labs.component.html"> </file>
 *  <file name="sample-thf-calendar-labs/sample-thf-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-calendar-ticket-sales" title="Totvs Calendar - Ticket Sales" >
 *  <file name="sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
var ThfCalendarComponent = /** @class */ (function (_super) {
    __extends$4(ThfCalendarComponent, _super);
    function ThfCalendarComponent(thfCalendarService, thfCalendarLangService, thfDate) {
        var _this = _super.call(this, thfDate, thfCalendarLangService) || this;
        _this.thfCalendarService = thfCalendarService;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    ThfCalendarComponent.prototype.getBackgroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayBackgroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.getDayColor(date, 'background');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayForegroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.getDayColor(date, 'foreground');
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    ThfCalendarComponent.prototype.getForegroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthLabel = /**
     * @return {?}
     */
    function () {
        return this.thfCalendarLangService.getMonthLabel();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearLabel = /**
     * @return {?}
     */
    function () {
        return this.thfCalendarLangService.getYearLabel();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextMonth = /**
     * @return {?}
     */
    function () {
        this.displayMonthNumber < 11 ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1) :
            this.updateDisplay(this.displayYear + 1, 0);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPreviousMonth = /**
     * @return {?}
     */
    function () {
        this.displayMonthNumber > 0 ? this.updateDisplay(this.displayYear, this.displayMonthNumber - 1) :
            this.updateDisplay(this.displayYear - 1, 11);
    };
    // Ao selecionar uma data
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectDate = 
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.date = date;
        this.dateIso = this.thfDate.convertDateToISO(date);
        if (this.propagateChange) {
            this.propagateChange(this.dateIso);
        }
        this.change.emit(this.dateIso);
    };
    // Ao selecionar um mês
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectMonth = 
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    // Ao selecionar um ano
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectYear = 
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCalendarComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} func
     * @return {?}
     */
    ThfCalendarComponent.prototype.registerOnTouched = /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCalendarComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDay = /**
     * @return {?}
     */
    function () {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectMonth = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectYear = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateYear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ThfCalendarComponent.prototype.validateModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfCalendarComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.writeDate(value);
        }
        else {
            this.date = undefined;
            this.updateDate(this.today);
        }
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.addAllYearsInDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        /** @type {?} */
        var i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    };
    /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    ThfCalendarComponent.prototype.equalsDate = /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    // Obtém um array de todos os anos desta década
    // Obtém um array de todos os anos desta década
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDecadeArray = 
    // Obtém um array de todos os anos desta década
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    ThfCalendarComponent.prototype.getColorForDate = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? "thf-calendar-box-" + local + "-selected" :
            "thf-calendar-box-" + local + "-selected-disabled";
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    ThfCalendarComponent.prototype.getColorForDateRange = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? "thf-calendar-box-" + local :
            "thf-calendar-box-" + local + "-disabled";
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    ThfCalendarComponent.prototype.getColorForToday = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? "thf-calendar-box-" + local + "-today" :
            "thf-calendar-box-" + local + "-today-disabled";
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayColor = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        if (this.equalsDate(date, this.date)) {
            return this.getColorForDate(date, local);
        }
        else if (this.equalsDate(date, this.today)) {
            return this.getColorForToday(date, local);
        }
        else {
            return this.getColorForDateRange(date, local);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfCalendarComponent.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        this.date && this.thfDate.isValidIso(this.thfDate.convertDateToISO(this.date)) ?
            this.updateDate(this.date) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDateFromDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.date = date;
        this.onSelectDate(this.date);
    };
    /**
     * @private
     * @param {?} stringDate
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDateFromIso = /**
     * @private
     * @param {?} stringDate
     * @return {?}
     */
    function (stringDate) {
        var _a = this.thfDate.getDateFromIso(stringDate), year = _a.year, month = _a.month, day = _a.day;
        /** @type {?} */
        var date = new Date(year, month - 1, day);
        this.thfDate.setYearFrom0To100(date, year);
        this.date = date;
        this.onSelectDate(this.date);
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date) {
            this.currentMonthNumber = date.getMonth();
            this.currentYear = date.getFullYear();
            this.updateDisplay(this.currentYear, this.currentMonthNumber);
        }
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    };
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDisplay = /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var calendarArray = this.thfCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getDecadeArray(year);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.writeDate = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value instanceof Date ? this.selectDateFromDate(value) : this.writeDateIso(value);
        this.updateDate(this.date);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.writeDateIso = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.thfDate.isValidIso(value) ? this.selectDateFromIso(value) : this.date = undefined;
    };
    ThfCalendarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-calendar', template: "<div class=\"thf-calendar\"> <div *ngIf=\"dayVisible\"> <div class=\"thf-calendar-nav\"> <span class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\" (click)=\"onPreviousMonth()\"></span> <div class=\"thf-calendar-nav-title\" attr-calendar> <span class=\"thf-clickable thf-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\" (click)=\"onNextMonth()\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeekDays\"> {{ day.toLowerCase() }} </div> </div> <div class=\"thf-calendar-content-list-day\"> <div *ngFor=\"let day of displayDays\" class=\"thf-calendar-day\" [ngClass]=\"getDayBackgroundColor(day)\" (click)=\"onSelectDate(day)\"> <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\"> {{ day.getDate() }} </span> </div> </div> </div> </div> <div *ngIf=\"monthVisible\"> <div class=\"thf-calendar-nav\"> <span class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\" (click)=\"updateYear(-1)\"></span> <div class=\"thf-calendar-nav-title\" attr-calendar> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\" (click)=\"updateYear(1)\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getMonthLabel() }} </div> </div> <div class=\"thf-calendar-content-list-month\"> <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\" [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" (click)=\"onSelectMonth(displayYear, i)\" attr-calendar> <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\"> {{ month }} </span> </div> </div> </div> </div> <div *ngIf=\"yearVisible\"> <div class=\"thf-calendar-nav\"> <span class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\" (click)=\"updateYear(-10)\"></span> <div class=\"thf-calendar-nav-title\"> {{ displayStartDecade }} - {{ displayFinalDecade }} </div> <span class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\" (click)=\"updateYear(10)\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getYearLabel() }} </div> </div> <div class=\"thf-calendar-content-list-year\"> <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\" [ngClass]=\"getBackgroundColor(year, currentYear)\" (click)=\"onSelectYear(year, displayMonthNumber)\"attr-calendar> <span [ngClass]=\"getForegroundColor(year, currentYear)\"> {{ year }} </span> </div> </div> </div> </div> </div> ",
                    providers: [
                        ThfCalendarService,
                        ThfCalendarLangService,
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfCalendarComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfCalendarComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfCalendarComponent.ctorParameters = function () { return [
        { type: ThfCalendarService },
        { type: ThfCalendarLangService },
        { type: ThfDateService }
    ]; };
    return ThfCalendarComponent;
}(ThfCalendarBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente `thf-calendar`.
 */
var ThfCalendarModule = /** @class */ (function () {
    function ThfCalendarModule() {
    }
    ThfCalendarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfCalendarComponent],
                    exports: [ThfCalendarComponent],
                    providers: [
                        ThfCalendarLangService,
                        ThfCalendarService
                    ]
                },] },
    ];
    return ThfCalendarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfChartType = {
    /**
     * **Gráfico pizza:** utilizado para exibir proporções de valores a partir de um todo.
     */
    Pie: 'pie',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfChartDefaultHeight = 400;
/** @type {?} */
var thfChartTypeDefault = ThfChartType.Pie;
/** @type {?} */
var thfChartMinHeight = 200;
/**
 * \@description
 *
 * O `thf-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Este componente também possibilita a definição das seguintes propriedades: altura do gráfico; série(s) que irão compor o gráfico;
 * título do gráfico; e tipo de gráfico.
 *
 * Além das definições de propriedades, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 *
 * @abstract
 */
var ThfChartBaseComponent = /** @class */ (function () {
    function ThfChartBaseComponent() {
        this._height = thfChartDefaultHeight;
        this._type = thfChartTypeDefault;
        this.thfChartType = ThfChartType;
        /**
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesClick = new i0.EventEmitter();
        /**
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesHover = new i0.EventEmitter();
    }
    Object.defineProperty(ThfChartBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * @default `400px`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * \@default `400px`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var intValue = convertToInt(value);
            /** @type {?} */
            var height;
            if (isTypeof(value, 'number')) {
                height = intValue <= thfChartMinHeight ? thfChartMinHeight : intValue;
            }
            else {
                height = thfChartDefaultHeight;
            }
            this._height = height;
            this.rebuildComponent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfChartBaseComponent.prototype, "type", {
        // TODO quando houver a necessidade de informar um type.
        // /**
        //  * @optional
        //  *
        //  * @description
        //  *
        //  * Define o tipo de gráfico.
        //  *
        //  * > Veja os valores válidos no *enum* `ThfChartType`.
        //  *
        //  * @default `ThfChartType.Pie`
        //  */
        // @Input('t-type') set type(value: ThfChartType) {
        //   this._type = (<any>Object).values(ThfChartType).includes(value) ? value : thfChartTypeDefault;
        // }
        get: 
        // TODO quando houver a necessidade de informar um type.
        // /**
        //  * @optional
        //  *
        //  * @description
        //  *
        //  * Define o tipo de gráfico.
        //  *
        //  * > Veja os valores válidos no *enum* `ThfChartType`.
        //  *
        //  * @default `ThfChartType.Pie`
        //  */
        // @Input('t-type') set type(value: ThfChartType) {
        //   this._type = (<any>Object).values(ThfChartType).includes(value) ? value : thfChartTypeDefault;
        // }
        /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ThfChartBaseComponent.prototype.onSeriesClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesClick.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfChartBaseComponent.prototype.onSeriesHover = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesHover.emit(event);
    };
    ThfChartBaseComponent.propDecorators = {
        height: [{ type: i0.Input, args: ['t-height',] }],
        series: [{ type: i0.Input, args: ['t-series',] }],
        title: [{ type: i0.Input, args: ['t-title',] }],
        seriesClick: [{ type: i0.Output, args: ['t-series-click',] }],
        seriesHover: [{ type: i0.Output, args: ['t-series-hover',] }]
    };
    return ThfChartBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Array de cores para gráficos definido pela equipe de UX Totvs.
/** @type {?} */
var ThfChartColors = [
    ['#29B6C5'],
    ['#0C6C94', '#29B6C5'],
    ['#0C6C94', '#29B6C5', '#C9ECF0'],
    ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2'],
    ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2', '#C9ECF0'],
    ['#0C6C94', '#00A5C5', '#0082A8', '#31628D', '#364473', '#32285C'],
    ['#0C6C94', '#00AACB', '#018DAE', '#277099', '#325783', '#35426E', '#32285D'],
    ['#0C6C94', '#00AFCE', '#0194B6', '#117FA2', '#0088AC', '#23789F', '#2B6992', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#36436F', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#36436F', '#333565', '#32285C'],
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfChartAnimationDurationTime = 1500;
/** @type {?} */
var thfChartAngleStepInterval = Math.PI * 2 / Math.floor(thfChartAnimationDurationTime / 60);
/** @type {?} */
var thfChartCompleteCircle = 0.0001;
/** @type {?} */
var thfChartPadding = 24;
/** @type {?} */
var thfChartStartAngle = -Math.PI / 2;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var Padding = 24;
/**
 * @abstract
 */
var ThfChartDynamicTypeComponent = /** @class */ (function () {
    function ThfChartDynamicTypeComponent() {
        this.onSerieClick = new rxjs.Subject();
        this.onSerieHover = new rxjs.Subject();
        this.series = [];
    }
    /**
     * @param {?} chartWrapperElement
     * @param {?} chartHeaderElement
     * @param {?} chartLegendElement
     * @return {?}
     */
    ThfChartDynamicTypeComponent.prototype.calculateSVGContainerDimensions = /**
     * @param {?} chartWrapperElement
     * @param {?} chartHeaderElement
     * @param {?} chartLegendElement
     * @return {?}
     */
    function (chartWrapperElement, chartHeaderElement, chartLegendElement) {
        /** @type {?} */
        var svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - (Padding * 2);
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    };
    /**
     * @return {?}
     */
    ThfChartDynamicTypeComponent.prototype.calculateTotalValue = /**
     * @return {?}
     */
    function () {
        this.totalValue = this.series.reduce(function (previousValue, serie) { return previousValue + serie.value; }, 0);
    };
    ThfChartDynamicTypeComponent.propDecorators = {
        chartBody: [{ type: i0.ViewChild, args: ['chartBody',] }],
        svgContainer: [{ type: i0.ViewChild, args: ['svgContainer',] }]
    };
    return ThfChartDynamicTypeComponent;
}());

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfChartPieComponent = /** @class */ (function (_super) {
    __extends$5(ThfChartPieComponent, _super);
    function ThfChartPieComponent(el, ngZone, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.ngZone = ngZone;
        _this.renderer = renderer;
        _this.chartItemsEndAngleList = [];
        _this.svgPathElementsList = [];
        return _this;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    ThfChartPieComponent.calculateEndAngle = /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    function (value, totalValue) {
        return value / totalValue * (Math.PI * 2);
    };
    /**
     * @return {?}
     */
    ThfChartPieComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeWindowResizeListener();
        this.removeWindowScrollListener();
        this.animationRunning = false;
    };
    /**
     * @return {?}
     */
    ThfChartPieComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.chartInitSetup();
        this.setEventListeners();
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.animationSetup = /**
     * @private
     * @return {?}
     */
    function () {
        this.chartItemStartAngle = thfChartStartAngle;
        this.chartItemEndAngle = this.chartItemsEndAngleList[0];
        this.animationRunning = true;
        this.drawPathInit();
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.calculateAngleRadians = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.series.forEach(function (serie, index) {
            return _this.chartItemsEndAngleList[index] = ThfChartPieComponent.calculateEndAngle(serie.value, _this.totalValue);
        });
    };
    /**
     * @private
     * @param {?} angleCurrentPosition
     * @return {?}
     */
    ThfChartPieComponent.prototype.calculateCurrentEndAngle = /**
     * @private
     * @param {?} angleCurrentPosition
     * @return {?}
     */
    function (angleCurrentPosition) {
        /** @type {?} */
        var isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
        if (isSerieDrawCompleted) {
            return (this.chartItemStartAngle + this.chartItemEndAngle) - thfChartCompleteCircle;
        }
        else {
            return this.chartItemStartAngle + angleCurrentPosition;
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfChartPieComponent.prototype.changeTooltipPosition = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.tooltipElement && this.tooltipElement.classList.contains('thf-invisible')) {
            this.showTooltip();
        }
        /** @type {?} */
        var tooltipPositions = this.setTooltipPositions(event);
        this.renderer.setStyle(this.tooltipElement, 'left', tooltipPositions.left + "px");
        this.renderer.setStyle(this.tooltipElement, 'top', tooltipPositions.top + "px");
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.chartInitSetup = /**
     * @private
     * @return {?}
     */
    function () {
        this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
        this.calculateTotalValue();
        this.calculateAngleRadians();
        this.createSVGElements();
        this.animationSetup();
    };
    /**
     * @private
     * @param {?} index
     * @param {?} serie
     * @param {?} svgPathsWrapper
     * @return {?}
     */
    ThfChartPieComponent.prototype.createPath = /**
     * @private
     * @param {?} index
     * @param {?} serie
     * @param {?} svgPathsWrapper
     * @return {?}
     */
    function (index, serie, svgPathsWrapper) {
        /** @type {?} */
        var svgPath = this.renderer.createElement('svg:path', 'svg');
        this.renderer.setAttribute(svgPath, 'class', 'thf-path-item');
        this.renderer.setAttribute(svgPath, 'fill', this.colors[index]);
        this.renderer.setAttribute(svgPath, 'data-tooltip-category', serie.category);
        this.renderer.setAttribute(svgPath, 'data-tooltip-value', serie.value);
        svgPathsWrapper.appendChild(svgPath);
        this.renderer.appendChild(this.svgElement, svgPathsWrapper);
        this.svgPathElementsList.push(svgPath);
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.createPaths = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
        this.series.forEach(function (serie, index) { return _this.createPath(index, serie, svgPathsWrapper); });
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.createSVGElements = /**
     * @private
     * @return {?}
     */
    function () {
        this.svgElement = this.renderer.createElement('svg:svg', 'svg');
        this.renderer.setAttribute(this.svgElement, 'viewBox', "0 0 " + this.chartWrapper + " " + this.centerX * 2);
        this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', 'xMidYMin meet');
        this.renderer.setAttribute(this.svgElement, 'class', 'thf-chart-svg-element');
        this.renderer.setAttribute(this.svgElement, 'width', "" + (this.chartWrapper - thfChartPadding * 2));
        this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
        this.svgContainer.nativeElement.appendChild(this.svgElement);
        this.createPaths();
    };
    /**
     * @private
     * @param {?} path
     * @param {?} chartItemStartAngle
     * @param {?} chartItemEndAngle
     * @return {?}
     */
    ThfChartPieComponent.prototype.drawPath = /**
     * @private
     * @param {?} path
     * @param {?} chartItemStartAngle
     * @param {?} chartItemEndAngle
     * @return {?}
     */
    function (path, chartItemStartAngle, chartItemEndAngle) {
        /** @type {?} */
        var largeArc = (chartItemEndAngle - chartItemStartAngle) % (Math.PI * 2) > Math.PI ? 1 : 0;
        /** @type {?} */
        var startX = this.centerX + Math.cos(chartItemStartAngle) * this.centerX;
        /** @type {?} */
        var startY = this.centerX + Math.sin(chartItemStartAngle) * this.centerX;
        /** @type {?} */
        var endX = this.centerX + Math.cos(chartItemEndAngle) * this.centerX;
        /** @type {?} */
        var endY = this.centerX + Math.sin(chartItemEndAngle) * this.centerX;
        /** @type {?} */
        var pathCoordinates = [
            'M', startX, startY,
            'A', this.centerX, this.centerX, 0, largeArc, 1, endX, endY,
            'L', this.centerX, this.centerX,
            'Z'
        ].join(' ');
        return path.setAttribute('d', pathCoordinates);
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.drawPathInit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.animationRunning) {
            return;
        }
        else {
            this.ngZone.runOutsideAngular(function () { return _this.drawSeries(); });
        }
    };
    /**
     * @private
     * @param {?=} currentSerieIndex
     * @param {?=} angleCurrentPosition
     * @return {?}
     */
    ThfChartPieComponent.prototype.drawSeries = /**
     * @private
     * @param {?=} currentSerieIndex
     * @param {?=} angleCurrentPosition
     * @return {?}
     */
    function (currentSerieIndex, angleCurrentPosition) {
        if (currentSerieIndex === void 0) { currentSerieIndex = 0; }
        if (angleCurrentPosition === void 0) { angleCurrentPosition = 0; }
        /** @type {?} */
        var isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
        /** @type {?} */
        var isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
        if (isFinishedDrawingAllSeries) {
            return;
        }
        if (isFinishedDrawingCurrentSeries) {
            this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
            currentSerieIndex++;
            this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
            angleCurrentPosition = 0;
        }
        else {
            angleCurrentPosition += thfChartAngleStepInterval;
            this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
        }
        window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfChartPieComponent.prototype.emitEventOnEnter = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onSerieHover.next(event);
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.onMouseClick = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var serieOnClick = { category: this.chartElementCategory, value: this.chartElementValue };
        this.onSerieClick.next(serieOnClick);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfChartPieComponent.prototype.onMouseEnter = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.tooltipElement = this.chartBody.nativeElement.lastChild;
        this.chartElementCategory = event.target.getAttributeNS(null, 'data-tooltip-category');
        this.chartElementValue = event.target.getAttributeNS(null, 'data-tooltip-value');
        this.tooltipText = this.chartElementCategory + ": " + this.chartElementValue;
        this.showTooltip();
        this.changeTooltipPosition(event);
        /** @type {?} */
        var serieOnEnter = { category: this.chartElementCategory, value: this.chartElementValue };
        this.emitEventOnEnter(serieOnEnter);
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.onWindowResize = /**
     * @private
     * @return {?}
     */
    function () {
        this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
        this.renderer.setAttribute(this.svgElement, 'width', "" + (this.chartWrapper - thfChartPadding * 2));
        this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.removeTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.tooltipElement) {
            this.renderer.addClass(this.tooltipElement, 'thf-invisible');
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.removeWindowResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.windowResizeListener) {
            this.windowResizeListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.removeWindowScrollListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.windowScrollListener) {
            this.windowScrollListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.setEventListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var chartSeries = this.el.nativeElement.querySelectorAll('.thf-path-item');
        chartSeries = Array.from(chartSeries);
        chartSeries.forEach(function (serie) {
            _this.renderer.listen(serie, 'click', _this.onMouseClick.bind(_this));
            _this.renderer.listen(serie, 'mouseenter', _this.onMouseEnter.bind(_this));
            _this.renderer.listen(serie, 'mousemove', _this.changeTooltipPosition.bind(_this));
            _this.renderer.listen(serie, 'mouseleave', _this.removeTooltip.bind(_this));
        });
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
        this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithThfPage(), 'scroll', this.removeTooltip.bind(this));
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.checkingIfScrollsWithThfPage = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var thfPageContent = document.getElementsByClassName('thf-page-content');
        return thfPageContent.length ? thfPageContent[0] : window;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfChartPieComponent.prototype.setTooltipPositions = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var displacement = 8;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartPieComponent.prototype.showTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.removeClass(this.tooltipElement, 'thf-invisible');
    };
    ThfChartPieComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-chart-pie', template: "<div #chartBody class=\"thf-chart-body\"> <div #svgContainer class=\"thf-chart-svg-container\"></div> <div class=\"thf-chart-tooltip thf-tooltip thf-invisible\"> <div class=\"thf-tooltip-arrow thf-arrow-bottom\"></div> <div class=\"thf-tooltip-content\">{{ tooltipText }}</div> </div> </div>"
                },] },
    ];
    /** @nocollapse */
    ThfChartPieComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.NgZone },
        { type: i0.Renderer2 }
    ]; };
    return ThfChartPieComponent;
}(ThfChartDynamicTypeComponent));

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfChartBaseComponent
 *
 * \@example
 *
 * <example name="thf-chart-basic" title="Totvs Chart Basic">
 *  <file name="sample-thf-chart-basic/sample-thf-chart-basic.component.html"> </file>
 *  <file name="sample-thf-chart-basic/sample-thf-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-chart-labs" title="Totvs Chart Labs">
 *  <file name="sample-thf-chart-labs/sample-thf-chart-labs.component.html"> </file>
 *  <file name="sample-thf-chart-labs/sample-thf-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-chart-coffee-ranking" title="Totvs Chart - Coffee Ranking">
 *  <file name="sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
var ThfChartComponent = /** @class */ (function (_super) {
    __extends$6(ThfChartComponent, _super);
    function ThfChartComponent(changeDetector, componentFactoryResolver, differs) {
        var _a;
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.differs = differs;
        _this.calculatedElement = false;
        _this.initialized = false;
        _this.windowResizeListener = new rxjs.Subject();
        _this.mappings = (_a = {}, _a[ThfChartType.Pie] = ThfChartPieComponent, _a);
        _this.onResize = function () { return _this.windowResizeListener.next(); };
        _this.differ = _this.differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
    };
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (charWrapperWidth && !this.calculatedElement && this.initialized) {
            this.calculatedElement = true;
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
        this.checkingForSerieChanges();
    };
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeWindowResizeListener();
    };
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getSeriesColor();
    };
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.rebuildComponent = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.dynamicComponentSetting();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.checkingForSerieChanges = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.componentRef && this.differ) {
            /** @type {?} */
            var changeSeries = this.differ.diff(this.series);
            if (changeSeries) {
                this.getSeriesColor();
                this.rebuildComponent();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.createComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var componentType = this.getComponentType(this.type);
        /** @type {?} */
        var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        /** @type {?} */
        var instance = (/** @type {?} */ (this.componentRef.instance));
        this.setChartProperties(instance);
        return instance;
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.dynamicComponentSetting = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    };
    /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    ThfChartComponent.prototype.getComponentType = /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    function (typeName) {
        return this.mappings[typeName];
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.getSeriesColor = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var colorsLength = ThfChartColors.length - 1;
        if (!this.series) {
            return this.colors = ThfChartColors[colorsLength];
        }
        /** @type {?} */
        var seriesLength = this.series.length - 1;
        if (seriesLength > colorsLength) {
            /** @type {?} */
            var colors = ThfChartColors[colorsLength];
            // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
            /** @type {?} */
            var quantityDuplicates = seriesLength / colorsLength;
            for (var i = 1; i <= quantityDuplicates; i++) {
                colors = colors.concat(ThfChartColors[colorsLength]);
            }
            return this.colors = colors;
        }
        return this.colors = ThfChartColors[seriesLength];
    };
    /**
     * @private
     * @return {?}
     */
    ThfChartComponent.prototype.removeWindowResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.onResize) {
            this.onResize = function () { };
        }
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    ThfChartComponent.prototype.setChartProperties = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
        instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;
        instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        instance.colors = this.colors;
        instance.height = this.height;
        instance.series = this.series || [];
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    ThfChartComponent.prototype.setClickSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        instance.onSerieClick.subscribe(function (event) {
            _this.onSeriesClick(event);
        });
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    ThfChartComponent.prototype.setHoverSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        instance.onSerieHover.subscribe(function (event) {
            _this.onSeriesHover(event);
        });
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    ThfChartComponent.prototype.setResizeListenerSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        this.windowResizeListener.subscribe(function () {
            instance.chartHeader = _this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = _this.chartLegend.nativeElement.offsetHeight;
            instance.chartWrapper = _this.chartWrapper.nativeElement.offsetWidth;
        });
    };
    ThfChartComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-chart', template: "<div #chartWrapper class=\"thf-chart-wrapper\"> <div #chartHeader class=\"thf-chart-header\"> <div class=\"thf-chart-title\">{{ title }}</div> </div> <ng-template #chartContainer></ng-template> <div #chartLegend class=\"thf-chart-legend\"> <div class=\"thf-chart-legend-container\"> <div class=\"thf-chart-legend-item\" *ngFor=\"let serie of series; let i = index\"> <div class=\"thf-chart-legend-square\" [style.background]=\"colors[i]\"></div> <span class=\"thf-chart-legend-text\">{{ serie.category }}</span> </div> </div> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfChartComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.ComponentFactoryResolver },
        { type: i0.IterableDiffers }
    ]; };
    ThfChartComponent.propDecorators = {
        chartContainer: [{ type: i0.ViewChild, args: ['chartContainer', { read: i0.ViewContainerRef },] }],
        chartHeader: [{ type: i0.ViewChild, args: ['chartHeader',] }],
        chartLegend: [{ type: i0.ViewChild, args: ['chartLegend',] }],
        chartWrapper: [{ type: i0.ViewChild, args: ['chartWrapper',] }],
        onResize: [{ type: i0.HostListener, args: ['window:resize', ['$event'],] }]
    };
    return ThfChartComponent;
}(ThfChartBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `thf-chart`.
 */
var ThfChartModule = /** @class */ (function () {
    function ThfChartModule() {
    }
    ThfChartModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                    ],
                    declarations: [
                        ThfChartComponent,
                        ThfChartPieComponent,
                    ],
                    entryComponents: [
                        ThfChartPieComponent
                    ],
                    exports: [
                        ThfChartComponent,
                    ]
                },] },
    ];
    return ThfChartModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O `thf-container` é um componente que visa facilitar o agrupamento de conteúdos.
 * Por padrão o mesmo exibe um efeito de sombra ao seu redor e um espaçamento em sua parte interna, os quais podem ser
 * desabilitados. Além disso, sua altura acompanha a quantidade do conteúdo, porém pode ser fixada. Para controlar sua
 * largura, utilize o [Grid System](/guides/grid-system), assim possibilitando o tratamento para diferentes resoluções.
 */
var ThfContainerBaseComponent = /** @class */ (function () {
    function ThfContainerBaseComponent() {
        this._noPadding = false;
        this._noShadow = false;
    }
    Object.defineProperty(ThfContainerBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do `thf-container`.
         *
         * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do `thf-container`.
         *
         * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = convertToInt(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfContainerBaseComponent.prototype, "noPadding", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noPadding;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o espaçamento interno do `thf-container`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o espaçamento interno do `thf-container`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noPadding = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfContainerBaseComponent.prototype, "noShadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noShadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o sombreamento em torno do `thf-container`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o sombreamento em torno do `thf-container`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noShadow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ThfContainerBaseComponent.propDecorators = {
        height: [{ type: i0.Input, args: ['t-height',] }],
        noPadding: [{ type: i0.Input, args: ['t-no-padding',] }],
        noShadow: [{ type: i0.Input, args: ['t-no-shadow',] }]
    };
    return ThfContainerBaseComponent;
}());

var __extends$7 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfContainerBaseComponent
 *
 * \@example
 *
 * <example name="thf-container-basic" title="Totvs Container Basic">
 *  <file name="sample-thf-container-basic/sample-thf-container-basic.component.html"> </file>
 *  <file name="sample-thf-container-basic/sample-thf-container-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-container-labs" title="Totvs Container Labs">
 *  <file name="sample-thf-container-labs/sample-thf-container-labs.component.html"> </file>
 *  <file name="sample-thf-container-labs/sample-thf-container-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-container-dashboard" title="Totvs Container - Dashboard">
 *  <file name="sample-thf-container-dashboard/sample-thf-container-dashboard.component.html"> </file>
 *  <file name="sample-thf-container-dashboard/sample-thf-container-dashboard.component.ts"> </file>
 *  <file name="sample-thf-container-dashboard/sample-thf-container-dashboard.service.ts"> </file>
 * </example>
 */
var ThfContainerComponent = /** @class */ (function (_super) {
    __extends$7(ThfContainerComponent, _super);
    function ThfContainerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-container', template: "<div class=\"thf-container\" [class.thf-container-no-padding]=\"noPadding\" [class.thf-container-no-shadow]=\"noShadow\" [style.height]=\"height ? height + 'px' : 'auto'\"> <ng-content></ng-content> </div> "
                },] },
    ];
    return ThfContainerComponent;
}(ThfContainerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `thf-container`.
 */
var ThfContainerModule = /** @class */ (function () {
    function ThfContainerModule() {
    }
    ThfContainerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        ThfContainerComponent
                    ],
                    declarations: [
                        ThfContainerComponent
                    ]
                },] },
    ];
    return ThfContainerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_DISCLAIMER_TYPES = ['default', 'danger'];
/** @type {?} */
var THF_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente thf-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no thf-multi-select.
 *
 */
var ThfDisclaimerBaseComponent = /** @class */ (function () {
    function ThfDisclaimerBaseComponent() {
        this._type = 'default';
        this._hideClose = false;
        this.showDisclaimer = true;
        /**
         * Evento disparado ao fechar o disclaimer.
         * Para este evento será passado como parâmetro um objeto com value, label e property.
         */
        this.closeAction = new i0.EventEmitter();
    }
    Object.defineProperty(ThfDisclaimerBaseComponent.prototype, "hideClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideClose;
        },
        /**
         * @description
         *
         * Esta propriedade esconde o botão para fechamento do thf-disclaimer, ao utilizar esta propriedade
         * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
         *
         * @default false
         */
        set: /**
         * \@description
         *
         * Esta propriedade esconde o botão para fechamento do thf-disclaimer, ao utilizar esta propriedade
         * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
         *
         * \@default false
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideClose = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDisclaimerBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @description
         *
         * Tipo do thf-disclaimer. Pode ser 'default' ou 'danger'.
         *
         * @default default
         * @optional
         */
        set: /**
         * \@description
         *
         * Tipo do thf-disclaimer. Pode ser 'default' ou 'danger'.
         *
         * \@default default
         * \@optional
         * @param {?} type
         * @return {?}
         */
        function (type) {
            this._type = THF_DISCLAIMER_TYPES.includes(type) ? type : THF_DISCLAIMER_DEFAULT_TYPE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfDisclaimerBaseComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    };
    /**
     * @return {?}
     */
    ThfDisclaimerBaseComponent.prototype.getLabel = /**
     * @return {?}
     */
    function () {
        return this.label ? this.label : this.value;
    };
    ThfDisclaimerBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        value: [{ type: i0.Input, args: ['t-value',] }],
        property: [{ type: i0.Input, args: ['t-property',] }],
        hideClose: [{ type: i0.Input, args: ['t-hide-close',] }],
        closeAction: [{ type: i0.Output, args: ['t-close-action',] }],
        type: [{ type: i0.Input, args: ['t-type',] }]
    };
    return ThfDisclaimerBaseComponent;
}());

var __extends$8 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfDisclaimerBaseComponent
 *
 * \@examplePrivate
 *
 * <example-private name="thf-disclaimer" title="Totvs Disclaimer">
 *   <file name="sample-thf-disclaimer.component.html"> </file>
 *   <file name="sample-thf-disclaimer.component.ts"> </file>
 * </example-private>
 */
var ThfDisclaimerComponent = /** @class */ (function (_super) {
    __extends$8(ThfDisclaimerComponent, _super);
    function ThfDisclaimerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDisclaimerComponent.prototype.onKeyPress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isKeyCodeEnter(event)) {
            this.close();
        }
    };
    ThfDisclaimerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-disclaimer', template: "<div *ngIf=\"showDisclaimer === true\" class=\"thf-disclaimer\"> <span class=\"thf-disclaimer-label\" [class.thf-disclaimer-label-danger]=\"type === 'danger'\"> {{getLabel()}} </span> <span *ngIf=\"hideClose === false\" class=\"thf-disclaimer-remove thf-icon thf-icon-close thf-clickable\" tabindex=\"0\" [class.thf-disclaimer-remove-danger]=\"type === 'danger'\" (click)=\"close()\" (keydown)=\"onKeyPress($event)\"> </span> </div> "
                },] },
    ];
    return ThfDisclaimerComponent;
}(ThfDisclaimerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-disclaimer.
 */
var ThfDisclaimerModule = /** @class */ (function () {
    function ThfDisclaimerModule() {
    }
    ThfDisclaimerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfDisclaimerComponent],
                    exports: [ThfDisclaimerComponent]
                },] },
    ];
    return ThfDisclaimerModule;
}());

var __assign$1 = (undefined && undefined.__assign) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' }
};
/**
 * \@description
 *
 * O componente `thf-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [thf-page-list](/documentation/thf-page-list).
 */
var ThfDisclaimerGroupBaseComponent = /** @class */ (function () {
    function ThfDisclaimerGroupBaseComponent(differs) {
        this._disclaimers = [];
        this._hideRemoveAll = false;
        this.previousDisclaimers = [];
        this.literals = __assign$1({}, thfDisclaimerGroupLiteralsDefault[thfLocaleDefault], thfDisclaimerGroupLiteralsDefault[browserLanguage()]);
        /**
         * Função que será disparada quando a lista de *disclaimers* for modificada.
         */
        this.change = new i0.EventEmitter();
        this.differ = differs.find([]).create(null);
    }
    Object.defineProperty(ThfDisclaimerGroupBaseComponent.prototype, "disclaimers", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disclaimers;
        },
        /** Lista de *disclaimers*. */
        set: /**
         * Lista de *disclaimers*.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.previousDisclaimers = this.disclaimers.slice();
            this._disclaimers = this.checkDisclaimers(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideRemoveAll;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o botão para remover todos os *disclaimers* do grupo.
         *
         * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta o botão para remover todos os *disclaimers* do grupo.
         *
         * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideRemoveAll = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkChanges();
    };
    /**
     * @param {?} disclaimer
     * @param {?=} emitChange
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.closeItem = /**
     * @param {?} disclaimer
     * @param {?=} emitChange
     * @return {?}
     */
    function (disclaimer, emitChange) {
        if (emitChange === void 0) { emitChange = true; }
        /** @type {?} */
        var itemIndex = this.disclaimers.findIndex(function (d) { return d['$id'] === disclaimer['$id']; });
        this.disclaimers.splice(itemIndex, 1);
        if (emitChange) {
            this.emitChangeDisclaimers();
        }
    };
    /**
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.isRemoveAll = /**
     * @return {?}
     */
    function () {
        return !this.hideRemoveAll && this.disclaimers.filter(function (c) { return !c.hideClose; }).length > 1;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.onKeyPress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    };
    /**
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.removeAllItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var removeItems = [];
        this.disclaimers.forEach(function (disclaimer) {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        });
        removeItems.forEach(function (disclaimer) { return _this.closeItem(disclaimer, false); });
        this.emitChangeDisclaimers();
    };
    /**
     * @private
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.checkChanges = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.checkDisclaimers = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (var i = 0; i < disclaimers.length; i++) {
                /** @type {?} */
                var disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = uuid.v4();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.disclaimersAreChanged = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        var _this = this;
        /** @type {?} */
        var currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some(function (disclaimer, index) { return disclaimer.value !== _this.previousDisclaimers[index].value
            || disclaimer.property !== _this.previousDisclaimers[index].property; });
    };
    /**
     * @private
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.emitChangeDisclaimers = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.change.emit(_this.disclaimers);
        });
        this.previousDisclaimers = this._disclaimers.slice();
    };
    ThfDisclaimerGroupBaseComponent.propDecorators = {
        disclaimers: [{ type: i0.Input, args: ['t-disclaimers',] }],
        hideRemoveAll: [{ type: i0.Input, args: ['t-hide-remove-all',] }],
        title: [{ type: i0.Input, args: ['t-title',] }],
        change: [{ type: i0.Output, args: ['t-change',] }]
    };
    return ThfDisclaimerGroupBaseComponent;
}());

var __extends$9 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfDisclaimerGroupBaseComponent
 *
 * \@example
 *
 * <example name="thf-disclaimer-group-basic" title="Totvs Disclaimer Group Basic">
 *   <file name="sample-thf-disclaimer-group-basic/sample-thf-disclaimer-group-basic.component.html"> </file>
 *   <file name="sample-thf-disclaimer-group-basic/sample-thf-disclaimer-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-disclaimer-group-labs" title="Totvs Disclaimer Group Labs">
 *   <file name="sample-thf-disclaimer-group-labs/sample-thf-disclaimer-group-labs.component.html"> </file>
 *   <file name="sample-thf-disclaimer-group-labs/sample-thf-disclaimer-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-disclaimer-group-sw-planets" title="Totvs Disclaimer Group - Star Wars Planets">
 *   <file name="sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.component.html"> </file>
 *   <file name="sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.component.ts"> </file>
 *   <file name="sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.service.ts"> </file>
 * </example>
 *
 */
var ThfDisclaimerGroupComponent = /** @class */ (function (_super) {
    __extends$9(ThfDisclaimerGroupComponent, _super);
    function ThfDisclaimerGroupComponent(differs) {
        return _super.call(this, differs) || this;
    }
    ThfDisclaimerGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-disclaimer-group', template: "<div class=\"thf-disclaimer-group\" *ngIf=\"disclaimers.length > 0\" > <div class=\"thf-disclaimer-group-title\">{{ title }}</div> <thf-disclaimer-remove *ngIf=\"isRemoveAll()\" class=\"thf-disclaimer-group-padding\" [t-label]=\"literals.removeAll\" (keydown)=\"onKeyPress($event)\" (t-remove-all-action)=\"removeAllItems()\"> </thf-disclaimer-remove> <thf-disclaimer *ngFor=\"let disclaimer of disclaimers\" class=\"thf-disclaimer-group-padding\" [t-hide-close]=\"disclaimer.hideClose\" [t-label]=\"disclaimer.label\" [t-property]=\"disclaimer.property\" [t-value]=\"disclaimer.value\" (t-close-action)=\"closeItem(disclaimer)\"> </thf-disclaimer> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfDisclaimerGroupComponent.ctorParameters = function () { return [
        { type: i0.IterableDiffers }
    ]; };
    return ThfDisclaimerGroupComponent;
}(ThfDisclaimerGroupBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Este é um componente interno utilizado pelo thf-disclaimer-group, se comporta como um botão e recebe uma ação para remover todos os
 * thf-disclaimers do grupo.
 */
var ThfDisclaimerRemoveComponent = /** @class */ (function () {
    function ThfDisclaimerRemoveComponent() {
        /**
         * Ação para remover todos.
         */
        this.removeAllAction = new i0.EventEmitter();
    }
    // Emite a ação de remover todos.
    // Emite a ação de remover todos.
    /**
     * @return {?}
     */
    ThfDisclaimerRemoveComponent.prototype.removeAction = 
    // Emite a ação de remover todos.
    /**
     * @return {?}
     */
    function () {
        this.removeAllAction.emit();
    };
    ThfDisclaimerRemoveComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-disclaimer-remove', template: "<thf-disclaimer class=\"thf-clickable\" tabindex=\"0\" t-hide-close=\"true\" t-type=\"danger\" [t-label]=\"label\" (click)=\"removeAction()\"> </thf-disclaimer> "
                },] },
    ];
    ThfDisclaimerRemoveComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        removeAllAction: [{ type: i0.Output, args: ['t-remove-all-action',] }]
    };
    return ThfDisclaimerRemoveComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-disclaimer-group.
 */
var ThfDisclaimerGroupModule = /** @class */ (function () {
    function ThfDisclaimerGroupModule() {
    }
    ThfDisclaimerGroupModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfDisclaimerModule
                    ],
                    declarations: [ThfDisclaimerGroupComponent, ThfDisclaimerRemoveComponent],
                    exports: [ThfDisclaimerGroupComponent]
                },] },
    ];
    return ThfDisclaimerGroupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso é indicado para definição
 * e organização de informações em uma tela e sua característica é semelhante à tag `<hr>`.
 */
var ThfDividerBaseComponent = /** @class */ (function () {
    function ThfDividerBaseComponent() {
    }
    ThfDividerBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }]
    };
    return ThfDividerBaseComponent;
}());

var __extends$10 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfDividerBaseComponent
 *
 * \@example
 *
 * <example name="thf-divider-basic" title="Totvs Divider Basic" >
 *  <file name="sample-thf-divider-basic/sample-thf-divider-basic.component.html"> </file>
 *  <file name="sample-thf-divider-basic/sample-thf-divider-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-divider-labs" title="Totvs Divider Labs" >
 *  <file name="sample-thf-divider-labs/sample-thf-divider-labs.component.html"> </file>
 *  <file name="sample-thf-divider-labs/sample-thf-divider-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-divider-user-detail" title="Totvs Divider - User Detail" >
 *  <file name="sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.html"> </file>
 *  <file name="sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.ts"> </file>
 * </example>
 */
var ThfDividerComponent = /** @class */ (function (_super) {
    __extends$10(ThfDividerComponent, _super);
    function ThfDividerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfDividerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-divider', template: "<div class=\"thf-divider\"> <div *ngIf=\"label\" class=\"thf-divider-label\">{{ label }}</div> </div> ",
                },] },
    ];
    return ThfDividerComponent;
}(ThfDividerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-divider.
 */
var ThfDividerModule = /** @class */ (function () {
    function ThfDividerModule() {
    }
    ThfDividerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfDividerComponent
                    ],
                    exports: [
                        ThfDividerComponent
                    ]
                },] },
    ];
    return ThfDividerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
 *
 * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
 * no módulo principal para o correto funcionamento deste componente:
 *
 * ```
 * import { RouterModule } from '\@angular/router';
 *
 * \@NgModule({
 *   imports: [
 *     ...
 *     RouterModule.forRoot([]),
 *     ThfModule
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   exports: [],
 *   providers: [],
 *   bootstrap: [
 *     AppComponent
 *   ]
 * })
 * export class AppModule { }
 * ```
 * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
 * [/Configurando as rotas do thf-menu](/guides/getting-started).
 *
 * \@example
 *
 * <example name="thf-dropdown-basic" title="Totvs Dropdown Basic" >
 *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.html"> </file>
 *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.ts"> </file>
 *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-dropdown-labs" title="Totvs Dropdown Labs" >
 *  <file name="sample-thf-dropdown-labs/sample-thf-dropdown-labs.component.html"> </file>
 *  <file name="sample-thf-dropdown-labs/sample-thf-dropdown-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dropdown-social-network" title="Totvs Dropdown - Social Network" >
 *  <file name="sample-thf-dropdown-social-network/sample-thf-dropdown-social-network.component.html"> </file>
 *  <file name="sample-thf-dropdown-social-network/sample-thf-dropdown-social-network.component.ts"> </file>
 * </example>
 */
var ThfDropdownComponent = /** @class */ (function () {
    function ThfDropdownComponent(_router, renderer, _view) {
        this._router = _router;
        this.renderer = renderer;
        this.open = false;
        this.icon = 'thf-icon-arrow-down';
        this._parentRef = _view['_view']['component'];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    ThfDropdownComponent.prototype.onClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.url) {
            /** @type {?} */
            var url = item.url;
            /** @type {?} */
            var regexUrl = /(http(s?))\:\/\//gi;
            if (regexUrl.test(url)) {
                window.open(url, '_blank');
            }
            else {
                this._router.navigate([url]);
            }
        }
        else if (item.action) {
            this._callAction(item.action);
        }
    };
    /**
     * @return {?}
     */
    ThfDropdownComponent.prototype.toggleDropdown = /**
     * @return {?}
     */
    function () {
        if (this.dropdownRef && !this.open) {
            this.showDropdown();
        }
        else {
            this.hideDropdown();
        }
    };
    /**
     * @private
     * @param {?} _function
     * @return {?}
     */
    ThfDropdownComponent.prototype._callAction = /**
     * @private
     * @param {?} _function
     * @return {?}
     */
    function (_function) {
        this._callActionOfContext(_function, this._parentRef);
    };
    /**
     * @private
     * @param {?} _function
     * @param {?} _context
     * @return {?}
     */
    ThfDropdownComponent.prototype._callActionOfContext = /**
     * @private
     * @param {?} _function
     * @param {?} _context
     * @return {?}
     */
    function (_function, _context) {
        if (this._isTypeof(_function, 'function')) {
            _function.call(_context);
        }
        else {
            _context[_function]();
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDropdownComponent.prototype.checkClickArea = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.dropdownRef && this.dropdownRef.nativeElement.contains(event.target);
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.destroyListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.clickoutListener();
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.hideDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.icon = 'thf-icon-arrow-down';
        this.destroyListener();
        this.showActionsList();
        this.open = false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.initializeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnDropdown(event);
        });
    };
    /**
     * @private
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfDropdownComponent.prototype._isTypeof = /**
     * @private
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    function (object, type) {
        return typeof object === type;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.showActionsList = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.actions && this.actions.length) {
            this.dropdownRef.nativeElement.classList.toggle('t-show');
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfDropdownComponent.prototype.showDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.icon = 'thf-icon-arrow-up';
        this.initializeListener();
        this.showActionsList();
        this.open = true;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDropdownComponent.prototype.wasClickedOnDropdown = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var clickedOnDropdown = this.checkClickArea(event);
        if (!clickedOnDropdown) {
            this.hideDropdown();
        }
    };
    ThfDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-dropdown', template: "<div #dropdownRef class=\"dropdown\" (click)=\"toggleDropdown()\"> <div class=\"button-dropdown\" [ngClass]=\"{'disabled' : disabled}\"> {{ label }} <div class=\"hidden-xs icon-dropdown thf-icon {{icon}}\"></div> </div> <ul class=\"dropdown-content\"> <li *ngFor=\"let action of actions\"> <a (click)=\"onClick(action)\" [ngClass]=\"{'disabled' : action.disabled}\">{{ action?.label }}</a> </li> </ul> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfDropdownComponent.ctorParameters = function () { return [
        { type: router.Router },
        { type: i0.Renderer2 },
        { type: i0.ViewContainerRef }
    ]; };
    ThfDropdownComponent.propDecorators = {
        actions: [{ type: i0.Input, args: ['t-actions',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        dropdownRef: [{ type: i0.ViewChild, args: ['dropdownRef', { read: i0.ElementRef },] }]
    };
    return ThfDropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-dropdown.
 */
var ThfDropdownModule = /** @class */ (function () {
    function ThfDropdownModule() {
    }
    ThfDropdownModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfDropdownComponent],
                    exports: [ThfDropdownComponent]
                },] },
    ];
    return ThfDropdownModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
var ThfLoadingOverlayBaseComponent = /** @class */ (function () {
    function ThfLoadingOverlayBaseComponent() {
        this._screenLock = false;
        /**
         * \@optional
         *
         * \@description
         *
         * Texto a ser exibido no componente.
         *
         * \@default `Carregando`
         */
        this.text = 'Carregando';
    }
    Object.defineProperty(ThfLoadingOverlayBaseComponent.prototype, "screenLock", {
        get: /**
         * @return {?}
         */
        function () {
            return this._screenLock;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * \@default `false`
         * @param {?} screenLock
         * @return {?}
         */
        function (screenLock) {
            this._screenLock = convertToBoolean(screenLock);
        },
        enumerable: true,
        configurable: true
    });
    ThfLoadingOverlayBaseComponent.propDecorators = {
        screenLock: [{ type: i0.Input, args: ['t-screen-lock',] }],
        text: [{ type: i0.Input, args: ['t-text',] }]
    };
    return ThfLoadingOverlayBaseComponent;
}());

var __extends$11 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@docsExtends ThfLoadingOverlayBaseComponent
 *
 * \@example
 *
 * <example name="thf-loading-overlay-basic" title="Totvs Loading Overlay Basic">
 *  <file name="sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.html"> </file>
 *  <file name="sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-loading-overlay-labs" title="Totvs Loading Overlay Labs">
 *  <file name="sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.html"> </file>
 *  <file name="sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-loading-overlay-connection-test" title="Totvs Loading Overlay - Connection Test">
 *  <file name="sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.html"> </file>
 *  <file name="sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.ts"> </file>
 * </example>
 */
var ThfLoadingOverlayComponent = /** @class */ (function (_super) {
    __extends$11(ThfLoadingOverlayComponent, _super);
    function ThfLoadingOverlayComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    ThfLoadingOverlayComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-loading-overlay', template: "<div [class.thf-overlay-absolute]=\"!screenLock\" [class.thf-overlay-fixed]=\"screenLock\"> <thf-loading class=\"thf-loading-overlay-content\" [t-text]=\"text\"></thf-loading> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfLoadingOverlayComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    return ThfLoadingOverlayComponent;
}(ThfLoadingOverlayBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Este componente tem o objetivo de mostrar visualmente aos usuários que a aplicação está processando
 * ou aguardando a resposta de alguma requisição.
 */
var ThfLoadingBaseComponent = /** @class */ (function () {
    function ThfLoadingBaseComponent() {
        /**
         * Texto a ser exibido no componente.
         */
        this.text = 'Carregando';
    }
    ThfLoadingBaseComponent.propDecorators = {
        text: [{ type: i0.Input, args: ['t-text',] }]
    };
    return ThfLoadingBaseComponent;
}());

var __extends$12 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfLoadingBaseComponent
 */
var ThfLoadingComponent = /** @class */ (function (_super) {
    __extends$12(ThfLoadingComponent, _super);
    function ThfLoadingComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfLoadingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-loading', template: "<div class=\"thf-loading\"> <span class=\"thf-loading-icon\"></span> <span class=\"thf-loading-label thf-text-ellipsis\" *ngIf=\"text\">{{text}}</span> </div> "
                },] },
    ];
    return ThfLoadingComponent;
}(ThfLoadingBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * Módulo do componente thf-loading-overlay.
 */
var ThfLoadingModule = /** @class */ (function () {
    function ThfLoadingModule() {
    }
    ThfLoadingModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfLoadingComponent,
                        ThfLoadingOverlayComponent
                    ],
                    exports: [
                        ThfLoadingComponent,
                        ThfLoadingOverlayComponent
                    ]
                },] },
    ];
    return ThfLoadingModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-modal` é utilizado para incluir conteúdos rápidos e informativos.
 *
 * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
 *
 * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `thf-chart`,
 * `thf-table` e os demais componentes do THF.
 *
 * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
 * definir um estado de carregando e / ou desabilitado. Também é possível definir o botão com o tipo *danger*.
 *
 * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `t-hide-close` não estiver habilitada.
 */
var ThfModalBaseComponent = /** @class */ (function () {
    function ThfModalBaseComponent() {
        this._hideClose = false;
        this._size = 'md';
        /**
         * Define o fechamento da modal ao clicar fora da mesma.
         * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
         */
        this.clickOut = false;
        // Controla se a modal fica oculto ou visível, por padrão é oculto
        this.isHidden = true;
        // Event emmiter para quando a modal é fechada pelo 'X'.
        this.onXClosed = new i0.EventEmitter();
    }
    Object.defineProperty(ThfModalBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         */
        set: /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
            this._size = sizes.indexOf(value) > -1 ? value : 'md';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "setClickOut", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.clickOut = (value === '') ? false : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "hideClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideClose;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideClose = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Função para fechar a modal. */
    /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    ThfModalBaseComponent.prototype.close = /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    function (xClosed) {
        if (xClosed === void 0) { xClosed = false; }
        this.isHidden = true;
        if (xClosed) {
            this.onXClosed.emit(xClosed);
        }
    };
    /** Função para abrir a modal. */
    /**
     * Função para abrir a modal.
     * @return {?}
     */
    ThfModalBaseComponent.prototype.open = /**
     * Função para abrir a modal.
     * @return {?}
     */
    function () {
        this.validPrimaryAction();
        this.isHidden = false;
    };
    /**
     * @return {?}
     */
    ThfModalBaseComponent.prototype.validPrimaryAction = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.primaryAction) {
            this.primaryAction = {
                action: function () { return _this.close(); },
                label: 'Ok',
            };
        }
        if (!this.primaryAction['action']) {
            this.primaryAction['action'] = function () { return _this.close(); };
        }
        if (!this.primaryAction['label']) {
            this.primaryAction['label'] = 'Ok';
        }
    };
    ThfModalBaseComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['t-title',] }],
        primaryAction: [{ type: i0.Input, args: ['t-primary-action',] }],
        secondaryAction: [{ type: i0.Input, args: ['t-secondary-action',] }],
        size: [{ type: i0.Input, args: ['t-size',] }],
        setClickOut: [{ type: i0.Input, args: ['t-click-out',] }],
        hideClose: [{ type: i0.Input, args: ['t-hide-close',] }]
    };
    return ThfModalBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfModalService = /** @class */ (function () {
    function ThfModalService() {
    }
    ThfModalService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfModalService;
}());

var __extends$13 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfModalBaseComponent
 *
 * \@example
 *
 * <example name="thf-modal-basic" title="Totvs Modal Basic">
 *  <file name="sample-thf-modal-basic/sample-thf-modal-basic.component.html"> </file>
 *  <file name="sample-thf-modal-basic/sample-thf-modal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-modal-labs" title="Totvs Modal Labs">
 *  <file name="sample-thf-modal-labs/sample-thf-modal-labs.component.html"> </file>
 *  <file name="sample-thf-modal-labs/sample-thf-modal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-modal-fruits-salad" title="Totvs Modal - Fruits Salad">
 *  <file name="sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.html"> </file>
 *  <file name="sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.ts"> </file>
 * </example>
 */
var ThfModalComponent = /** @class */ (function (_super) {
    __extends$13(ThfModalComponent, _super);
    function ThfModalComponent(thfModalService) {
        var _this = _super.call(this) || this;
        _this.thfModalService = thfModalService;
        _this.focusableElements = 'input, select, textarea, button:not([disabled]), a';
        _this.id = uuid.v4();
        return _this;
    }
    /**
     * @param {?=} xClosed
     * @return {?}
     */
    ThfModalComponent.prototype.close = /**
     * @param {?=} xClosed
     * @return {?}
     */
    function (xClosed) {
        if (xClosed === void 0) { xClosed = false; }
        this.thfModalService.modalActive = undefined;
        _super.prototype.close.call(this, xClosed);
        document.removeEventListener('focus', this.focusFunction, true);
        if (this.sourceElement) {
            this.sourceElement.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfModalComponent.prototype.closeModalOnEscapeKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.hideClose) {
            event.preventDefault();
            event.stopPropagation();
            this.close();
        }
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.getPrimaryActionButtonType = /**
     * @return {?}
     */
    function () {
        return this.primaryAction.danger ? 'danger' : 'primary';
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.getSecondaryActionButtonType = /**
     * @return {?}
     */
    function () {
        return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'danger' : 'default';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfModalComponent.prototype.onClickOut = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {
            this.close();
        }
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        this.sourceElement = document.activeElement;
        _super.prototype.open.call(this);
        this.handleFocus();
    };
    /**
     * @private
     * @return {?}
     */
    ThfModalComponent.prototype.handleFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.thfModalService.modalActive = this.id;
        setTimeout(function () {
            if (_this.modalContent) {
                _this.initFocus();
                document.addEventListener('focus', _this.focusFunction, true);
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfModalComponent.prototype.initFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.focusFunction = function (event) {
            _this.thfModalService.modalActive = _this.thfModalService.modalActive || _this.id;
            /** @type {?} */
            var modalElement = _this.modalContent.nativeElement;
            if (!modalElement.contains(event.target) && _this.thfModalService.modalActive === _this.id) {
                event.stopPropagation();
                _this.firstElement.focus();
            }
        };
        this.setFirstElement();
        if (this.hideClose) {
            this.firstElement.focus();
        }
        else {
            /** @type {?} */
            var firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] ||
                this.modalContent.nativeElement;
            firstFieldElement.focus();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfModalComponent.prototype.setFirstElement = /**
     * @private
     * @return {?}
     */
    function () {
        this.firstElement = this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;
    };
    ThfModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-modal', template: "<div *ngIf=\"!isHidden\" class=\"thf-modal\" tabindex=\"0\" (keydown.esc)=\"closeModalOnEscapeKey($event)\"> <div class=\"thf-modal-overlay\"> <div class=\"thf-modal-container thf-pb-2 thf-pt-2\" (click)=\"onClickOut($event)\"> <div class=\"thf-modal-vertical-align\"> <div #modalContent class=\"thf-modal-content thf-modal-{{ size }}\" tabindex=\"-1\"> <div class=\"thf-modal-header\"> <div class=\"thf-modal-title\"> <a *ngIf=\"!hideClose\" class=\"thf-modal-header-close-button\" tabindex=\"0\" (click)=\"close(true)\"> <span class=\"thf-icon thf-icon-close\"></span> </a> {{ title }} </div> </div> <div class=\"thf-modal-body\"> <ng-content></ng-content> </div> <div class=\"thf-modal-footer\"> <thf-button *ngIf=\"secondaryAction\" [t-disabled]=\"secondaryAction.disabled\" [t-label]=\"secondaryAction.label\" [t-loading]=\"secondaryAction.loading\" [t-type]=\"getSecondaryActionButtonType()\" (t-click)=\"secondaryAction.action()\"> </thf-button> <thf-button class=\"thf-button-modal-first-action\" [t-disabled]=\"primaryAction.disabled\" [t-label]=\"primaryAction.label\" [t-loading]=\"primaryAction.loading\" [t-type]=\"getPrimaryActionButtonType()\" (t-click)=\"primaryAction.action()\"> </thf-button> </div> </div> </div> </div> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfModalComponent.ctorParameters = function () { return [
        { type: ThfModalService }
    ]; };
    ThfModalComponent.propDecorators = {
        modalContent: [{ type: i0.ViewChild, args: ['modalContent', { read: i0.ElementRef },] }]
    };
    return ThfModalComponent;
}(ThfModalBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-modal
 */
var ThfModalModule = /** @class */ (function () {
    function ThfModalModule() {
    }
    ThfModalModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfButtonModule
                    ],
                    declarations: [
                        ThfModalComponent
                    ],
                    exports: [ThfModalComponent],
                    providers: [ThfModalService]
                },] },
    ];
    return ThfModalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 * \@description
 *
 * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
 * seguintes posições:
 *
 * - `right`: Posiciona o elemento no lado direito do componente alvo.
 * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
 * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
 * - `bottom`: Posiciona o elemento abaixo do componente alvo.
 * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
 * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
 * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
 * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
 * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
 * - `top`: Posiciona o elemento acima do componente alvo.
 * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
 * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
 *
 * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
 * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
 * @type {?}
 */
var thfControlPositionSidesDefault = [
    'bottom', 'bottom-left', 'bottom-right',
    'left', 'left-top', 'left-bottom',
    'top', 'top-right', 'top-left',
    'right', 'right-bottom', 'right-top'
];
var ThfControlPositionService = /** @class */ (function () {
    function ThfControlPositionService() {
        this.differenceDiagonalToWidthArrow = 3;
        this.isSetElementWidth = false;
        // offset da seta em relação ao canto do componente
        this.offsetArrow = 12;
    }
    /**
     * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param position posição para exibição do elemento
     */
    /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} position posição para exibição do elemento
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustPosition = /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} position posição para exibição do elemento
     * @return {?}
     */
    function (position) {
        this.elementPosition(position);
        this.customPositions && this.customPositions.length ? this.adjustCustomPosition(position) : this.adjustDefaultPosition(position);
    };
    /**
     * @description Retorna a direção da seta, conforme a posição do elemento.
     */
    /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    ThfControlPositionService.prototype.getArrowDirection = /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    function () {
        return this.arrowDirection;
    };
    /**
     * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param element elemento que será exibido
     * @param elementOffset offSet do elemento
     * @param targetElement elemento de onde deve partir a exibição
     * @param customPositions posições que sobrescreve as posições padrões
     * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     */
    /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    ThfControlPositionService.prototype.setElements = /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    function (element, elementOffset, targetElement, customPositions, isSetElementWidth, isCornerAligned) {
        if (isSetElementWidth === void 0) { isSetElementWidth = false; }
        if (isCornerAligned === void 0) { isCornerAligned = false; }
        this.element = (element instanceof i0.ElementRef) ? element.nativeElement : element;
        this.targetElement = (targetElement instanceof i0.ElementRef) ? targetElement.nativeElement : targetElement;
        this.elementOffset = elementOffset;
        this.customPositions = customPositions;
        this.isSetElementWidth = isSetElementWidth;
        this.isCornerAligned = isCornerAligned;
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustCustomPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var positionLength = this.customPositions.length;
        /** @type {?} */
        var sidesCount = 0;
        while (sidesCount++ < positionLength) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions);
                this.elementPosition(position);
            }
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.adjustDefaultPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var mainPositions = this.getMainPositions();
        /** @type {?} */
        var mainPositionLength = mainPositions.length;
        /** @type {?} */
        var mainSidesCount = 0;
        while (mainSidesCount++ < mainPositionLength) {
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            if (this.overflowMain(mainPosition)) {
                position = this.nextPosition(mainPosition, mainPositions);
                continue;
            }
            else if (this.overflowAllSides(position)) {
                this.verifySubPositions(position);
                // TODO: Não está indo para a proxima main position, o problema acontece somente quando utiliza as posições default
                return;
            }
            return;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.elementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return (position.indexOf('-') > -1) ? position.substring(0, position.indexOf('-')) : position;
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPositions = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultMainPositions = ['top', 'right', 'bottom', 'left'];
        return this.customPositions && this.customPositions.length ?
            this.getMainPositionsByCustomPositions(this.customPositions) : defaultMainPositions;
    };
    /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.getMainPositionsByCustomPositions = /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    function (customPositions) {
        /** @type {?} */
        var mainPositions = [];
        /** @type {?} */
        var customPositionsLength = customPositions.length;
        for (var i = 0; i < customPositionsLength; i++) {
            /** @type {?} */
            var position = customPositions[i];
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            if (!mainPositions.includes(mainPosition)) {
                mainPositions.push(mainPosition);
            }
        }
        return mainPositions;
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getOverflows = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        return {
            right: (sizesAndPositions.element.right > sizesAndPositions.window.innerWidth),
            top: (sizesAndPositions.element.top <= 0),
            left: (sizesAndPositions.element.left <= 0),
            bottom: (sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight)
        };
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.getSizesAndPositions = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            window: {
                scrollY: window.scrollY,
                scrollX: window.scrollX,
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            },
            element: this.element.getBoundingClientRect(),
            target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
        };
    };
    /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    ThfControlPositionService.prototype.nextPosition = /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    function (position, positions) {
        if (positions === void 0) { positions = []; }
        /** @type {?} */
        var index = positions.indexOf(position);
        /** @type {?} */
        var nextIndex = index + 1;
        if (index > -1 && nextIndex < positions.length) {
            return positions[nextIndex];
        }
        else {
            return positions[0];
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.overflowAllSides = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top || overflows.right || overflows.left;
            case 'top-right': return overflows.top || overflows.right;
            case 'top-left': return overflows.top || overflows.left;
            case 'right': return overflows.right || overflows.top || overflows.bottom;
            case 'right-top': return overflows.right || overflows.top;
            case 'right-bottom': return overflows.right || overflows.bottom;
            case 'bottom': return overflows.bottom || overflows.right || overflows.left;
            case 'bottom-right': return overflows.bottom || overflows.right;
            case 'bottom-left': return overflows.bottom || overflows.left;
            case 'left': return overflows.left || overflows.top || overflows.bottom;
            case 'left-top': return overflows.left || overflows.top;
            case 'left-bottom': return overflows.left || overflows.bottom;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.overflowMain = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top;
            case 'right': return overflows.right;
            case 'bottom': return overflows.bottom;
            case 'left': return overflows.left;
        }
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top-left': return 'bottom-left';
            case 'top-right': return 'bottom-right';
            case 'bottom-right': return 'top-right';
            case 'bottom-left': return 'top-left';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'bottom-left':
                this.setAlignedBottomPositions(0, sizesAndPositions);
                break;
            case 'bottom-right':
                this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
            case 'top-left':
                this.setAlignedTopPositions(0, sizesAndPositions);
                break;
            case 'top-right':
                this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setAlignedArrowDirection(position);
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setAlignedTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    ThfControlPositionService.prototype.setArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top': return 'bottom';
            case 'top-left': return 'bottom-right';
            case 'top-right': return 'bottom-left';
            case 'right': return 'left';
            case 'right-top': return 'left-bottom';
            case 'right-bottom': return 'left-top';
            case 'bottom': return 'top';
            case 'bottom-right': return 'top-left';
            case 'bottom-left': return 'top-right';
            case 'left': return 'right';
            case 'left-bottom': return 'right-top';
            case 'left-top': return 'right-bottom';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.setElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'top':
                this.setTopPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'top-left':
                this.setTopPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'top-right':
                this.setTopPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right':
                this.setRightPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'right-top':
                this.setRightPositions((sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right-bottom':
                this.setRightPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'bottom':
                this.setBottomPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'bottom-right':
                this.setBottomPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'bottom-left':
                this.setBottomPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'left':
                this.setLeftPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'left-bottom':
                this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'left-top':
                this.setLeftPositions((sizesAndPositions.element.height - this.offsetArrow), sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setArrowDirection(position);
    };
    /**
     * @private
     * @return {?}
     */
    ThfControlPositionService.prototype.setElementWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isSetElementWidth && this.targetElement) {
            this.element.style.width = this.targetElement.clientWidth + "px";
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setLeftPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setRightPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    ThfControlPositionService.prototype.setTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ThfControlPositionService.prototype.verifySubPositions = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (position.indexOf('-') > -1) {
            position = position.substring(0, position.indexOf('-'));
            this.elementPosition(position);
        }
        /** @type {?} */
        var align = 0;
        while (align++ < 3) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions || thfControlPositionSidesDefault);
                this.elementPosition(position);
            }
            else {
                return null;
            }
        }
    };
    ThfControlPositionService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfControlPositionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Array de posições.
/** @type {?} */
var THF_CONTROL_POSITIONS = [
    'right',
    'right-top',
    'right-bottom',
    'top',
    'top-left',
    'top-right',
    'left',
    'left-top',
    'left-bottom',
    'bottom',
    'bottom-left',
    'bottom-right'
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfPopupDefaultPosition = 'bottom-left';
/**
 * \@description
 *
 * O componente `thf-popup` é um container pequeno recomendado para ações de navegação:
 * Ele abre sobreposto aos outros componentes.
 *
 * É possível escolher as posições do `thf-popup` em relação ao componente alvo, para isto veja a propriedade `t-position`.
 *
 * Também é possível informar um _template_ _header_ para o `thf-popup`, que será exibido acima das ações.
 * Para funcionar corretamente é preciso adicionar a propriedade `t-popup-header-template` no elemento que servirá de template, por exemplo:
 *
 * ```
 * <thf-popup [t-target]="target">
 *   <div t-popup-header-template>
 *     <div>
 *       Dev Totvs
 *     </div>
 *     <div>
 *       dev.totvs\@totvs.com.br
 *     </div>
 *   </div>
 * </thf-popup >
 * ```
 */
var ThfPopupBaseComponent = /** @class */ (function () {
    function ThfPopupBaseComponent() {
        this._hideArrow = false;
        this._position = thfPopupDefaultPosition;
        this.arrowDirection = 'top-right';
        this.showPopup = false;
    }
    Object.defineProperty(ThfPopupBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /** Lista de ações que serão exibidas no componente. */
        set: /**
         * Lista de ações que serão exibidas no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._actions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPopupBaseComponent.prototype, "hideArrow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideArrow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta a seta do componente *popup*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta a seta do componente *popup*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideArrow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPopupBaseComponent.prototype, "position", {
        get: /**
         * @return {?}
         */
        function () {
            return this._position;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição que o `thf-popup` abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-popup no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-popup abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-popup abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-popup acima do componente alvo.
         * - `top-right`: Posiciona o thf-popup acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-popup acima e à esquerda do componente alvo.
         *
         * @default `bottom-left`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a posição que o `thf-popup` abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-popup no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-popup abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-popup abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-popup acima do componente alvo.
         * - `top-right`: Posiciona o thf-popup acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-popup acima e à esquerda do componente alvo.
         *
         * \@default `bottom-left`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._position = THF_CONTROL_POSITIONS.includes(value) ? value : thfPopupDefaultPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPopupBaseComponent.prototype, "target", {
        get: /**
         * @return {?}
         */
        function () {
            return this._target;
        },
        /**
         * @description
         *
         * Para utilizar o `thf-popup` deve-se colocar uma variável local no componente que disparará o evento
         * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
         *
         * ```
         * <span #icon class="thf-icon thf-icon-credit-payment" (click)="popup.toggle()">
         *   Credit Actions
         * </span>
         *
         * <thf-popup #popup
         *   [t-actions]="actions"
         *   [t-target]="icon">
         * </thf-popup>
         * ```
         *
         * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
         *
         * ```
         * // component.html
         *
         * <thf-button #thfButton
         *   t-label="Open Popover"
         *   (t-click)="popup.toggle()">
         * </thf-button>
         *
         * <thf-popup #popup
         *   [t-actions]="actions"
         *   [t-target]="thfButtonRef">
         * </thf-popup>
         *
         * // component.ts
         *
         * @ViewChild('thfButton', { read: ElementRef }) thfButtonRef: ElementRef;
         * ```
         */
        set: /**
         * \@description
         *
         * Para utilizar o `thf-popup` deve-se colocar uma variável local no componente que disparará o evento
         * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
         *
         * ```
         * <span #icon class="thf-icon thf-icon-credit-payment" (click)="popup.toggle()">
         *   Credit Actions
         * </span>
         *
         * <thf-popup #popup
         *   [t-actions]="actions"
         *   [t-target]="icon">
         * </thf-popup>
         * ```
         *
         * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
         *
         * ```
         * // component.html
         *
         * <thf-button #thfButton
         *   t-label="Open Popover"
         *   (t-click)="popup.toggle()">
         * </thf-button>
         *
         * <thf-popup #popup
         *   [t-actions]="actions"
         *   [t-target]="thfButtonRef">
         * </thf-popup>
         *
         * // component.ts
         *
         * \@ViewChild('thfButton', { read: ElementRef }) thfButtonRef: ElementRef;
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._target = (value instanceof i0.ElementRef) ? value.nativeElement : value;
        },
        enumerable: true,
        configurable: true
    });
    ThfPopupBaseComponent.propDecorators = {
        actions: [{ type: i0.Input, args: ['t-actions',] }],
        hideArrow: [{ type: i0.Input, args: ['t-hide-arrow',] }],
        position: [{ type: i0.Input, args: ['t-position',] }],
        target: [{ type: i0.Input, args: ['t-target',] }]
    };
    return ThfPopupBaseComponent;
}());

var __extends$14 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@docsExtends ThfPopupBaseComponent
 *
 * \@example
 *
 * <example name="thf-popup-basic" title="Totvs Popup - Basic">
 *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.html"> </file>
 *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popup-labs" title="Totvs Popup - Labs">
 *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.html"> </file>
 *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popup-email" title="Totvs Popup Email">
 *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.html"> </file>
 *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.ts"> </file>
 * </example>
 *
 */
var ThfPopupComponent = /** @class */ (function (_super) {
    __extends$14(ThfPopupComponent, _super);
    function ThfPopupComponent(viewContainerRef, renderer, router$$1, thfControlPosition, changeDetector) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.router = router$$1;
        _this.thfControlPosition = thfControlPosition;
        _this.changeDetector = changeDetector;
        _this.onScroll = function () {
            if (_this.showPopup) {
                _this.close();
            }
        };
        _this.parentRef = viewContainerRef['_view']['component'];
        return _this;
    }
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     */
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     * @return {?}
     */
    ThfPopupComponent.prototype.close = /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     * @return {?}
     */
    function () {
        this.removeListeners();
        this.showPopup = false;
    };
    /**
     * @param {?} popupAction
     * @return {?}
     */
    ThfPopupComponent.prototype.onActionClick = /**
     * @param {?} popupAction
     * @return {?}
     */
    function (popupAction) {
        /** @type {?} */
        var actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
        if (popupAction && popupAction.action && actionNoDisabled) {
            this.close();
            return callFunction(popupAction.action, this.parentRef, this.param || popupAction);
        }
        if (popupAction && popupAction.url && actionNoDisabled) {
            this.close();
            return this.openUrl(popupAction.url);
        }
    };
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    ThfPopupComponent.prototype.open = /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.oldTarget = this.target;
        this.param = param;
        this.showPopup = true;
        this.changeDetector.detectChanges();
        this.validateInitialContent();
    };
    /**
     * @param {?} popupAction
     * @param {?} property
     * @return {?}
     */
    ThfPopupComponent.prototype.returnBooleanValue = /**
     * @param {?} popupAction
     * @param {?} property
     * @return {?}
     */
    function (popupAction, property) {
        return isTypeof(popupAction[property], 'function') ? popupAction[property](this.param || popupAction) : popupAction[property];
    };
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    ThfPopupComponent.prototype.toggle = /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPopupComponent.prototype.clickedOutDisabledItem = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var containsItemDisabled = this.elementContains(event.target, 'thf-popup-item-disabled') ||
            this.elementContains(event.target.parentElement, 'thf-popup-item-disabled');
        return !containsItemDisabled;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPopupComponent.prototype.clickedOutHeaderTemplate = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[t-popup-header-template]');
        return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPopupComponent.prototype.clickedOutTarget = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.target && !this.target.contains(event.target);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPopupComponent.prototype.closePopupOnClickout = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
            this.close();
        }
    };
    /**
     * @private
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    ThfPopupComponent.prototype.elementContains = /**
     * @private
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        return element && element.classList.contains(className);
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.hasContentToShow = /**
     * @private
     * @return {?}
     */
    function () {
        return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function () {
            _this.close();
        });
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.closePopupOnClickout(event);
        });
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    ThfPopupComponent.prototype.openUrl = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.setPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.thfControlPosition.setElements(this.popupRef.nativeElement, 8, this.target);
        this.renderer.setStyle(this.popupRef.nativeElement, 'left', '0');
        this.thfControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.thfControlPosition.getArrowDirection();
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopupComponent.prototype.validateInitialContent = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hasContentToShow()) {
            this.setPosition();
            this.initializeListeners();
        }
        else {
            this.close();
        }
    };
    ThfPopupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-popup', template: "<div #popupRef class=\"thf-popup\" *ngIf=\"showPopup\"> <div *ngIf=\"!hideArrow\" class=\"thf-popup-arrow thf-arrow-{{ arrowDirection }}\"></div> <ng-content select=\"[t-popup-header-template]\"></ng-content> <ng-container *ngFor=\"let action of actions; let actionIndex = index\"> <div *ngIf=\"action.visible !== false\" [class.thf-popup-item-default]=\"action.type !== 'danger'\" [class.thf-popup-item-danger]=\"action.type === 'danger'\" [class.thf-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\" [class.thf-popup-item-separator]=\"action.separator && actionIndex !== 0\" [class.thf-popup-item-selected]=\"action.selected\" (click)=\"onActionClick(action)\"> <span *ngIf=\"action.icon\" class=\"thf-icon {{ action.icon }} thf-popup-icon-item\"></span> {{ action.label }} </div> </ng-container> </div> ",
                    providers: [ThfControlPositionService]
                },] },
    ];
    /** @nocollapse */
    ThfPopupComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i0.Renderer2 },
        { type: router.Router },
        { type: ThfControlPositionService },
        { type: i0.ChangeDetectorRef }
    ]; };
    ThfPopupComponent.propDecorators = {
        popupRef: [{ type: i0.ViewChild, args: ['popupRef', { read: i0.ElementRef },] }]
    };
    return ThfPopupComponent;
}(ThfPopupBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-popup.
 */
var ThfPopupModule = /** @class */ (function () {
    function ThfPopupModule() {
    }
    ThfPopupModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                    ],
                    declarations: [
                        ThfPopupComponent,
                    ],
                    exports: [
                        ThfPopupComponent
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfPopupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API da Totvs.
 */
var ThfTimePipe = /** @class */ (function () {
    function ThfTimePipe() {
    }
    /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    ThfTimePipe.prototype.transform = /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    function (time, format) {
        /** @type {?} */
        var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            /** @type {?} */
            var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            /** @type {?} */
            var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            /** @type {?} */
            var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    };
    /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    ThfTimePipe.prototype.addDotMiliseconds = /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    function (miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    };
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    ThfTimePipe.prototype.formatValue = /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    function (time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            /** @type {?} */
            var hour = time.substring(0, 2);
            /** @type {?} */
            var minutes = time.substring(3, 5);
            /** @type {?} */
            var seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace("." + formatMiliseconds, miliseconds);
            return format;
        }
        else {
            return time;
        }
    };
    /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    ThfTimePipe.prototype.getFormatMiliseconds = /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    function (amountOfF) {
        /** @type {?} */
        var formatMiliseconds = '';
        for (var i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    };
    ThfTimePipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'thf_time'
                },] },
    ];
    return ThfTimePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do pipe `thf-time`.
 */
var ThfTimeModule = /** @class */ (function () {
    function ThfTimeModule() {
    }
    ThfTimeModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ThfTimePipe
                    ],
                    imports: [],
                    exports: [
                        ThfTimePipe
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfTimeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CONTENT_MAX_LENGTH = 140;
/** @type {?} */
var THF_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * \@description
 *
 * A diretiva thf-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**thf-popover**](https://thf.totvs.com.br/documentation/thf-popover?view=doc).
 */
var ThfTooltipBaseDirective = /** @class */ (function () {
    function ThfTooltipBaseDirective() {
        this._tooltip = '';
        this._tooltipPosition = 'bottom';
    }
    Object.defineProperty(ThfTooltipBaseDirective.prototype, "tooltip", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tooltip;
        },
        /**
         * @description
         *
         * Habilita e atribui um texto ao thf-tooltip, com limitação de 140 caracteres.
         */
        set: /**
         * \@description
         *
         * Habilita e atribui um texto ao thf-tooltip, com limitação de 140 caracteres.
         * @param {?} tooltip
         * @return {?}
         */
        function (tooltip) {
            if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
                this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
            }
            else {
                this._tooltip = tooltip;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTooltipBaseDirective.prototype, "tooltipPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tooltipPosition;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição que o thf-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-tooltip no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-tooltip no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-tooltip no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-tooltip abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-tooltip abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-tooltip abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-tooltip no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-tooltip no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-tooltip no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-tooltip acima do componente alvo.
         * - `top-right`: Posiciona o thf-tooltip acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-tooltip acima e à esquerda do componente alvo.
         *
         * @default bottom
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a posição que o thf-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-tooltip no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-tooltip no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-tooltip no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-tooltip abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-tooltip abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-tooltip abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-tooltip no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-tooltip no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-tooltip no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-tooltip acima do componente alvo.
         * - `top-right`: Posiciona o thf-tooltip acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-tooltip acima e à esquerda do componente alvo.
         *
         * \@default bottom
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this._tooltipPosition = THF_CONTROL_POSITIONS.includes(position) ? position : THF_TOOLTIP_POSITION_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    ThfTooltipBaseDirective.propDecorators = {
        tooltip: [{ type: i0.Input, args: ['t-tooltip',] }],
        tooltipPosition: [{ type: i0.Input, args: ['t-tooltip-position',] }]
    };
    return ThfTooltipBaseDirective;
}());

var __extends$15 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfTooltipBaseDirective
 *
 * \@example
 *
 * <example name="thf-tooltip-basic" title="Totvs Tooltip Basic" >
 *  <file name="sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.html"> </file>
 *  <file name="sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tooltip-labs" title="Totvs Tooltip Labs" >
 *  <file name="sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.html"> </file>
 *  <file name="sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tooltip-new-user" title="Totvs Tooltip - New User" >
 *  <file name="sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.html"> </file>
 *  <file name="sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.ts"> </file>
 * </example>
 *
 */
var ThfTooltipDirective = /** @class */ (function (_super) {
    __extends$15(ThfTooltipDirective, _super);
    function ThfTooltipDirective(elementRef, renderer, thfControlPosition) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.thfControlPosition = thfControlPosition;
        _this.tooltipOffset = 8;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfTooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initScrollEventListenerFunction();
    };
    /**
     * @return {?}
     */
    ThfTooltipDirective.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (_this.tooltip) {
                _this.tooltipContent ? _this.showTooltip() : _this.createTooltip();
                _this.removeArrow(_this.arrowDirection);
                _this.thfControlPosition.adjustPosition(_this.tooltipPosition);
                _this.arrowDirection = _this.thfControlPosition.getArrowDirection();
                _this.addArrow(_this.arrowDirection);
                _this.lastTooltipText = _this.tooltip;
            }
        });
    };
    /**
     * @return {?}
     */
    ThfTooltipDirective.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.hideTooltip();
    };
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    ThfTooltipDirective.prototype.addArrow = /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    function (arrowDirection) {
        this.renderer.addClass(this.divArrow, "thf-arrow-" + arrowDirection);
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.addScrollEventListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    };
    // Monta a estrutura do tooltip
    // Monta a estrutura do tooltip
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.createTooltip = 
    // Monta a estrutura do tooltip
    /**
     * @private
     * @return {?}
     */
    function () {
        this.tooltipContent = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipContent, 'thf-tooltip');
        this.divArrow = this.renderer.createElement('div');
        this.renderer.addClass(this.divArrow, 'thf-tooltip-arrow');
        this.divContent = this.renderer.createElement('div');
        this.renderer.addClass(this.divContent, 'thf-tooltip-content');
        this.textContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.divContent, this.textContent);
        this.renderer.appendChild(this.tooltipContent, this.divArrow);
        this.renderer.appendChild(this.tooltipContent, this.divContent);
        this.renderer.appendChild(this.elementRef.nativeElement, this.tooltipContent);
        this.thfControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
        this.addScrollEventListener();
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.initScrollEventListenerFunction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventListenerFunction = function () {
            if (!_this.isHidden) {
                setTimeout(function () {
                    _this.thfControlPosition.adjustPosition(_this.tooltipPosition);
                });
            }
        };
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.hideTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.tooltipContent) {
            this.renderer.addClass(this.tooltipContent, 'thf-invisible');
            this.isHidden = true;
            this.removeScrollEventListener();
        }
    };
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    ThfTooltipDirective.prototype.removeArrow = /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    function (arrowDirection) {
        if (this.elementRef.nativeElement.querySelector(".thf-arrow-" + arrowDirection)) {
            this.renderer.removeClass(this.divArrow, "thf-arrow-" + arrowDirection);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.removeScrollEventListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.showTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.removeClass(this.tooltipContent, 'thf-invisible');
        this.updateTextContent();
        this.isHidden = false;
        this.addScrollEventListener();
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.updateTextContent = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.divContent, this.textContent);
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
        }
    };
    ThfTooltipDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[t-tooltip]',
                    providers: [ThfControlPositionService]
                },] },
    ];
    /** @nocollapse */
    ThfTooltipDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: ThfControlPositionService }
    ]; };
    ThfTooltipDirective.propDecorators = {
        onMouseEnter: [{ type: i0.HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: i0.HostListener, args: ['mouseleave',] }]
    };
    return ThfTooltipDirective;
}(ThfTooltipBaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo da diretiva Thf-Tooltip.
 */
var ThfTooltipModule = /** @class */ (function () {
    function ThfTooltipModule() {
    }
    ThfTooltipModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfTooltipDirective],
                    exports: [ThfTooltipDirective]
                },] },
    ];
    return ThfTooltipModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
var ThfTableColumnIconComponent = /** @class */ (function () {
    function ThfTableColumnIconComponent() {
    }
    Object.defineProperty(ThfTableColumnIconComponent.prototype, "icons", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icons;
        },
        /** Lista de um ou mais ícones que serão exibidos em sua respectiva coluna. */
        set: /**
         * Lista de um ou mais ícones que serão exibidos em sua respectiva coluna.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._icons = this.convertToColumnIcon(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} columnIcon
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.getIconColorClass = /**
     * @param {?} columnIcon
     * @return {?}
     */
    function (columnIcon) {
        /** @type {?} */
        var color = this.getIconColor(columnIcon) || this.getIconColor(this.column);
        return color ? "thf-column-text-" + color : '';
    };
    /**
     * @param {?} iconColumn
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.onIconClick = /**
     * @param {?} iconColumn
     * @return {?}
     */
    function (iconColumn) {
        if (iconColumn.action) {
            iconColumn.action(this.row, iconColumn);
        }
        else if (this.column.action) {
            this.column.action(this.row, iconColumn || this.column);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.convertToColumnIcon = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Array) {
            return value.map(function (val) {
                return typeof val === 'string' ? { value: val } : val;
            });
        }
        if (typeof value === 'string') {
            return [{ value: value }];
        }
        return [];
    };
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.getIconColor = /**
     * @private
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return typeof column.color === 'function' ? column.color(this.row, column) : column.color;
    };
    ThfTableColumnIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-table-column-icon', template: "<ng-container *ngFor=\"let iconColumn of icons\"> <span class=\"thf-icon\" [class.thf-clickable]=\"iconColumn.action || column.action\" [ngClass]=\"[getIconColorClass(iconColumn), iconColumn.icon || iconColumn.value]\" (click)=\"onIconClick(iconColumn)\"> </span> </ng-container> "
                },] },
    ];
    ThfTableColumnIconComponent.propDecorators = {
        column: [{ type: i0.Input, args: ['t-column',] }],
        icons: [{ type: i0.Input, args: ['t-icons',] }],
        row: [{ type: i0.Input, args: ['t-row',] }]
    };
    return ThfTableColumnIconComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfColorPaletteEnum = {
    /** #0c9abe */
    Color01: 'color-01',
    /** #2c85c8 */
    Color02: 'color-02',
    /** #2c43c8 */
    Color03: 'color-03',
    /** #5843c8 */
    Color04: 'color-04',
    /** #ab43c8 */
    Color05: 'color-05',
    /** #ab4391 */
    Color06: 'color-06',
    /** #c64840 */
    Color07: 'color-07',
    /** #ea9b3e */
    Color08: 'color-08',
    /** #abc249 */
    Color09: 'color-09',
    /** #56b96b */
    Color10: 'color-10',
    /** #00b28e */
    Color11: 'color-11',
    /** #06a6a5 */
    Color12: 'color-12',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfColorPaletteService = /** @class */ (function () {
    function ThfColorPaletteService() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ThfColorPaletteService.prototype.getColor = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return ((/** @type {?} */ (Object))).values(ThfColorPaletteEnum).includes(value.color) ?
            value.color : this.getColorFromType(value.type || value.color);
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    ThfColorPaletteService.prototype.getColorFromType = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        switch (type) {
            case 'danger':
                return ThfColorPaletteEnum.Color07;
            case 'success':
                return ThfColorPaletteEnum.Color11;
            case 'warning':
                return ThfColorPaletteEnum.Color08;
            default:
                return ThfColorPaletteEnum.Color01;
        }
    };
    ThfColorPaletteService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfColorPaletteService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a criação da representação da legenda, em formato de texto .
 */
var ThfTableColumnLabelComponent = /** @class */ (function () {
    function ThfTableColumnLabelComponent(thfColorPaletteService) {
        this.thfColorPaletteService = thfColorPaletteService;
    }
    Object.defineProperty(ThfTableColumnLabelComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /** Objeto com os dados do label */
        set: /**
         * Objeto com os dados do label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                value.color = this.thfColorPaletteService.getColor(value);
            }
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    ThfTableColumnLabelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-table-column-label', template: "<span [class]=\"'thf-table-column-label thf-' + value?.color\"> {{ value?.label }} </span> "
                },] },
    ];
    /** @nocollapse */
    ThfTableColumnLabelComponent.ctorParameters = function () { return [
        { type: ThfColorPaletteService }
    ]; };
    ThfTableColumnLabelComponent.propDecorators = {
        value: [{ type: i0.Input, args: ['t-value',] }]
    };
    return ThfTableColumnLabelComponent;
}());

var __assign$2 = (undefined && undefined.__assign) || function () {
    __assign$2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$2.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfTableContainer = ['border', 'shadow'];
/** @type {?} */
var thfTableContainerDefault = 'border';
/** @type {?} */
var thfTableLiteralsDefault = {
    en: (/** @type {?} */ ({
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle'
    })),
    es: (/** @type {?} */ ({
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo'
    })),
    pt: (/** @type {?} */ ({
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa'
    }))
};
/**
 * \@description
 *
 * Este componente de tabela é utilizado para exibição de listas, com diferentes tipos de dados que podem ser texto,
 * data, horário e número com formato personalizado.
 *
 * É possivel criar uma tabela com ordenação de dados, linhas com detalhes, coluna de seleção de linhas,
 * coluna com ações e também carregamento por demanda com o botão "Carregar mais resultados".
 *
 * Também existe a possibilidade de utilizar _template_ para os detalhes das linhas,
 * veja mais em **[t-table-row-template](/documentation/thf-table-row-template)**.
 *
 * Quando a largura de todas as colunas for definida, caso o tamanho total delas seja maior que a tabela, será exibido um scroll horizontal.
 *
 * @abstract
 */
var ThfTableBaseComponent = /** @class */ (function () {
    function ThfTableBaseComponent(thfDate) {
        this.thfDate = thfDate;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._hideTextOverflow = false;
        this._loading = false;
        /**
         * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allSelected = new i0.EventEmitter();
        /**
         * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allUnselected = new i0.EventEmitter();
        /**
         * Ação executada ao selecionar uma linha do `thf-table`.
         */
        this.selected = new i0.EventEmitter();
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         */
        this.showMore = new i0.EventEmitter();
        /**
         * Ação executada ao desmarcar a seleção de uma linha do `thf-table`.
         */
        this.unselected = new i0.EventEmitter();
        this.selectAll = false;
        this.sortedColumn = { property: (/** @type {?} */ (null)), ascending: true };
    }
    Object.defineProperty(ThfTableBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens da tabela.
         * > Se falso, será inicializado como um *array* vazio.
         */
        set: /**
         * \@description
         *
         * Lista de itens da tabela.
         * > Se falso, será inicializado como um *array* vazio.
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = Array.isArray(items) ? items : [];
            // when haven't items, selectAll should be unchecked.
            if (!this.hasItems()) {
                this.selectAll = false;
            }
            else if (!this.hasColumns()) {
                this.columns = this.getDefaultColumns(items[0]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `ThfTableColumn`.
         * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
         * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `ThfTableColumn`.
         * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
         * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
         *
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            this._columns = columns || [];
            this.mapColumnToProperty();
            if (this._columns.length) {
                this.setColumnLink();
                this.calculateWidthHeaders();
            }
            else if (this.hasItems()) {
                this._columns = this.getDefaultColumns(this.items[0]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "container", {
        get: /**
         * @return {?}
         */
        function () {
            return this._container;
        },
        /**
         * @optional
         *
         * @description
         *
         * Adiciona um contorno arredondado ao `thf-table`, as opções são:
         * - `border`: com bordas/linhas.
         * - `shadow`: com sombras.
         *
         * @default `border`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Adiciona um contorno arredondado ao `thf-table`, as opções são:
         * - `border`: com bordas/linhas.
         * - `shadow`: com sombras.
         *
         * \@default `border`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._container = thfTableContainer.includes(value) ? value : thfTableContainerDefault;
            this.showContainer(this._container);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "hideTextOverflow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideTextOverflow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`thf-tooltip`](/documentation/thf-tooltip).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`thf-tooltip`](/documentation/thf-tooltip).
         * @param {?} hideTextOverflow
         * @return {?}
         */
        function (hideTextOverflow) {
            this._hideTextOverflow = convertToBoolean(hideTextOverflow);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura da tabela em *pixels* e fixa o cabeçalho.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura da tabela em *pixels* e fixa o cabeçalho.
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = height;
            this.calculateHeightTableContainer(height);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "hideDetail", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideDetail;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita a visualização da lista de detalhes de cada linha da coluna.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita a visualização da lista de detalhes de cada linha da coluna.
         *
         * \@default `false`
         * @param {?} hideDetail
         * @return {?}
         */
        function (hideDetail) {
            this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfTableLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-table`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfTableLiterals = {
         *    loadMoreData: 'Buscar mais dados',
         *    loadingData: 'Processando',
         *    noColumns: 'Sem colunas',
         *    noData: 'Sem dados',
         *    seeCompleteSubtitle: 'Mostrar legenda completa',
         *    completeSubtitle: 'Todas legendas'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfTableLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-table
         *   [t-literals]="customLiterals">
         * </thf-table>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-table`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfTableLiterals = {
         *    loadMoreData: 'Buscar mais dados',
         *    loadingData: 'Processando',
         *    noColumns: 'Sem colunas',
         *    noData: 'Sem dados',
         *    seeCompleteSubtitle: 'Mostrar legenda completa',
         *    completeSubtitle: 'Todas legendas'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfTableLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-table
         *   [t-literals]="customLiterals">
         * </thf-table>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign$2({}, thfTableLiteralsDefault[thfLocaleDefault], thfTableLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfTableLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        /**
         * @optional
         *
         * @description
         *
         * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
         *
         * \@default `false`
         * @param {?} loading
         * @return {?}
         */
        function (loading) {
            this._loading = convertToBoolean(loading);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "checkbox", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checkbox;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita na primeira coluna a opção de selecionar linhas,
         * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
         * > Exemplo: `item.$selected` ou `item['$selected']`.
         * > Os itens filhos possuem comportamento independente do item pai.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita na primeira coluna a opção de selecionar linhas,
         * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
         * > Exemplo: `item.$selected` ou `item['$selected']`.
         * > Os itens filhos possuem comportamento independente do item pai.
         *
         * \@default `false`
         * @param {?} checkbox
         * @return {?}
         */
        function (checkbox) {
            this._checkbox = (/** @type {?} */ (checkbox)) === '' ? true : convertToBoolean(checkbox);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de ações.
         *
         * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
         * se encarrega de agrupá-las exibindo o ícone [**thf-icon-more**](/guides/icons) que listará as ações ao ser clicado.
         *
         * **A coluna de ações não será exibida quando:**
         *  - a lista conter valores inválidos ou indefinidos.
         *  - tenha uma única ação e a mesma não for visível.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de ações.
         *
         * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
         * se encarrega de agrupá-las exibindo o ícone [**thf-icon-more**](/guides/icons) que listará as ações ao ser clicado.
         *
         * **A coluna de ações não será exibida quando:**
         *  - a lista conter valores inválidos ou indefinidos.
         *  - tenha uma única ação e a mesma não for visível.
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            this._actions = actions;
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setSort", {
        set: /**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this.sort = sort === '' ? false : convertToBoolean(sort);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setShowMoreDisabled", {
        set: /**
         * @param {?} showMoreDisabled
         * @return {?}
         */
        function (showMoreDisabled) {
            this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setStriped", {
        set: /**
         * @param {?} striped
         * @return {?}
         */
        function (striped) {
            this.striped = striped === '' ? false : convertToBoolean(striped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setHideSelectAll", {
        set: /**
         * @param {?} hideSelectAll
         * @return {?}
         */
        function (hideSelectAll) {
            this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "setSingleSelect", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.singleSelect = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableBaseComponent.prototype, "noData", {
        get: /**
         * @return {?}
         */
        function () {
            return this.literals.noData;
        },
        /**
         * @deprecated 4.x.x
         *
         * @optional
         *
         * @description
         *
         * Texto que será apresentado quando a tabela não houver dados.
         *
         * > Veja a nova propriedade `t-literals`
         *
         * @default **Nenhum dado encontrado.**
         */
        set: /**
         * @deprecated 4.x.x
         *
         * \@optional
         *
         * \@description
         *
         * Texto que será apresentado quando a tabela não houver dados.
         *
         * > Veja a nova propriedade `t-literals`
         *
         * \@default **Nenhum dado encontrado.**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.literals.noData = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
    };
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.selectAllRows = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(function (item) {
                item.$selected = _this.selectAll;
            });
            this.emitSelectAllEvents(this.selectAll, this.items);
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.selectRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.selectDetailRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.emitSelectEvents(row);
    };
    // Colunas que são inseridas no <head> da tabela
    // Colunas que são inseridas no <head> da tabela
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getMainColumns = 
    // Colunas que são inseridas no <head> da tabela
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var typesValid = ['string', 'number', 'boolean', 'date', 'time', 'dateTime', 'currency', 'subtitle', 'link', 'label', 'icon'];
        return this.columns.filter(function (col) { return !col.type || typesValid.includes(col.type); });
    };
    // Retorna a coluna da lista de colunas que é do tipo detail
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getColumnMasterDetail = 
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    function () {
        return this.columns.find(function (col) { return col.type === 'detail'; });
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getClassColor = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        return column.color ? "thf-column-text-" + this.getColumnColor(row, column) : '';
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getColumnColor = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        /** @type {?} */
        var columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    };
    // Retorna as colunas com status
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getSubtitleColumns = 
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    function () {
        return this.columns.filter(function (col) { return col.type === 'subtitle'; });
    };
    // Retorna as colunas com ícones
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getIconColumns = 
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    function () {
        return this.columns.filter(function (col) { return col.type === 'icon'; });
    };
    // Retorna o nome da coluna do tipo detail
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getNameColumnDetail = 
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var detail = this.getColumnMasterDetail();
        return detail ? detail.property : null;
    };
    /**
     * Retorna as linhas do `thf-table` que estão selecionadas.
     */
    /**
     * Retorna as linhas do `thf-table` que estão selecionadas.
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getSelectedRows = /**
     * Retorna as linhas do `thf-table` que estão selecionadas.
     * @return {?}
     */
    function () {
        return this.items.filter(function (item) { return item.$selected; });
    };
    /**
     * Retorna as linhas do `thf-table` que não estão selecionadas.
     */
    /**
     * Retorna as linhas do `thf-table` que não estão selecionadas.
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getUnselectedRows = /**
     * Retorna as linhas do `thf-table` que não estão selecionadas.
     * @return {?}
     */
    function () {
        return this.items.filter(function (item) { return !item.$selected; });
    };
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.hasColumns = /**
     * @return {?}
     */
    function () {
        return this.columns && this.columns.length > 0;
    };
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.hasItems = /**
     * @return {?}
     */
    function () {
        return this.items && this.items.length > 0;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.toggleRowAction = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var toggleShowAction = row.$showAction;
        this.items.forEach(function (item) {
            if (item.$showAction) {
                item.$showAction = false;
            }
        });
        row.$showAction = !toggleShowAction;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    ThfTableBaseComponent.prototype.sortColumn = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (!this.sort || column.type === 'detail') {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortedColumn.property = column;
    };
    /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    ThfTableBaseComponent.prototype.sortArray = /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    function (column, ascending) {
        var _this = this;
        this.items.sort(function (leftSide, rightSide) {
            if (column.type === 'date' || column.type === 'dateTime') {
                return _this.thfDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
            }
            else {
                return sortValues(leftSide[column.property], rightSide[column.property], ascending);
            }
        });
    };
    /**
     * @return {?}
     */
    ThfTableBaseComponent.prototype.onShowMore = /**
     * @return {?}
     */
    function () {
        this.showMore.emit(null);
    };
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    ThfTableBaseComponent.prototype.getDefaultColumns = /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var keys = Object.keys(item);
        return keys.filter(function (key) { return (typeof item[key] !== 'object'); }).map(function (key) {
            return { label: capitalizeFirstLetter(key), property: key };
        });
    };
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.configAfterSelectRow = /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    function (rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    };
    /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    ThfTableBaseComponent.prototype.emitSelectAllEvents = /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    function (selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    };
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.emitSelectEvents = /**
     * @private
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    ThfTableBaseComponent.prototype.isEverySelected = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        /** @type {?} */
        var someCheckedOrIndeterminate = function (item) { return item.$selected || item.$selected === null; };
        /** @type {?} */
        var everyChecked = function (item) { return item.$selected; };
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableBaseComponent.prototype.mapColumnToProperty = /**
     * @private
     * @return {?}
     */
    function () {
        this._columns.forEach(function (column) { return column.property = column.property || column.column; });
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableBaseComponent.prototype.setColumnLink = /**
     * @private
     * @return {?}
     */
    function () {
        this.columns.forEach(function (column) {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        });
    };
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    ThfTableBaseComponent.prototype.unselectOtherRows = /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    function (rows, row) {
        rows.forEach(function (item) {
            if (item !== row) {
                item.$selected = false;
            }
        });
    };
    ThfTableBaseComponent.propDecorators = {
        items: [{ type: i0.Input, args: ['t-items',] }],
        columns: [{ type: i0.Input, args: ['t-columns',] }],
        container: [{ type: i0.Input, args: ['t-container',] }],
        hideTextOverflow: [{ type: i0.Input, args: ['t-hide-text-overflow',] }],
        height: [{ type: i0.Input, args: ['t-height',] }],
        hideDetail: [{ type: i0.Input, args: ['t-hide-detail',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        loading: [{ type: i0.Input, args: ['t-loading',] }],
        checkbox: [{ type: i0.Input, args: ['t-checkbox',] }],
        actions: [{ type: i0.Input, args: ['t-actions',] }],
        setSort: [{ type: i0.Input, args: ['t-sort',] }],
        setShowMoreDisabled: [{ type: i0.Input, args: ['t-show-more-disabled',] }],
        setStriped: [{ type: i0.Input, args: ['t-striped',] }],
        setHideSelectAll: [{ type: i0.Input, args: ['t-hide-select-all',] }],
        setSingleSelect: [{ type: i0.Input, args: ['t-single-select',] }],
        noData: [{ type: i0.Input, args: ['t-no-data',] }],
        allSelected: [{ type: i0.Output, args: ['t-all-selected',] }],
        allUnselected: [{ type: i0.Output, args: ['t-all-unselected',] }],
        selected: [{ type: i0.Output, args: ['t-selected',] }],
        showMore: [{ type: i0.Output, args: ['t-show-more',] }],
        unselected: [{ type: i0.Output, args: ['t-unselected',] }]
    };
    return ThfTableBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-table
 *   [t-columns]="columns"
 *   [t-items]="items">
 *     <ng-template t-table-row-template let-rowItem let-i="rowIndex" [t-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-table
 *   [t-columns]="columns"
 *   [t-items]="items">
 *     <div *t-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **t-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `t-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <thf-table
 *        [t-columns]="columns"
 *        [t-items]="items">
 *          <ng-template t-table-row-template let-rowItem let-i="rowIndex" [t-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
var ThfTableRowTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfTableRowTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfTableRowTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[t-table-row-template]'
                },] },
    ];
    /** @nocollapse */
    ThfTableRowTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    ThfTableRowTemplateDirective.propDecorators = {
        thfTableRowTemplateShow: [{ type: i0.Input, args: ['t-table-row-template-show',] }]
    };
    return ThfTableRowTemplateDirective;
}());

var __extends$16 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfTableBaseComponent
 *
 * \@example
 *
 * <example name="thf-table-basic" title="Totvs Table Basic">
 *  <file name="sample-thf-table-basic/sample-thf-table-basic.component.ts"> </file>
 *  <file name="sample-thf-table-basic/sample-thf-table-basic.component.html"> </file>
 * </example>
 *
 * <example name="thf-table-labs" title="Totvs Table Labs">
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.ts"> </file>
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.html"> </file>
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.po.ts"> </file>
 *  <file name="sample-thf-table-labs/sample-thf-table-labs.service.ts"> </file>
 * </example>
 *
 * <example name="thf-table-transport" title="Totvs Table - Transport">
 *  <file name="sample-thf-table-transport/sample-thf-table-transport.component.ts"> </file>
 *  <file name="sample-thf-table-transport/sample-thf-table-transport.component.html"> </file>
 *  <file name="sample-thf-table-transport/sample-thf-table-transport.service.ts"> </file>
 * </example>
 *
 * <example name="thf-table-airfare" title="Totvs Table - Airfare">
 *  <file name="sample-thf-table-airfare/sample-thf-table-airfare.component.ts"> </file>
 *  <file name="sample-thf-table-airfare/sample-thf-table-airfare.component.html"> </file>
 *  <file name="sample-thf-table-airfare/sample-thf-table-airfare.service.ts"> </file>
 * </example>
 *
 * <example name="thf-table-components" title="Totvs Table - Thf Field Components">
 *  <file name="sample-thf-table-components/sample-thf-table-components.component.ts"> </file>
 *  <file name="sample-thf-table-components/sample-thf-table-components.component.html"> </file>
 * </example>
 */
var ThfTableComponent = /** @class */ (function (_super) {
    __extends$16(ThfTableComponent, _super);
    function ThfTableComponent(thfDate, differs, viewRef, renderer, changeDetector, decimalPipe, router$$1) {
        var _this = _super.call(this, thfDate) || this;
        _this.changeDetector = changeDetector;
        _this.decimalPipe = decimalPipe;
        _this.router = router$$1;
        _this.tableOpacity = 0;
        _this.initialized = false;
        _this.visibleElement = false;
        _this.parentRef = viewRef['_view']['component'];
        _this.differ = differs.find([]).create(null);
        // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas não sofrem
        // alteração de largura, pois o ngDoCheck não é executado.
        _this.clickListener = renderer.listen('document', 'click', function () { });
        _this.resizeListener = renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
        return _this;
    }
    Object.defineProperty(ThfTableComponent.prototype, "detailHideSelect", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var masterDetail = this.getColumnMasterDetail();
            return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableComponent.prototype, "firstAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableComponent.prototype, "hasRowTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.tableRowTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableComponent.prototype, "visibleActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.actions && this.actions.filter(function (action) { return action.visible !== false; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
        if (!this.container) {
            this.hideContainer();
        }
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkChangesItems();
        this.verifyCalculateHeightTableContainer();
        // Permite que os cabeçalhos sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (this.tableWrapperElement.nativeElement.offsetWidth && !this.visibleElement && this.initialized) {
            this.debounceResize();
            this.visibleElement = true;
        }
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    ThfTableComponent.prototype.executeTableAction = /**
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    function (row, tableAction) {
        if (!row.disabled && !this.validateTableAction(row, tableAction)) {
            if (typeof tableAction.action === 'string') {
                this.parentRef[tableAction.action](row);
            }
            else {
                tableAction.action.call(this.parentRef, row);
            }
            this.toggleRowAction(row);
        }
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.columnCountForMasterDetail = /**
     * @return {?}
     */
    function () {
        return (this.getMainColumns().length + 1) + (this.actions.length > 0 ? 1 : 0) + (this.checkbox ? 1 : 0);
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.columnCount = /**
     * @return {?}
     */
    function () {
        return (this.getMainColumns().length +
            (this.actions.length > 0 ? 1 : 0) +
            (this.checkbox ? 1 : 0) +
            (!this.hideDetail && this.getColumnMasterDetail() !== undefined ? 1 : 0));
    };
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    ThfTableComponent.prototype.formatNumber = /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    };
    /**
     * @param {?} row
     * @param {?} subtitleColumn
     * @return {?}
     */
    ThfTableComponent.prototype.getSubtitleColumn = /**
     * @param {?} row
     * @param {?} subtitleColumn
     * @return {?}
     */
    function (row, subtitleColumn) {
        return subtitleColumn.subtitles.find(function (subtitleItem) { return row[subtitleColumn.property] === subtitleItem.value; });
    };
    /**
     * @param {?} rowValue
     * @param {?} columnBoolean
     * @return {?}
     */
    ThfTableComponent.prototype.getBooleanLabel = /**
     * @param {?} rowValue
     * @param {?} columnBoolean
     * @return {?}
     */
    function (rowValue, columnBoolean) {
        if (rowValue || rowValue === false || rowValue === 0) {
            rowValue = convertToBoolean(rowValue);
            if (columnBoolean.boolean) {
                return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'Não';
            }
            else {
                return rowValue ? 'Sim' : 'Não';
            }
        }
        return rowValue;
    };
    /**
     * @param {?} row
     * @param {?} columnIcon
     * @return {?}
     */
    ThfTableComponent.prototype.getColumnIcons = /**
     * @param {?} row
     * @param {?} columnIcon
     * @return {?}
     */
    function (row, columnIcon) {
        /** @type {?} */
        var columnValues = row[columnIcon.property];
        if (columnIcon.icons) {
            if (columnValues instanceof Array) {
                return this.mergeCustomIcons(columnValues, columnIcon.icons);
            }
            if (typeof columnValues === 'string') {
                /** @type {?} */
                var customIcon = columnIcon.icons.find(function (icon) { return columnValues === icon.value; });
                if (customIcon) {
                    return [customIcon];
                }
            }
        }
        return columnValues;
    };
    /**
     * @param {?} row
     * @param {?} columnLabel
     * @return {?}
     */
    ThfTableComponent.prototype.getColumnLabel = /**
     * @param {?} row
     * @param {?} columnLabel
     * @return {?}
     */
    function (row, columnLabel) {
        return columnLabel.labels.find(function (labelItem) { return row[columnLabel.property] === labelItem.value; });
    };
    /**
     * @param {?} column
     * @return {?}
     */
    ThfTableComponent.prototype.getColumnTitleLabel = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.label || capitalizeFirstLetter(column.property);
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.verifyWidthColumnsPixels = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var columns = this.getMainColumns();
        return columns.length ? columns.every(function (column) { return column.width && column.width.includes('px'); }) : false;
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.calculateWidthHeaders = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (_this.height) {
                _this.headersTable.forEach(function (header) {
                    /** @type {?} */
                    var divHeader = header.nativeElement.querySelector('.thf-table-header-fixed-inner');
                    if (divHeader) {
                        divHeader.style.width = header.nativeElement.offsetWidth + "px";
                    }
                });
            }
        });
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableComponent.prototype.containsMasterDetail = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return row[this.getNameColumnDetail()] && row[this.getNameColumnDetail()].length;
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    ThfTableComponent.prototype.isShowRowTemplate = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        if (this.tableRowTemplate && this.tableRowTemplate.thfTableRowTemplateShow) {
            return this.tableRowTemplate.thfTableRowTemplateShow(row, index);
        }
        return true;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableComponent.prototype.isShowMasterDetail = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return !this.hideDetail &&
            this.getNameColumnDetail() &&
            row.$showDetail &&
            this.containsMasterDetail(row) &&
            !this.hasRowTemplate;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfTableComponent.prototype.tooltipMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.tooltipText = undefined;
        if (this.hideTextOverflow &&
            event.target.offsetWidth < event.target.scrollWidth &&
            event.target.innerText.trim()) {
            this.tooltipText = event.target.innerText;
        }
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.tooltipMouseLeave = /**
     * @return {?}
     */
    function () {
        this.tooltipText = undefined;
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.verifyChangeHeightInFooter = /**
     * @return {?}
     */
    function () {
        return this.footerHeight !== this.getHeightTableFooter();
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.verifyCalculateHeightTableContainer = /**
     * @return {?}
     */
    function () {
        if (this.height && this.verifyChangeHeightInFooter()) {
            this.footerHeight = this.getHeightTableFooter();
            this.calculateHeightTableContainer(this.height);
        }
    };
    /**
     * @param {?} height
     * @return {?}
     */
    ThfTableComponent.prototype.calculateHeightTableContainer = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        /** @type {?} */
        var value = parseFloat(height);
        this.heightTableContainer = value ? (value - this.getHeightTableFooter()) : undefined;
        this.setTableOpacity(1);
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    ThfTableComponent.prototype.getTypeColumnLink = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        /** @type {?} */
        var rowLink;
        if (column.action) {
            return 'action';
        }
        rowLink = row[column.link];
        if (rowLink && rowLink.startsWith('http')) {
            return 'externalLink';
        }
        return 'internalLink';
    };
    /**
     * @param {?} row
     * @param {?} targetRef
     * @return {?}
     */
    ThfTableComponent.prototype.togglePopup = /**
     * @param {?} row
     * @param {?} targetRef
     * @return {?}
     */
    function (row, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.thfPopupComponent.toggle(row);
    };
    /**
     * @protected
     * @param {?} container
     * @return {?}
     */
    ThfTableComponent.prototype.showContainer = /**
     * @protected
     * @param {?} container
     * @return {?}
     */
    function (container) {
        /** @type {?} */
        var containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;
        containerClassList.add('thf-container');
        container === 'border' ? containerClassList.add('thf-container-no-shadow') : containerClassList.remove('thf-container-no-shadow');
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.checkChangesItems = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && !this.hasColumns() && this.hasItems()) {
            this.columns = this.getDefaultColumns(this.items[0]);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.getHeightTableFooter = /**
     * @private
     * @return {?}
     */
    function () {
        return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.hideContainer = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;
        containerClassList.remove('thf-container');
    };
    /**
     * @private
     * @param {?} columnValues
     * @param {?} customIcons
     * @return {?}
     */
    ThfTableComponent.prototype.mergeCustomIcons = /**
     * @private
     * @param {?} columnValues
     * @param {?} customIcons
     * @return {?}
     */
    function (columnValues, customIcons) {
        /** @type {?} */
        var icons = [];
        columnValues.forEach(function (columnValue) {
            /** @type {?} */
            var foundCustomIcon = customIcons.find(function (customIcon) { return columnValue === customIcon.icon || columnValue === customIcon.value; });
            foundCustomIcon ? icons.push(foundCustomIcon) : icons.push(columnValue);
        });
        return icons;
    };
    /**
     * @private
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    ThfTableComponent.prototype.validateTableAction = /**
     * @private
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    function (row, tableAction) {
        if (typeof tableAction.disabled === 'function') {
            return tableAction.disabled.call(this.parentRef, row);
        }
        else {
            return tableAction.disabled;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.calculateWidthHeaders();
            // show the table
            _this.setTableOpacity(1);
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
        if (this.clickListener) {
            this.clickListener();
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfTableComponent.prototype.setTableOpacity = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.tableOpacity = value;
    };
    ThfTableComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-table', template: "<thf-container #tableContainer t-no-padding> <div [class.thf-table-container-relative]=\"loading\"> <div *ngIf=\"loading\" class=\"thf-table-overlay\"> <thf-loading class=\"thf-table-overlay-content\" [t-text]=\"literals.loadingData\"></thf-loading> </div> <div class=\"thf-table-main-container\"> <div #tableWrapper class=\"thf-table-wrapper\" [class.thf-table-header-fixed-columns-pixels]=\"verifyWidthColumnsPixels()\" [style.opacity]=\"tableOpacity\"> <div class=\"thf-table-container\" *ngIf=\"height\" [style.height.px]=\"heightTableContainer\"> <div class=\"thf-table-header-fixed thf-table-header\"></div> <div class=\"thf-table-container-fixed-inner\"> <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container> </div> </div> <div *ngIf=\"!height\"> <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container> </div> </div> </div> </div> <div class=\"thf-table-footer\" *ngIf=\"hasItems() && getSubtitleColumns().length\"> <div *ngFor=\"let column of getSubtitleColumns()\"> <thf-table-subtitle-footer [t-literals]=\"literals\" [t-subtitles]=\"column.subtitles\"></thf-table-subtitle-footer> </div> </div> </thf-container> <div class=\"thf-row thf-table-footer-show-more\" [class.thf-invisible]=\"showMore.observers.length === 0\" #tableFooter> <thf-button class=\"thf-offset-xl-4 thf-offset-lg-4 thf-offset-md-3 thf-lg-4 thf-md-6\" [t-disabled]=\"showMoreDisabled\" [t-label]=\"literals.loadMoreData\" (t-click)=\"onShowMore()\"> </thf-button> </div> <ng-template #tableTemplate> <table class=\"thf-table\" [class.thf-table-striped]=\"striped\" [class.thf-table-layout-fixed]=\"hideTextOverflow\"> <thead> <tr [class.thf-table-header]=\"!height\"> <th *ngIf=\"checkbox && hasItems()\" class=\"thf-table-column-checkbox\"> <div [class.thf-table-header-fixed-inner]=\"height\"> <input *ngIf=\"!hideSelectAll\" type=\"checkbox\" class=\"thf-table-checkbox\" [class.thf-table-checkbox-checked]=\"selectAll\" [class.thf-table-checkbox-indeterminate]=\"selectAll === null\"> <label *ngIf=\"!hideSelectAll\" class=\"thf-table-checkbox-label thf-clickable\" (click)=\"selectAllRows()\"></label> </div> </th> <th *ngIf=\"hasItems() && !hideDetail && getColumnMasterDetail() !== undefined || hasRowTemplate\" class=\"thf-table-header-column thf-table-header-master-detail\"> </th> <th *ngIf=\"!hasColumns()\" class=\"thf-table-header-column thf-text-center\">{{ literals.noColumns }}</th> <th *ngFor=\"let column of getMainColumns(); let i = index\" #headersTable class=\"thf-table-header-ellipsis\" [style.width]=\"column.width\" [style.max-width]=\"column.width\" [style.min-width]=\"column.width\" [class.thf-clickable]=\"sort\" [class.thf-table-column-right]= \"column.type === 'currency' || column.type === 'number'\" [class.thf-table-header-subtitle]=\"column.type === 'subtitle'\" (click)=\"sortColumn(column)\"> <div *ngIf=\"height\" class=\"thf-table-header-fixed-inner\"> <ng-container *ngTemplateOutlet=\"contentHeaderTemplate\"></ng-container> </div> <div *ngIf=\"!height\"> <ng-container *ngTemplateOutlet=\"contentHeaderTemplate\"></ng-container> </div> <ng-template #contentHeaderTemplate> <span *ngIf=\"sort\" [class.thf-table-header-icon-unselected]= \"sortedColumn?.property !== column\" [class.thf-table-header-icon-descending]= \"sortedColumn?.property === column && sortedColumn.ascending\" [class.thf-table-header-icon-ascending]= \"sortedColumn?.property === column && !sortedColumn.ascending\"> </span> <span class=\"thf-table-header-ellipsis thf-table-header-block\" [t-tooltip]=\"tooltipText\" (mouseenter)=\"tooltipMouseEnter($event)\" (mouseleave)=\"tooltipMouseLeave()\"> {{ getColumnTitleLabel(column) }} </span> </ng-template> </th> <th *ngIf=\"visibleActions.length > 1 && hasItems()\" class=\"thf-table-header-action\"></th> <th *ngIf=\"visibleActions.length === 1 && hasItems()\" class=\"thf-table-header-single-action\"></th> </tr> </thead> <tbody class=\"thf-table-group-row\" *ngIf=\"!hasItems()\"> <tr class=\"thf-table-row\"> <td [colSpan]=\"columnCount()\" class=\"thf-table-no-data thf-text-center\"> <span> {{ literals.noData }} </span> </td> </tr> </tbody> <tbody class=\"thf-table-group-row\" *ngFor=\"let row of items, let rowIndex = index;\"> <tr class=\"thf-table-row\" [class.thf-table-row-active]=\"row.$selected || row.$selected === null && checkbox\"> <td *ngIf=\"checkbox\" class=\"thf-table-column thf-table-column-checkbox\"> <ng-container *ngIf=\"singleSelect; then inputRadio; else inputCheckbox\"> </ng-container> <ng-template #inputRadio> <input type=\"radio\" class=\"thf-radio-group-input\" [class.thf-radio-group-input-checked]=\"row.$selected\"> <label class=\"thf-radio-group-label thf-clickable\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"></label> </ng-template> <ng-template #inputCheckbox> <input type=\"checkbox\" class=\"thf-table-checkbox\" [class.thf-table-checkbox-checked]=\"row.$selected\"> <label class=\"thf-table-checkbox-label thf-clickable\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"></label> </ng-template> </td> <td *ngIf=\"(getColumnMasterDetail() !== undefined) && !hideDetail || hasRowTemplate\" (click)=\"row.$showDetail = !row.$showDetail\" class=\"thf-table-column-detail-toggle\"> <span *ngIf=\"(containsMasterDetail(row) && !hasRowTemplate) || isShowRowTemplate(row, rowIndex) && hasRowTemplate\" [class.thf-icon-arrow-up]=\"row.$showDetail\" [class.thf-icon-arrow-down]=\"!row.$showDetail\" class=\"thf-icon thf-clickable\"> </span> </td> <td *ngFor=\"let column of getMainColumns(), let columnIndex = index;\" [style.width]=\"column.width\" [style.max-width]=\"column.width\" [style.min-width]=\"column.width\" [class.thf-table-column]=\"column.type !== 'icon'\" [class.thf-table-column-right]=\"column.type == 'currency' || column.type == 'number'\" [class.thf-table-column-center]=\"column.type === 'subtitle'\" [class.thf-table-column-icons]=\"column.type === 'icon'\" [ngClass]=\"getClassColor(row, column)\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"> <div [class.thf-table-body-ellipsis]=\"hideTextOverflow\" [ngSwitch]=\"column.type\" [t-tooltip]=\"tooltipText\" (mouseenter)=\"tooltipMouseEnter($event)\" (mouseleave)=\"tooltipMouseLeave()\"> <span *ngSwitchCase=\"'boolean'\">{{ getBooleanLabel(row[column.property], column) }}</span> <span *ngSwitchCase=\"'currency'\">{{ row[column.property] | currency:column.format:'symbol':'1.2-2' }}</span> <span *ngSwitchCase=\"'date'\" >{{ row[column.property] | date: column.format || 'dd/MM/yyyy' }}</span> <span *ngSwitchCase=\"'time'\" >{{ row[column.property] | thf_time: column.format || 'HH:mm:ss.ffffff' }}</span> <span *ngSwitchCase=\"'dateTime'\" >{{ row[column.property] | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}</span> <span *ngSwitchCase=\"'number'\">{{ formatNumber(row[column.property], column.format) }}</span> <span *ngSwitchCase=\"'link'\"> <a class=\"thf-table-link\" *ngIf=\"getTypeColumnLink(row, column) === 'action'\" (click)='column.action(row[column.property], row)'> {{ row[column.property] }} </a> <a class=\"thf-table-link\" *ngIf=\"getTypeColumnLink(row, column) === 'externalLink'\" [href]=\"row[column.link]\" target=\"_blank\"> {{ row[column.property] }} </a> <a class=\"thf-table-link\" *ngIf=\"getTypeColumnLink(row, column) === 'internalLink'\" [routerLink]=\"row[column.link]\"> {{ row[column.property] }} </a> </span> <span *ngSwitchCase=\"'icon'\"> <thf-table-column-icon [t-icons]=\"getColumnIcons(row, column)\" [t-column]=\"column\" [t-row]=\"row\"> </thf-table-column-icon> </span> <span *ngSwitchCase=\"'subtitle'\"> <thf-table-subtitle-circle [t-subtitle]=\"getSubtitleColumn(row, column)\"></thf-table-subtitle-circle> </span> <span *ngSwitchCase=\"'label'\"> <thf-table-column-label [t-value]=\"getColumnLabel(row, column)\"></thf-table-column-label> </span> <span *ngSwitchDefault>{{ row[column.property] }}</span> </div> </td> <td *ngIf=\"visibleActions.length === 1\" class=\"thf-table-column thf-table-column-single-action\"> <div *ngIf=\"firstAction.visible !== false\" class=\"thf-table-single-action thf-clickable\" [class.thf-table-action-disabled]= \"firstAction.disabled ? validateTableAction(row, firstAction) : false\" (click)=\"executeTableAction(row, firstAction)\"> <span *ngIf=\"firstAction.icon\" class=\"thf-icon {{ firstAction.icon }}\"></span> {{ firstAction.label }} </div> </td> <td *ngIf=\"visibleActions.length > 1\" class=\"thf-table-column-actions\"> <span #popupTarget class=\"thf-icon thf-icon-more thf-clickable\" (click)=\"togglePopup(row, popupTarget)\"> </span> </td> </tr> <tr *ngIf=\"hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\"> <td class=\"thf-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail()\"> <ng-template [ngTemplateOutlet]=\"tableRowTemplate.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\"> </ng-template> </td> </tr> <tr *ngIf=\"isShowMasterDetail(row)\"> <td class=\"thf-table-column-detail\" [colSpan]=\"columnCountForMasterDetail()\"> <thf-table-detail [t-checkbox]=\"checkbox && !detailHideSelect\" [t-detail]=\"getColumnMasterDetail().detail\" [t-items]=\"row[getNameColumnDetail()]\" (t-select-row)=\"selectDetailRow($event)\"> </thf-table-detail> </td> </tr> </tbody> </table> <thf-popup #popup [t-actions]=\"actions\" [t-target]=\"popupTarget\"> </thf-popup> </ng-template> ",
                    providers: [ThfDateService]
                },] },
    ];
    /** @nocollapse */
    ThfTableComponent.ctorParameters = function () { return [
        { type: ThfDateService },
        { type: i0.IterableDiffers },
        { type: i0.ViewContainerRef },
        { type: i0.Renderer2 },
        { type: i0.ChangeDetectorRef },
        { type: common.DecimalPipe },
        { type: router.Router }
    ]; };
    ThfTableComponent.propDecorators = {
        tableRowTemplate: [{ type: i0.ContentChild, args: [ThfTableRowTemplateDirective,] }],
        thfPopupComponent: [{ type: i0.ViewChild, args: ['popup',] }],
        tableContainerElement: [{ type: i0.ViewChild, args: ['tableContainer', { read: i0.ElementRef },] }],
        tableFooterElement: [{ type: i0.ViewChild, args: ['tableFooter', { read: i0.ElementRef },] }],
        tableWrapperElement: [{ type: i0.ViewChild, args: ['tableWrapper', { read: i0.ElementRef },] }],
        actionsIconElement: [{ type: i0.ViewChildren, args: ['actionsIconElement', { read: i0.ElementRef },] }],
        actionsElement: [{ type: i0.ViewChildren, args: ['actionsElement', { read: i0.ElementRef },] }],
        headersTable: [{ type: i0.ViewChildren, args: ['headersTable',] }]
    };
    return ThfTableComponent;
}(ThfTableBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por apresentar o detalhe de cada linha da tabela.
 */
var ThfTableDetailComponent = /** @class */ (function () {
    function ThfTableDetailComponent(decimalPipe) {
        this.decimalPipe = decimalPipe;
        /**
         * Define se a tabela possui a opção de `checkbox` habilitada.
         */
        this.hasCheckbox = false;
        /**
         * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `thf-table`.
         */
        this.selectRow = new i0.EventEmitter();
    }
    Object.defineProperty(ThfTableDetailComponent.prototype, "detail", {
        get: /**
         * @return {?}
         */
        function () {
            return this._detail;
        },
        /**
         * Configuração da linha de detalhes.
         */
        set: /**
         * Configuração da linha de detalhes.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._detail = this.returnThfTableDetailObject(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableDetailComponent.prototype, "detailColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.detail && this.detail.columns || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableDetailComponent.prototype, "typeHeaderInline", {
        get: /**
         * @return {?}
         */
        function () {
            return this.detail && !this.detail['typeHeader'] || this.detail['typeHeader'] === 'inline';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTableDetailComponent.prototype, "typeHeaderTop", {
        get: /**
         * @return {?}
         */
        function () {
            return this.detail && this.detail['typeHeader'] === 'top';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    ThfTableDetailComponent.prototype.formatNumberDetail = /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    };
    /**
     * @param {?} detail
     * @return {?}
     */
    ThfTableDetailComponent.prototype.getColumnTitleLabel = /**
     * @param {?} detail
     * @return {?}
     */
    function (detail) {
        return detail.label || capitalizeFirstLetter(detail.property);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfTableDetailComponent.prototype.onSelectRow = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item.$selected = !item.$selected;
        this.selectRow.emit(item);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfTableDetailComponent.prototype.returnThfTableDetailObject = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && isTypeof(value, 'object')) {
            if (value.columns) {
                value.columns.forEach(function (column) { return column.property = column.property || column.column; });
            }
            if (Array.isArray(value)) {
                return { columns: value };
            }
            if (value.columns) {
                return value;
            }
        }
    };
    ThfTableDetailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-table-detail', template: "<table class=\"thf-table-master-detail\"> <thead *ngIf=\"typeHeaderTop\"> <tr> <th class=\"thf-table-header thf-table-column-checkbox\" *ngIf=\"hasCheckbox\"></th> <th class=\"thf-table-header thf-table-header-column thf-table-header-master-detail\"></th> <th class=\"thf-table-header thf-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\"> {{ getColumnTitleLabel(detail) }} </th> </tr> </thead> <tbody> <tr class=\"thf-table-detail-row\" [class.thf-table-row-active]=\"item.$selected && hasCheckbox\" *ngFor=\"let item of items\"> <ng-container *ngIf=\"hasCheckbox; else masterDetailSpace\"> <td class=\"thf-table-column-master-detail-space-checkbox\"></td> <td class=\"thf-table-column thf-table-column-checkbox\"> <input class=\"thf-table-checkbox\" type=\"checkbox\" [class.thf-table-checkbox-checked]=\"item.$selected\"> <label class=\"thf-table-checkbox-label thf-clickable\" (click)=\"onSelectRow(item)\"> </label> </td> </ng-container> <ng-template #masterDetailSpace> <td class=\"thf-table-column-master-detail-space\"></td> </ng-template> <td class=\"thf-table-column-master-detail thf-table-master-detail-label\" (click)=\"hasCheckbox ? onSelectRow(item) : 'javascript:;'\" *ngFor=\"let detail of detailColumns\"> <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong> <ng-container [ngSwitch]=\"detail.type\"> <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span> <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span> <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | thf_time: detail.format || 'HH:mm:ss.ffffff' }}</span> <span *ngSwitchCase=\"'dateTime'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}</span> <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span> <span *ngSwitchDefault>{{ item[detail.property] }}</span> </ng-container> </td> </tr> </tbody> </table> "
                },] },
    ];
    /** @nocollapse */
    ThfTableDetailComponent.ctorParameters = function () { return [
        { type: common.DecimalPipe }
    ]; };
    ThfTableDetailComponent.propDecorators = {
        hasCheckbox: [{ type: i0.Input, args: ['t-checkbox',] }],
        detail: [{ type: i0.Input, args: ['t-detail',] }],
        items: [{ type: i0.Input, args: ['t-items',] }],
        selectRow: [{ type: i0.Output, args: ['t-select-row',] }]
    };
    return ThfTableDetailComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a criação de um botão e modal para visualização de todas as legendas.
 */
var ThfTableShowSubtitleComponent = /** @class */ (function () {
    function ThfTableShowSubtitleComponent() {
    }
    ThfTableShowSubtitleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-table-show-subtitle', template: "<div class=\"thf-table-footer-show-subtitle\" (click)=\"modal.open()\"> <div class=\"thf-table-footer-show-subtitle-container\"> <span class=\"thf-table-show-subtitle\">{{ literals.seeCompleteSubtitle }}</span> </div> </div> <thf-modal #modal t-size=\"sm\" [t-title]=\"literals.completeSubtitle\"> <div *ngFor=\"let subtitle of subtitles\" class=\"thf-table-subtitle-footer-modal thf-row\"> <thf-table-subtitle-circle t-hide-title=\"true\" [t-subtitle]=\"subtitle\"> </thf-table-subtitle-circle> <span class=\"thf-table-subtitle-text\">{{ subtitle.label }}</span> </div> </thf-modal> "
                },] },
    ];
    ThfTableShowSubtitleComponent.propDecorators = {
        subtitles: [{ type: i0.Input, args: ['t-subtitles',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }]
    };
    return ThfTableShowSubtitleComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a criação da representação da legenda, em formato de círculo.
 */
var ThfTableSubtitleCircleComponent = /** @class */ (function () {
    function ThfTableSubtitleCircleComponent(thfColorPaletteService) {
        this.thfColorPaletteService = thfColorPaletteService;
        /**
         * Esconde a tooltip.
         */
        this.hideTitle = false;
    }
    Object.defineProperty(ThfTableSubtitleCircleComponent.prototype, "subtitle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._subtitle;
        },
        /** Objeto com os dados da legenda. */
        set: /**
         * Objeto com os dados da legenda.
         * @param {?} subtitle
         * @return {?}
         */
        function (subtitle) {
            if (subtitle) {
                subtitle.color = this.thfColorPaletteService.getColor(subtitle);
            }
            this._subtitle = subtitle;
        },
        enumerable: true,
        configurable: true
    });
    ThfTableSubtitleCircleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-table-subtitle-circle', template: "<span [title]=\"hideTitle ? '' : subtitle?.label\" class=\"thf-table-subtitle-circle thf-{{ subtitle?.color }}\"> {{ subtitle?.content }} </span> "
                },] },
    ];
    /** @nocollapse */
    ThfTableSubtitleCircleComponent.ctorParameters = function () { return [
        { type: ThfColorPaletteService }
    ]; };
    ThfTableSubtitleCircleComponent.propDecorators = {
        subtitle: [{ type: i0.Input, args: ['t-subtitle',] }],
        hideTitle: [{ type: i0.Input, args: ['t-hide-title',] }]
    };
    return ThfTableSubtitleCircleComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a criação de um conjunto de legendas.
 */
var ThfTableSubtitleFooterComponent = /** @class */ (function () {
    function ThfTableSubtitleFooterComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ThfTableSubtitleFooterComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initializeResizeListener();
        this.debounceResize();
    };
    /**
     * @return {?}
     */
    ThfTableSubtitleFooterComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeResizeListener();
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableSubtitleFooterComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.toggleShowCompleteSubtitle();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableSubtitleFooterComponent.prototype.getContainerSize = /**
     * @private
     * @return {?}
     */
    function () {
        return this.element.nativeElement.querySelector('.thf-table-subtitle-footer-container').offsetWidth;
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableSubtitleFooterComponent.prototype.getItemsSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var items = this.element.nativeElement.querySelectorAll('.thf-table-subtitle-footer');
        return Array.from(items).map(function (item) { return item['offsetWidth']; }).reduce(function (a, b) { return a + b; }, 16);
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableSubtitleFooterComponent.prototype.initializeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableSubtitleFooterComponent.prototype.removeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    /**
     * @private
     * @return {?}
     */
    ThfTableSubtitleFooterComponent.prototype.toggleShowCompleteSubtitle = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containerSize = this.getContainerSize();
        /** @type {?} */
        var itemsSize = this.getItemsSize();
        this.showSubtitle = itemsSize > containerSize;
    };
    ThfTableSubtitleFooterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-table-subtitle-footer', template: "<div class=\"thf-table-subtitle-footer-container\"> <div *ngFor=\"let subtitle of subtitles\" class=\"thf-table-subtitle-footer\"> <thf-table-subtitle-circle t-hide-title=\"true\" [t-subtitle]=\"subtitle\"> </thf-table-subtitle-circle> <span class=\"thf-table-subtitle-text\">{{ subtitle.label }}</span> </div> <thf-table-show-subtitle *ngIf=\"showSubtitle\" [t-literals]=\"literals\" [t-subtitles]=\"subtitles\"> </thf-table-show-subtitle> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfTableSubtitleFooterComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    ThfTableSubtitleFooterComponent.propDecorators = {
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        subtitles: [{ type: i0.Input, args: ['t-subtitles',] }]
    };
    return ThfTableSubtitleFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-table
 */
var ThfTableModule = /** @class */ (function () {
    function ThfTableModule() {
    }
    ThfTableModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule,
                        ThfButtonModule,
                        ThfContainerModule,
                        ThfLoadingModule,
                        ThfModalModule,
                        ThfPopupModule,
                        ThfTimeModule,
                        ThfTooltipModule
                    ],
                    declarations: [
                        ThfTableComponent,
                        ThfTableColumnIconComponent,
                        ThfTableColumnLabelComponent,
                        ThfTableDetailComponent,
                        ThfTableRowTemplateDirective,
                        ThfTableShowSubtitleComponent,
                        ThfTableSubtitleCircleComponent,
                        ThfTableSubtitleFooterComponent
                    ],
                    exports: [
                        ThfTableComponent,
                        ThfTableRowTemplateDirective
                    ],
                    providers: [common.DecimalPipe]
                },] },
    ];
    return ThfTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfCalendarLangService$1 = /** @class */ (function () {
    function ThfCalendarLangService() {
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.wordMonth = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.wordYear = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
        this.lang = 'pt';
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    ThfCalendarLangService.prototype.setLanguage = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        if (lang && lang.length >= 2) {
            lang = lang.toLowerCase().slice(0, 2);
            this.lang = (lang === 'pt' || lang === 'en' || lang === 'es') ? lang : 'pt';
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWordMonth = /**
     * @return {?}
     */
    function () {
        return this.wordMonth[this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWordYear = /**
     * @return {?}
     */
    function () {
        return this.wordYear[this.lang];
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarLangService.prototype.getMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        return this.months[month][this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getArrayMonths = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrMonths = Array();
        for (var i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.lang]);
        }
        return arrMonths;
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWeedDays = /**
     * @param {?} day
     * @return {?}
     */
    function (day) {
        return this.shortWeekDays[day][this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getArrayWeekDays = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrWeekDays = Array();
        for (var i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.lang]);
        }
        return arrWeekDays;
    };
    ThfCalendarLangService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfCalendarLangService.ctorParameters = function () { return []; };
    return ThfCalendarLangService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfCalendarService$1 = /** @class */ (function () {
    function ThfCalendarService() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarService.prototype.weekStartDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    ThfCalendarService.prototype.monthDates = /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        var weeks = [];
        /** @type {?} */
        var week = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var date = new Date(year, month, 1);
        setYearFrom0To100(date, year);
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarService.prototype.monthDays = /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    };
    ThfCalendarService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfCalendarService.ctorParameters = function () { return []; };
    return ThfCalendarService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfCalendarLocaleDefault$1 = 'pt';
/** @type {?} */
var thfCalendarLocales$1 = ['pt', 'en', 'es'];
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de calendário de uso interno
 */
var ThfCalendarComponent$1 = /** @class */ (function () {
    function ThfCalendarComponent(thfCalendarService, thfCalendarLangService) {
        this.thfCalendarService = thfCalendarService;
        this.thfCalendarLangService = thfCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.monthVisible = false;
        this.overlayInvisible = true;
        this.visible = false;
        this.yearVisible = false;
        this.isMobile = isMobile;
        this.today = new Date();
        this.selectedDateChange = new i0.EventEmitter();
        this.submit = new i0.EventEmitter();
    }
    Object.defineProperty(ThfCalendarComponent.prototype, "dateEnd", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateEnd;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data máxima possível de ser selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data máxima possível de ser selecionada no calendário.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val instanceof Date) {
                /** @type {?} */
                var year = val.getFullYear();
                /** @type {?} */
                var month = val.getMonth();
                /** @type {?} */
                var day = val.getDate();
                /** @type {?} */
                var date = new Date(year, month, day, 23, 59, 59);
                setYearFrom0To100(date, year);
                this._dateEnd = date;
            }
            else {
                this._dateEnd = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            this._locale = thfCalendarLocales$1.includes(locale) ? locale : thfCalendarLocaleDefault$1;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "selectedDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data selecionada no calendário.
         * @param {?} selectedDate
         * @return {?}
         */
        function (selectedDate) {
            this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateStart", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateStart;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data mínima possível de ser selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data mínima possível de ser selecionada no calendário.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val instanceof Date) {
                /** @type {?} */
                var year = val.getFullYear();
                /** @type {?} */
                var month = val.getMonth();
                /** @type {?} */
                var day = val.getDate();
                /** @type {?} */
                var date = new Date(year, month, day, 0, 0, 0);
                setYearFrom0To100(date, year);
                this._dateStart = date;
            }
            else {
                this._dateStart = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.overlayInvisible = true;
        this.visible = false;
    };
    // Obtém um array de todos os anos desta década
    // Obtém um array de todos os anos desta década
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getArrayDecade = 
    // Obtém um array de todos os anos desta década
    /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    ThfCalendarComponent.prototype.getBackgroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayBackgroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'thf-calendar-box-background-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'thf-calendar-box-background-today';
        }
        else if (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'thf-calendar-box-background';
            }
            else {
                return 'thf-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayForegroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'thf-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'thf-calendar-box-foreground-today';
        }
        else {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'thf-calendar-box-foreground';
            }
            else {
                return 'thf-calendar-box-foreground-disabled';
            }
        }
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    ThfCalendarComponent.prototype.getForegroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordMonth = /**
     * @return {?}
     */
    function () {
        return this.thfCalendarLangService.getWordMonth();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordYear = /**
     * @return {?}
     */
    function () {
        return this.thfCalendarLangService.getWordYear();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
        if (this.isMobile()) {
            this.overlayInvisible = false;
        }
        this.visible = true;
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.initializeLanguage = /**
     * @return {?}
     */
    function () {
        this.thfCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.thfCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.thfCalendarLangService.getArrayMonths();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextMonth = /**
     * @return {?}
     */
    function () {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevMonth = /**
     * @return {?}
     */
    function () {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    };
    // Ao selecionar uma data
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectDate = 
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (validateDateRange(date, this.dateStart, this.dateEnd)) {
            this.selectedDate = date;
            this.selectedDateChange.emit(date);
            this.submit.emit(date);
        }
    };
    // Ao selecionar um mês
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectMonth = 
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    // Ao selecionar um ano
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectYear = 
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDay = /**
     * @return {?}
     */
    function () {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectMonth = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectYear = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.setMobileVisualization = /**
     * @return {?}
     */
    function () {
        return this.isMobile() ? 'thf-calendar thf-calendar-mobile' : 'thf-calendar';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateYear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.addAllYearsInDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        /** @type {?} */
        var i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    };
    /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    ThfCalendarComponent.prototype.equalsDate = /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    };
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDisplay = /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var calendarArray = this.thfCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    };
    ThfCalendarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-calendar', template: "<div class=\"thf-calendar-overlay\" [class.thf-invisible]=\"overlayInvisible\"></div> <div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\"> <div *ngIf=\"dayVisible\" #days> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevMonth()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\" attr-calendar> <span class=\"thf-clickable thf-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"onNextMonth()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeedDays\"> {{ day.toLowerCase() }} </div> </div> <div class=\"thf-calendar-content-list-day\"> <div *ngFor=\"let day of displayDays\" class=\"thf-calendar-day thf-calendar-box-background\" (click)=\"onSelectDate(day)\" [ngClass]=\"getDayBackgroundColor(day)\"> <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\"> {{ day.getDate() }} </span> </div> </div> </div> </div> <div *ngIf=\"monthVisible\" #months> <div class=\"thf-calendar-nav\"> <span (click)=\"updateYear(-1)\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\" attr-calendar> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"updateYear(1)\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordMonth() }} </div> </div> <div class=\"thf-calendar-content-list-month\"> <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\" (click)=\"onSelectMonth(displayYear, i)\" [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" attr-calendar> <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\"> {{ month }} </span> </div> </div> </div> </div> <div *ngIf=\"yearVisible\" #years> <div class=\"thf-calendar-nav\"> <span (click)=\"updateYear(-10)\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> {{ displayStartDecade }} - {{ displayFinalDecade }} </div> <span (click)=\"updateYear(10)\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordYear() }} </div> </div> <div class=\"thf-calendar-content-list-year\"> <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\" (click)=\"onSelectYear(year, displayMonthNumber)\" [ngClass]=\"getBackgroundColor(year, currentYear)\" attr-calendar> <span [ngClass]=\"getForegroundColor(year, currentYear)\"> {{ year }} </span> </div> </div> </div> </div> </div> ",
                    providers: [ThfCalendarService$1, ThfCalendarLangService$1]
                },] },
    ];
    /** @nocollapse */
    ThfCalendarComponent.ctorParameters = function () { return [
        { type: ThfCalendarService$1 },
        { type: ThfCalendarLangService$1 }
    ]; };
    ThfCalendarComponent.propDecorators = {
        elDays: [{ type: i0.ViewChild, args: ['days', { read: i0.ElementRef },] }],
        elMonths: [{ type: i0.ViewChild, args: ['months', { read: i0.ElementRef },] }],
        elYears: [{ type: i0.ViewChild, args: ['years', { read: i0.ElementRef },] }],
        dateEnd: [{ type: i0.Input, args: ['t-date-end',] }],
        locale: [{ type: i0.Input, args: ['t-locale',] }],
        selectedDate: [{ type: i0.Input, args: ['t-selected-date',] }],
        dateStart: [{ type: i0.Input, args: ['t-date-start',] }],
        selectedDateChange: [{ type: i0.Output, args: ['t-selected-dateChange',] }],
        submit: [{ type: i0.Output, args: ['t-submit',] }]
    };
    return ThfCalendarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} required
 * @param {?} disabled
 * @param {?} value
 * @return {?}
 */
function requiredFailed(required, disabled, value) {
    /** @type {?} */
    var valid = ((typeof value === 'string' && value) || (typeof value === 'object' && value && value.length)
        || (typeof value === 'number' && (value || value === 0)) || (typeof value === 'boolean' && value));
    return (required && !disabled && !valid);
}
/**
 * @param {?} maxlength
 * @param {?} value
 * @return {?}
 */
function maxlengthFailed(maxlength, value) {
    /** @type {?} */
    var validMaxlength = maxlength || maxlength === 0;
    /** @type {?} */
    var validValue = (value || value === 0) && value.toString();
    return validMaxlength && validValue && validValue.length > Number(maxlength);
}
/**
 * @param {?} minlength
 * @param {?} value
 * @return {?}
 */
function minlengthFailed(minlength, value) {
    /** @type {?} */
    var validMinlength = minlength || minlength === 0;
    /** @type {?} */
    var validValue = (value || value === 0) && value.toString();
    return validMinlength && validValue && validValue.length < Number(minlength);
}
/**
 * @param {?} pattern
 * @param {?} value
 * @return {?}
 */
function patternFailed(pattern, value) {
    /** @type {?} */
    var reg;
    try {
        reg = new RegExp(pattern);
    }
    catch (e) {
        return true;
    }
    return (pattern && value && !reg.test(value));
}
/**
 * @param {?} min
 * @param {?} value
 * @return {?}
 */
function minFailed(min, value) {
    /** @type {?} */
    var validValue = value || value === 0;
    /** @type {?} */
    var validMin = min || min === 0;
    return validValue && validMin && value < min;
}
/**
 * @param {?} max
 * @param {?} value
 * @return {?}
 */
function maxFailed(max, value) {
    /** @type {?} */
    var validValue = value || value === 0;
    /** @type {?} */
    var validMax = max || max === 0;
    return validValue && validMax && value > max;
}
/**
 * @param {?} value
 * @return {?}
 */
function dateFailed(value) {
    return (value && isNaN(Date.parse(value)));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfCheckboxGroupColumnsDefaultLength = 6;
/** @type {?} */
var thfCheckboxGroupColumnsTotalLength = 12;
/**
 * \@description
 *
 * O componente `thf-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
 * utilizando a tecla de espaço ou o clique do mouse, várias opções.
 *
 * > Para seleção única, utilize o [**Totvs Radio Group**](/documentation/thf-radio-group).
 *
 * Por padrão, o thf-checkbox-group retorna um array com os valores dos itens selecionados para o model.
 *
 * ```
 * favorites = ['THF', 'Angular'];
 * ```
 *
 * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
 * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
 * deve setar a propriedade `t-indeterminate` como `true`.
 *
 * Nesse caso, o thf-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
 *
 * ```
 * favorites = {
 *  THF: true,
 *  Angular: true,
 *  VueJS: false,
 *  React: null // indeterminado
 * };
 * ```
 */
var ThfCheckboxGroupBaseComponent = /** @class */ (function () {
    function ThfCheckboxGroupBaseComponent() {
        this.checkedOptions = {};
        this.checkedOptionsList = [];
        this.mdColumns = thfCheckboxGroupColumnsDefaultLength;
        this._columns = thfCheckboxGroupColumnsDefaultLength;
        this._disabled = false;
        this._indeterminate = false;
        this._required = false;
        // Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new i0.EventEmitter();
        /**
         * Evento disparado ao alterar valor do campo
         */
        this.change = new i0.EventEmitter();
    }
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
         * - É possível exibir as opções entre `1` e `4` colunas.
         * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
         * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
         * o *grid system* será composto por `2` colunas.
         *
         * @default `2`
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
         * - É possível exibir as opções entre `1` e `4` colunas.
         * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
         * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
         * o *grid system* será composto por `2` colunas.
         *
         * \@default `2`
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var columns = convertToInt(value, thfCheckboxGroupColumnsDefaultLength);
            this._columns = this.getGridSystemColumns(columns, 4);
            this.mdColumns = this.getGridSystemColumns(columns, 2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita todos os itens do checkbox.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita todos os itens do checkbox.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "indeterminate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._indeterminate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
         * a propriedade `t-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
         *
         * Quando essa propriedade é setada como `true`, o *thf-checkbox-group* passa a devolver um objeto completo para o
         * `ngModel`, diferente do array que contém apenas os valores selecionados.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
         * a propriedade `t-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
         *
         * Quando essa propriedade é setada como `true`, o *thf-checkbox-group* passa a devolver um objeto completo para o
         * `ngModel`, diferente do array que contém apenas os valores selecionados.
         *
         * \@default `false`
         * @param {?} indeterminate
         * @return {?}
         */
        function (indeterminate) {
            this._indeterminate = convertToBoolean(indeterminate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * @optional
         *
         * @description
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption
         */
        set: /**
         * \@optional
         *
         * \@description
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = Array.isArray(value) ? value : [];
            this.removeDuplicatedOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.changeValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.checkIndeterminate();
        if (this.propagateChange) {
            this.propagateChange(value);
        }
        else {
            this.ngModelChange.emit(value);
        }
        this.change.emit(value);
    };
    /**
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.checkIndeterminate = /**
     * @return {?}
     */
    function () {
        return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.checkOption = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this._disabled && !value.disabled) {
            this.checkOptionModel(value);
            this.changeValue();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} optionsModel
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.writeValue = /**
     * @param {?} optionsModel
     * @return {?}
     */
    function (optionsModel) {
        if (optionsModel && this.checkedOptions !== optionsModel) {
            this.generateCheckOptions(optionsModel);
        }
        else {
            this.checkedOptionsList = [];
            this.checkedOptions = {};
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) || this.isInvalidIndeterminate()) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.checkColumnsRange = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    };
    /**
     * @private
     * @param {?} optionChecked
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.checkOptionModel = /**
     * @private
     * @param {?} optionChecked
     * @return {?}
     */
    function (optionChecked) {
        this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
        if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
            this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
        }
        else if (!this.indeterminate) {
            this.checkedOptionsList.push(optionChecked.value);
        }
    };
    /**
     * @private
     * @param {?} optionsModel
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.generateCheckOptions = /**
     * @private
     * @param {?} optionsModel
     * @return {?}
     */
    function (optionsModel) {
        var _this = this;
        this.checkedOptions = {};
        if (optionsModel instanceof Array) {
            this.checkedOptionsList = optionsModel;
            this.options.forEach(function (option) {
                _this.checkedOptions[option.value] = optionsModel.includes(option.value);
            });
        }
        else {
            this.options.forEach(function (option) {
                optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                _this.checkedOptions = optionsModel;
            });
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.getGridSystemColumns = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var gridSystemColumns = thfCheckboxGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : thfCheckboxGroupColumnsDefaultLength;
    };
    /**
     * @private
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.isInvalidIndeterminate = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.indeterminate && this.required && this.checkedOptions) {
            return ((/** @type {?} */ (Object))).values(this.checkedOptions).every(function (value) { return value === false; });
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.removeDuplicatedOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.options.forEach(function (option, index) {
            /** @type {?} */
            var duplicatedIndex = _this.options.findIndex(function (optionFind) { return optionFind.value === option.value; }) === index;
            if (!duplicatedIndex) {
                _this.options.splice(_this.options.indexOf(option), 1);
            }
        });
    };
    ThfCheckboxGroupBaseComponent.propDecorators = {
        name: [{ type: i0.Input, args: ['name',] }],
        columns: [{ type: i0.Input, args: ['t-columns',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        indeterminate: [{ type: i0.Input, args: ['t-indeterminate',] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        options: [{ type: i0.Input, args: ['t-options',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        ngModelChange: [{ type: i0.Output, args: ['ngModelChange',] }],
        change: [{ type: i0.Output, args: ['t-change',] }]
    };
    return ThfCheckboxGroupBaseComponent;
}());

var __extends$17 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfCheckboxGroupBaseComponent
 *
 * \@example
 *
 * <example name="thf-checkbox-group-basic" title="Totvs Checkbox Group Basic">
 *  <file name="sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.html"> </file>
 *  <file name="sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-checkbox-group-labs" title="Totvs Checkbox Group Labs">
 *  <file name="sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.html"> </file>
 *  <file name="sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-checkbox-group-password-policy" title="Totvs Checkbox Group – Security policy">
 *  <file name="sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.html"> </file>
 *  <file name="sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.ts"> </file>
 * </example>
 */
var ThfCheckboxGroupComponent = /** @class */ (function (_super) {
    __extends$17(ThfCheckboxGroupComponent, _super);
    function ThfCheckboxGroupComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfCheckboxGroupComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    ThfCheckboxGroupComponent.prototype.onKeyDown = /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    function (event, option) {
        /** @type {?} */
        var spaceBar = 32;
        if (event.which === spaceBar || event.keyCode === spaceBar) {
            this.checkOption(option);
            event.preventDefault();
        }
    };
    ThfCheckboxGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-checkbox-group', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content thf-checkbox-group-content\"> <div class=\"thf-row thf-pt-1 thf-pb-1\"> <div *ngFor=\"let option of options; let i = index\" class=\"thf-checkbox-group-item thf-md-{{ mdColumns }} thf-lg-{{ columns }}\" [class.thf-checkbox-group-item-disabled]=\"option.disabled || disabled\"> <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\" [class.thf-checkbox-group-input-checked]=\"checkedOptions[option.value]\" [class.thf-checkbox-group-input-indeterminate]=\"checkedOptions[option.value] === null\" [checked]=\"option.value\" [disabled]=\"option.disabled || disabled\" [id]=\"'checkbox_' + i\" [required]=\"required\" [value]=\"option.value\"> <label #checkboxLabel class=\"thf-checkbox-group-label\" [class.thf-clickable]=\"checkboxLabel.tabIndex === 0\" [for]=\"'checkbox_' + i\" [tabindex]=\"option.disabled || disabled ? -1 : 0\" (click)=\"checkOption(option)\" (keydown)=\"onKeyDown($event, option)\"> {{option.label}} </label> </div> </div> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfCheckboxGroupComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfCheckboxGroupComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfCheckboxGroupComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    return ThfCheckboxGroupComponent;
}(ThfCheckboxGroupBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface ThfClean.
 * @abstract
 */
var ThfCleanBaseComponent = /** @class */ (function () {
    function ThfCleanBaseComponent() {
        /**
         * Valor que será atribuído ao campo quando for clicado no thf-clean.
         */
        this.defaultValue = '';
        /**
         * Evento disparado quando executada ação do thf-clean.
         * Este evento deve ser usado para avisar para o componente que está usando o thf-clean, que o botão foi disparado,
         * e provavelmente será preciso emitir o evento para atualizar o model.
         */
        this.changeEvent = new i0.EventEmitter();
    }
    /**
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    };
    /**
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.showIcon = /**
     * @return {?}
     */
    function () {
        return this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly();
    };
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o thf-clean deve ser usado.
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o thf-clean deve ser usado.
    /**
     * @private
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.hasCleanAttr = 
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o thf-clean deve ser usado.
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.parentComponent.clean;
    };
    // Este método verifica se o componente pai está desabilitado.
    // Este método verifica se o componente pai está desabilitado.
    /**
     * @private
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.isDisabled = 
    // Este método verifica se o componente pai está desabilitado.
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.parentComponent.disabled;
    };
    // Este método verifica se o componente pai está somente leitura.
    // Este método verifica se o componente pai está somente leitura.
    /**
     * @private
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.isReadonly = 
    // Este método verifica se o componente pai está somente leitura.
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.parentComponent.readonly;
    };
    ThfCleanBaseComponent.propDecorators = {
        inputRef: [{ type: i0.Input, args: ['t-element-ref',] }],
        defaultValue: [{ type: i0.Input, args: ['t-default-value',] }],
        changeEvent: [{ type: i0.Output, args: ['t-change-event',] }]
    };
    return ThfCleanBaseComponent;
}());

var __extends$18 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfCleanBaseComponent
 *
 * \@examplePrivate
 *
 * <example-private name="thf-clean-labs" title="Totvs Clean Labs">
 *   <file name="sample-thf-clean-labs.component.html"> </file>
 *   <file name="sample-thf-clean-labs.component.ts"> </file>
 * </example-private>
 */
var ThfCleanComponent = /** @class */ (function (_super) {
    __extends$18(ThfCleanComponent, _super);
    function ThfCleanComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.parentComponent = _this.viewRef['_view']['component'];
        return _this;
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    ThfCleanComponent.prototype.setInputValue = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (this.inputRef && this.inputRef.nativeElement) {
            this.inputRef.nativeElement.value = value;
        }
    };
    /**
     * @return {?}
     */
    ThfCleanComponent.prototype.getInputValue = /**
     * @return {?}
     */
    function () {
        if (this.inputRef && this.inputRef.nativeElement) {
            return this.inputRef.nativeElement.value;
        }
    };
    ThfCleanComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-clean', template: "<span *ngIf=\"showIcon()\" class=\"thf-icon thf-field-icon thf-icon-close\" (click)=\"clear()\"> </span> "
                },] },
    ];
    /** @nocollapse */
    ThfCleanComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };
    return ThfCleanComponent;
}(ThfCleanBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfComboFilterMode = {
    /** Verifica se o texto *inicia* com o valor pesquisado. Caso não seja especificado um tipo, será esse o utilizado. */
    startsWith: 0,
    /** Verifica se o texto *contém* o valor pesquisado. */
    contains: 1,
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    endsWith: 2,
};
ThfComboFilterMode[ThfComboFilterMode.startsWith] = 'startsWith';
ThfComboFilterMode[ThfComboFilterMode.contains] = 'contains';
ThfComboFilterMode[ThfComboFilterMode.endsWith] = 'endsWith';

var __assign$3 = (undefined && undefined.__assign) || function () {
    __assign$3 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$3.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
/** @type {?} */
var THF_COMBO_FIELD_LABEL_DEFAULT = 'label';
/** @type {?} */
var THF_COMBO_FIELD_VALUE_DEFAULT = 'value';
/**
 * \@description
 *
 * O thf-combo, semelhante ao thf-select, exibe uma lista de valores e permite ao usuário fazer a seleção de um desses valores,
 * mas no caso do thf-combo, o usuário ainda consegue filtrar os valores disponibilizados para seleção.
 *
 * Também há a possibilidade de usar serviço no thf-combo, através da propriedade t-filter-service.
 *
 * O comportamento do thf-combo permite ao usuário:
 *  - selecionar um item através do mouse;
 *  - navegar pelos itens utilizando as setas do teclado confirmando a seleção com "Enter";
 *  - pesquisar os itens da lista de seleção e em seguida navegar com as setas ou com o mouse;
 *  - digitar a descrição completa.
 *
 * O thf-combo guarda o último valor caso o usuário desista de uma busca, deixando o campo ou teclando "ESC".
 * Caso seja digitado no campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada
 * ao deixar o campo ou pressionando "Enter".
 *
 * É necessário que os itens da lista de selecão contenham sempre valor (value) e descrição (label) para que os itens apareçam corretamente
 * no thf-combo, itens que não estejam implementando corretamenta a interface ThfComboOption, serão descartados.
 *
 * O thf-combo ainda permite definir o modo que será feito o filtro, através da propriedade t-filter-mode.
 * @abstract
 */
var ThfComboBaseComponent = /** @class */ (function () {
    function ThfComboBaseComponent() {
        this._changeOnEnter = false;
        this._debounceTime = 400;
        this._disabled = false;
        this._disabledInitFilter = false;
        this._fieldLabel = 'label';
        this._fieldValue = 'value';
        this._filterMinlength = 0;
        this._filterMode = ThfComboFilterMode.startsWith;
        this._options = [];
        this._required = false;
        this.cacheOptions = [];
        this.cacheStaticOptions = [];
        this.firstInWriteValue = true;
        this.isFirstFilter = true;
        this.isFiltering = false;
        this.visibleOptions = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * Indica que a lista definida na propriedade t-options será ordenada pela descrição.
         */
        this.sort = false;
        /**
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new i0.EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new i0.EventEmitter();
    }
    Object.defineProperty(ThfComboBaseComponent.prototype, "filterService", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterService;
        },
        /**
         * @optional
         *
         * @description
         * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
         * itens no componente.
         * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface ThfComboFilter.
         *
         * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
         * `t-field-label` e `t-field-value` para a construção da lista de itens.
         *
         * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
         * ```
         * url + ?filter=Peter
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
         * itens no componente.
         * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface ThfComboFilter.
         *
         * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
         * `t-field-label` e `t-field-value` para a construção da lista de itens.
         *
         * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
         * ```
         * url + ?filter=Peter
         * ```
         * @param {?} service
         * @return {?}
         */
        function (service) {
            this._filterService = service;
            this.configAfterSetFilterService(service);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "debounceTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._debounceTime;
        },
        /**
         * @optional
         *
         * @description
         * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
         * Será utilizada apenas quando houver serviço (`t-filter-service`).
         *
         * @default `400`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
         * Será utilizada apenas quando houver serviço (`t-filter-service`).
         *
         * \@default `400`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var parsedValue = parseInt((/** @type {?} */ (value)), 10);
            this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : THF_COMBO_DEBOUNCE_TIME_DEFAULT;
            this.unsubscribeKeyupObservable();
            this.initInputObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "disabledInitFilter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledInitFilter;
        },
        /**
         * @optional
         *
         * @description
         * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
         *
         * @default `false`
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
         *
         * \@default `false`
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabledInitFilter = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "fieldValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fieldValue;
        },
        /**
         * @optional
         *
         * @description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`t-options`), esta propriedade será responsável pelo valor de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * ThfComboOption.
         *
         * @default `value`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`t-options`), esta propriedade será responsável pelo valor de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * ThfComboOption.
         *
         * \@default `value`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fieldValue = value || THF_COMBO_FIELD_VALUE_DEFAULT;
            if (isTypeof(this.filterService, 'string') && this.service) {
                this.service.fieldValue = this._fieldValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "fieldLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fieldLabel;
        },
        /**
         * @optional
         *
         * @description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`t-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * ThfComboOption.
         *
         * @default `label`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`t-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * ThfComboOption.
         *
         * \@default `label`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fieldLabel = value || THF_COMBO_FIELD_LABEL_DEFAULT;
            if (isTypeof(this.filterService, 'string') && this.service) {
                this.service.fieldLabel = this._fieldLabel;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "filterMinlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMinlength;
        },
        /**
         * @optional
         *
         * @description
         * Valor mínimo de caracteres para realizar o filtro no serviço.
         *
         * @default `0`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Valor mínimo de caracteres para realizar o filtro no serviço.
         *
         * \@default `0`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var parseValue = (typeof value === 'string') ? parseInt(value, 10) : value;
            this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "changeOnEnter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._changeOnEnter;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o evento `t-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o evento `t-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
         *
         * \@default `false`
         * @param {?} changeOnEnter
         * @return {?}
         */
        function (changeOnEnter) {
            this._changeOnEnter = convertToBoolean(changeOnEnter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel(this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfComboOption.
         * Esta lista conterá os valores e as descrições que serão apresentados na tela.
         */
        set: /**
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfComboOption.
         * Esta lista conterá os valores e as descrições que serão apresentados na tela.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = Array.isArray(options) ? options : [];
            this.cacheStaticOptions = this.options;
            this.validAndSortOptions();
            removeDuplicatedOptions(this.options);
            this.updateComboList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "setSort", {
        set: /**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this.sort = sort === '' ? true : convertToBoolean(sort);
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "filterMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
         *
         * > Quando utilizar a propriedade `t-filter-service` esta propriedade será ignorada.
         *
         * @default `startsWith`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
         *
         * > Quando utilizar a propriedade `t-filter-service` esta propriedade será ignorada.
         *
         * \@default `startsWith`
         * @param {?} filterMode
         * @return {?}
         */
        function (filterMode) {
            this._filterMode = (filterMode in ThfComboFilterMode) ? filterMode : ThfComboFilterMode.startsWith;
            switch (this._filterMode.toString()) {
                case 'startsWith':
                    this._filterMode = ThfComboFilterMode.startsWith;
                    break;
                case 'contains':
                    this._filterMode = ThfComboFilterMode.contains;
                    break;
                case 'endsWith':
                    this._filterMode = ThfComboFilterMode.endsWith;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfComboBaseComponent.prototype, "filterParams", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterParams;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *ThfComboFilter*.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *ThfComboFilter*.
         * @param {?} filterParams
         * @return {?}
         */
        function (filterParams) {
            this._filterParams = (filterParams || filterParams === 0 || filterParams === false) ? filterParams : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateComboList();
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.onInitService = /**
     * @return {?}
     */
    function () {
        if (this.filterService) {
            this.setService(this.filterService);
            this.initInputObservable();
        }
    };
    /**
     * @param {?} service
     * @return {?}
     */
    ThfComboBaseComponent.prototype.setService = /**
     * @param {?} service
     * @return {?}
     */
    function (service) {
        if (service) {
            if (isTypeof(service, 'object')) {
                this.service = (/** @type {?} */ (service));
            }
            else {
                this.service = this.defaultService;
                this.service.configProperties((/** @type {?} */ (service)), this.fieldLabel, this.fieldValue);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.validAndSortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length > 0) {
            // Remove os objetos que não contém valor e atribui o valor ao label caso este esteja vazio
            for (var i = 0; i < this.options.length; i++) {
                if (!validValue(this.options[i]['value'])) {
                    this.options.splice(i, 1);
                }
                else if (!this.options[i]['label']) {
                    this.options[i]['label'] = this.options[i]['value'].toString();
                }
            }
        }
        this.sortOptions();
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.sortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length > 0 && this.sort) {
            this.options.sort(this.compareOptions);
        }
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ThfComboBaseComponent.prototype.compareOptions = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (a.label.toString().toLowerCase() < b.label.toString().toLowerCase()) {
            return -1;
        }
        if (a.label.toString().toLowerCase() > b.label.toString().toLowerCase()) {
            return 1;
        }
        return 0;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    ThfComboBaseComponent.prototype.compareMethod = /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    function (search, option, filterMode) {
        switch (filterMode) {
            case ThfComboFilterMode.startsWith:
                return this.startsWith(search, option);
            case ThfComboFilterMode.contains:
                return this.contains(search, option);
            case ThfComboFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfComboBaseComponent.prototype.startsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfComboBaseComponent.prototype.contains = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfComboBaseComponent.prototype.endsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    };
    /**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getOptionFromValue = /**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        var _this = this;
        return (options) ? options.find(function (option) { return _this.isEqual(option.value, value); }) : null;
    };
    /**
     * @param {?} label
     * @param {?} options
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getOptionFromLabel = /**
     * @param {?} label
     * @param {?} options
     * @return {?}
     */
    function (label, options) {
        if (options) {
            return options.find(function (option) {
                return option.label.toString().toLowerCase() === label.toString().toLowerCase();
            });
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} option
     * @param {?=} isUpdateModel
     * @param {?=} isWriteValue
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateSelectedValue = /**
     * @param {?} option
     * @param {?=} isUpdateModel
     * @param {?=} isWriteValue
     * @return {?}
     */
    function (option, isUpdateModel, isWriteValue) {
        if (isUpdateModel === void 0) { isUpdateModel = true; }
        if (isWriteValue === void 0) { isWriteValue = false; }
        /** @type {?} */
        var optionLabel = option && option.label || '';
        this.updateInternalVariables(option);
        // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
        if (this.changeOnEnter && isUpdateModel) {
            this.setInputValue(optionLabel);
        }
        else if (!this.changeOnEnter) {
            this.setInputValue(optionLabel);
        }
        if (isUpdateModel) {
            /** @type {?} */
            var optionValue = option && option.value || undefined;
            this.updateModel(optionValue, isWriteValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.callModelChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    ThfComboBaseComponent.prototype.isEqual = /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    ThfComboBaseComponent.prototype.searchForLabel = /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    function (search, options, filterMode) {
        var _this = this;
        if (search && options && options.length) {
            /** @type {?} */
            var newOptions_1 = [];
            options.forEach(function (option) {
                if (option.label && (_this.compareMethod(search, option, filterMode) || _this.service)) {
                    newOptions_1.push(option);
                }
            });
            this.selectedView = newOptions_1[0];
            this.updateComboList(newOptions_1);
        }
        else {
            this.updateComboList();
        }
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateComboList = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var copyOptions = options || this.options.slice();
        /** @type {?} */
        var newOptions = !options && this.selectedValue ? [__assign$3({}, this.selectedOption)] : copyOptions;
        if (newOptions) {
            this.visibleOptions = newOptions;
            if (!this.selectedView && this.visibleOptions.length) {
                this.selectedView = this.visibleOptions[0];
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} options
     * @param {?=} reverse
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getNextOption = /**
     * @param {?} value
     * @param {?} options
     * @param {?=} reverse
     * @return {?}
     */
    function (value, options, reverse) {
        if (reverse === void 0) { reverse = false; }
        /** @type {?} */
        var newOptions = [].concat(options);
        /** @type {?} */
        var optionFound = null;
        /** @type {?} */
        var found = false;
        if (reverse) {
            newOptions.reverse();
        }
        for (var i = 0; i < newOptions.length; i++) {
            /** @type {?} */
            var option = newOptions[i];
            if (!optionFound) {
                optionFound = option;
            }
            if (found) {
                return option;
            }
            if (this.isEqual(option.value, value)) {
                found = true;
            }
        }
        return optionFound;
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getIndexSelectedView = /**
     * @return {?}
     */
    function () {
        for (var i = 0; i < this.visibleOptions.length; i++) {
            if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                return i;
            }
        }
        return null;
    };
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    ThfComboBaseComponent.prototype.compareObjects = /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    };
    /**
     * @return {?}
     */
    ThfComboBaseComponent.prototype.verifyValidOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputValue = this.getInputValue();
        /** @type {?} */
        var optionFound = this.getOptionFromLabel(inputValue, this.options);
        if (optionFound && optionFound.value !== this.selectedValue) {
            this.updateSelectedValue(optionFound);
            this.previousSearchValue = optionFound.label;
            return;
        }
        else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {
            this.updateSelectedValueWithOldOption();
            this.previousSearchValue = this.selectedOption.label;
            return;
        }
        else if (inputValue && !optionFound) {
            /** @type {?} */
            var isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);
            this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
            this.previousSearchValue = '';
            return;
        }
    };
    // Recebe as alterações do model
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.writeValue = 
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (validValue(value) && !this.service && this.options && this.options.length) {
            /** @type {?} */
            var option = this.getOptionFromValue(value, this.options);
            this.updateSelectedValue(option);
            this.updateComboList();
            return;
        }
        // Se houver serviço busca pelo model.
        if (value && this.service) {
            return this.getObjectByValue(value);
        }
        if (!validValue(value)) {
            this.updateSelectedValue(null, true, true);
            this.updateComboList();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfComboBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfComboBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfComboBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfComboBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if ((requiredFailed(this.required, this.disabled, abstractControl.value))) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfComboBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    ThfComboBaseComponent.prototype.configAfterSetFilterService = /**
     * @private
     * @param {?} service
     * @return {?}
     */
    function (service) {
        if (service) {
            this.options = [];
            this.unsubscribeKeyupObservable();
            this.onInitService();
        }
        else {
            this.service = undefined;
            this.options = this.cacheStaticOptions;
        }
        this.visibleOptions = [];
        this.isFirstFilter = true;
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboBaseComponent.prototype.unsubscribeKeyupObservable = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.keyupSubscribe) {
            this.keyupSubscribe.unsubscribe();
        }
    };
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateInternalVariables = /**
     * @private
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (option) {
            this.selectedView = option;
            this.selectedOption = option;
        }
        else {
            this.selectedView = undefined;
            this.selectedOption = undefined;
        }
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} fromWriteValue
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateModel = /**
     * @private
     * @param {?} value
     * @param {?=} fromWriteValue
     * @return {?}
     */
    function (value, fromWriteValue) {
        if (fromWriteValue === void 0) { fromWriteValue = false; }
        if (value !== this.selectedValue) {
            if (!fromWriteValue) {
                this.callModelChange(value);
            }
            this.change.emit(value);
        }
        this.selectedValue = value;
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboBaseComponent.prototype.updateSelectedValueWithOldOption = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oldOption = this.getOptionFromValue(this.selectedValue, this.options);
        if (oldOption && oldOption.label) {
            return this.updateSelectedValue(oldOption);
        }
    };
    ThfComboBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        placeholder: [{ type: i0.Input, args: ['t-placeholder',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        filterService: [{ type: i0.Input, args: ['t-filter-service',] }],
        debounceTime: [{ type: i0.Input, args: ['t-debounce-time',] }],
        disabledInitFilter: [{ type: i0.Input, args: ['t-disabled-init-filter',] }],
        fieldValue: [{ type: i0.Input, args: ['t-field-value',] }],
        fieldLabel: [{ type: i0.Input, args: ['t-field-label',] }],
        filterMinlength: [{ type: i0.Input, args: ['t-filter-minlength',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        changeOnEnter: [{ type: i0.Input, args: ['t-change-on-enter',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        options: [{ type: i0.Input, args: ['t-options',] }],
        setSort: [{ type: i0.Input, args: ['t-sort',] }],
        filterMode: [{ type: i0.Input, args: ['t-filter-mode',] }],
        filterParams: [{ type: i0.Input, args: ['t-filter-params',] }],
        change: [{ type: i0.Output, args: ['t-change',] }],
        ngModelChange: [{ type: i0.Output, args: ['ngModelChange',] }]
    };
    return ThfComboBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente thf-combo.
 */
var ThfComboFilterService = /** @class */ (function () {
    function ThfComboFilterService(http$$1) {
        this.http = http$$1;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
    }
    Object.defineProperty(ThfComboFilterService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    ThfComboFilterService.prototype.getFilteredData = /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    function (param, filterParams) {
        var _this = this;
        /** @type {?} */
        var value = param.value;
        /** @type {?} */
        var params = new http.HttpParams({
            fromString: "filter=" + value
        });
        return this.http.get("" + this.url, { responseType: 'json', params: params })
            .pipe(operators.map(function (response) { return _this.parseToArrayComboOption(response.items); }));
    };
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    ThfComboFilterService.prototype.getObjectByValue = /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    function (value, filterParams) {
        var _this = this;
        return this.http.get(this.url + "/" + value).pipe(operators.map(function (item) { return _this.parseToComboOption(item); }));
    };
    /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    ThfComboFilterService.prototype.configProperties = /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    function (url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    ThfComboFilterService.prototype.parseToArrayComboOption = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        if (items && items.length > 0) {
            return items.map(function (item) {
                return _this.parseToComboOption(item);
            });
        }
        return [];
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    ThfComboFilterService.prototype.parseToComboOption = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item && item[this.fieldValue]) {
            /** @type {?} */
            var label = item[this.fieldLabel];
            /** @type {?} */
            var value = item[this.fieldValue];
            return { label: label, value: value };
        }
    };
    ThfComboFilterService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfComboFilterService.ctorParameters = function () { return [
        { type: http.HttpClient }
    ]; };
    return ThfComboFilterService;
}());

var __extends$19 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$4 = (undefined && undefined.__assign) || function () {
    __assign$4 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$4.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfComboBaseComponent
 *
 * \@description
 * Utilizando thf-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * \@example
 *
 * <example name="thf-combo-basic" title="Totvs Combo Basic">
 *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.html"> </file>
 *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-labs" title="Totvs Combo Labs">
 *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.html"> </file>
 *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-scheduling" title="Totvs Combo - Scheduling">
 *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.html"> </file>
 *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-transfer" title="Totvs Combo - Banking Transfer">
 *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.html"> </file>
 *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-heroes" title="Totvs Combo - Heroes">
 *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.html"> </file>
 *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-heroes-reactive-form" title="Totvs Combo - Heroes Reactive Form">
 *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-hotels" title="Totvs Combo - Booking Hotel">
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.html"> </file>
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.ts"> </file>
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.service.ts"> </file>
 * </example>
 */
var ThfComboComponent = /** @class */ (function (_super) {
    __extends$19(ThfComboComponent, _super);
    function ThfComboComponent(element, differs, defaultService, renderer, sanitized) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.differs = differs;
        _this.defaultService = defaultService;
        _this.renderer = renderer;
        _this.sanitized = sanitized;
        _this.comboIcon = 'thf-icon-arrow-down';
        _this.comboOpen = false;
        _this.isProcessingGetObjectByValue = false;
        _this.isServerSearching = false;
        _this.scrollTop = 0;
        _this.shouldMarkLetters = true;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            this.validAndSortOptions();
            removeDuplicatedOptions(this.options);
        }
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfComboComponent.prototype.onKeyDown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && event.keyCode === 9 && inputValue) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (event.keyCode === 38 || event.keyCode === 40) {
            event.preventDefault();
            if (this.comboOpen) {
                if (event.keyCode === 38) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (event.keyCode === 9 || event.keyCode === 27) {
            if (event.keyCode === 27 && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                this.updateComboList();
            }
            return;
        }
        // Tecla "enter"
        if (event.keyCode === 13 && this.selectedView && this.comboOpen) {
            /** @type {?} */
            var isUpdateModel = (this.selectedView.value !== this.selectedValue) || (inputValue !== this.selectedView.label);
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            this.updateComboList();
            return;
        }
        this.controlComboVisibility(true);
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfComboComponent.prototype.onKeyUp = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.keyCode || event.which;
        /** @type {?} */
        var inputValue = event.target.value;
        /** @type {?} */
        var arrowDown = 40;
        /** @type {?} */
        var arrowUp = 38;
        /** @type {?} */
        var enter = 13;
        /** @type {?} */
        var isValidKey = (key !== arrowUp && key !== arrowDown && key !== enter);
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.options, this.filterMode);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                /** @type {?} */
                var useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList(this.cacheOptions.slice());
                }
                this.isFiltering = false;
            }
        }
        this.previousSearchValue = inputValue;
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.initInputObservable = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.service) {
            /** @type {?} */
            var keyupObservable = rxjs.fromEvent(this.inputElement.nativeElement, 'keyup')
                .pipe(operators.filter(function (e) { return _this.isValidCharacterToSearch(e.keyCode); }), operators.map(function (e) { return e.currentTarget.value; }), operators.distinctUntilChanged(), operators.tap(function () {
                _this.shouldMarkLetters = false;
            }), operators.debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe(function (value) {
                if (value.length >= _this.filterMinlength || !value) {
                    _this.controlApplyFilter(value);
                }
            });
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.controlApplyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {
            this.applyFilter(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.applyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.isServerSearching = true;
        this.controlComboVisibility(false);
        /** @type {?} */
        var param = { property: this.fieldLabel, value: value };
        this.filterSubscription = this.service.getFilteredData(param, this.filterParams)
            .subscribe(function (items) { return _this.setOptionsByApplyFilter(value, items); });
    };
    /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    ThfComboComponent.prototype.setOptionsByApplyFilter = /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    function (value, items) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.options = items;
        this.searchForLabel(value, items, this.filterMode);
        this.controlComboVisibility(true);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.options;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.getObjectByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (!this.selectedValue) {
            this.isProcessingGetObjectByValue = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams)
                .subscribe(function (item) { return _this.updateOptionByFilteredValue(item); });
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfComboComponent.prototype.updateOptionByFilteredValue = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout(function () { _this.isProcessingGetObjectByValue = false; }, this.debounceTime);
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.selectPreviousOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.changeOnEnter ? this.selectedView && this.selectedView.value : this.selectedValue;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.selectNextOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.changeOnEnter ? this.selectedView && this.selectedView.value : this.selectedValue;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var index = this.changeOnEnter ? 1 : 0;
            /** @type {?} */
            var visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.toggleComboVisibility = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.applyFilterInFirstClick = /**
     * @return {?}
     */
    function () {
        if (this.isFirstFilter && !this.selectedValue) {
            this.applyFilter('');
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    ThfComboComponent.prototype.controlComboVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        this.comboIcon = toOpen ? 'thf-icon-arrow-up' : 'thf-icon-arrow-down';
        if (this.options && this.options.length) {
            if (toOpen && !this.selector('.thf-combo-content').classList.contains('thf-combo-show')) {
                this.selector('.thf-combo-content').classList.add('thf-combo-show');
                this.initializeListeners();
            }
            else if (!toOpen && this.selector('.thf-combo-content').classList.contains('thf-combo-show')) {
                this.selector('.thf-combo-content').classList.remove('thf-combo-show');
                this.removeListeners();
            }
        }
        this.comboOpen = toOpen;
        if (toOpen) {
            this.inputElement.nativeElement.focus();
            this.scrollTo(this.getIndexSelectedView());
        }
        else {
            this.isFiltering = false;
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfComboComponent.prototype.onOptionClick = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var inputValue = this.getInputValue();
        /** @type {?} */
        var isUpdateModel = (option.value !== this.selectedValue) || !!(this.selectedView && inputValue !== this.selectedView.label);
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        this.updateComboList([__assign$4({}, this.selectedView)]);
        this.previousSearchValue = this.selectedView.label;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfComboComponent.prototype.scrollTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.getInputValue = /**
     * @return {?}
     */
    function () {
        return this.inputElement.nativeElement.value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.setInputValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inputElement.nativeElement.value = value;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfComboComponent.prototype.selector = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfComboComponent.prototype.wasClickedOnToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.contentElement.nativeElement.contains(event.target) &&
            this.comboOpen) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            this.updateComboList();
        }
    };
    /**
     * @param {?} label
     * @return {?}
     */
    ThfComboComponent.prototype.getLabelFormatted = /**
     * @param {?} label
     * @return {?}
     */
    function (label) {
        /** @type {?} */
        var format = label;
        if (this.isFiltering ||
            (this.service && this.getInputValue() && !this.compareObjects(this.cacheOptions, this.visibleOptions) && this.shouldMarkLetters)) {
            /** @type {?} */
            var labelInput = this.getInputValue().toString().toLowerCase();
            /** @type {?} */
            var labelLowerCase = label.toLowerCase();
            /** @type {?} */
            var openTagBold = '<span class="thf-font-text-large-bold">';
            /** @type {?} */
            var closeTagBold = '</span>';
            /** @type {?} */
            var startString = void 0;
            /** @type {?} */
            var middleString = void 0;
            /** @type {?} */
            var endString = void 0;
            switch (this.filterMode) {
                case ThfComboFilterMode.startsWith:
                case ThfComboFilterMode.contains:
                    startString = label.substring(0, labelLowerCase.indexOf(labelInput));
                    middleString = label.substring(labelLowerCase.indexOf(labelInput), labelLowerCase.indexOf(labelInput) + labelInput.length);
                    endString = label.substring(labelLowerCase.indexOf(labelInput) + labelInput.length);
                    format = startString + openTagBold + middleString + closeTagBold + endString;
                    break;
                case ThfComboFilterMode.endsWith:
                    startString = label.substring(0, labelLowerCase.lastIndexOf(labelInput));
                    middleString = label.substring(labelLowerCase.lastIndexOf(labelInput));
                    format = startString + openTagBold + middleString + closeTagBold;
                    break;
            }
        }
        return this.safeHtml(format);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.safeHtml = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfComboComponent.prototype.isValidCharacterToSearch = /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.searchOnEnter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    ThfComboComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-combo', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <input #inputElement class=\"thf-input thf-combo-input\" autocomplete=\"off\" type=\"text\" [attr.name]=\"name\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [required]=\"required\" (click)=\"toggleComboVisibility()\" (keyup)=\"onKeyUp($event)\" (keyup.enter)=\"searchOnEnter($event.target.value)\" (keydown)=\"onKeyDown($event)\"> <div class=\"thf-field-icon-container-right\"> <span #icon class=\"thf-icon thf-field-icon {{ comboIcon }}\" [class.thf-field-icon-disabled]=\"disabled\" [class.thf-field-icon]=\"!disabled\" (click)=\"toggleComboVisibility()\"> </span> </div> <ul #contentElement class=\"thf-combo-content\" [scrollTop]=\"scrollTop\"> <li *ngFor=\"let option of visibleOptions\" [value]=\"option.value\" (click)=\"onOptionClick(option)\" [class.thf-combo-item-selected]=\"compareObjects(selectedView, option)\"> <a class=\"thf-combo-item\" [innerHTML]=\"getLabelFormatted(option?.label)\"></a> </li> </ul> <div class=\"thf-combo-content-loading\" *ngIf=\"isServerSearching\"> <thf-loading></thf-loading> </div> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        ThfComboFilterService,
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfComboComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfComboComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfComboComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.IterableDiffers },
        { type: ThfComboFilterService },
        { type: i0.Renderer2 },
        { type: platformBrowser.DomSanitizer }
    ]; };
    ThfComboComponent.propDecorators = {
        contentElement: [{ type: i0.ViewChild, args: ['contentElement', { read: i0.ElementRef },] }],
        iconElement: [{ type: i0.ViewChild, args: ['icon', { read: i0.ElementRef },] }],
        inputElement: [{ type: i0.ViewChild, args: ['inputElement', { read: i0.ElementRef },] }]
    };
    return ThfComboComponent;
}(ThfComboBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Para usar o thf-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
var ThfMask = /** @class */ (function () {
    function ThfMask(mask, formatModel) {
        this.mask = '';
        this.formatModel = false;
        // controle de posição
        this.initialPosition = 0;
        this.finalPosition = 0;
        this.pattern = '';
        this.mask = mask;
        this.formatModel = formatModel;
        this.pattern = this.getRegexFromMask(mask);
    }
    Object.defineProperty(ThfMask.prototype, "getPattern", {
        get: /**
         * @return {?}
         */
        function () {
            return this.pattern;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "getValueToInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.valueToInput;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "setValueToInput", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.valueToInput = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "getValueToModel", {
        get: /**
         * @return {?}
         */
        function () {
            return this.valueToModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "setValueToModel", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.valueToModel = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.keyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.mask) {
            /** @type {?} */
            var value = $event.target.value;
            // formata o valor quando for colado com control + v e reposiciona o cursor
            if ($event.keyCode === 17 || $event.keyCode === 91) {
                $event.target.value = this.controlFormatting(value);
                this.resetPositions($event);
            }
            $event.preventDefault();
            switch ($event.keyCode) {
                case 37: // seta esquerda
                    if (this.initialPosition > 0) {
                        this.initialPosition--;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 39: // seta direita
                    if (this.initialPosition < value.toString().length) {
                        this.initialPosition++;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 35: // end
                    this.finalPosition = value.toString().length;
                    if ($event.shiftKey) {
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = this.finalPosition;
                        this.setPositions($event);
                    }
                    break;
                case 36: // HOME
                    if ($event.shiftKey) {
                        this.finalPosition = this.initialPosition;
                        this.initialPosition = 0;
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = 0;
                        this.finalPosition = 0;
                        this.setPositions($event);
                    }
                    break;
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.setPositionNotShiftKey = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!$event.shiftKey) {
            this.finalPosition = this.initialPosition;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.setSelectionRange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.initialPosition > this.finalPosition) {
            $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
        }
        else {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.keydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.mask) {
            /** @type {?} */
            var value = $event.target.value;
            if ($event.keyCode === 9) {
                return;
            }
            if (!$event.ctrlKey && !$event.metaKey) {
                $event.preventDefault();
            }
            // Não faz nada quando for digitado CTRL ou COMMAND e V
            // Já está sendo tratado no evento keyup
            if ($event.ctrlKey || $event.metaKey && ($event.keyCode !== 86) ||
                ($event.keyCode >= 37 && $event.keyCode <= 40) || $event.keyCode === 16 || $event.keyCode === 9) {
                return;
            }
            // Valida a tecla digitada
            if (this.isKeyValid($event.keyCode)) {
                if (this.finalPosition === null) {
                    this.finalPosition = this.initialPosition;
                }
                this.revertPositions(this.initialPosition, this.finalPosition);
                switch ($event.keyCode) {
                    case 8: // backspace
                        this.getPosition($event);
                        if (this.initialPosition < 0) {
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskBefore($event, -1);
                            if (this.initialPosition !== 0) {
                                value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.changePosition($event, -1);
                                this.checkMaskBefore($event, -1);
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                        }
                        else {
                            this.clearRangeSelection(value, $event, true);
                        }
                        this.setPositions($event);
                        break;
                    case 46: // delete
                        this.getPosition($event);
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskAfter($event, 1);
                            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.setPositions($event);
                            this.resetPositions($event);
                        }
                        else {
                            this.clearRangeSelection(value, $event, false);
                        }
                        this.setPositions($event);
                        break;
                    default: // qualquer outra tecla válida
                        value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                        value = this.controlFormatting(value);
                        $event.target.value = value;
                        this.changePosition($event, 1);
                        this.checkMaskBefore($event, 1);
                        this.setPositions($event);
                        this.resetPositions($event);
                        this.setPositions($event);
                }
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} $event
     * @param {?} isBackspace
     * @return {?}
     */
    ThfMask.prototype.clearRangeSelection = /**
     * @param {?} value
     * @param {?} $event
     * @param {?} isBackspace
     * @return {?}
     */
    function (value, $event, isBackspace) {
        value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
        value = this.controlFormatting(value);
        $event.target.value = value;
        if (isBackspace) {
            this.checkMaskBefore($event, -1);
        }
        this.setPositions($event);
        this.resetPositions($event);
    };
    // passa a posição do click para o controle de posição
    // passa a posição do click para o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.click = 
    // passa a posição do click para o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.blur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // Se houver algum valor definido na máscara
        if (this.mask) {
            // pega o valor do campo, formata e passa para o model
            /** @type {?} */
            var value = $event.target.value;
            value = this.controlFormatting(value);
            $event.target.value = value;
        }
    };
    /**
     * @param {?} initialPosition
     * @param {?} finalPosition
     * @return {?}
     */
    ThfMask.prototype.revertPositions = /**
     * @param {?} initialPosition
     * @param {?} finalPosition
     * @return {?}
     */
    function (initialPosition, finalPosition) {
        if (initialPosition > finalPosition) {
            // inverte o controle de posição caso o inicial esteja maior que o final
            /** @type {?} */
            var tempPosition = void 0;
            tempPosition = initialPosition;
            this.initialPosition = finalPosition;
            this.finalPosition = tempPosition;
        }
    };
    // reseta o controle de posição
    // reseta o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.resetPositions = 
    // reseta o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = this.initialPosition;
    };
    // posiciona o cursor de acordo com o controle de posição
    // posiciona o cursor de acordo com o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.setPositions = 
    // posiciona o cursor de acordo com o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
    };
    // muda a posição do cursor e atualiza o controle de posição
    // muda a posição do cursor e atualiza o controle de posição
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    ThfMask.prototype.changePosition = 
    // muda a posição do cursor e atualiza o controle de posição
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    function ($event, value) {
        this.initialPosition = this.initialPosition + value;
        this.finalPosition = this.finalPosition + value;
        this.setPositions($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.getPosition = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
        this.setPositions($event);
    };
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMask.prototype.controlFormatting = 
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Se o valor for vazio, retorna vazio
        if (!value) {
            this.valueToInput = '';
            this.valueToModel = '';
            return '';
        }
        /** @type {?} */
        var valueProcessed;
        /** @type {?} */
        var maskTmp = this.mask;
        // Array que será usado para armazenar todas as máscaras possíveis para
        // quando houver um valor opcional (?)
        /** @type {?} */
        var arrMasks = [];
        /** @type {?} */
        var contMasks = 0;
        // Enquanto houver algum 9? na máscara
        while (this.hasOptionalNumber(maskTmp)) {
            arrMasks.push(maskTmp);
            maskTmp = this.replaceOptionalNumber(maskTmp);
        }
        arrMasks.push(maskTmp);
        // Inverte o array
        arrMasks.reverse();
        // Informa que a formatação ainda não chegou ao fim
        this.formattingEnds = false;
        while (!this.formattingEnds) {
            // Seta a formatação como terminada
            // Então o método formatValue irá setar como não terminado caso haja
            this.formattingEnds = true;
            // Se não existe mais nenhuma máscara possível, então encerra a formatação
            if (!arrMasks[contMasks]) {
                break;
            }
            // Chama a formatação passando a máscara e o valor
            valueProcessed = this.formatValue(value, arrMasks[contMasks]);
            contMasks++;
        }
        return valueProcessed;
    };
    // Função que formata a máscara com o valor passado
    // Função que formata a máscara com o valor passado
    /**
     * @param {?} value
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.formatValue = 
    // Função que formata a máscara com o valor passado
    /**
     * @param {?} value
     * @param {?} mask
     * @return {?}
     */
    function (value, mask) {
        // Remove as marcas de valor opciona (?)
        mask = mask.replace(/\?/g, '');
        // Substitui todos os caracteres que não são fixos da máscara por _
        /** @type {?} */
        var guide = mask.replace(this.listValidKeys(), '_');
        // Contador usado para percorrer o guide
        /** @type {?} */
        var contGuide = 0;
        // String final formatada
        /** @type {?} */
        var valueProcessed = '';
        // Remove do valor todos os caracteres fixos como ()/-+
        value = this.removeFormattingValue(value);
        // Percorre todo o valor e coloca a formatação de acordo com a máscara
        for (var i = 0; i < value.length; i++) {
            /** @type {?} */
            var charValue = value[i];
            // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
            // tente formatar com outra possível máscara
            if (!guide[contGuide]) {
                this.formattingEnds = false;
                break;
            }
            // Percorre o Guide enquanto tem caracteres fixos
            while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                valueProcessed += guide[contGuide];
                contGuide++;
            }
            // É um caracter válido de acordo com a máscara
            if (this.isKeyValidMask(charValue, mask[contGuide])) {
                valueProcessed += charValue;
                contGuide++;
            }
            else {
                // Se não é um caracter válido, deve interromper.
                break;
            }
        }
        if (this.formatModel) {
            this.valueToInput = valueProcessed;
            this.valueToModel = valueProcessed;
        }
        else {
            this.valueToInput = valueProcessed;
            this.valueToModel = this.removeFormattingValue(valueProcessed);
        }
        return valueProcessed;
    };
    // verifica se tem algum caracter de mascara antes do cursor
    // verifica se tem algum caracter de mascara antes do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    ThfMask.prototype.checkMaskBefore = 
    // verifica se tem algum caracter de mascara antes do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    function ($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
            this.changePosition($event, position);
            this.checkMaskBefore($event, position);
        }
    };
    // verifica se tem algum caracter de mascara depois do cursor
    // verifica se tem algum caracter de mascara depois do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    ThfMask.prototype.checkMaskAfter = 
    // verifica se tem algum caracter de mascara depois do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    function ($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
            this.changePosition($event, position);
            this.checkMaskAfter($event, position);
        }
    };
    // Retorna a máscara sem um valor opcional
    // Retorna a máscara sem um valor opcional
    /**
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.replaceOptionalNumber = 
    // Retorna a máscara sem um valor opcional
    /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        /** @type {?} */
        var i = 9;
        while (i >= 0) {
            if (mask.indexOf(i + '?') > -1) {
                return mask.replace(i + '?', '');
            }
            i--;
        }
        return mask;
    };
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    /**
     * @param {?} key
     * @return {?}
     */
    ThfMask.prototype.isFixedCharacterGuide = 
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.testRegex(key, this.getFixedCharacterGuide());
    };
    // Retorna caracteres permitidos somente na máscara \/() +-
    // Retorna caracteres permitidos somente na máscara \/() +-
    /**
     * @return {?}
     */
    ThfMask.prototype.getFixedCharacterGuide = 
    // Retorna caracteres permitidos somente na máscara \/() +-
    /**
     * @return {?}
     */
    function () {
        return /[\\\/() +-.\:]/g;
    };
    // Caracteres permitidos de serem digitados
    // Caracteres permitidos de serem digitados
    /**
     * @return {?}
     */
    ThfMask.prototype.listValidKeys = 
    // Caracteres permitidos de serem digitados
    /**
     * @return {?}
     */
    function () {
        return /[a-zA-Z0-9]/g;
    };
    // Se é um dígito válido
    // Se é um dígito válido
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfMask.prototype.isKeyValid = 
    // Se é um dígito válido
    /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return this.isKeyCodeValid(keyCode);
    };
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfMask.prototype.isKeyCodeValid = 
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return ((keyCode >= 48 && keyCode <= 57) ||
            (keyCode >= 65 && keyCode <= 90) ||
            (keyCode >= 96 && keyCode <= 105) ||
            (keyCode === 8) || keyCode === 9 ||
            (keyCode === 46));
    };
    // Se está de acordo com a máscara
    // Se está de acordo com a máscara
    /**
     * @param {?} key
     * @param {?} keyMask
     * @return {?}
     */
    ThfMask.prototype.isKeyValidMask = 
    // Se está de acordo com a máscara
    /**
     * @param {?} key
     * @param {?} keyMask
     * @return {?}
     */
    function (key, keyMask) {
        return this.testRegex(key, this.replaceMask(keyMask));
    };
    // Retorna se a chave foi aprovada pela expressão regular
    // Retorna se a chave foi aprovada pela expressão regular
    /**
     * @param {?} key
     * @param {?} regex
     * @return {?}
     */
    ThfMask.prototype.testRegex = 
    // Retorna se a chave foi aprovada pela expressão regular
    /**
     * @param {?} key
     * @param {?} regex
     * @return {?}
     */
    function (key, regex) {
        return regex.test(key);
    };
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMask.prototype.removeFormattingValue = 
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.replace(this.getFixedCharacterGuide(), '');
    };
    // Verifica se contém valor opcional na máscara 0-9?
    // Verifica se contém valor opcional na máscara 0-9?
    /**
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.hasOptionalNumber = 
    // Verifica se contém valor opcional na máscara 0-9?
    /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        return mask.match(/\d\?/g);
    };
    // Retorna a expressão regular correspondente ao comando passado
    // Retorna a expressão regular correspondente ao comando passado
    /**
     * @param {?} char
     * @return {?}
     */
    ThfMask.prototype.replaceMask = 
    // Retorna a expressão regular correspondente ao comando passado
    /**
     * @param {?} char
     * @return {?}
     */
    function (char) {
        /** @type {?} */
        var regex = /./;
        switch (char) {
            case '0':
                regex = /[0]/;
                break;
            case '1':
                regex = /[0-1]/;
                break;
            case '2':
                regex = /[0-2]/;
                break;
            case '3':
                regex = /[0-3]/;
                break;
            case '4':
                regex = /[0-4]/;
                break;
            case '5':
                regex = /[0-5]/;
                break;
            case '6':
                regex = /[0-6]/;
                break;
            case '7':
                regex = /[0-7]/;
                break;
            case '8':
                regex = /[0-8]/;
                break;
            case '9':
                regex = /[0-9]/;
                break;
            case ' ':
                regex = /\s/;
                break;
            case '@':
                regex = /[a-zA-Z]/;
                break;
            case 'w':
                regex = /[a-zA-Z0-9]/;
                break;
        }
        return regex;
    };
    /**
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.getRegexFromMask = /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        if (mask) {
            /** @type {?} */
            var pattern = void 0;
            if (this.formatModel) {
                pattern = mask.replace(/\\/g, '\\\\');
                pattern = pattern.replace(/\+/g, '\\+');
                pattern = pattern.replace(/\./g, '\\.');
                pattern = pattern.replace(/-/g, '-');
                pattern = pattern.replace(/\(/g, '\\(');
                pattern = pattern.replace(/\)/g, '\\)');
                pattern = pattern.replace(/\//g, '\\/');
                pattern = pattern.replace(/\s/g, '\\s');
                pattern = pattern.replace(/:/g, '\\:');
                pattern = pattern.replace(/\@(?!\s)/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            else {
                pattern = mask.replace(/\\/g, '');
                pattern = pattern.replace(/\+/g, '');
                pattern = pattern.replace(/\./g, '');
                pattern = pattern.replace(/-/g, '');
                pattern = pattern.replace(/\(/g, '');
                pattern = pattern.replace(/\)/g, '');
                pattern = pattern.replace(/\//g, '');
                pattern = pattern.replace(/\s/g, '');
                pattern = pattern.replace(/:/g, '');
                pattern = pattern.replace(/\@/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            return pattern;
        }
        else {
            return null;
        }
    };
    return ThfMask;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfDatepickerFormatDefault = 'dd/mm/yyyy';
/**
 * \@description
 *
 * O `thf-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
 *
 * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
 * mas podem ser definidos outros padrões (veja mais na propriedade `t-format`).
 *
 * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
 * use a propriedade `t-locale`.
 *
 * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
 * Date padrão do Javascript.
 *
 * > O formato de saída do *model* se ajusta conforme o formato de entrada, veja abaixo:
 *
 * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
 *
 * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
 *
 * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
 *
 * **Importante:**
 *
 * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
 * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
 * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
 * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
 * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
 *
 * Exemplo:
 *
 * ```
 * <thf-datepicker
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}"
 * </thf-datepicker>
 * ```
 *
 * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
 * @abstract
 */
var ThfDatepickerBaseComponent = /** @class */ (function () {
    function ThfDatepickerBaseComponent() {
        this._format = thfDatepickerFormatDefault;
        this._placeholder = '';
        this.firstStart = true;
        this.hour = 'T00:00:01-00:00';
        this.isExtendedISO = true;
        this.onChangeModel = null;
        this.onTouchedModel = null;
        /**
         * Desabilita o campo.
         */
        this.disabled = false;
        /**
         * Torna o elemento somente leitura.
         */
        this.readonly = false;
        /**
         * Faz com que o campo seja obrigatório.
         */
        this.required = false;
        /**
         * Aplica foco ao elemento ao ser iniciado.
         */
        this.focus = false;
        /**
         * Habilita ação para limpar o campo.
         */
        this.clean = false;
        /**
         * Mensagem apresentada quando a data for inválida ou fora do período.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
         */
        this.errorPattern = '';
        /**
         * Evento disparado ao sair do campo.
         */
        this.onblur = new i0.EventEmitter();
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.onchange = new i0.EventEmitter();
    }
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        /**
         * @optional
         *
         * @description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         * @param {?} placeholder
         * @return {?}
         */
        function (placeholder) {
            this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setDisabled", {
        set: /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this.disabled = disabled === '' ? true : convertToBoolean(disabled);
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setReadonly", {
        set: /**
         * @param {?} readonly
         * @return {?}
         */
        function (readonly) {
            this.readonly = readonly === '' ? true : convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setRequired", {
        set: /**
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this.required = required === '' ? true : convertToBoolean(required);
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setFocus", {
        set: /**
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this.focus = focus === '' ? true : convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setClean", {
        set: /**
         * @param {?} clean
         * @return {?}
         */
        function (clean) {
            this.clean = clean === '' ? true : convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setDateStart", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Date) {
                /** @type {?} */
                var year = value.getFullYear();
                /** @type {?} */
                var date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
                setYearFrom0To100(date, year);
                this.start = date;
            }
            else {
                this.start = convertIsoToDate(value, true, false);
            }
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setDateEnd", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Date) {
                /** @type {?} */
                var year = value.getFullYear();
                /** @type {?} */
                var date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
                setYearFrom0To100(date, year);
                this.end = date;
            }
            else {
                this.end = convertIsoToDate(value, false, true);
            }
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "format", {
        get: /**
         * @return {?}
         */
        function () {
            return this._format;
        },
        /**
         * @optional
         *
         * @description
         *
         * Formato de exibição da data.
         *
         * Valores válidos:
         *  - `dd/mm/yyyy`
         *  - `mm/dd/yyyy`
         *  - `yyyy/mm/dd`
         *
         * @default `dd/mm/yyyy`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Formato de exibição da data.
         *
         * Valores válidos:
         *  - `dd/mm/yyyy`
         *  - `mm/dd/yyyy`
         *  - `yyyy/mm/dd`
         *
         * \@default `dd/mm/yyyy`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                value = value.toLowerCase();
                if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                    this._format = value;
                    this.objMask = this.buildMask();
                    this.refreshValue(this.date);
                    return;
                }
            }
            this._format = thfDatepickerFormatDefault;
            this.objMask = this.buildMask();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale || navigator.language;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._locale = value.length >= 2 ? value : 'pt';
            }
            else {
                this._locale = navigator.language;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Classe de máscara
        this.objMask = this.buildMask();
    };
    // Converte um objeto string em Date
    // Converte um objeto string em Date
    /**
     * @param {?} dateString
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.getDateFromString = 
    // Converte um objeto string em Date
    /**
     * @param {?} dateString
     * @return {?}
     */
    function (dateString) {
        /** @type {?} */
        var day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
        /** @type {?} */
        var month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
        /** @type {?} */
        var year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
        /** @type {?} */
        var date = new Date(year, month, day);
        setYearFrom0To100(date, year);
        return (date.getFullYear() === year && date.getMonth() === month && date.getDate() === day) ? date : null;
    };
    // Formata a data.
    // Formata a data.
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.formatToDate = 
    // Formata a data.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    };
    // Método responsável por controlar o modelo.
    // Método responsável por controlar o modelo.
    /**
     * @param {?} date
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.controlModel = 
    // Método responsável por controlar o modelo.
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.date = date;
        if (date && this.isExtendedISO) {
            this.callOnChange(convertDateToISOExtended(this.date, this.hour));
        }
        else if (date && !this.isExtendedISO) {
            this.callOnChange(convertDateToISODate(this.date));
        }
        else {
            date === undefined ? this.callOnChange('') : this.callOnChange('Data inválida');
        }
    };
    // Executa a função onChange
    // Executa a função onChange
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.callOnChange = 
    // Executa a função onChange
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangeModel = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouchedModel = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    // Retorna um objeto do tipo ThfMask com a mascara configurada.
    // Retorna um objeto do tipo ThfMask com a mascara configurada.
    /**
     * @protected
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.buildMask = 
    // Retorna um objeto do tipo ThfMask com a mascara configurada.
    /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new ThfMask(mask, true);
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern = this.errorPattern !== 'Data inválida' && this.errorPattern !== 'Data fora do período' ? this.errorPattern : '';
        if (dateFailed(c.value)) {
            this.errorPattern = this.errorPattern || 'Data inválida';
            return { date: {
                    valid: false,
                } };
        }
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return { required: {
                    valid: false,
                } };
        }
        if ((this.date && !validateDateRange(this.date, this.start, this.end))) {
            this.errorPattern = this.errorPattern || 'Data fora do período';
            return { date: {
                    valid: false,
                } };
        }
        return null;
    };
    ThfDatepickerBaseComponent.propDecorators = {
        name: [{ type: i0.Input, args: ['name',] }],
        placeholder: [{ type: i0.Input, args: ['t-placeholder',] }],
        setDisabled: [{ type: i0.Input, args: ['t-disabled',] }],
        setReadonly: [{ type: i0.Input, args: ['t-readonly',] }],
        setRequired: [{ type: i0.Input, args: ['t-required',] }],
        setFocus: [{ type: i0.Input, args: ['t-focus',] }],
        setClean: [{ type: i0.Input, args: ['t-clean',] }],
        errorPattern: [{ type: i0.Input, args: ['t-error-pattern',] }],
        setDateStart: [{ type: i0.Input, args: ['t-start',] }],
        setDateEnd: [{ type: i0.Input, args: ['t-end',] }],
        format: [{ type: i0.Input, args: ['t-format',] }],
        locale: [{ type: i0.Input, args: ['t-locale',] }],
        onblur: [{ type: i0.Output, args: ['t-blur',] }],
        onchange: [{ type: i0.Output, args: ['t-change',] }]
    };
    return ThfDatepickerBaseComponent;
}());

var __extends$20 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfCalendarContentOffset = 8;
/** @type {?} */
var thfCalendarPositionDefault = 'bottom-left';
/**
 * \@docsExtends ThfDatepickerBaseComponent
 *
 * \@example
 *
 * <example name="thf-datepicker-basic" title="Totvs Datepicker Basic">
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.html"> </file>
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.ts"> </file>
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.po.ts"> </file>
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.e2e-spec.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-labs" title="Totvs Datepicker Labs">
 *  <file name="sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.html"> </file>
 *  <file name="sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-airfare" title="Totvs Datepicker - Airfare">
 *  <file name="sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.html"> </file>
 *  <file name="sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.ts"> </file>
 * </example>
 */
var ThfDatepickerComponent = /** @class */ (function (_super) {
    __extends$20(ThfDatepickerComponent, _super);
    function ThfDatepickerComponent(controlPosition, renderer, el) {
        var _this = _super.call(this) || this;
        _this.controlPosition = controlPosition;
        _this.renderer = renderer;
        _this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])$');
        _this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
        _this.onScroll = function () {
            _this.controlPosition.adjustPosition(thfCalendarPositionDefault);
        };
        _this.el = el;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setDialogPickerStyleDisplay('none');
        // Põe o foco no Input, setado pelo t-focus
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.togglePicker = /**
     * @return {?}
     */
    function () {
        if (this.disabled || this.readonly) {
            return;
        }
        if (!this.calendar.visible) {
            this.calendar.init();
            this.setCalendarPosition();
            this.initializeListeners();
        }
        else {
            this.inputEl.nativeElement.disabled = false;
            this.closeCalendar();
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.dateSelected = /**
     * @return {?}
     */
    function () {
        this.inputEl.nativeElement.focus();
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.controlModel(this.date);
        this.closeCalendar();
    };
    // Esconde Picker quando for clicado fora
    // Esconde Picker quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.wasClickedOnPicker = 
    // Esconde Picker quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.dialogPicker || !this.iconDatepicker) {
            return;
        }
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.nativeElement.contains(event.target) && !this.hasAttrCalendar(event.target)) {
            this.closeCalendar();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeydown = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keydown($event);
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasInvalidClass = /**
     * @return {?}
     */
    function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.getErrorPattern = /**
     * @return {?}
     */
    function () {
        return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.valueBeforeChange = this.formatToDate(this.date);
        this.date = undefined;
        this.controlModel(this.date);
        this.controlChangeEmitter();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var date = this.inputEl.nativeElement.value;
        /** @type {?} */
        var newDate = date ? this.getDateFromString(date) : undefined;
        this.objMask.blur($event);
        this.onblur.emit();
        if (this.objMask.valueToModel) {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(newDate);
                this.date = newDate;
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
            this.callOnChange(this.date);
        }
        this.controlChangeEmitter();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var elementValue = this.inputEl.nativeElement.value;
        if (this.verifyMobile()) {
            this.controlModel(elementValue);
            this.callOnChange(elementValue);
        }
        this.onchange.emit(elementValue);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (this.verifyMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout(function () { return _this.togglePicker(); }, 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.formatToDate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return undefined;
        }
        /** @type {?} */
        var dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.refreshValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.inputEl.nativeElement.value = this.formatToDate(value);
        }
    };
    // Função implementada do ControlValueAccessor
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.writeValue = 
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                /** @type {?} */
                var dateString = value.toString();
                this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                if (this.isValidDateIso(value)) {
                    this.isExtendedISO = false;
                }
                else {
                    this.hour = value.substring(10, 25);
                    this.isExtendedISO = true;
                }
                /** @type {?} */
                var day = parseInt(value.substring(8, 10), 10);
                /** @type {?} */
                var month = parseInt(value.substring(5, 7), 10) - 1;
                /** @type {?} */
                var year = parseInt(value.substring(0, 4), 10);
                /** @type {?} */
                var dateTemp = new Date(year, month, day);
                setYearFrom0To100(dateTemp, year);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            else {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
            }
            this.controlModel(this.date);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = '';
            this.date = undefined;
        }
        this.valueBeforeChange = this.formatToDate(this.date);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.isValidDateIso = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.dateRegex.test(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.isValidExtendedIso = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.isoRegex.test(value);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasOverlayClass = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return element.classList.contains('thf-calendar-overlay');
    };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.verifyMobile = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () {
        return isMobile();
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.closeCalendar = /**
     * @private
     * @return {?}
     */
    function () {
        this.calendar.close();
        this.removeListeners();
        this.setDialogPickerStyleDisplay('none');
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.controlChangeEmitter = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var dateModelFormatted = this.formatToDate(this.date);
        if (dateModelFormatted !== this.valueBeforeChange) {
            this.valueBeforeChange = dateModelFormatted;
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(function () {
                _this.onchange.emit(dateModelFormatted);
            }, 200);
        }
    };
    /**
     * @private
     * @param {?} element
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasAttrCalendar = /**
     * @private
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var attrCalendar = 'attr-calendar';
        return (element && element.hasAttribute(attrCalendar)) || (element.parentElement && element.parentElement.hasAttribute(attrCalendar));
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnPicker(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
            _this.closeCalendar();
        });
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.setDialogPickerStyleDisplay = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.dialogPicker.nativeElement.style.display = value;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.setCalendarPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.setDialogPickerStyleDisplay('block');
        this.controlPosition.setElements(this.dialogPicker.nativeElement, thfCalendarContentOffset, this.inputEl, ['top-left', 'bottom-left'], false, true);
        this.controlPosition.adjustPosition(thfCalendarPositionDefault);
    };
    ThfDatepickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-datepicker', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <input #inp class=\"thf-input thf-datepicker\" [ngClass]=\"clean && inp.value ? 'thf-input-double-icon-right' : 'thf-input-icon-right'\" type=\"text\" [attr.name]=\"name\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" (blur)=\"eventOnBlur($event)\" (change)=\"eventOnChange($event)\" (click)=\"eventOnClick($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear()\"></thf-clean> <span #iconDatepicker class=\"thf-icon thf-field-icon thf-icon-calendar\" [class.thf-field-icon]=\"!disabled && !readonly\" [class.thf-field-icon-disabled]=\"disabled || readonly\" (click)=\"togglePicker()\"> </span> </div> </div> <div #dialogPicker [class.thf-datepicker-popup-calendar]=\"!verifyMobile()\"> <thf-calendar #calendar [(t-selected-date)]=\"date\" [t-date-end]=\"end\" [t-date-start]=\"start\" [t-locale]=\"locale\" (t-submit)=\"dateSelected()\"> </thf-calendar> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfDatepickerComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfDatepickerComponent; }),
                            multi: true,
                        },
                        ThfControlPositionService
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfDatepickerComponent.ctorParameters = function () { return [
        { type: ThfControlPositionService },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    ThfDatepickerComponent.propDecorators = {
        calendar: [{ type: i0.ViewChild, args: ['calendar',] }],
        dialogPicker: [{ type: i0.ViewChild, args: ['dialogPicker', { read: i0.ElementRef },] }],
        iconDatepicker: [{ type: i0.ViewChild, args: ['iconDatepicker', { read: i0.ElementRef },] }],
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef },] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        onKeyup: [{ type: i0.HostListener, args: ['keyup', ['$event'],] }],
        onKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };
    return ThfDatepickerComponent;
}(ThfDatepickerBaseComponent));

var __assign$5 = (undefined && undefined.__assign) || function () {
    __assign$5 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$5.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfDatepickerRangeLiteralsDefault = {
    en: (/** @type {?} */ ({
        invalidFormat: 'Date in invalid format',
        startDateGreaterThanEndDate: 'Start date greater than end date',
    })),
    es: (/** @type {?} */ ({
        invalidFormat: 'Fecha en formato no válido',
        startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final',
    })),
    pt: (/** @type {?} */ ({
        invalidFormat: 'Data no formato inválido',
        startDateGreaterThanEndDate: 'Data inicial maior que data final',
    }))
};
/**
 * \@description
 *
 * O `thf-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
 * a data inicial ou a data final.
 *
 * O componente `[(ngModel)]` do `thf-datepicker-range` trabalha com um objeto que implementa a interface
 * `ThfDatepickerRange`, contendo as seguintes propriedades:
 * ```
 * { "start": '2017-11-28', "end": '2017-11-30' }
 * ```
 *
 * <a id="accepted-formats"></a>
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * new Date(2017, 10, 28);
 * ```
 *
 * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
 * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
 *
 * Importante:
 *
 * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
 * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
 * - Permite trabalhar com as duas datas separadamente através das propriedades `t-start-date` e `t-end-date` no lugar do
 * `[(ngModel)]`, no entanto sem a validação do formulário;
 * - Para a validação do formulário, utilize o `[(ngModel)]`.
 * @abstract
 */
var ThfDatepickerRangeBaseComponent = /** @class */ (function () {
    function ThfDatepickerRangeBaseComponent(thfDateService) {
        this.thfDateService = thfDateService;
        this.errorMessage = '';
        this._clean = false;
        this._readonly = false;
        this._required = false;
        this.dateRange = { start: '', end: '' };
        this.format = 'dd/mm/yyyy';
        this.isDateRangeInputFormatValid = true;
        this.isStartDateRangeInputValid = true;
        /**
         * \@optional
         *
         * \@description
         *
         * Evento disparado ao alterar valor do campo.
         */
        this.onChange = new i0.EventEmitter();
    }
    Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "isDateRangeInputValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "clean", {
        get: /**
         * @return {?}
         */
        function () {
            return this._clean;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita ação para limpar o campo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita ação para limpar o campo.
         *
         * \@default `false`
         * @param {?} clean
         * @return {?}
         */
        function (clean) {
            this._clean = convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o campo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o campo.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "endDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._endDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data final.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data final.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this._endDate = this.convertPatternDateFormat(date);
            this.dateRange.end = this.endDate;
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfDatepickerRangeLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-datepicker-range`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format',
         *    startDateGreaterThanEndDate: 'End date less than start date'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-datepicker-range
         *   [t-literals]="customLiterals">
         * </thf-datepicker-range>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-datepicker-range`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format',
         *    startDateGreaterThanEndDate: 'End date less than start date'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-datepicker-range
         *   [t-literals]="customLiterals">
         * </thf-datepicker-range>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign$5({}, thfDatepickerRangeLiteralsDefault[thfLocaleDefault], thfDatepickerRangeLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfDatepickerRangeLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente leitura.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será somente leitura.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readonly = convertToBoolean(value);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "startDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._startDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data inicial.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data inicial.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this._startDate = this.convertPatternDateFormat(date);
            this.dateRange.start = this.startDate;
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangeModel = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouchedModel = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value || {};
        /** @type {?} */
        var startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
        /** @type {?} */
        var endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
        if (this.requiredDateRangeFailed(startDate, endDate)) {
            this.errorMessage = '';
            return { required: {
                    valid: false,
                } };
        }
        if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
            this.errorMessage = this.literals.invalidFormat;
            return { date: {
                    valid: false,
                } };
        }
        if (this.dateRangeFailed(startDate, endDate)) {
            this.errorMessage = this.literals.startDateGreaterThanEndDate;
            return { date: {
                    valid: false,
                } };
        }
        return null;
    };
    /**
     * @param {?} dateRange
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.writeValue = /**
     * @param {?} dateRange
     * @return {?}
     */
    function (dateRange) {
        this.resetDateRangeInputValidation();
        if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
            this.dateRange = { start: '', end: '' };
        }
        if (!dateRange) {
            this.validateModel(this.dateRange);
        }
        if (this.dateRangeObjectFailed(dateRange)) {
            this.updateModel(dateRange);
        }
        if (this.isDateRangeObject(dateRange)) {
            this.dateRange = {
                start: this.convertPatternDateFormat(dateRange.start),
                end: this.convertPatternDateFormat(dateRange.end)
            };
            this.updateModel(this.dateRange);
        }
        this.updateScreenByModel(this.dateRange);
    };
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.dateFormatFailed = /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && !this.thfDateService.isValidIso(value);
    };
    // Executa a função onChange
    // Executa a função onChange
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.updateModel = 
    // Executa a função onChange
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var model = typeof (value) === 'object' ? __assign$5({}, value) : value;
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(model);
        }
    };
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var model = __assign$5({}, value);
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.convertPatternDateFormat = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Date) {
            return this.thfDateService.convertDateToISO(value);
        }
        return value;
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.dateRangeFailed = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return !this.thfDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.dateRangeFormatFailed = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.dateRangeObjectFailed = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && !this.isDateRangeObject(value);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.isDateRangeObject = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    ThfDatepickerRangeBaseComponent.prototype.requiredDateRangeFailed = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return this.isDateRangeInputValid &&
            requiredFailed(this.required, this.disabled, startDate) &&
            requiredFailed(this.required, this.disabled, endDate);
    };
    ThfDatepickerRangeBaseComponent.propDecorators = {
        clean: [{ type: i0.Input, args: ['t-clean',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        endDate: [{ type: i0.Input, args: ['t-end-date',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        readonly: [{ type: i0.Input, args: ['t-readonly',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        startDate: [{ type: i0.Input, args: ['t-start-date',] }],
        onChange: [{ type: i0.Output, args: ['t-change',] }]
    };
    return ThfDatepickerRangeBaseComponent;
}());

var __extends$21 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$6 = (undefined && undefined.__assign) || function () {
    __assign$6 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$6.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var arrowLeftKey = 37;
/** @type {?} */
var arrowRightKey = 39;
/** @type {?} */
var backspaceKey = 8;
/** @type {?} */
var thfDatepickerRangeDateLengthDefault = 10;
/**
 * \@docsExtends ThfDatepickerRangeBaseComponent
 *
 * \@example
 *
 * <example name="thf-datepicker-range-basic" title="Totvs Datepicker Range Basic">
 *  <file name="sample-thf-datepicker-range-basic/sample-thf-datepicker-range-basic.component.html"> </file>
 *  <file name="sample-thf-datepicker-range-basic/sample-thf-datepicker-range-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-range-labs" title="Totvs Datepicker Range Labs">
 *  <file name="sample-thf-datepicker-range-labs/sample-thf-datepicker-range-labs.component.html"> </file>
 *  <file name="sample-thf-datepicker-range-labs/sample-thf-datepicker-range-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-range-vacations" title="Totvs Datepicker Range - Vacations Suggestion">
 *  <file name="sample-thf-datepicker-range-vacations/sample-thf-datepicker-range-vacations.component.html"> </file>
 *  <file name="sample-thf-datepicker-range-vacations/sample-thf-datepicker-range-vacations.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-range-vacations-reactive-form" title="Totvs Datepicker Range - Vacations Reactive Form">
 *  <file name="sample-thf-datepicker-range-vacations-reactive-form/sample-thf-datepicker-range-vacations-reactive-form.component.html">
 *  </file>
 *  <file name="sample-thf-datepicker-range-vacations-reactive-form/sample-thf-datepicker-range-vacations-reactive-form.component.ts">
 *  </file>
 * </example>
 */
var ThfDatepickerRangeComponent = /** @class */ (function (_super) {
    __extends$21(ThfDatepickerRangeComponent, _super);
    function ThfDatepickerRangeComponent(thfDateService, thfDatepickerRangeElement) {
        var _this = _super.call(this, thfDateService) || this;
        _this.thfDatepickerRangeElement = thfDatepickerRangeElement;
        return _this;
    }
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "enableCleaner", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "endDateInputName", {
        get: /**
         * @return {?}
         */
        function () {
            return 'end-date';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "endDateInputValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDateInput.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "getErrorMessage", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.errorMessage !== '' && this.hasInvalidClass()) ? this.errorMessage : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "isDateRangeInputUncompleted", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDateInputValue.length < thfDatepickerRangeDateLengthDefault
                && this.startDateInputValue.length < thfDatepickerRangeDateLengthDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "isDirtyDateRangeInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "startDateInputName", {
        get: /**
         * @return {?}
         */
        function () {
            return 'start-date';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "startDateInputValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.startDateInput.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.getKeyCode = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.keyCode || event.which;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.getTargetElement = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.target || event.srcElement;
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfDatepickerRangeComponent.isValidKey = /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        /** @type {?} */
        var isNumericKey = keyCode >= 48 && keyCode <= 57;
        /** @type {?} */
        var isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
        return isNumericKey || isNumericNumpadKey;
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Classe de máscara
        this.thfMaskObject = this.buildMask();
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.resetDateRangeInputValidation();
        this.dateRange = { start: '', end: '' };
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.removeFocusFromDatePickerRangeField();
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.applyFocusOnDatePickerRangeField();
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.onKeydown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (this.readonly) {
            return;
        }
        if (this.isSetFocusOnBackspace(event)) {
            event.preventDefault();
            this.setFocusOnBackspace();
        }
        else {
            this.thfMaskObject.keydown(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.onKeyup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.readonly) {
            return;
        }
        /** @type {?} */
        var isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.setFocus(event);
        this.thfMaskObject.keyup(event);
        this.updateModelByScreen(isStartDateTargetEvent);
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.resetDateRangeInputValidation = /**
     * @return {?}
     */
    function () {
        this.isStartDateRangeInputValid = true;
        this.isDateRangeInputFormatValid = true;
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.updateScreenByModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        var _this = this;
        /** @type {?} */
        var dateRange = { start: (/** @type {?} */ (model.start)), end: (/** @type {?} */ (model.end)) };
        /** @type {?} */
        var isStartDateValid = this.thfDateService.isDateRangeValid(dateRange.end, dateRange.start);
        /** @type {?} */
        var isDateValid = function (date) { return !_this.dateFormatFailed(date) && isStartDateValid; };
        /** @type {?} */
        var endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
        /** @type {?} */
        var startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
        this.endDateInput.nativeElement.value = endDateFormated;
        this.startDateInput.nativeElement.value = startDateFormated;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.applyFocusOnDatePickerRangeField = /**
     * @private
     * @return {?}
     */
    function () {
        this.dateRangeField.nativeElement.classList.add('thf-datepicker-range-field-focused');
    };
    // Retorna um objeto do tipo ThfMask com a mascara configurada.
    // Retorna um objeto do tipo ThfMask com a mascara configurada.
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.buildMask = 
    // Retorna um objeto do tipo ThfMask com a mascara configurada.
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new ThfMask(mask, true);
    };
    /**
     * @private
     * @param {?} format
     * @param {?=} day
     * @param {?=} month
     * @param {?=} year
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.formatDate = /**
     * @private
     * @param {?} format
     * @param {?=} day
     * @param {?=} month
     * @param {?=} year
     * @return {?}
     */
    function (format, day, month, year) {
        if (day === void 0) { day = ''; }
        if (month === void 0) { month = ''; }
        if (year === void 0) { year = ''; }
        /** @type {?} */
        var dateFormatted = format;
        day = day && day.includes('T') ? day.slice(0, 2) : day;
        dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (month)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(year));
        return dateFormatted;
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.formatScreenToModel = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        var _a = value.split('/'), day = _a[0], month = _a[1], year = _a[2];
        return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.formatModelToScreen = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        var _a = value.split('-'), year = _a[0], month = _a[1], day = _a[2];
        return value ? this.formatDate(this.format, day, month, year) : '';
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.getDateRangeFormatValidation = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    function (startDate, endDate, isStartDateTargetEvent) {
        this.setDateRangeInputValidation(startDate, endDate);
        return {
            isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid,
            dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
        };
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.getValidatedModel = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    function (startDate, endDate, isStartDateTargetEvent) {
        /** @type {?} */
        var dateRangeModel = { start: '', end: '' };
        dateRangeModel.end = (isStartDateTargetEvent || this.isStartDateRangeInputValid)
            && !this.dateFormatFailed(endDate) ? endDate : '';
        dateRangeModel.start = (!isStartDateTargetEvent || this.isStartDateRangeInputValid)
            && !this.dateFormatFailed(startDate) ? startDate : '';
        return dateRangeModel;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.hasInvalidClass = /**
     * @private
     * @return {?}
     */
    function () {
        return (this.thfDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
            this.thfDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.isEqualBeforeValue = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.isSetFocusOnBackspace = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.target.name === this.endDateInputName &&
            this.endDateInput.nativeElement.selectionStart === 0 && this.endDateInput.nativeElement.selectionEnd === 0 &&
            event.keyCode === backspaceKey;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.removeFocusFromDatePickerRangeField = /**
     * @private
     * @return {?}
     */
    function () {
        this.dateRangeField.nativeElement.classList.remove('thf-datepicker-range-field-focused');
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setDateRangeInputValidation = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        this.isStartDateRangeInputValid = this.thfDateService.isDateRangeValid(endDate, startDate);
        this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocus = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inputElement = ThfDatepickerRangeComponent.getTargetElement(event);
        /** @type {?} */
        var keyCode = ThfDatepickerRangeComponent.getKeyCode(event);
        /** @type {?} */
        var inputName = inputElement['name'];
        this.setFocusOnArrowLeft(keyCode, inputName);
        this.setFocusOnArrowRight(keyCode, inputName, inputElement);
        this.setFocusOnStartDateCompleted(keyCode, inputName);
    };
    /**
     * @private
     * @param {?} position
     * @param {?} inputElement
     * @param {?} selectionRange
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusAndPosition = /**
     * @private
     * @param {?} position
     * @param {?} inputElement
     * @param {?} selectionRange
     * @return {?}
     */
    function (position, inputElement, selectionRange) {
        var _this = this;
        this.focusOnElement(inputElement);
        setTimeout(function () {
            inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
            _this.thfMaskObject.initialPosition = position;
            _this.thfMaskObject.finalPosition = position;
        });
    };
    /**
     * @private
     * @param {?} inputElement
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.focusOnElement = /**
     * @private
     * @param {?} inputElement
     * @return {?}
     */
    function (inputElement) {
        inputElement.nativeElement.focus();
    };
    /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusOnArrowLeft = /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    function (keyCode, inputName) {
        /** @type {?} */
        var isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
        if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
            /** @type {?} */
            var inputLength = this.startDateInput.nativeElement.value.length;
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        }
    };
    /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @param {?} inputElement
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusOnArrowRight = /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @param {?} inputElement
     * @return {?}
     */
    function (keyCode, inputName, inputElement) {
        /** @type {?} */
        var isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
        if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusOnBackspace = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputLength = this.startDateInput.nativeElement.value.length;
        this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
        this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
    };
    /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusOnStartDateCompleted = /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    function (keyCode, inputName) {
        /** @type {?} */
        var isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === thfDatepickerRangeDateLengthDefault;
        /** @type {?} */
        var isNewDateCompleted = this.startDateInputValue.length === thfDatepickerRangeDateLengthDefault && isLastKeyPressed;
        /** @type {?} */
        var isValidKey = ThfDatepickerRangeComponent.isValidKey(keyCode);
        if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    };
    /**
     * @private
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.updateModelByScreen = /**
     * @private
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    function (isStartDateTargetEvent) {
        /** @type {?} */
        var endDateFormatted = this.formatScreenToModel(this.endDateInputValue);
        /** @type {?} */
        var startDateFormatted = this.formatScreenToModel(this.startDateInputValue);
        if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
            this.updateModel(this.dateRange);
            return;
        }
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        /** @type {?} */
        var dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit(__assign$6({}, this.dateRange));
        }
        if (!dateFormatValidation.isValid) {
            this.dateRange = __assign$6({}, dateFormatValidation.dateRangeModel);
            this.updateModel(dateFormatValidation.dateRangeModel);
        }
    };
    ThfDatepickerRangeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-datepicker-range', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div #dateRangeField class=\"thf-datepicker-range-field thf-input\" [class.thf-datepicker-range-field-disabled]=\"disabled\"> <div class=\"thf-datepicker-range-start-date\"> <input #startDateInput class=\"thf-datepicker-range-input\" maxlength=\"10\" type=\"text\" [disabled]=\"disabled\" [name]=\"startDateInputName\" [readonly]=\"readonly\" (blur)=\"onBlur()\" (focus)=\"onFocus()\" (keydown)=\"onKeydown($event)\" (keyup)=\"onKeyup($event)\"> </div> <div class=\"thf-datepicker-range-separator\">-</div> <div class=\"thf-datepicker-range-end-date\"> <input #endDateInput class=\"thf-datepicker-range-input\" maxlength=\"10\" type=\"text\" [disabled]=\"disabled\" [name]=\"endDateInputName\" [readonly]=\"readonly\" (blur)=\"onBlur()\" (focus)=\"onFocus()\" (keydown)=\"onKeydown($event)\" (keyup)=\"onKeyup($event)\"> </div> <div class=\"thf-datepicker-range-icon\"> <thf-clean *ngIf=\"enableCleaner\" (t-change-event)=\"clear($event)\"></thf-clean> </div> <div class=\"thf-datepicker-range-icon\"> <span class=\"thf-icon thf-field-icon thf-icon-calendar\" [class.thf-field-icon-disabled]=\"disabled || readonly\"> </span> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorMessage\"></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfDatepickerRangeComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfDatepickerRangeComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfDatepickerRangeComponent.ctorParameters = function () { return [
        { type: ThfDateService },
        { type: i0.ElementRef }
    ]; };
    ThfDatepickerRangeComponent.propDecorators = {
        dateRangeField: [{ type: i0.ViewChild, args: ['dateRangeField', { read: i0.ElementRef },] }],
        endDateInput: [{ type: i0.ViewChild, args: ['endDateInput', { read: i0.ElementRef },] }],
        startDateInput: [{ type: i0.ViewChild, args: ['startDateInput', { read: i0.ElementRef },] }]
    };
    return ThfDatepickerRangeComponent;
}(ThfDatepickerRangeBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
 * @abstract
 */
var ThfInputBaseComponent = /** @class */ (function () {
    function ThfInputBaseComponent() {
        this._placeholder = '';
        this.passedWriteValue = false;
        /**
         * \@description
         *
         * Se verdadeiro, desabilita o campo.
         *
         * \@default `false`
         */
        this.disabled = false;
        /**
         * Indica que o campo será somente leitura.
         */
        this.readonly = false;
        /**
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o input está desabilitado `(t-disabled)`.
         *
         * \@default `false`
         */
        this.required = false;
        /**
         * Se verdadeiro, o campo iniciará com foco.
         */
        this.focus = false;
        /**
         * Se verdadeiro, o campo receberá um botão para ser limpo.
         */
        this.clean = false;
        /**
         * \@description
         *
         * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
        /**
         * \@description
         *
         * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
         * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
         * através da propriedade t-pattern.
         * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
         * mesmo quando desabilitado.
         */
        this.mask = '';
        /**
         * \@description
         *
         * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
         *
         * \@default `false`
         */
        this.maskFormatModel = false;
        /**
         * Evento disparado ao sair do campo.
         */
        this.blur = new i0.EventEmitter();
        /**
         * Evento disparado ao entrar do campo.
         */
        this.enter = new i0.EventEmitter();
        /**
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new i0.EventEmitter();
        /**
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new i0.EventEmitter();
        this.onChangePropagate = null;
        this.onTouched = null;
    }
    Object.defineProperty(ThfInputBaseComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        /**
         * @optional
         *
         * @description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         *
         * @default ''
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         *
         * \@default ''
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._placeholder = value || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "setDisabled", {
        set: /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this.disabled = disabled === '' ? true : convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "setReadonly", {
        set: /**
         * @param {?} readonly
         * @return {?}
         */
        function (readonly) {
            this.readonly = readonly === '' ? true : convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "setRequired", {
        set: /**
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this.required = required === '' ? true : convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "setFocus", {
        set: /**
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this.focus = focus === '' ? true : convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "setClean", {
        set: /**
         * @param {?} clean
         * @return {?}
         */
        function (clean) {
            this.clean = clean === '' ? true : convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "setPattern", {
        set: /**
         * @param {?} pattern
         * @return {?}
         */
        function (pattern) {
            this.pattern = pattern;
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "maxlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                this._maxlength = parseInt((/** @type {?} */ (value)), 10);
                this.validateModel();
            }
            else if (!value) {
                this._maxlength = undefined;
                this.validateModel();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "minlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                this._minlength = parseInt((/** @type {?} */ (value)), 10);
                this.validateModel();
            }
            else if (!value) {
                this._minlength = undefined;
                this.validateModel();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "setMask", {
        set: /**
         * @param {?} mask
         * @return {?}
         */
        function (mask) {
            this.mask = mask;
            // Atualiza Máscara do Campo
            this.objMask = new ThfMask(this.mask, this.maskFormatModel);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInputBaseComponent.prototype, "setMaskFormatModel", {
        set: /**
         * @param {?} maskFormatModel
         * @return {?}
         */
        function (maskFormatModel) {
            this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
            if (this.objMask instanceof ThfMask) {
                this.objMask.formatModel = this.maskFormatModel;
                this.validateModel();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    ThfInputBaseComponent.prototype.updateModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfInputBaseComponent.prototype.callOnChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.updateModel(value);
        this.controlChangeModelEmitter(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfInputBaseComponent.prototype.controlChangeModelEmitter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfInputBaseComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
            return { required: {
                    valid: false,
                } };
        }
        if (maxlengthFailed(this.maxlength, this.getScreenValue())) {
            return { maxlength: {
                    valid: false,
                } };
        }
        if (minlengthFailed(this.minlength, this.getScreenValue())) {
            return { minlength: {
                    valid: false,
                } };
        }
        if (patternFailed(this.pattern, c.value)) {
            this.validatePatternOnWriteValue(c.value);
            return { pattern: {
                    valid: false,
                } };
        }
        return this.extraValidation(c);
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    ThfInputBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangePropagate = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    ThfInputBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfInputBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    // Função implementada do ControlValueAccessor
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    ThfInputBaseComponent.prototype.writeValue = 
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.writeValueModel(value);
    };
    /**
     * @protected
     * @return {?}
     */
    ThfInputBaseComponent.prototype.validateModel = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfInputBaseComponent.prototype.validatePatternOnWriteValue = 
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (value && this.passedWriteValue) {
            setTimeout(function () {
                _this.updateModel(value);
            });
            this.passedWriteValue = false;
        }
    };
    ThfInputBaseComponent.propDecorators = {
        icon: [{ type: i0.Input, args: ['t-icon',] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        placeholder: [{ type: i0.Input, args: ['t-placeholder',] }],
        setDisabled: [{ type: i0.Input, args: ['t-disabled',] }],
        setReadonly: [{ type: i0.Input, args: ['t-readonly',] }],
        setRequired: [{ type: i0.Input, args: ['t-required',] }],
        setFocus: [{ type: i0.Input, args: ['t-focus',] }],
        setClean: [{ type: i0.Input, args: ['t-clean',] }],
        setPattern: [{ type: i0.Input, args: ['t-pattern',] }],
        errorPattern: [{ type: i0.Input, args: ['t-error-pattern',] }],
        maxlength: [{ type: i0.Input, args: ['t-maxlength',] }],
        minlength: [{ type: i0.Input, args: ['t-minlength',] }],
        setMask: [{ type: i0.Input, args: ['t-mask',] }],
        setMaskFormatModel: [{ type: i0.Input, args: ['t-mask-format-model',] }],
        blur: [{ type: i0.Output, args: ['t-blur',] }],
        enter: [{ type: i0.Output, args: ['t-enter',] }],
        change: [{ type: i0.Output, args: ['t-change',] }],
        changeModel: [{ type: i0.Output, args: ['t-change-model',] }]
    };
    return ThfInputBaseComponent;
}());

var __extends$22 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_DECIMAL_DEFAULT_DECIMALS_LENGTH = 2;
/** @type {?} */
var THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH = 13;
/**
 *
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 *
 * thf-decimal é um input específico para receber apenas números decimais.
 * Quando utilizado, o componente terá comportamento de um campo de 'text' com algumas características:
 *
 * - Aceita apenas números;
 * - Utiliza ',' como separador de decimal;
 * - Utiliza '.' para separação de milhar;
 * - É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
 *
 * \@example
 *
 * <example name="thf-decimal-basic" title="Totvs Decimal Basic">
 *  <file name="sample-thf-decimal-basic/sample-thf-decimal-basic.component.html"> </file>
 *  <file name="sample-thf-decimal-basic/sample-thf-decimal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-decimal-labs" title="Totvs Decimal Labs">
 *  <file name="sample-thf-decimal-labs/sample-thf-decimal-labs.component.html"> </file>
 *  <file name="sample-thf-decimal-labs/sample-thf-decimal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-decimal-hourly-wage" title="Totvs Decimal - Hourly Wage">
 *  <file name="sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.html"> </file>
 *  <file name="sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.ts"> </file>
 * </example>
 */
var ThfDecimalComponent = /** @class */ (function (_super) {
    __extends$22(ThfDecimalComponent, _super);
    function ThfDecimalComponent(el) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this._decimalsLength = THF_DECIMAL_DEFAULT_DECIMALS_LENGTH;
        _this._thousandMaxlength = THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;
        _this.decimalSeparator = ',';
        _this.fireChange = false;
        _this.isKeyboardAndroid = false;
        _this.minusSign = '-';
        _this.oldDotsLength = null;
        _this.thousandSeparator = '.';
        _this.regex = {
            thousand: new RegExp('\\' + '.', 'g'),
            decimal: new RegExp('\\' + ',', 'g')
        };
        _this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);
        return _this;
    }
    Object.defineProperty(ThfDecimalComponent.prototype, "decimalsLength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._decimalsLength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Quantidade máxima de casas decimais.
         *
         * @default `2`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Quantidade máxima de casas decimais.
         *
         * \@default `2`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._decimalsLength = convertToInt(value, THF_DECIMAL_DEFAULT_DECIMALS_LENGTH);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDecimalComponent.prototype, "thousandMaxlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._thousandMaxlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Número máximo de dígitos antes do separador de decimal. O valor máximo possível deve ser menor ou igual a 13.
         *
         * @default `13`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Número máximo de dígitos antes do separador de decimal. O valor máximo possível deve ser menor ou igual a 13.
         *
         * \@default `13`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var thousandMaxlength = convertToInt(value, THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH);
            this._thousandMaxlength = thousandMaxlength <= THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH ?
                thousandMaxlength : THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfDecimalComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.putFocus();
        this.setPaddingInput();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.clear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfDecimalComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @return {?}
     */
    ThfDecimalComponent.prototype.getScreenValue = /**
     * @return {?}
     */
    function () {
        return (this.inputEl) ? this.inputEl.nativeElement.value : '';
    };
    /**
     * @return {?}
     */
    ThfDecimalComponent.prototype.hasInvalidClass = /**
     * @return {?}
     */
    function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.getScreenValue() !== '');
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.hasLetters = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        return value.match(/[a-zA-Z:;+=_´^~"'@#$%¨&*()/\\|]+/);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.isValidNumber = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // - event.key não existia em alguns browsers, como Samsung browser e Firefox.
        /** @type {?} */
        var keyValue = (/** @type {?} */ (String.fromCharCode(event.which)));
        /** @type {?} */
        var validKey = event.which !== 8 && event.which !== 0;
        return !this.hasLetters(keyValue) && validKey;
    };
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.onBlur = 
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        if (value) {
            if (this.hasLetters(value) || this.containsMoreThanOneComma(value)) {
                this.setViewValue('');
                this.callOnChange(undefined);
                return;
            }
            /** @type {?} */
            var valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);
            this.setViewValue(this.formatToViewValue(valueWithoutThousandSeparator));
        }
        this.blur.emit();
        this.controlChangeEmitter();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.onFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.getScreenValue();
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.onInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var selectionStart = event.target.selectionStart;
        /** @type {?} */
        var selectionEnd = event.target.selectionEnd;
        /** @type {?} */
        var modelValue;
        /** @type {?} */
        var viewValue;
        // - Browsers nativos do Android ex: Samsung Browser.
        if (this.isKeyboardAndroid) {
            this.onInputKeyboardAndroid(event);
        }
        modelValue = this.formatValueWithoutThousandSeparator(event.target.value);
        modelValue = this.addZeroBefore(modelValue);
        viewValue = this.formatMask(modelValue);
        this.setViewValue(viewValue);
        this.setCursorInput(event, selectionStart, selectionEnd);
        this.callOnChange(this.formatToModelValue(modelValue));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.onInputKeyboardAndroid = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inputValue = event.target.value;
        /** @type {?} */
        var selectionStart = event.target.selectionStart;
        /** @type {?} */
        var hasLetters = this.hasLetters(inputValue);
        if (hasLetters) {
            this.setViewValue(inputValue.replace(hasLetters[0], ''));
            return event.preventDefault();
        }
        else {
            /** @type {?} */
            var position = selectionStart - 1;
            /** @type {?} */
            var key = inputValue.charAt(position);
            this.setPositionValue(event);
            if (this.isValidKey(event, key)) {
                this.setViewValue(inputValue);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.onKeyPress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.isValidKey(event);
    };
    /**
     * @return {?}
     */
    ThfDecimalComponent.prototype.setPaddingInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            /** @type {?} */
            var selectorIcons = '.thf-field-icon-container:not(.thf-field-icon-container-left) > .thf-icon';
            /** @type {?} */
            var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (_this.clean) {
                icons++;
            }
            if (icons) {
                _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
            }
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl) {
            if (value || value === 0) {
                /** @type {?} */
                var formatedViewValue = this.formatToViewValue(value);
                this.setViewValue(formatedViewValue);
            }
            else {
                this.setViewValue('');
            }
        }
        if (value) {
            this.change.emit(value);
        }
    };
    // reponsável por adicionar 0 antes da virgula (decimalSeparator).
    // reponsável por adicionar 0 antes da virgula (decimalSeparator).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.addZeroBefore = 
    // reponsável por adicionar 0 antes da virgula (decimalSeparator).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var isDecimalSeparator = value === this.decimalSeparator;
        return isDecimalSeparator ? "0" + value : value;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.containsComma = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.includes(this.decimalSeparator);
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.containsMoreThanOneComma = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        /** @type {?} */
        var foundComma = value.match(/,/g);
        return !!(foundComma && foundComma.length > 1);
    };
    /**
     * @private
     * @return {?}
     */
    ThfDecimalComponent.prototype.controlChangeEmitter = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var elementValue = this.getScreenValue();
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do t-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            this.fireChange = true;
            setTimeout(function () {
                if (_this.fireChange) {
                    _this.change.emit(elementValue);
                }
            }, 200);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.formatMask = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // necessário para não adicionar . nas casa decimais.
        // por exemplo: 12.345,123.45 (errado)
        // 12.345,12345 (correto)
        if (value.match(this.regex.decimal)) {
            /** @type {?} */
            var regex = new RegExp('(\\d)(?=(\\d{3})+(?!\\d),)', 'g');
            return value.toString().replace(regex, '$1.');
        }
        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.formatToModelValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var formattedValue = this.replaceCommaToDot(value);
        /** @type {?} */
        var parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;
        return parsedValue === 0 || parsedValue ? parsedValue : undefined;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.formatToViewValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var formatedNumber;
        /** @type {?} */
        var numberValue;
        /** @type {?} */
        var valueBeforeDot;
        /** @type {?} */
        var valueAfterDot;
        // - Necessário para tratar valores que contenham decimalSeparator
        value = this.replaceCommaToDot(value);
        numberValue = Number(value).toFixed(this.decimalsLength);
        valueBeforeDot = this.getValueBeforeSeparator(numberValue, this.thousandSeparator);
        valueAfterDot = this.getValueAfterSeparator(numberValue, this.thousandSeparator);
        formatedNumber = this.formatMask(valueBeforeDot);
        if (this.decimalsLength === 0) {
            return formatedNumber;
        }
        else {
            return formatedNumber + this.decimalSeparator + valueAfterDot;
        }
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.formatValueWithoutThousandSeparator = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        return value.toString().replace(this.regex.thousand, '');
    };
    /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    ThfDecimalComponent.prototype.getValueAfterSeparator = /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    function (value, separator) {
        if (value === void 0) { value = ''; }
        return value.split(separator)[1] || '';
    };
    /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    ThfDecimalComponent.prototype.getValueBeforeSeparator = /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    function (value, separator) {
        if (value === void 0) { value = ''; }
        return value.split(separator)[0] || '';
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.hasLessDot = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            /** @type {?} */
            var dots = value.match(this.regex.thousand);
            /** @type {?} */
            var dotsLength = dots && dots.length;
            if (dotsLength < this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.hasMoreDot = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            /** @type {?} */
            var dots = value.match(this.regex.thousand);
            /** @type {?} */
            var dotsLength = dots && dots.length;
            if (dotsLength > this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.hasMinusSignInvalidPosition = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var keyIsMinusSign = event.key === this.minusSign;
        /** @type {?} */
        var selectionStart = event.target.selectionStart;
        return keyIsMinusSign && selectionStart !== 0;
    };
    /**
     * @private
     * @param {?} event
     * @param {?} charCode
     * @return {?}
     */
    ThfDecimalComponent.prototype.isInvalidKey = /**
     * @private
     * @param {?} event
     * @param {?} charCode
     * @return {?}
     */
    function (event, charCode) {
        /** @type {?} */
        var isInvalidNumber = !this.isValidNumber(event);
        return this.verifyInsertComma(event) || this.verifyThousandLength(event) ||
            this.verifyValueAfterComma(event) || this.verifyInsertMinusSign(event) ||
            this.hasMinusSignInvalidPosition(event) || isInvalidNumber ||
            this.validateCursorPositionBeforeSeparator(event) || this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.isKeyDecimalSeparator = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.key === this.decimalSeparator || event.char === this.decimalSeparator;
    };
    /**
     * @private
     * @param {?} positionCursor
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.isPositionAfterDecimalSeparator = /**
     * @private
     * @param {?} positionCursor
     * @param {?} value
     * @return {?}
     */
    function (positionCursor, value) {
        /** @type {?} */
        var indexComma = value && value.indexOf(this.decimalSeparator);
        if (indexComma && this.decimalsLength > 0) {
            return positionCursor > indexComma;
        }
    };
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    ThfDecimalComponent.prototype.isSelectionStartDifferentSelectionEnd = /**
     * @private
     * @param {?} target
     * @return {?}
     */
    function (target) {
        return target.selectionStart !== target.selectionEnd;
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} key
     * @return {?}
     */
    ThfDecimalComponent.prototype.isValidKey = /**
     * @private
     * @param {?} event
     * @param {?=} key
     * @return {?}
     */
    function (event, key) {
        /** @type {?} */
        var charCode = event.which || event.keyCode;
        /** @type {?} */
        var validKey = event.which === 8 || event.which === 0;
        if (validKey && !this.isKeyboardAndroid) {
            return;
        }
        if (key) {
            event.key = key;
        }
        if (this.isInvalidKey(event, charCode)) {
            event.preventDefault();
            return false;
        }
        return true;
    };
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    /**
     * @private
     * @param {?} charCode
     * @return {?}
     */
    ThfDecimalComponent.prototype.verifyDecimalLengthIsZeroAndKeyPressedIsComma = 
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    /**
     * @private
     * @param {?} charCode
     * @return {?}
     */
    function (charCode) {
        return (charCode === 44 && this.decimalsLength === 0);
    };
    /**
     * @private
     * @return {?}
     */
    ThfDecimalComponent.prototype.putFocus = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @private
     * @param {?} target
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    ThfDecimalComponent.prototype.setInitialSelectionRange = /**
     * @private
     * @param {?} target
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    function (target, selectionStart, selectionEnd) {
        if (selectionStart === 1 && selectionEnd === 1) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);
    };
    /**
     * @private
     * @param {?} value
     * @param {?} index
     * @param {?} replace
     * @return {?}
     */
    ThfDecimalComponent.prototype.replaceAt = /**
     * @private
     * @param {?} value
     * @param {?} index
     * @param {?} replace
     * @return {?}
     */
    function (value, index, replace) {
        return value.substring(0, index) + replace + value.substring(index + 1);
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.replaceCommaToDot = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        return value.toString().replace(this.regex.decimal, '.');
    };
    /**
     * @private
     * @param {?} event
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    ThfDecimalComponent.prototype.setCursorInput = /**
     * @private
     * @param {?} event
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    function (event, selectionStart, selectionEnd) {
        /** @type {?} */
        var target = event.target;
        /** @type {?} */
        var viewValue = target.value;
        // Caso houver mais . do que anteriormente soma o valor com 1.
        if (this.hasMoreDot(viewValue) || viewValue === ('0' + this.decimalSeparator)) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        // Caso houver menos . do que anteriormente subtrai o valor por 1.
        if (this.hasLessDot(viewValue)) {
            this.setInitialSelectionRange(target, selectionStart, selectionEnd);
        }
        return target.setSelectionRange(selectionStart, selectionEnd);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.setPositionValue = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        /** @type {?} */
        var position = event.target.selectionStart - 1;
        if (position > 0 && event.key === this.minusSign) {
            event.target.value = value.substring(0, position) + value.substr(position + 1);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDecimalComponent.prototype.setViewValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inputEl.nativeElement.value = value;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.validateCursorPositionBeforeSeparator = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var target = event.target;
        /** @type {?} */
        var originalValue = this.formatValueWithoutThousandSeparator(target.value);
        /** @type {?} */
        var valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);
        /** @type {?} */
        var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return target.selectionStart <= valueBeforeSeparator.length &&
            valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.verifyThousandLength = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var target = event.target;
        /** @type {?} */
        var originalValue = this.formatValueWithoutThousandSeparator(target.value);
        /** @type {?} */
        var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event) &&
            this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value);
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ThfDecimalComponent.prototype.verifyInsertComma = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var hasComma = this.containsComma(e.target.value);
        return hasComma && e.key === this.decimalSeparator;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.verifyInsertMinusSign = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        /** @type {?} */
        var indexMinusSign = (value.lastIndexOf(this.minusSign) !== -1);
        /** @type {?} */
        var positionMinusSign = value.lastIndexOf('-');
        /** @type {?} */
        var occurancesMinusSign = value.match(new RegExp('-', 'g'));
        if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {
            event.target.value = this.replaceAt(value, positionMinusSign, '');
        }
        return indexMinusSign && event.key === this.minusSign;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDecimalComponent.prototype.verifyValueAfterComma = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        /** @type {?} */
        var selectionStart = event.target.selectionStart;
        /** @type {?} */
        var valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);
        return this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength;
    };
    ThfDecimalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-decimal', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span> </div> <input #inp class=\"thf-input\" type=\"text\" (input)=\"onInput($event)\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" (keypress)=\"onKeyPress($event)\" [attr.name]=\"name\" [class.thf-input-icon-left]=\"icon\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\"> <div class=\"thf-field-icon-container-right\"> <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean> </div> </div> <thf-field-container-bottom> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfDecimalComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfDecimalComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfDecimalComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    ThfDecimalComponent.propDecorators = {
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef },] }],
        decimalsLength: [{ type: i0.Input, args: ['t-decimals-length',] }],
        thousandMaxlength: [{ type: i0.Input, args: ['t-thousand-maxlength',] }]
    };
    return ThfDecimalComponent;
}(ThfInputBaseComponent));

var __extends$23 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var ThfInputGeneric = /** @class */ (function (_super) {
    __extends$23(ThfInputGeneric, _super);
    function ThfInputGeneric(el) {
        var _this = _super.call(this) || this;
        _this.type = 'text';
        _this.el = el;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.afterViewInit();
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.afterViewInit = /**
     * @return {?}
     */
    function () {
        this.putFocus();
        if (this.type !== 'password') {
            this.setPaddingInput();
        }
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.setPaddingInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            /** @type {?} */
            var selectorIcons = '.thf-field-icon-container:not(.thf-field-icon-container-left) > .thf-icon';
            /** @type {?} */
            var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (_this.clean) {
                icons++;
            }
            if (icons) {
                _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
            }
        });
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.putFocus = /**
     * @return {?}
     */
    function () {
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.onKeydown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.mask && !this.readonly && e.target.keyCode !== 229) {
            this.eventOnBlur(e);
            this.objMask.keydown(e);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.onKeyup = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.mask && !this.readonly) {
            if (e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keyup(e);
            }
            this.callOnChange(this.objMask.valueToModel);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.eventOnInput = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.mask) {
            /** @type {?} */
            var value = this.validMaxLength(this.maxlength, e.target.value);
            this.inputEl.nativeElement.value = value;
            this.callOnChange(value);
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    ThfInputGeneric.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        return ((maxlength || maxlength === 0) && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.eventOnFocus = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.eventOnBlur = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.mask) {
            this.objMask.blur(e);
        }
        if (e.type === 'blur') {
            this.blur.emit();
            this.controlChangeEmitter();
        }
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.controlChangeEmitter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var elementValue = this.inputEl.nativeElement.value;
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do t-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(function () {
                _this.change.emit(elementValue);
            }, 200);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfInputGeneric.prototype.eventOnClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Atualiza a posição do cursor ao clicar
        if (this.mask) {
            this.objMask.click(e);
        }
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.hasInvalidClass = /**
     * @return {?}
     */
    function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.getErrorPattern = /**
     * @return {?}
     */
    function () {
        return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.validateClassesForPattern = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.getScreenValue();
        /** @type {?} */
        var element = this.el.nativeElement;
        if (value && !this.verifyPattern(this.pattern, value)) {
            element.classList.add('ng-invalid');
            element.classList.add('ng-dirty');
        }
        else {
            element.classList.remove('ng-invalid');
        }
    };
    /**
     * @param {?} pattern
     * @param {?} value
     * @return {?}
     */
    ThfInputGeneric.prototype.verifyPattern = /**
     * @param {?} pattern
     * @param {?} value
     * @return {?}
     */
    function (pattern, value) {
        return new RegExp(pattern).test(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfInputGeneric.prototype.clear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfInputGeneric.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.passedWriteValue = true;
        if (this.inputEl) {
            if (value) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se o valor for indefinido, deve limpar o campo.
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.changeModel.emit(value);
        }
    };
    /**
     * @return {?}
     */
    ThfInputGeneric.prototype.getScreenValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var screenValue = this.inputEl && this.inputEl.nativeElement.value || undefined;
        if (this.type === 'number') {
            /** @type {?} */
            var parsedValue = parseFloat(screenValue);
            return parsedValue || parsedValue === 0 ? parsedValue : null;
        }
        else {
            return screenValue;
        }
    };
    ThfInputGeneric.propDecorators = {
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef },] }],
        onKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }],
        onKeyup: [{ type: i0.HostListener, args: ['keyup', ['$event'],] }]
    };
    return ThfInputGeneric;
}(ThfInputBaseComponent));

var __extends$24 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 *
 * thf-email é um input específico para receber E-mail, com o pattern já configurado.
 *
 * \@example
 *
 * <example name="thf-email-basic" title="Totvs Email Basic">
 *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.html"> </file>
 *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.ts"> </file>
 *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-email-labs" title="Totvs Email Labs">
 *  <file name="sample-thf-email-labs/sample-thf-email-labs.component.html"> </file>
 *  <file name="sample-thf-email-labs/sample-thf-email-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-email-newsletter" title="Totvs Email - Newsletter">
 *  <file name="sample-thf-email-newsletter/sample-thf-email-newsletter.component.html"> </file>
 *  <file name="sample-thf-email-newsletter/sample-thf-email-newsletter.component.ts"> </file>
 * </example>
 */
var ThfEmailComponent = /** @class */ (function (_super) {
    __extends$24(ThfEmailComponent, _super);
    function ThfEmailComponent(el) {
        var _this = _super.call(this, el) || this;
        _this.icon = 'thf-icon-mail';
        _this.maxlength = 254;
        _this.type = 'email';
        _this.pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$';
        _this.mask = '';
        _this.listener = _this.validateClassesForPattern.bind(_this);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfEmailComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            if (!_this.onChangePropagate) {
                _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
            }
        });
    };
    /**
     * @return {?}
     */
    ThfEmailComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!this.onChangePropagate) {
            this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfEmailComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    ThfEmailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-email', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span> </div> <input #inp class=\"thf-input\" [attr.name]=\"name\" [class.thf-input-icon-left]=\"icon\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [type]=\"type\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" (focus)=\"eventOnFocus($event)\" (input)=\"eventOnInput($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfEmailComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfEmailComponent; }),
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfEmailComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    return ThfEmailComponent;
}(ThfInputGeneric));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * Componente de uso interno, responsável por atribuir uma label para o campo
 */
var ThfFieldContainerComponent = /** @class */ (function () {
    function ThfFieldContainerComponent() {
        this.optional = {
            pt: '(Opcional)',
            en: '(Optional)',
            es: '(Opcional)'
        };
    }
    /**
     * @return {?}
     */
    ThfFieldContainerComponent.prototype.getOptional = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var lang = (navigator.language) ? navigator.language.toLowerCase().slice(0, 2) : 'pt';
        return (this.optional[lang]) ? this.optional[lang] : '';
    };
    ThfFieldContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-field-container', template: "<div class=\"thf-field-container\"> <div class=\"thf-field-container-title\"> <span class=\"thf-field-title\">{{ label }}</span> <span class=\"thf-field-optional\" *ngIf=\"opcional && (label || help)\">{{ getOptional() }}</span> </div> <div class=\"thf-field-help\" *ngIf=\"help\">{{ help }}</div> <ng-content></ng-content> </div> "
                },] },
    ];
    ThfFieldContainerComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        opcional: [{ type: i0.Input, args: ['t-opcional',] }]
    };
    return ThfFieldContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de uso interno, responsável por gerar uma margem inferior nos componentes que utilizam o thf-field-container.
 * Essa margem inferior pode conter uma mensagem de erro.
 */
var ThfFieldContainerBottomComponent = /** @class */ (function () {
    function ThfFieldContainerBottomComponent() {
        /**
         * Mensagem que será apresentada quando o pattern ou a máscara não for satisfeita.
         * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
    }
    ThfFieldContainerBottomComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-field-container-bottom', template: "<div class=\"thf-field-container-bottom\"> <span *ngIf=\"errorPattern\"  class=\"thf-field-container-bottom-text-error\"> <span class=\"thf-icon thf-icon-warning thf-field-container-icon-error\"></span> {{ errorPattern }} </span> </div> "
                },] },
    ];
    ThfFieldContainerBottomComponent.propDecorators = {
        errorPattern: [{ type: i0.Input, args: ['t-error-pattern',] }]
    };
    return ThfFieldContainerBottomComponent;
}());

var __extends$25 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 * O thf-login é um input específico para login. Já possui tipo, estilo e ícone predefinidos.
 *
 * \@example
 *
 * <example name="thf-login-basic" title="Totvs Login Basic">
 *  <file name="sample-thf-login-basic/sample-thf-login-basic.component.html"> </file>
 *  <file name="sample-thf-login-basic/sample-thf-login-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-login-labs" title="Totvs Login Labs">
 *  <file name="sample-thf-login-labs/sample-thf-login-labs.component.html"> </file>
 *  <file name="sample-thf-login-labs/sample-thf-login-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-login-confirm" title="Totvs Login - Confirm Identity">
 *  <file name="sample-thf-login-confirm/sample-thf-login-confirm.component.html"> </file>
 *  <file name="sample-thf-login-confirm/sample-thf-login-confirm.component.ts"> </file>
 * </example>
 *
 */
var ThfLoginComponent = /** @class */ (function (_super) {
    __extends$25(ThfLoginComponent, _super);
    function ThfLoginComponent(el) {
        var _this = _super.call(this, el) || this;
        _this.type = 'text';
        return _this;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    ThfLoginComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    ThfLoginComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-login', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <div class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-field-icon thf-icon-user\" [class.thf-field-icon-disabled]=\"disabled\"></span> </div> <input #inp class=\"thf-input thf-input-icon-left\" [attr.name]=\"name\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [type]=\"type\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" (focus)=\"eventOnFocus($event)\" (input)=\"eventOnInput($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfLoginComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfLoginComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfLoginComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    return ThfLoginComponent;
}(ThfInputGeneric));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar o registro que será enviado para o campo. O `thf-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `thf-select` ou o `thf-combo`.
 * @abstract
 */
var ThfLookupBaseComponent = /** @class */ (function () {
    function ThfLookupBaseComponent() {
        this._disabled = false;
        this._focus = false;
        this._required = false;
        this.oldValue = '';
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        this.placeholder = '';
        /**
         * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
         * Será passado por parâmetro o objeto de erro retornado.
         */
        this.onError = new i0.EventEmitter();
        /**
         * Evento será disparado quando ocorrer alguma seleção.
         * Será passado por parâmetro o objeto com o valor selecionado.
         */
        this.selected = new i0.EventEmitter();
    }
    Object.defineProperty(ThfLookupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         * @description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         * \@description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.valueToModel);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfLookupBaseComponent.prototype, "focus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._focus;
        },
        /**
         * @description
         *
         * Indica que o campo iniciará com foco.
         *
         * @default false
         * @optional
         */
        set: /**
         * \@description
         *
         * Indica que o campo iniciará com foco.
         *
         * \@default false
         * \@optional
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._focus = (/** @type {?} */ (focus)) === '' ? true : convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfLookupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default false
         * @optional
         */
        set: /**
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default false
         * \@optional
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initializeColumn();
    };
    /**
     * @private
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.initializeColumn = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.fieldLabel) {
            this.keysDescription = [this.fieldLabel];
        }
        else {
            this.keysDescription = [];
            this.keysDescription = this.columns.filter(function (element) { return element.fieldLabel; })
                .map(function (element) { return element.column; });
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangePropagate = func;
    };
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    // Seleciona o valor do model.
    // Seleciona o valor do model.
    /**
     * @param {?} valueSelected
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.selectValue = 
    // Seleciona o valor do model.
    /**
     * @param {?} valueSelected
     * @return {?}
     */
    function (valueSelected) {
        this.valueToModel = valueSelected[this.fieldValue];
        this.callOnChange(this.valueToModel);
        this.selected.emit(valueSelected);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.callOnChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada.
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.searchById = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (typeof (value) === 'string') {
            value = value.trim();
        }
        if (value !== '') {
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(function (element) {
                if (element) {
                    _this.oldValue = element[_this.fieldLabel];
                    _this.selectValue(element);
                    _this.setViewValue(_this.getFormattedLabel(element), element);
                }
                else {
                    _this.cleanModel();
                }
            }, function (error) {
                _this.cleanModel();
                _this.onError.emit(error);
            });
        }
        else {
            this.cleanModel();
        }
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && value instanceof Object) {
            // Esta condição é executada quando é retornado o objeto selecionado do componente Thf Lookup Modal.
            this.oldValue = value[this.fieldLabel];
            this.valueToModel = value[this.fieldValue];
            this.setViewValue(this.getFormattedLabel(value), value);
        }
        else if (value) {
            // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
            this.searchById(value);
        }
        else {
            this.cleanViewValue();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.cleanModel = /**
     * @protected
     * @return {?}
     */
    function () {
        this.cleanViewValue();
        this.callOnChange(undefined);
    };
    /**
     * @protected
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.cleanViewValue = /**
     * @protected
     * @return {?}
     */
    function () {
        this.setViewValue('', {});
        this.oldValue = '';
        this.valueToModel = null;
    };
    // Formata a label do campo.
    // Formata a label do campo.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.getFormattedLabel = 
    // Formata a label do campo.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value ? this.keysDescription.map(function (column) { return value[column]; }).join(' - ') : '';
    };
    // Chama o método writeValue e preenche o model.
    // Chama o método writeValue e preenche o model.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.selectModel = 
    // Chama o método writeValue e preenche o model.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.writeValue(value);
        if (value && value instanceof Object) {
            this.selectValue(value);
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    ThfLookupBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        placeholder: [{ type: i0.Input, args: ['t-placeholder',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        title: [{ type: i0.Input, args: ['t-title',] }],
        fieldValue: [{ type: i0.Input, args: ['t-field-value',] }],
        fieldLabel: [{ type: i0.Input, args: ['t-field-label',] }],
        filterParams: [{ type: i0.Input, args: ['t-filter-params',] }],
        fieldFormat: [{ type: i0.Input, args: ['t-field-format',] }],
        columns: [{ type: i0.Input, args: ['t-columns',] }],
        service: [{ type: i0.Input, args: ['t-filter-service',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        focus: [{ type: i0.Input, args: ['t-focus',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        onError: [{ type: i0.Output, args: ['t-error',] }],
        selected: [{ type: i0.Output, args: ['t-selected',] }]
    };
    return ThfLookupBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfComponentInjectorService = /** @class */ (function () {
    function ThfComponentInjectorService(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    // Cria um dinamicamente no ApplicationRef
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    ThfComponentInjectorService.prototype.createComponentInApplication = 
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElem = ((/** @type {?} */ (componentRef.hostView))).rootNodes[0];
        document.body.appendChild(domElem);
        return componentRef;
    };
    // Destrói o componente e remove do ApplicationRef
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ThfComponentInjectorService.prototype.destroyComponentInApplication = 
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    ThfComponentInjectorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ThfComponentInjectorService.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: i0.ApplicationRef },
        { type: i0.Injector }
    ]; };
    /** @nocollapse */ ThfComponentInjectorService.ngInjectableDef = i0.defineInjectable({ factory: function ThfComponentInjectorService_Factory() { return new ThfComponentInjectorService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.ApplicationRef), i0.inject(i0.INJECTOR)); }, token: ThfComponentInjectorService, providedIn: "root" });
    return ThfComponentInjectorService;
}());

var __assign$7 = (undefined && undefined.__assign) || function () {
    __assign$7 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$7.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfLookupLiteralsDefault = {
    en: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'Select',
        modalSecondaryActionLabel: 'Cancel',
        modalPlaceholder: 'Search',
        modalTitle: 'Select a record',
        modalTableNoColumns: thfTableLiteralsDefault.en.noColumns,
        modalTableNoData: thfTableLiteralsDefault.en.noData,
        modalTableLoadingData: thfTableLiteralsDefault.en.loadingData,
        modalTableLoadMoreData: thfTableLiteralsDefault.en.loadMoreData
    })),
    es: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'Seleccionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Buscar',
        modalTitle: 'Seleccione un registro',
        modalTableNoColumns: thfTableLiteralsDefault.es.noColumns,
        modalTableNoData: thfTableLiteralsDefault.es.noData,
        modalTableLoadingData: thfTableLiteralsDefault.es.loadingData,
        modalTableLoadMoreData: thfTableLiteralsDefault.es.loadMoreData
    })),
    pt: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'Selecionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Pesquisar',
        modalTitle: 'Selecione um registro',
        modalTableNoColumns: thfTableLiteralsDefault.pt.noColumns,
        modalTableNoData: thfTableLiteralsDefault.pt.noData,
        modalTableLoadingData: thfTableLiteralsDefault.pt.loadingData,
        modalTableLoadMoreData: thfTableLiteralsDefault.pt.loadMoreData
    }))
};
/**
 * \@docsPrivate
 *
 * Classe base do componente Thf Lookup Modal.
 * @abstract
 */
var ThfLookupModalBaseComponent = /** @class */ (function () {
    function ThfLookupModalBaseComponent() {
        var _this = this;
        this.hasNext = true;
        this.isLoading = false;
        this.page = 1;
        this.pageSize = 10;
        this.primaryAction = {
            action: function () {
                _this.items.forEach(function (element) {
                    if (element['$selected']) {
                        _this.model.emit(element);
                        _this.thfModal.close();
                    }
                });
            },
            label: this.literals.modalPrimaryActionLabel
        };
        this.searchValue = '';
        this.secondaryAction = {
            action: function () {
                _this.model.emit(null);
                _this.thfModal.close();
            },
            label: this.literals.modalSecondaryActionLabel
        };
        /**
         * Evento utilizado ao selecionar um registro da tabela.
         */
        this.model = new i0.EventEmitter();
    }
    Object.defineProperty(ThfLookupModalBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfLookupLiteralsDefault[browserLanguage()];
        },
        /** Objeto com as literais usadas no `thf-lookup-modal`. */
        set: /**
         * Objeto com as literais usadas no `thf-lookup-modal`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign$7({}, thfLookupLiteralsDefault[thfLocaleDefault], thfLookupLiteralsDefault[browserLanguage()], value);
                if (value.modalTitle) {
                    this.title = this.literals.modalTitle;
                }
            }
            else {
                this._literals = thfLookupLiteralsDefault[browserLanguage()];
            }
            this.primaryAction.label = this.literals.modalPrimaryActionLabel;
            this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
            this.setTableLiterals();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfLookupModalBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /**
         * @deprecated 5.x.x
         *
         * Título da modal.
         */
        set: /**
         * @deprecated 5.x.x
         *
         * Título da modal.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfLookupModalBaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.searchSubscription) {
            this.searchSubscription.unsubscribe();
        }
        if (this.showMoreSubscription) {
            this.showMoreSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ThfLookupModalBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initializeData();
        this.setTableLiterals();
    };
    /**
     * @return {?}
     */
    ThfLookupModalBaseComponent.prototype.search = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.page = 1;
        if (this.searchValue) {
            this.isLoading = true;
            this.searchSubscription = this.getFilteredData(this.searchValue).subscribe(function (data) {
                _this.items = data.items;
                _this.hasNext = data.hasNext;
                _this.isLoading = false;
            });
        }
        else {
            this.initializeData();
        }
    };
    /**
     * @return {?}
     */
    ThfLookupModalBaseComponent.prototype.showMoreEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.page++;
        this.isLoading = true;
        this.showMoreSubscription = this.getFilteredData(this.searchValue).subscribe(function (data) {
            data.items.forEach(function (item) {
                _this.items.push(item);
            });
            _this.hasNext = data.hasNext;
            _this.isLoading = false;
        });
    };
    /**
     * @private
     * @param {?} searchValue
     * @return {?}
     */
    ThfLookupModalBaseComponent.prototype.getFilteredData = /**
     * @private
     * @param {?} searchValue
     * @return {?}
     */
    function (searchValue) {
        return this.filterService.getFilteredData(searchValue, this.page, this.pageSize, this.filterParams);
    };
    /**
     * @private
     * @return {?}
     */
    ThfLookupModalBaseComponent.prototype.initializeData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.isLoading = true;
        this.filterSubscription = this.getFilteredData('').subscribe(function (data) {
            _this.items = data.items;
            _this.hasNext = data.hasNext;
            _this.isLoading = false;
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfLookupModalBaseComponent.prototype.setTableLiterals = /**
     * @private
     * @return {?}
     */
    function () {
        this.tableLiterals = {
            'noColumns': this.literals.modalTableNoColumns,
            'noData': this.literals.modalTableNoData,
            'loadingData': this.literals.modalTableLoadingData,
            'loadMoreData': this.literals.modalTableLoadMoreData,
        };
    };
    ThfLookupModalBaseComponent.propDecorators = {
        thfModal: [{ type: i0.ViewChild, args: [ThfModalComponent,] }],
        columns: [{ type: i0.Input, args: ['t-columns',] }],
        items: [{ type: i0.Input, args: ['t-items',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        title: [{ type: i0.Input, args: ['t-title',] }],
        filterService: [{ type: i0.Input, args: ['t-filter-service',] }],
        filterParams: [{ type: i0.Input, args: ['t-filter-params',] }],
        model: [{ type: i0.Output, args: ['t-change-model',] }]
    };
    return ThfLookupModalBaseComponent;
}());

var __extends$26 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfLookupModalBaseComponent
 */
var ThfLookupModalComponent = /** @class */ (function (_super) {
    __extends$26(ThfLookupModalComponent, _super);
    function ThfLookupModalComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.keyUpObservable = null;
        _this.containerHeight = 375;
        _this.tableHeight = 370;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfLookupModalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.initializeEventInput();
        this.setTableHeight();
    };
    /**
     * @return {?}
     */
    ThfLookupModalComponent.prototype.initializeEventInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.keyUpObservable = rxjs.fromEvent(this.inputSearchEl.nativeElement, 'keyup')
            .pipe(operators.filter(function (e) { return _this.validateEnterPressed(e); }), operators.debounceTime(400));
        this.keyUpObservable.subscribe(function () {
            _this.search();
        });
    };
    /**
     * @return {?}
     */
    ThfLookupModalComponent.prototype.openModal = /**
     * @return {?}
     */
    function () {
        this.thfModal.open();
    };
    /**
     * @private
     * @return {?}
     */
    ThfLookupModalComponent.prototype.setTableHeight = /**
     * @private
     * @return {?}
     */
    function () {
        if (window.innerHeight < 615) {
            this.tableHeight -= 50;
            this.containerHeight -= 50;
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ThfLookupModalComponent.prototype.validateEnterPressed = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return e.keyCode === 13;
    };
    ThfLookupModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-lookup-modal', template: "<thf-modal t-click-out=\"false\" t-hide-close=\"false\" t-size=\"lg\" [t-primary-action]=\"primaryAction\" [t-secondary-action]=\"secondaryAction\" [t-title]=\"title\"> <thf-field-container class=\"thf-lookup-header thf-md-6 thf-pull-right\" [t-opcional]=\"false\"> <div class=\"thf-field-container-content\"> <input #inpsearch class=\"thf-input thf-input-icon-right\" name=\"contentSearch\" [(ngModel)]=\"searchValue\" [placeholder]=\"literals.modalPlaceholder\" type=\"text\"> <div class=\"thf-field-icon-container-right\"> <span #iconLookup class=\"thf-icon thf-field-icon thf-icon-search\" (click)=\"search()\"> </span> </div> </div> </thf-field-container> <div class=\"thf-row thf-lookup-container-table\" [style.height.px]=\"containerHeight\"> <thf-table class=\"thf-md-12\" t-checkbox=\"true\" t-hide-detail=\"true\" t-single-select=\"true\" t-sort=\"true\" [t-columns]=\"columns\" [t-height]=\"tableHeight\" [t-items]=\"items\" [t-literals]=\"tableLiterals\" [t-loading]=\"isLoading\" [t-show-more-disabled]=\"!hasNext\" (t-show-more)=\"showMoreEvent()\"> </thf-table> </div> </thf-modal> "
                },] },
    ];
    ThfLookupModalComponent.propDecorators = {
        inputSearchEl: [{ type: i0.ViewChild, args: ['inpsearch',] }]
    };
    return ThfLookupModalComponent;
}(ThfLookupModalBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Thf Lookup Modal.
 */
var ThfLookupModalService = /** @class */ (function () {
    function ThfLookupModalService(thfComponentInjector) {
        this.thfComponentInjector = thfComponentInjector;
        this.componentRef = null;
        this.selectValueEvent = new i0.EventEmitter();
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param service {ThfLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<ThfLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {ThfLookupLiterals} Literais utilizadas no componente.
     */
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    ThfLookupModalService.prototype.openModal = /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        var service = params.service, columns = params.columns, filterParams = params.filterParams, title = params.title, literals = params.literals;
        this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfLookupModalComponent);
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe(function ($event) {
            _this.selectValue($event);
        });
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    };
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    ThfLookupModalService.prototype.selectValue = 
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    };
    ThfLookupModalService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfLookupModalService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    return ThfLookupModalService;
}());

var __extends$27 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfLookupBaseComponent
 *
 * \@description
 *
 * Quando existe muitos dados o thf-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
 * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
 * [Guia de implementação das APIs TOTVS](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444).
 *
 * Importante:
 *
 * - Caso o thf-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * ```
 * <thf-lookup
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </thf-lookup>
 * ```
 *
 * \@example
 *
 * <example name="thf-lookup-basic" title="Totvs Lookup Basic">
 *  <file name="sample-thf-lookup-basic/sample-thf-lookup-basic.component.html"> </file>
 *  <file name="sample-thf-lookup-basic/sample-thf-lookup-basic.component.ts"> </file>
 *  <file name="sample-thf-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="thf-lookup-labs" title="Totvs Lookup Labs">
 *  <file name="sample-thf-lookup-labs/sample-thf-lookup-labs.component.html"> </file>
 *  <file name="sample-thf-lookup-labs/sample-thf-lookup-labs.component.ts"> </file>
 *  <file name="sample-thf-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="thf-lookup-hero" title="Totvs Lookup - Hero">
 *  <file name="sample-thf-lookup-hero/sample-thf-lookup-hero.component.html"> </file>
 *  <file name="sample-thf-lookup-hero/sample-thf-lookup-hero.component.ts"> </file>
 *  <file name="sample-thf-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="thf-lookup-hero-reactive-form" title="Totvs Lookup - Hero Reactive Form">
 *  <file name="sample-thf-lookup-hero-reactive-form/sample-thf-lookup-hero-reactive-form.component.html"> </file>
 *  <file name="sample-thf-lookup-hero-reactive-form/sample-thf-lookup-hero-reactive-form.component.ts"> </file>
 *  <file name="sample-thf-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="thf-lookup-sw-films" title="Totvs Lookup - Star Wars films">
 *  <file name="sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.component.html"> </file>
 *  <file name="sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.component.ts"> </file>
 *  <file name="sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.service.ts"> </file>
 * </example>
 */
var ThfLookupComponent = /** @class */ (function (_super) {
    __extends$27(ThfLookupComponent, _super);
    function ThfLookupComponent(thfLookupModalService) {
        var _this = _super.call(this) || this;
        _this.thfLookupModalService = thfLookupModalService;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.modalSubscription) {
            this.modalSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.openLookup = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.disabled) {
            var _a = this, service = _a.service, columns = _a.columns, filterParams = _a.filterParams, literals = _a.literals;
            /** @type {?} */
            var title = this.title || this.label;
            this.thfLookupModalService.openModal({ service: service, columns: columns, filterParams: filterParams, title: title, literals: literals });
            if (!this.modalSubscription) {
                this.modalSubscription = this.thfLookupModalService.selectValueEvent.subscribe(function (element) {
                    _this.selectModel(element);
                });
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} object
     * @return {?}
     */
    ThfLookupComponent.prototype.setViewValue = /**
     * @param {?} value
     * @param {?} object
     * @return {?}
     */
    function (value, object) {
        if (this.fieldFormat) {
            this.setInputValueWithFieldFormat(object);
        }
        else {
            this.inputEl.nativeElement.value = this.valueToModel ? value : '';
        }
    };
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.getViewValue = /**
     * @return {?}
     */
    function () {
        return this.inputEl.nativeElement.value;
    };
    /**
     * @return {?}
     */
    ThfLookupComponent.prototype.searchEvent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.getViewValue();
        if (this.oldValue !== value) {
            this.searchById(value);
        }
    };
    /**
     * @private
     * @param {?} objectSelected
     * @return {?}
     */
    ThfLookupComponent.prototype.setInputValueWithFieldFormat = /**
     * @private
     * @param {?} objectSelected
     * @return {?}
     */
    function (objectSelected) {
        /** @type {?} */
        var isEmpty = Object.keys(objectSelected).length === 0;
        /** @type {?} */
        var fieldFormated = this.fieldFormat(objectSelected);
        this.oldValue = isEmpty ? '' : fieldFormated;
        this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
    };
    ThfLookupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-lookup', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <input #inp class=\"thf-input thf-input-icon-right\" type=\"text\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [required]=\"required\" (blur)=\"searchEvent()\"> <div class=\"thf-field-icon-container-right\"> <span tabindex=\"1\" #iconLookup (click)=\"openLookup()\" (focus)=\"inp.focus()\" class=\"thf-icon thf-field-icon thf-icon-search\" [class.thf-field-icon-disabled]=\"disabled\" [class.thf-field-icon]=\"!disabled\"> </span> </div> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        ThfLookupModalService,
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfLookupComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfLookupComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfLookupComponent.ctorParameters = function () { return [
        { type: ThfLookupModalService }
    ]; };
    ThfLookupComponent.propDecorators = {
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef },] }]
    };
    return ThfLookupComponent;
}(ThfLookupBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de pesquisa que será criado dentro do dropdown do `thf-multiselect`.
 */
var ThfMultiselectSearchComponent = /** @class */ (function () {
    function ThfMultiselectSearchComponent() {
        /**
         * Evento que será disparado a cada tecla digitada no campo de busca.
         */
        this.change = new i0.EventEmitter();
    }
    Object.defineProperty(ThfMultiselectSearchComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder || this.literals.placeholderSearch;
        },
        /**
         * @optional
         *
         * @description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * @default `Buscar`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * \@default `Buscar`
         * @param {?} placeholder
         * @return {?}
         */
        function (placeholder) {
            this._placeholder = placeholder && isTypeof(placeholder, 'string') ? placeholder : this.literals.placeholderSearch;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectSearchComponent.prototype.onChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.change.emit({ event: event, value: this.inputElement.nativeElement.value });
    };
    /**
     * @return {?}
     */
    ThfMultiselectSearchComponent.prototype.setFocus = /**
     * @return {?}
     */
    function () {
        this.inputElement.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    ThfMultiselectSearchComponent.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.inputElement.nativeElement.value = '';
    };
    ThfMultiselectSearchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-multiselect-search', template: "<div class=\"thf-field-container-content thf-multiselect-content-search\"> <div class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-icon-search thf-field-icon\"></span> </div> <input #inputElement class=\"thf-input thf-input-icon-left\" type=\"text\" [placeholder]=\"placeholder\" (keyup)=\"onChange($event)\"> </div> ",
                },] },
    ];
    ThfMultiselectSearchComponent.propDecorators = {
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        placeholder: [{ type: i0.Input, args: ['t-placeholder',] }],
        change: [{ type: i0.Output, args: ['t-change',] }],
        inputElement: [{ type: i0.ViewChild, args: ['inputElement', { read: i0.ElementRef },] }]
    };
    return ThfMultiselectSearchComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
var ThfMultiselectDropdownComponent = /** @class */ (function () {
    function ThfMultiselectDropdownComponent() {
        this.scrollTop = 0;
        this.show = false;
        this.haveOptions = false;
        /**
         * Propriedade que indica se o campo de pesquisa deverá ser escondido.
         */
        this.hideSearch = false;
        /**
         * Propriedade que recebe a lista de opções selecionadas.
         */
        this.selectedValues = [];
        /**
         * Propriedade que recebe a lista de opções que deverão ser criadas no dropdown.
         */
        this.options = [];
        /**
         * Evento disparado a cada tecla digitada na pesquisa.
         */
        this.changeSearch = new i0.EventEmitter();
        /**
         * Evento disparado a cada alteração na lista das opções selecionadas.
         */
        this.change = new i0.EventEmitter();
        /**
         * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
         * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
         * para notificar o componente principal que deve fechar o dropdown.
         */
        this.closeDropdown = new i0.EventEmitter();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.scrollTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.isSelectedItem = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        return this.selectedValues.some(function (selectedItem) { return selectedItem === option.value; });
    };
    /**
     * @param {?} check
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.clickItem = /**
     * @param {?} check
     * @param {?} option
     * @return {?}
     */
    function (check, option) {
        this.updateSelectedValues(check, option);
        if (!this.hideSearch) {
            this.searchElement.setFocus();
        }
    };
    /**
     * @param {?} checked
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.updateSelectedValues = /**
     * @param {?} checked
     * @param {?} option
     * @return {?}
     */
    function (checked, option) {
        if (checked) {
            this.selectedValues.push(option.value);
        }
        else {
            /** @type {?} */
            var indexSelectedValues = this.selectedValues.indexOf(option.value);
            this.selectedValues.splice(indexSelectedValues, 1);
        }
        this.change.emit(this.selectedValues);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.callChangeSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.changeSearch.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.onKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === 9) {
            this.closeDropdown.emit();
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.controlVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        var _this = this;
        this.show = toOpen;
        this.checkInitialOptions();
        if (toOpen && this.searchElement && !this.hideSearch) {
            setTimeout(function () {
                _this.searchElement.setFocus();
                _this.searchElement.clean();
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectDropdownComponent.prototype.checkInitialOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.options.length) {
            this.haveOptions = true;
        }
    };
    ThfMultiselectDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-multiselect-dropdown', template: "<div class=\"thf-multiselect-content\" [hidden]=\"!show\"> <thf-multiselect-search #searchElement *ngIf=\"!hideSearch && haveOptions\" [t-literals]=\"literals\" [t-placeholder]=\"placeholderSearch\" (t-change)=\"callChangeSearch($event)\"> </thf-multiselect-search> <ul class=\"thf-multiselect-items-content\" [scrollTop]=\"scrollTop\" #ulElement> <div *ngIf=\"!options.length\" class=\"thf-multiselect-content-no-data thf-text-center\"> <span> {{ literals.noData }}</span> </div> <thf-multiselect-item *ngFor=\"let option of options\" [t-option]=\"option\" [t-selected]=\"isSelectedItem(option)\" (t-change)=\"clickItem($event, option)\"> </thf-multiselect-item> </ul> </div> "
                },] },
    ];
    ThfMultiselectDropdownComponent.propDecorators = {
        hideSearch: [{ type: i0.Input, args: ['t-hide-search',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        placeholderSearch: [{ type: i0.Input, args: ['t-placeholder-search',] }],
        selectedValues: [{ type: i0.Input, args: ['t-selected-values',] }],
        options: [{ type: i0.Input, args: ['t-options',] }],
        changeSearch: [{ type: i0.Output, args: ['t-change-search',] }],
        change: [{ type: i0.Output, args: ['t-change',] }],
        closeDropdown: [{ type: i0.Output, args: ['t-close-dropdown',] }],
        ulElement: [{ type: i0.ViewChild, args: ['ulElement', { read: i0.ElementRef },] }],
        searchElement: [{ type: i0.ViewChild, args: ['searchElement',] }],
        onKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };
    return ThfMultiselectDropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfMultiselectFilterMode = {
    /** Verifica se o texto *inicia* com o valor pesquisado. */
    startsWith: 0,
    /** Verifica se o texto *contém* o valor pesquisado. */
    contains: 1,
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    endsWith: 2,
};
ThfMultiselectFilterMode[ThfMultiselectFilterMode.startsWith] = 'startsWith';
ThfMultiselectFilterMode[ThfMultiselectFilterMode.contains] = 'contains';
ThfMultiselectFilterMode[ThfMultiselectFilterMode.endsWith] = 'endsWith';

var __assign$8 = (undefined && undefined.__assign) || function () {
    __assign$8 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$8.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfMultiselectLiteralsDefault = {
    en: (/** @type {?} */ ({
        noData: 'No data found',
        placeholderSearch: 'Search'
    })),
    es: (/** @type {?} */ ({
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca'
    })),
    pt: (/** @type {?} */ ({
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar'
    }))
};
/**
 * \@description
 *
 * O thf-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do thf-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * thf-select, thf-combo ou thf-radio-group.
 * @abstract
 */
var ThfMultiselectBaseComponent = /** @class */ (function () {
    function ThfMultiselectBaseComponent() {
        this._disabled = false;
        this._filterMode = ThfMultiselectFilterMode.startsWith;
        this._focus = false;
        this._hideSearch = false;
        this._required = false;
        this._sort = false;
        this.firstInWriteValue = true;
        this.readyToValidation = false;
        this.selectedOptions = [];
        this.visibleOptionsDropdown = [];
        this.visibleDisclaimers = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * \@description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * \@default `Buscar`
         */
        this.placeholderSearch = '';
        /**
         * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new i0.EventEmitter();
    }
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfMultiselectLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-multiselect`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfMultiselectLiterals = {
         *    noData: 'Nenhum dado encontrado',
         *    placeholderSearch: 'Buscar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfMultiselectLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <thf-multiselect
         *   [t-literals]="customLiterals">
         * </thf-thf-multiselect>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-multiselect`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfMultiselectLiterals = {
         *    noData: 'Nenhum dado encontrado',
         *    placeholderSearch: 'Buscar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfMultiselectLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <thf-multiselect
         *   [t-literals]="customLiterals">
         * </thf-thf-multiselect>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign$8({}, thfMultiselectLiteralsDefault[thfLocaleDefault], thfMultiselectLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfMultiselectLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = (/** @type {?} */ (required)) === '' ? true : convertToBoolean(required);
            this.updateModelToValidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
            this.updateModelToValidate();
            this.updateVisibleItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "hideSearch", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSearch;
        },
        /**
         * @optional
         *
         * @description
         *
         * Esconde o campo de pesquisa existente dentro do dropdown do thf-multiselect.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Esconde o campo de pesquisa existente dentro do dropdown do thf-multiselect.
         *
         * \@default `false`
         * @param {?} hideSearch
         * @return {?}
         */
        function (hideSearch) {
            this._hideSearch = (/** @type {?} */ (hideSearch)) === '' ? true : convertToBoolean(hideSearch);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * @description
         *
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfMultiselectOption.
         * Esta lista deve conter os valores e os labels que serão apresentados na tela.
         */
        set: /**
         * \@description
         *
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfMultiselectOption.
         * Esta lista deve conter os valores e os labels que serão apresentados na tela.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = options;
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "sort", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sort;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que a lista definida na propriedade t-options será ordenada pelo label antes de ser apresentada no
         * dropdown.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que a lista definida na propriedade t-options será ordenada pelo label antes de ser apresentada no
         * dropdown.
         *
         * \@default `false`
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this._sort = (/** @type {?} */ (sort)) === '' ? true : convertToBoolean(sort);
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "focus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._focus;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo iniciará com foco.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo iniciará com foco.
         *
         * \@default `false`
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._focus = (/** @type {?} */ (focus)) === '' ? true : convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "filterMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
         * Valores definidos no enum: ThfMultiselectFilterMode
         *
         * @default `startsWith`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
         * Valores definidos no enum: ThfMultiselectFilterMode
         *
         * \@default `startsWith`
         * @param {?} filterMode
         * @return {?}
         */
        function (filterMode) {
            this._filterMode = (filterMode in ThfMultiselectFilterMode) ? filterMode : ThfMultiselectFilterMode.startsWith;
            switch (this._filterMode.toString()) {
                case 'startsWith':
                    this._filterMode = ThfMultiselectFilterMode.startsWith;
                    break;
                case 'contains':
                    this._filterMode = ThfMultiselectFilterMode.contains;
                    break;
                case 'endsWith':
                    this._filterMode = ThfMultiselectFilterMode.endsWith;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateList(this.options);
    };
    /**
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        // Seta esta variável para indicar que a tela já foi carregada e podem ser aplicadas as validações.
        // A partir desse momento, toda vez que uma propriedade que interfere na validação, for alterada, o model será atualizado
        // para que o campo seja validado novamente.
        this.readyToValidation = true;
    };
    /**
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.validAndSortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptions(this.options);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, 'label');
            }
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.setUndefinedLabels = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options.forEach(function (option) {
            if (!option['label']) {
                option.label = option.value;
            }
        });
    };
    /**
     * @param {?} options
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.updateList = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    };
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.updateModelToValidate = 
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.readyToValidation) {
            // Este timeout é necessário para quando for atualizado o model e uma propriedade do Datepicker ao mesmo tempo.
            // Caso contrário, o writeValue não é disparado, não atualizando o model do componente.
            setTimeout(function () {
                _this.callOnChange(_this.selectedOptions);
            });
        }
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.callOnChange = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.eventChange = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.getValuesFromOptions = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map(function (option) { return option.value; }) : [];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.getLabelByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var index = this.options.findIndex(function (option) { return option.value === value; });
        return this.options[index].label;
    };
    /**
     * @param {?} selectedValues
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.changeItems = /**
     * @param {?} selectedValues
     * @return {?}
     */
    function (selectedValues) {
        this.updateSelectedOptions(selectedValues);
        this.callOnChange(this.selectedOptions);
    };
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.searchByLabel = /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    function (search, options, filterMode) {
        var _this = this;
        if (search && options && options.length) {
            /** @type {?} */
            var newOptions_1 = [];
            options.forEach(function (option) {
                if (option.label && _this.compareMethod(search, option, filterMode)) {
                    newOptions_1.push(option);
                }
            });
            this.visibleOptionsDropdown = newOptions_1;
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.compareMethod = /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    function (search, option, filterMode) {
        switch (filterMode) {
            case ThfMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case ThfMultiselectFilterMode.contains:
                return this.contains(search, option);
            case ThfMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.startsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.contains = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.endsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return { required: {
                    valid: false,
                } };
        }
        return null;
    };
    /**
     * @param {?} values
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.updateSelectedOptions = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        this.selectedOptions = [];
        values.forEach(function (value) {
            _this.options.forEach(function (option) {
                if (option.value === value) {
                    _this.selectedOptions.push(option);
                }
            });
        });
        this.updateVisibleItems();
    };
    /**
     * @param {?} values
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.writeValue = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        if (this.firstInWriteValue) {
            this.firstInWriteValue = false;
            return;
        }
        if (!values) {
            values = [];
            this.callOnChange([]);
        }
        // Validar se todos os items existem entre os options, senão atualizar o model
        this.updateSelectedOptions(values);
        if (this.selectedOptions.length < values.length) {
            this.callOnChange(this.selectedOptions);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    ThfMultiselectBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        placeholder: [{ type: i0.Input, args: ['t-placeholder',] }],
        placeholderSearch: [{ type: i0.Input, args: ['t-placeholder-search',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        hideSearch: [{ type: i0.Input, args: ['t-hide-search',] }],
        options: [{ type: i0.Input, args: ['t-options',] }],
        sort: [{ type: i0.Input, args: ['t-sort',] }],
        focus: [{ type: i0.Input, args: ['t-focus',] }],
        filterMode: [{ type: i0.Input, args: ['t-filter-mode',] }],
        change: [{ type: i0.Output, args: ['t-change',] }]
    };
    return ThfMultiselectBaseComponent;
}());

var __extends$28 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfMultiselectBaseComponent
 *
 * \@example
 *
 * <example name="thf-multiselect-basic" title="Totvs Multiselect Basic">
 *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.html"> </file>
 *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-labs" title="Totvs Multiselect Labs">
 *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.html"> </file>
 *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-vacation" title="Totvs Multiselect - Vacation">
 *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.html"> </file>
 *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.ts"> </file>
 * </example>
 */
var ThfMultiselectComponent = /** @class */ (function (_super) {
    __extends$28(ThfMultiselectComponent, _super);
    function ThfMultiselectComponent(el, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.renderer = renderer;
        _this.disclaimerOffset = 0;
        _this.dropdownIcon = 'thf-icon-arrow-down';
        _this.dropdownOpen = false;
        _this.initialized = false;
        _this.visibleElement = false;
        _this.isCalculateVisibleItems = true;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.focus) {
            this.inputElement.nativeElement.focus();
        }
        this.initialized = true;
        this.initializeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputWidth = this.inputElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
            return;
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeClickoutListener();
        this.removeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.getInputWidth = /**
     * @return {?}
     */
    function () {
        return this.el.nativeElement.querySelector('.thf-input').offsetWidth - 40;
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.getDisclaimersWidth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var disclaimers = this.el.nativeElement.querySelectorAll('thf-disclaimer');
        return Array.from(disclaimers).map(function (disclaimer) { return disclaimer['offsetWidth']; });
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.calculateVisibleItems = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var disclaimersWidth = this.getDisclaimersWidth();
        /** @type {?} */
        var inputWidth = this.getInputWidth();
        /** @type {?} */
        var extraDisclaimerSize = 38;
        /** @type {?} */
        var disclaimersVisible = disclaimersWidth[0];
        this.visibleDisclaimers = [];
        if (inputWidth > 0) {
            /** @type {?} */
            var sum = 0;
            /** @type {?} */
            var i = 0;
            for (i = 0; i < this.selectedOptions.length; i++) {
                sum += disclaimersWidth[i];
                this.visibleDisclaimers.push(this.selectedOptions[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !this.selectedOptions.length) {
                if (i === this.selectedOptions.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    this.visibleDisclaimers.splice(-2, 2);
                    /** @type {?} */
                    var label = '+' + (this.selectedOptions.length + 1 - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
                else {
                    this.visibleDisclaimers.splice(-1, 1);
                    /** @type {?} */
                    var label = '+' + (this.selectedOptions.length - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
            }
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.updateVisibleItems = /**
     * @return {?}
     */
    function () {
        this.visibleDisclaimers = [].concat(this.selectedOptions);
        this.debounceResize();
        // quando estiver dentro de modal
        if (!this.inputElement.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.debounceResize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.calculateVisibleItems();
        }, 200);
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfMultiselectComponent.prototype.onKeyDown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        // Seta para cima e para baixo
        if (event.keyCode === 38 || event.keyCode === 40) {
            event.preventDefault();
            this.controlDropdownVisibility(true);
            return;
        }
        // Tab
        if (event.keyCode === 9) {
            this.controlDropdownVisibility(false);
            return;
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.toggleDropdownVisibility = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        this.controlDropdownVisibility(!this.dropdownOpen);
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    ThfMultiselectComponent.prototype.openDropdown = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        if (toOpen && !this.disabled) {
            this.controlDropdownVisibility(true);
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    ThfMultiselectComponent.prototype.controlDropdownVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        this.dropdownIcon = toOpen ? 'thf-icon-arrow-up' : 'thf-icon-arrow-down';
        this.dropdownOpen = toOpen;
        this.dropdown.controlVisibility(toOpen);
        this.setVisibleOptionsDropdown(this.options);
        if (toOpen) {
            this.initializeClickoutListener();
            this.setPositionOpeningDropdown();
        }
        else {
            this.removeClickoutListener();
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.setPositionOpeningDropdown = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectedOptions && this.selectedOptions.length) {
            /** @type {?} */
            var index = this.options.findIndex(function (option) { return option.value === _this.selectedOptions[0].value; });
            this.dropdown.scrollTo(index);
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    ThfMultiselectComponent.prototype.setVisibleOptionsDropdown = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.visibleOptionsDropdown = options;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectComponent.prototype.changeSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.value) {
            this.searchByLabel(event.value, this.options, this.filterMode);
        }
        else {
            this.setVisibleOptionsDropdown(this.options);
        }
    };
    /**
     * @return {?}
     */
    ThfMultiselectComponent.prototype.getPlaceholder = /**
     * @return {?}
     */
    function () {
        return (this.placeholder && !this.visibleDisclaimers.length) ? this.placeholder : '';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMultiselectComponent.prototype.closeDisclaimer = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var index = this.selectedOptions.findIndex(function (option) { return option.value === value; });
        this.selectedOptions.splice(index, 1);
        this.updateVisibleItems();
        this.callOnChange(this.selectedOptions);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMultiselectComponent.prototype.wasClickedOnToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.dropdownElement.nativeElement.contains(event.target) &&
            !this.disclaimerContainerElement.nativeElement.contains(event.target) &&
            this.dropdownOpen) {
            this.controlDropdownVisibility(false);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectComponent.prototype.initializeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectComponent.prototype.initializeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.updateVisibleItems();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectComponent.prototype.removeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMultiselectComponent.prototype.removeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    ThfMultiselectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-multiselect', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\" [class.thf-multiselect-show]=\"dropdownOpen\"> <input #inputElement class=\"thf-input thf-input-icon-right thf-clickable\" readonly type=\"text\" [value]=\"getPlaceholder()\" [disabled]=\"disabled\" (keydown)=\"onKeyDown($event)\" (click)=\"toggleDropdownVisibility()\"> <div class=\"thf-field-icon-container-right\"> <span #iconElement class=\"thf-icon thf-field-icon {{ dropdownIcon }}\" [ngClass]=\"disabled ? 'thf-field-icon-disabled' : ''\" (click)=\"toggleDropdownVisibility()\"> </span> </div> <div #disclaimerContainer class=\"thf-multiselect-field\" [class.thf-multiselect-field-disabled]=\"disabled\"> <thf-disclaimer *ngFor=\"let disclaimer of visibleDisclaimers\" [t-label]=\"disclaimer.label\" [t-value]=\"disclaimer.value\" [t-hide-close]=\"disclaimer.value === '' || disabled\" [class.thf-clickable]=\"disclaimer.value === '' && !disabled\" (click)=\"openDropdown(disclaimer.value === '')\" (t-close-action)=\"closeDisclaimer(disclaimer.value)\"> </thf-disclaimer> </div> <thf-multiselect-dropdown #dropdownElement [t-hide-search]=\"hideSearch\" [t-literals]=\"literals\" [t-options]=\"visibleOptionsDropdown\" [t-selected-values]=\"getValuesFromOptions(selectedOptions)\" [t-placeholder-search]=\"placeholderSearch\" (t-change)=\"changeItems($event)\" (t-change-search)=\"changeSearch($event)\" (t-close-dropdown)=\"controlDropdownVisibility(false)\"> </thf-multiselect-dropdown> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfMultiselectComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfMultiselectComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfMultiselectComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    ThfMultiselectComponent.propDecorators = {
        dropdownElement: [{ type: i0.ViewChild, args: ['dropdownElement', { read: i0.ElementRef },] }],
        dropdown: [{ type: i0.ViewChild, args: ['dropdownElement',] }],
        disclaimerContainerElement: [{ type: i0.ViewChild, args: ['disclaimerContainer', { read: i0.ElementRef },] }],
        iconElement: [{ type: i0.ViewChild, args: ['iconElement', { read: i0.ElementRef },] }],
        inputElement: [{ type: i0.ViewChild, args: ['inputElement', { read: i0.ElementRef },] }]
    };
    return ThfMultiselectComponent;
}(ThfMultiselectBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que constrói cada item no dropdown, contendo o checkbox e o label.
 */
var ThfMultiselectItemComponent = /** @class */ (function () {
    function ThfMultiselectItemComponent() {
        /**
         * Opção que irá gerar o item, implementando a interface ThfMultiselectOption.
         */
        this.option = null;
        /**
         * Esta propriedade indica se o campo está selecionado ou não.
         */
        this.selected = false;
        /**
         * Evento que será disparado toda vez que o usuário marcar ou desmarcar um item.
         */
        this.change = new i0.EventEmitter();
    }
    /**
     * @return {?}
     */
    ThfMultiselectItemComponent.prototype.itemClicked = /**
     * @return {?}
     */
    function () {
        this.selected = !this.selected;
        this.change.emit(this.selected);
    };
    ThfMultiselectItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-multiselect-item', template: "<li [value]=\"option?.value\" (click)=\"itemClicked()\" [class.thf-multiselect-item-selected]=\"selected\"> <a class=\"thf-multiselect-item\"> <input [checked]=\"selected\" class=\"thf-multiselect-checkbox-input\" [class.thf-multiselect-checkbox-input-checked]=\"selected\" type=\"checkbox\"> <label class=\"thf-multiselect-checkbox-label thf-clickable\"> {{ option?.label }} </label> </a> </li> "
                },] },
    ];
    ThfMultiselectItemComponent.propDecorators = {
        option: [{ type: i0.Input, args: ['t-option',] }],
        selected: [{ type: i0.Input, args: ['t-selected',] }],
        change: [{ type: i0.Output, args: ['t-change',] }]
    };
    return ThfMultiselectItemComponent;
}());

var __extends$29 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@example
 *
 * <example name="thf-input-basic" title="Totvs Input Basic">
 *  <file name="sample-thf-input-basic/sample-thf-input-basic.component.html"> </file>
 *  <file name="sample-thf-input-basic/sample-thf-input-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-input-labs" title="Totvs Input Labs">
 *  <file name="sample-thf-input-labs/sample-thf-input-labs.component.html"> </file>
 *  <file name="sample-thf-input-labs/sample-thf-input-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-input-reactive-form" title="Totvs Input - Reactive Form">
 *  <file name="sample-thf-input-reactive-form/sample-thf-input-reactive-form.component.html"> </file>
 *  <file name="sample-thf-input-reactive-form/sample-thf-input-reactive-form.component.ts"> </file>
 * </example>
 */
var ThfInputComponent = /** @class */ (function (_super) {
    __extends$29(ThfInputComponent, _super);
    function ThfInputComponent(el) {
        return _super.call(this, el) || this;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    ThfInputComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    ThfInputComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-input', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span> </div> <input #inp class=\"thf-input\" [attr.name]=\"name\" [class.thf-input-icon-left]=\"icon\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [type]=\"type\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" (focus)=\"eventOnFocus($event)\" (input)=\"eventOnInput($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfInputComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfInputComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfInputComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    return ThfInputComponent;
}(ThfInputGeneric));

var __extends$30 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var ThfNumberBaseComponent = /** @class */ (function (_super) {
    __extends$30(ThfNumberBaseComponent, _super);
    function ThfNumberBaseComponent(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.type = 'number';
        return _this;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.eventOnInput = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.mask) {
            /** @type {?} */
            var value = e.target.value;
            /** @type {?} */
            var valueMaxlength = this.validMaxLength(this.maxlength, value);
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        if (maxlength && value.length > maxlength) {
            /** @type {?} */
            var substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else { // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.isEndWithDot = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.formatNumber = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value ? Number(value) : null;
    };
    return ThfNumberBaseComponent;
}(ThfInputGeneric));

var __extends$31 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 *
 * thf-number é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com t-min, t-max e t-step,
 * respectivamente.
 *
 * \@example
 *
 * <example name="thf-number-basic" title="Totvs Number Basic">
 *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.html"> </file>
 *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-number-labs" title="Totvs Number Labs">
 *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.html"> </file>
 *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-number-calculate" title="Totvs Number - Calculate">
 *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.html"> </file>
 *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.ts"> </file>
 * </example>
 */
var ThfNumberComponent = /** @class */ (function (_super) {
    __extends$31(ThfNumberComponent, _super);
    function ThfNumberComponent(el) {
        var _this = _super.call(this, el) || this;
        /**
         * \@optional
         *
         * \@description
         *
         * Intervalo.
         *
         * \@default 1
         */
        _this.step = '1';
        return _this;
    }
    Object.defineProperty(ThfNumberComponent.prototype, "setMin", {
        set: /**
         * @param {?} min
         * @return {?}
         */
        function (min) {
            /** @type {?} */
            var parsedInt = parseInt(min, 10);
            this.min = !isNaN(parsedInt) ? parsedInt : undefined;
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfNumberComponent.prototype, "setMax", {
        set: /**
         * @param {?} max
         * @return {?}
         */
        function (max) {
            /** @type {?} */
            var parsedInt = parseInt(max, 10);
            this.max = !isNaN(parsedInt) ? parsedInt : undefined;
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfNumberComponent.prototype.extraValidation = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (minFailed(this.min, abstractControl.value)) {
            return { min: {
                    valid: false,
                } };
        }
        if (maxFailed(this.max, abstractControl.value)) {
            return { max: {
                    valid: false,
                } };
        }
        return null;
    };
    ThfNumberComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-number', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <input #inp class=\"thf-input\" type=\"number\" [attr.max]=\"max\" [attr.min]=\"min\" [attr.name]=\"name\" [attr.step]=\"step\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [tabindex]=\"disabled ? -1 : 0\" (blur)=\"eventOnBlur($event)\" (focus)=\"eventOnFocus($event)\" (input)=\"eventOnInput($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean [t-default-value]=\"null\" [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"> </thf-clean> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfNumberComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfNumberComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfNumberComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    ThfNumberComponent.propDecorators = {
        setMin: [{ type: i0.Input, args: ['t-min',] }],
        setMax: [{ type: i0.Input, args: ['t-max',] }],
        step: [{ type: i0.Input, args: ['t-step',] }]
    };
    return ThfNumberComponent;
}(ThfNumberBaseComponent));

var __extends$32 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 * O thf-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
 *
 * \@example
 *
 * <example name="thf-password-basic" title="Totvs Password Basic">
 *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.html"> </file>
 *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-password-labs" title="Totvs Password Labs">
 *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.html"> </file>
 *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-password-reset" title="Totvs Password - Reset">
 *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.html"> </file>
 *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.ts"> </file>
 * </example>
 */
var ThfPasswordComponent = /** @class */ (function (_super) {
    __extends$32(ThfPasswordComponent, _super);
    function ThfPasswordComponent(el) {
        var _this = _super.call(this, el) || this;
        _this._hidePasswordPeek = false;
        _this.type = 'password';
        _this.visiblePassword = false;
        return _this;
    }
    Object.defineProperty(ThfPasswordComponent.prototype, "hidePasswordPeek", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hidePasswordPeek;
        },
        /**
         * @optional
         *
         * @description
         *
         * Permite esconder a função de espiar a senha digitada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Permite esconder a função de espiar a senha digitada.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hidePasswordPeek = convertToBoolean(value);
            if (value) {
                this.visiblePassword = false;
                this.type = 'password';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} c
     * @return {?}
     */
    ThfPasswordComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @return {?}
     */
    ThfPasswordComponent.prototype.showPassword = /**
     * @return {?}
     */
    function () {
        this.visiblePassword = !this.visiblePassword;
        this.type = this.type === 'password' ? 'text' : 'password';
    };
    ThfPasswordComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-password', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <div class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-field-icon thf-icon-lock\" [class.thf-field-icon-disabled]=\"disabled\"> </span> </div> <input #inp class=\"thf-input thf-input-icon-left\" [ngClass]=\"clean && inp.value && !hidePasswordPeek ? 'thf-input-double-icon-right' : 'thf-input-icon-right'\" [attr.name]=\"name\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [type]=\"disabled ? 'password' : type\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" (focus)=\"eventOnFocus($event)\" (input)=\"eventOnInput($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean  class=\"thf-icon thf-field-icon\" [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"> </thf-clean> <span *ngIf=\"!hidePasswordPeek && !disabled\" class=\"thf-icon thf-field-icon\" [ngClass]=\"visiblePassword ? 'thf-icon-eye' : 'thf-icon-eye-off thf-field-icon-disabled'\" (click)=\"showPassword()\"> </span> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfPasswordComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfPasswordComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfPasswordComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    ThfPasswordComponent.propDecorators = {
        hidePasswordPeek: [{ type: i0.Input, args: ['t-hide-password-peek',] }]
    };
    return ThfPasswordComponent;
}(ThfInputGeneric));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfRadioGroupColumnsDefaultLength = 6;
/** @type {?} */
var thfRadioGroupColumnsTotalLength = 12;
/**
 * \@description
 *
 * O componente `thf-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**thf-combo**](/documentation/thf-combo) ou [**thf-select**](/documentation/thf-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**thf-checkbox-group**](/documentation/thf-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 * @abstract
 */
var ThfRadioGroupBaseComponent = /** @class */ (function () {
    function ThfRadioGroupBaseComponent() {
        this._columns = thfRadioGroupColumnsDefaultLength;
        this._disabled = false;
        this._required = false;
        this.mdColumns = thfRadioGroupColumnsDefaultLength;
        this.onChangePropagate = null;
        /**
         * Evento ao alterar valor do campo.
         */
        this.change = new i0.EventEmitter();
    }
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a quantidade de colunas para exibição das opções.
         *
         * **Considerações:**
         *  - É possível exibir as opções entre `1` e `4` colunas.
         *  - O número máximo de colunas é invariável nas seguintes resoluções:
         *    + `sm`: `1`
         *    + `md`: `2`
         *
         * @default `2`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a quantidade de colunas para exibição das opções.
         *
         * **Considerações:**
         *  - É possível exibir as opções entre `1` e `4` colunas.
         *  - O número máximo de colunas é invariável nas seguintes resoluções:
         *    + `sm`: `1`
         *    + `md`: `2`
         *
         * \@default `2`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var columns = convertToInt(value, thfRadioGroupColumnsDefaultLength);
            this._columns = this.getGridSystemColumns(columns, 4);
            this.mdColumns = this.getGridSystemColumns(columns, 2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * Lista de opções que serão exibidas.
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfRadioGroupOption.
         */
        set: /**
         * Lista de opções que serão exibidas.
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfRadioGroupOption.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = value;
            removeDuplicatedOptions(this.options);
        },
        enumerable: true,
        configurable: true
    });
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    /**
     * @param {?} changedValue
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.changeValue = 
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    /**
     * @param {?} changedValue
     * @return {?}
     */
    function (changedValue) {
        if (this.onChangePropagate) {
            this.onChangePropagate(changedValue);
        }
        if (this.value !== changedValue) {
            this.change.emit(changedValue);
        }
        this.value = changedValue;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangePropagate = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @param {?} modelValue
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.writeValue = /**
     * @param {?} modelValue
     * @return {?}
     */
    function (modelValue) {
        this.value = modelValue;
        // Busca radio com o valor especificado
        /** @type {?} */
        var element = this.getElementByValue(modelValue);
        if (!element && this.onChangePropagate) {
            this.value = undefined;
            this.onChangePropagate(this.value);
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.checkColumnsRange = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.getGridSystemColumns = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var gridSystemColumns = thfRadioGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : thfRadioGroupColumnsDefaultLength;
    };
    /**
     * @private
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.validateModel = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    ThfRadioGroupBaseComponent.propDecorators = {
        name: [{ type: i0.Input, args: ['name',] }],
        columns: [{ type: i0.Input, args: ['t-columns',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        options: [{ type: i0.Input, args: ['t-options',] }],
        change: [{ type: i0.Output, args: ['t-change',] }]
    };
    return ThfRadioGroupBaseComponent;
}());

var __extends$33 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfRadioGroupBaseComponent
 *
 * \@example
 *
 * <example name="thf-radio-group-basic" title="Totvs Radio Group Basic">
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.html"> </file>
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.ts"> </file>
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-radio-group-labs" title="Totvs Radio Group Labs">
 *  <file name="sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.html"> </file>
 *  <file name="sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-radio-group-translator" title="Totvs Radio Group - Translator">
 *  <file name="sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.html"> </file>
 *  <file name="sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.ts"> </file>
 * </example>
 *
 * <example name="thf-radio-group-translator-reactive-form" title="Totvs Radio Group - Translator Reactive Form">
 *  <file name="sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.html"> </file>
 *  <file name="sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.ts"> </file>
 * </example>
 *
 */
var ThfRadioGroupComponent = /** @class */ (function (_super) {
    __extends$33(ThfRadioGroupComponent, _super);
    function ThfRadioGroupComponent(differs) {
        var _this = _super.call(this) || this;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
        }
    };
    /**
     * @param {?} value
     * @param {?} disabled
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.eventClick = /**
     * @param {?} value
     * @param {?} disabled
     * @return {?}
     */
    function (value, disabled) {
        if (!disabled) {
            this.changeValue(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.getElementByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.inputEl.nativeElement.querySelector("input[value='" + value + "']");
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.onKeyUp = /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    function (event, value) {
        /** @type {?} */
        var key = event.keyCode || event.which;
        if (this.isArrowKey(key)) {
            this.changeValue(value);
        }
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    ThfRadioGroupComponent.prototype.isArrowKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return key >= 37 && key <= 40;
    };
    ThfRadioGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-radio-group', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-row thf-pt-1 thf-pb-1\" #inp> <div *ngFor=\"let option of options\" class=\"thf-radio-group-item thf-md-{{ mdColumns }} thf-lg-{{ columns }}\"> <input #input class=\"thf-radio-group-input\" type=\"radio\" [attr.name]=\"name\" [checked]=\"value === option.value\" [class.thf-radio-group-input-checked]=\"value === option.value\" [disabled]=\"option.disabled === true || disabled\" [readonly]=\"readonly\" [required]=\"required\" [value]=\"option.value\" (keyup)=\"onKeyUp($event, option.value)\"> <label class=\"thf-radio-group-label\" [class.thf-clickable]=\"!input.disabled\" [for]=\"name\" (click)=\"eventClick(option.value, option.disabled === true || disabled)\"> {{ option.label }} </label> </div> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfRadioGroupComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfRadioGroupComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfRadioGroupComponent.ctorParameters = function () { return [
        { type: i0.IterableDiffers }
    ]; };
    ThfRadioGroupComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef },] }]
    };
    return ThfRadioGroupComponent;
}(ThfRadioGroupBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente thf-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O thf-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O thf-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[t-select-option-template](/documentation/thf-select-option-template)**.
 * @abstract
 */
var ThfSelectBaseComponent = /** @class */ (function () {
    function ThfSelectBaseComponent(element, changeDetector) {
        this.element = element;
        this._disabled = false;
        this._required = false;
        /**
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new i0.EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new i0.EventEmitter();
        this.readyToValidation = false;
        this.element = element;
        this.changeDetector = changeDetector;
    }
    Object.defineProperty(ThfSelectBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface ThfSelectOption.
         * Caso esta lista estiver vazia, o model será undefined.
         */
        set: /**
         * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface ThfSelectOption.
         * Caso esta lista estiver vazia, o model será undefined.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = options;
            removeDuplicatedOptions(this._options);
            removeUndefinedAndNullOptions(this._options);
            this.onUpdateOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSelectBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSelectBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.callModelChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.change.emit(value);
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this._required, this._disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
        return null;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onValidatorChange = fn;
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.validateModel = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.onValidatorChange) {
            this.onValidatorChange();
        }
    };
    ThfSelectBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        placeholder: [{ type: i0.Input, args: ['t-placeholder',] }],
        options: [{ type: i0.Input, args: ['t-options',] }],
        change: [{ type: i0.Output, args: ['t-change',] }],
        ngModelChange: [{ type: i0.Output, args: ['ngModelChange',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        required: [{ type: i0.Input, args: ['t-required',] }]
    };
    return ThfSelectBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfSelectComponent
 *
 * \@description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista suspensa do componente.
 *
 * > Quando utilizada em _mobile_ será exibido o componente nativo.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `t-select-option-template` com `ng-template`
 * dentro da tag `thf-select`.
 *
 * Para obter a referência do item atual, use `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-select
 *   name="select"
 *   [(ngModel)]="select"
 *   [t-options]="options">
 *     <ng-template t-select-option-template let-option>
 *       <option-template [option]="option"></option-template>
 *     </ng-template>
 * </thf-select>
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-select
 *   name="select"
 *   [(ngModel)]="select"
 *   [t-options]="options">
 *     <div *t-select-option-template="let option">
 *       <option-template [option]="option"></option-template>
 *     </div>
 * </thf-select>
 * ...
 *
 * ```
 */
var ThfSelectOptionTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfSelectOptionTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfSelectOptionTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[t-select-option-template]'
                },] },
    ];
    /** @nocollapse */
    ThfSelectOptionTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    return ThfSelectOptionTemplateDirective;
}());

var __extends$34 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfSelectContentOffset = 8;
/** @type {?} */
var thfSelectContentPositionDefault = 'bottom';
/**
 * \@docsExtends ThfSelectBaseComponent
 *
 * \@example
 *
 * <example name="thf-select-basic" title="Totvs Select Basic">
 *   <file name="sample-thf-select-basic/sample-thf-select-basic.component.html"> </file>
 *   <file name="sample-thf-select-basic/sample-thf-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-select-labs" title="Totvs Select Labs">
 *   <file name="sample-thf-select-labs/sample-thf-select-labs.component.html"> </file>
 *   <file name="sample-thf-select-labs/sample-thf-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-select-customer-registration" title="Totvs Select - Customer registration">
 *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.html"> </file>
 *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.ts"> </file>
 *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.service.ts"> </file>
 *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.po.ts'> </file>
 * </example>
 */
var ThfSelectComponent = /** @class */ (function (_super) {
    __extends$34(ThfSelectComponent, _super);
    function ThfSelectComponent(element, changeDetector, differs, renderer, controlPosition) {
        var _this = _super.call(this, element, changeDetector) || this;
        _this.renderer = renderer;
        _this.controlPosition = controlPosition;
        _this.isMobile = isMobile();
        _this.open = false;
        _this.selectIcon = 'thf-icon-arrow-down';
        _this.onScroll = function () {
            _this.controlPosition.adjustPosition(thfSelectContentPositionDefault);
        };
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfSelectComponent.prototype.onKeydown = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var charCode = $event.which || $event.keyCode;
        // Seleciona os itens com as teclas "up" e "down"
        if ((!this.open || $event.altKey) && (charCode === 40 || charCode === 38)) {
            this.disableDefaultEventAndToggleButton();
        }
        // Abre o thf-select com as teclas "enter" e "espaço"
        if (charCode === 13 || charCode === 32) {
            this.disableDefaultEventAndToggleButton();
        }
        // Fecha o thf-select com a tecla "tab"
        if (this.open && charCode === 9) {
            $event.preventDefault();
            this.toggleButton();
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
            removeUndefinedAndNullOptions(this.options);
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.hideDropDown = /**
     * @return {?}
     */
    function () {
        this.selectIcon = 'thf-icon-arrow-down';
        this.selector('.thf-select-container').classList.remove('thf-select-show');
        this.open = false;
        this.changeDetector.markForCheck();
        this.removeListeners();
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    ThfSelectComponent.prototype.isEqual = /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.onOptionClick = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        this.toggleButton();
        this.updateModel(option);
    };
    // Altera o valor ao selecionar um item.
    // Altera o valor ao selecionar um item.
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.onSelectChange = 
    // Altera o valor ao selecionar um item.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');
        if (value && this.options && this.options.length) {
            /** @type {?} */
            var optionFound = this.options.find(function (option) {
                return _this.isEqual(option.value, value);
            });
            if (optionFound) {
                /** @type {?} */
                var index = this.options.indexOf(optionFound);
                ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
                this.updateModel(optionFound);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.onUpdateOptions = /**
     * @return {?}
     */
    function () {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    };
    /**
     * @param {?} index
     * @param {?} clientHeight
     * @return {?}
     */
    ThfSelectComponent.prototype.scrollValue = /**
     * @param {?} index
     * @param {?} clientHeight
     * @return {?}
     */
    function (index, clientHeight) {
        /** @type {?} */
        var heightScrollValue = (index + 1) * this.getSelectItemHeight();
        return this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfSelectComponent.prototype.selector = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.toggleButton = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');
        this.selectElement.nativeElement.focus();
        this.selectIcon = this.open ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
        this.changeDetector.markForCheck();
        if (this.options && this.options.length) {
            this.selector('.thf-select-container').classList.toggle('thf-select-show');
            ulDropdpwn.scrollTop = this.scrollPosition;
        }
        this.open = !this.open;
        if (this.open) {
            this.setPositionDropdown();
            this.initializeListeners();
        }
        else {
            this.removeListeners();
        }
    };
    // Atualiza valores
    // Atualiza valores
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.updateModel = 
    // Atualiza valores
    /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (this.selectedValue !== option.value) {
            this.selectedValue = option.value;
            this.selectElement.nativeElement.value = option.value;
            this.callModelChange(option.value);
            this.displayValue = option.label;
            this.onChange(option.value);
        }
    };
    // Esconde Content do Select quando for clicado fora
    // Esconde Content do Select quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    ThfSelectComponent.prototype.wasClickedOnToggle = 
    // Esconde Content do Select quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    };
    // Recebe as alterações do model
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.writeValue = 
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var optionFound = this.options.find(function (option) {
            return _this.isEqual(option.value, value);
        });
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound.value;
            this.displayValue = (optionFound.label);
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.callModelChange(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    };
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.disableDefaultEventAndToggleButton = 
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectElement.nativeElement.style.display = 'none';
        setTimeout(function () {
            _this.selectElement.nativeElement.style.display = 'block';
            _this.toggleButton();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.getSelectItemHeight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectItem = this.selector('div.thf-select-item');
        return selectItem && selectItem.clientHeight;
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
            _this.hideDropDown();
        });
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        this.eventResizeListener();
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.setPositionDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.setElements(this.contentList.nativeElement, thfSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
        this.controlPosition.adjustPosition(thfSelectContentPositionDefault);
    };
    ThfSelectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-select', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <select #select class=\"thf-select\" [attr.name]=\"name\" [disabled]=\"disabled\" [ngClass]=\"{'thf-select-mobile' : isMobile}\" [required]=\"required\" (change)=\"onSelectChange($event.target.value)\"> <option *ngIf=\"isMobile\" disabled hidden selected></option> <option *ngFor=\"let option of options\" [value]=\"option.value\" (click)=\"onOptionClick(option)\"> {{option?.label}} </option> </select> <div class=\"thf-select-container\"> <div #selectButton class=\"thf-select-button\" [ngClass]=\"{'thf-select-button-disabled' : disabled}\" (click)=\"toggleButton()\"> <span>{{displayValue || placeholder}}</span> <div class=\"thf-field-icon-container-right\"> <span #icon class=\"thf-icon {{selectIcon}}\" [ngClass]=\"disabled ? 'thf-field-icon-disabled' : 'thf-field-icon'\"></span> </div> </div> <ul #contentList class=\"thf-select-content\" [ngClass]=\"{'thf-invisible': isMobile}\"> <li *ngFor=\"let option of options\" [class.thf-select-item-selected]=\"selectedValue == option.value\" [value]=\"option.value\" (click)=\"onOptionClick(option)\"> <div class=\"thf-select-item\"> <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container> <ng-template #defaultOptionTemplate> <span>{{option?.label}}</span> </ng-template> <ng-template #optionTemplate [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\" [ngTemplateOutletContext]=\"{$implicit: option}\"> </ng-template> </div> </li> </ul> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfSelectComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfSelectComponent; }),
                            multi: true,
                        },
                        ThfControlPositionService
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfSelectComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: i0.IterableDiffers },
        { type: i0.Renderer2 },
        { type: ThfControlPositionService }
    ]; };
    ThfSelectComponent.propDecorators = {
        selectOptionTemplate: [{ type: i0.ContentChild, args: [ThfSelectOptionTemplateDirective,] }],
        contentList: [{ type: i0.ViewChild, args: ['contentList', { read: i0.ElementRef },] }],
        iconElement: [{ type: i0.ViewChild, args: ['icon', { read: i0.ElementRef },] }],
        selectElement: [{ type: i0.ViewChild, args: ['select', { read: i0.ElementRef },] }],
        selectButtonElement: [{ type: i0.ViewChild, args: ['selectButton', { read: i0.ElementRef },] }],
        onKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };
    return ThfSelectComponent;
}(ThfSelectBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfSwitchLabelPosition = {
    /** Posiciona o label do lado esquerdo do switch. */
    Right: 0,
    /** Posiciona o label do lado direito do switch. */
    Left: 1,
};
ThfSwitchLabelPosition[ThfSwitchLabelPosition.Right] = 'Right';
ThfSwitchLabelPosition[ThfSwitchLabelPosition.Left] = 'Left';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-switch` é um [checkbox](/documentation/thf-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
var ThfSwitchBaseComponent = /** @class */ (function () {
    function ThfSwitchBaseComponent() {
        this._disabled = false;
        this.switchValue = false;
        /**
         * Texto exibido quando o valor do componente for `true`.
         *
         * \@default `true`
         */
        this.labelOn = 'true';
        /**
         * Texto exibido quando o valor do componente for `false`.
         *
         * \@default `false`
         */
        this.labelOff = 'false';
        /**
         * \@optional
         *
         * \@description
         *
         * Posição de exibição do rótulo.
         *
         * > Por padrão exibe à direita.
         */
        this.labelPosition = ThfSwitchLabelPosition.Right;
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.change = new i0.EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new i0.EventEmitter();
    }
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOn", {
        set: /**
         * @param {?} label
         * @return {?}
         */
        function (label) {
            this.labelOn = label || 'true';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOff", {
        set: /**
         * @param {?} label
         * @return {?}
         */
        function (label) {
            this.labelOff = label || 'false';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelPosition", {
        set: /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this.labelPosition = (position in ThfSwitchLabelPosition) ? parseInt((/** @type {?} */ (position)), 10) : ThfSwitchLabelPosition.Right;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica se o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica se o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.changeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.switchValue !== value) {
            this.switchValue = value;
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(this.switchValue);
        }
    };
    /**
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.eventClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.changeValue(!this.switchValue);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.switchValue) {
            this.switchValue = !!value;
        }
    };
    ThfSwitchBaseComponent.propDecorators = {
        name: [{ type: i0.Input, args: ['name',] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        setLabelOn: [{ type: i0.Input, args: ['t-label-on',] }],
        setLabelOff: [{ type: i0.Input, args: ['t-label-off',] }],
        setLabelPosition: [{ type: i0.Input, args: ['t-label-position',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        change: [{ type: i0.Output, args: ['t-change',] }],
        ngModelChange: [{ type: i0.Output, args: ['ngModelChange',] }]
    };
    return ThfSwitchBaseComponent;
}());

var __extends$35 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfSwitchBaseComponent
 *
 * \@example
 *
 * <example name="thf-switch-basic" title="Totvs Switch Basic">
 *   <file name="sample-thf-switch-basic/sample-thf-switch-basic.component.html"> </file>
 *   <file name="sample-thf-switch-basic/sample-thf-switch-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-switch-labs" title="Totvs Switch Labs">
 *   <file name="sample-thf-switch-labs/sample-thf-switch-labs.component.html"> </file>
 *   <file name="sample-thf-switch-labs/sample-thf-switch-labs.component.ts"> </file>
 *   <file name="sample-thf-switch-labs/sample-thf-switch-labs.component.e2e-spec.ts"> </file>
 *   <file name="sample-thf-switch-labs/sample-thf-switch-labs.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-switch-order" title="Totvs Switch - Order Summary">
 *   <file name="sample-thf-switch-order/sample-thf-switch-order.component.html"> </file>
 *   <file name="sample-thf-switch-order/sample-thf-switch-order.component.ts"> </file>
 * </example>
 *
 * <example name="thf-switch-order-reactive-form" title="Totvs Switch - Order Summary Reactive Form">
 *   <file name="sample-thf-switch-order-reactive-form/sample-thf-switch-order-reactive-form.component.html"> </file>
 *   <file name="sample-thf-switch-order-reactive-form/sample-thf-switch-order-reactive-form.component.ts"> </file>
 * </example>
 */
var ThfSwitchComponent = /** @class */ (function (_super) {
    __extends$35(ThfSwitchComponent, _super);
    function ThfSwitchComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfSwitchComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    ThfSwitchComponent.prototype.getLabelPosition = /**
     * @return {?}
     */
    function () {
        switch (this.labelPosition) {
            case ThfSwitchLabelPosition.Left: return 'left';
            case ThfSwitchLabelPosition.Right: return 'right';
            default: return 'right';
        }
    };
    /**
     * @return {?}
     */
    ThfSwitchComponent.prototype.getSwitchPosition = /**
     * @return {?}
     */
    function () {
        switch (this.labelPosition) {
            case ThfSwitchLabelPosition.Left: return 'right';
            case ThfSwitchLabelPosition.Right: return 'left';
            default: return 'left';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfSwitchComponent.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.which === 32 || event.keyCode === 32) {
            event.preventDefault();
            this.eventClick();
        }
    };
    ThfSwitchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-switch', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\"> <div class=\"thf-field-container-content thf-switch-content\" [attr.name]=\"name\"> <div class=\"thf-switch-container thf-clickable\" [class.thf-switch-container-disabled]=\"disabled\" [class.thf-switch-container-off]=\"switchValue === false && !disabled\" [class.thf-switch-container-on]=\"switchValue === true && !disabled\" [class.thf-switch-container-right]=\"getSwitchPosition() === 'right'\" [tabindex]=\"disabled ? -1 : 0\" (click)=\"eventClick()\" (keydown)=\"onKeyDown($event)\"> <div class=\"thf-switch-button\" [class.thf-switch-button-on]=\"switchValue === true\" [class.thf-switch-button-off]=\"switchValue === false\" [class.thf-switch-button-disabled]=\"disabled\"> <span class=\"thf-icon thf-icon-{{ switchValue === true ? 'ok' : 'close' }}\"></span> </div> </div> <span class=\"thf-switch-label thf-clickable thf-switch-label-{{ getLabelPosition() }}\" (click)=\"eventClick()\"> {{ switchValue === true ? labelOn : labelOff }} </span> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfSwitchComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfSwitchComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    return ThfSwitchComponent;
}(ThfSwitchBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
 * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
 *
 * Importante:
 *
 * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
 * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
 *
 * ```
 * <thf-textarea
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </thf-textarea>
 * ```
 * @abstract
 */
var ThfTextareaBaseComponent = /** @class */ (function () {
    function ThfTextareaBaseComponent() {
        this._disabled = false;
        this._focus = false;
        this._readonly = false;
        this._required = false;
        this._rows = 3;
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        this.placeholder = '';
        /**
         * Evento disparado ao sair do campo.
         */
        this.blur = new i0.EventEmitter();
        /**
         * Evento disparado ao entrar do campo.
         */
        this.enter = new i0.EventEmitter();
        /**
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new i0.EventEmitter();
        /**
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new i0.EventEmitter();
    }
    Object.defineProperty(ThfTextareaBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTextareaBaseComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente leitura.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será somente leitura.
         *
         * \@default `false`
         * @param {?} readonly
         * @return {?}
         */
        function (readonly) {
            this._readonly = convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTextareaBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(t-disabled)`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(t-disabled)`.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTextareaBaseComponent.prototype, "focus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._focus;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo iniciará com foco.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo iniciará com foco.
         *
         * \@default `false`
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._focus = convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTextareaBaseComponent.prototype, "minlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         * @param {?} minlength
         * @return {?}
         */
        function (minlength) {
            this._minlength = convertToInt(minlength);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTextareaBaseComponent.prototype, "maxlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         * @param {?} maxlength
         * @return {?}
         */
        function (maxlength) {
            this._maxlength = convertToInt(maxlength);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTextareaBaseComponent.prototype, "rows", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rows;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade de linhas que serão exibidas.
         *
         * @default `3`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade de linhas que serão exibidas.
         *
         * \@default `3`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._rows = isNaN(parseInt((/** @type {?} */ (value)), 10)) || value < 3 ? 3 : parseInt((/** @type {?} */ (value)), 10);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    ThfTextareaBaseComponent.prototype.callOnChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        this.controlChangeModelEmitter(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfTextareaBaseComponent.prototype.controlChangeModelEmitter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    };
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    ThfTextareaBaseComponent.prototype.registerOnChange = 
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangePropagate = func;
    };
    /**
     * @param {?} func
     * @return {?}
     */
    ThfTextareaBaseComponent.prototype.registerOnTouched = /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    /**
     * @param {?} func
     * @return {?}
     */
    ThfTextareaBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.validatorChange = func;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfTextareaBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return { required: {
                    valid: false,
                } };
        }
        if (minlengthFailed(this.minlength, abstractControl.value)) {
            return { minlength: {
                    valid: false,
                } };
        }
        if (maxlengthFailed(this.maxlength, abstractControl.value)) {
            return { maxlength: {
                    valid: false,
                } };
        }
    };
    // Função implementada do ControlValueAccessor
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    ThfTextareaBaseComponent.prototype.writeValue = 
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.writeValueModel(value);
    };
    /**
     * @protected
     * @return {?}
     */
    ThfTextareaBaseComponent.prototype.validateModel = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    ThfTextareaBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        placeholder: [{ type: i0.Input, args: ['t-placeholder',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        readonly: [{ type: i0.Input, args: ['t-readonly',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        focus: [{ type: i0.Input, args: ['t-focus',] }],
        minlength: [{ type: i0.Input, args: ['t-minlength',] }],
        maxlength: [{ type: i0.Input, args: ['t-maxlength',] }],
        rows: [{ type: i0.Input, args: ['t-rows',] }],
        blur: [{ type: i0.Output, args: ['t-blur',] }],
        enter: [{ type: i0.Output, args: ['t-enter',] }],
        change: [{ type: i0.Output, args: ['t-change',] }],
        changeModel: [{ type: i0.Output, args: ['t-change-model',] }]
    };
    return ThfTextareaBaseComponent;
}());

var __extends$36 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfTextareaBaseComponent
 *
 * \@example
 *
 * <example name="thf-textarea-basic" title="Totvs Textarea Basic" >
 *  <file name="sample-thf-textarea-basic/sample-thf-textarea-basic.component.html"> </file>
 *  <file name="sample-thf-textarea-basic/sample-thf-textarea-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-textarea-labs" title="Totvs Textarea Labs" >
 *  <file name="sample-thf-textarea-labs/sample-thf-textarea-labs.component.html"> </file>
 *  <file name="sample-thf-textarea-labs/sample-thf-textarea-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-textarea-email" title="Totvs Textarea - Email" >
 *  <file name="sample-thf-textarea-email/sample-thf-textarea-email.component.html"> </file>
 *  <file name="sample-thf-textarea-email/sample-thf-textarea-email.component.ts"> </file>
 * </example>
 *
 * <example name="thf-textarea-email-reactive-form" title="Totvs Textarea - Email Reactive Form" >
 *  <file name="sample-thf-textarea-email-reactive-form/sample-thf-textarea-email-reactive-form.component.html"> </file>
 *  <file name="sample-thf-textarea-email-reactive-form/sample-thf-textarea-email-reactive-form.component.ts"> </file>
 * </example>
 *
 */
var ThfTextareaComponent = /** @class */ (function (_super) {
    __extends$36(ThfTextareaComponent, _super);
    function ThfTextareaComponent() {
        var _this = _super.call(this) || this;
        _this.fireChange = false;
        return _this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ThfTextareaComponent.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl) {
            if (!value) {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
            else {
                this.inputEl.nativeElement.value = value;
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.change.emit(value);
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    ThfTextareaComponent.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        return (maxlength && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfTextareaComponent.prototype.eventOnInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = this.validMaxLength(this.maxlength, event.target.value);
        this.callOnChange(value);
        this.inputEl.nativeElement.value = value;
    };
    /**
     * @return {?}
     */
    ThfTextareaComponent.prototype.eventOnFocus = /**
     * @return {?}
     */
    function () {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    /**
     * @return {?}
     */
    ThfTextareaComponent.prototype.eventOnBlur = /**
     * @return {?}
     */
    function () {
        this.blur.emit();
        this.controlChangeEmitter();
    };
    /**
     * @return {?}
     */
    ThfTextareaComponent.prototype.controlChangeEmitter = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elementValue = this.inputEl.nativeElement.value;
        if (elementValue !== this.valueBeforeChange) {
            this.change.emit(elementValue);
        }
    };
    ThfTextareaComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-textarea', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <textarea #inp class=\"thf-textarea\" (blur)=\"eventOnBlur()\" (focus)=\"eventOnFocus()\" (input)=\"eventOnInput($event)\" [attr.name]=\"name\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [rows]=\"rows\"> </textarea> </div> <thf-field-container-bottom></thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfTextareaComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfTextareaComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfTextareaComponent.ctorParameters = function () { return []; };
    ThfTextareaComponent.propDecorators = {
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef },] }]
    };
    return ThfTextareaComponent;
}(ThfTextareaBaseComponent));

var __assign$9 = (undefined && undefined.__assign) || function () {
    __assign$9 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$9.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfUploadLiteralsDefault = {
    en: (/** @type {?} */ ({
        selectFile: 'Select file',
        deleteFile: 'Delete',
        cancel: 'Cancel',
        tryAgain: 'Try again',
        startSending: 'Start sending'
    })),
    es: (/** @type {?} */ ({
        selectFile: 'Seleccionar archivo',
        deleteFile: 'Borrar',
        cancel: 'Cancelar',
        tryAgain: 'Intentar de nuevo',
        startSending: 'Iniciar carga'
    })),
    pt: (/** @type {?} */ ({
        selectFile: 'Selecionar arquivo',
        deleteFile: 'Excluir',
        cancel: 'Cancelar',
        tryAgain: 'Tentar Novamente',
        startSending: 'Iniciar envio'
    }))
};
/** @type {?} */
var thfUploadFormFieldDefault = 'files';
/**
 * \@description
 *
 * O componente thf-upload permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 * @abstract
 */
var ThfUploadBaseComponent = /** @class */ (function () {
    function ThfUploadBaseComponent() {
        /**
         * Define o valor do atributo name do componente.
         */
        this.name = 'file';
        /**
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         */
        this.autoUpload = false;
        /**
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição.
         * Por exemplo:
         * event.data = {id: 'id do usuario'};
         */
        this.onUpload = new i0.EventEmitter();
        /**
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * Por parâmetro será passado o objeto do retorno que é do tipo HttpErrorResponse.
         */
        this.onError = new i0.EventEmitter();
        /**
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * Por parâmetro será passado o objeto do retorno que é do tipo HttpResponse.
         */
        this.onSuccess = new i0.EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new i0.EventEmitter();
    }
    Object.defineProperty(ThfUploadBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfUploadLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    selectFile: 'Buscar arquivo',
         *    deleteFile: 'Deletar',
         *    cancel: 'Desistir',
         *    tryAgain: 'Recomeçar',
         *    startSending: 'Enviar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-upload
         *   [t-literals]="customLiterals">
         * </thf-upload>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    selectFile: 'Buscar arquivo',
         *    deleteFile: 'Deletar',
         *    cancel: 'Desistir',
         *    tryAgain: 'Recomeçar',
         *    startSending: 'Enviar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-upload
         *   [t-literals]="customLiterals">
         * </thf-upload>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign$9({}, thfUploadLiteralsDefault[thfLocaleDefault], thfUploadLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfUploadLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "fileRestrictions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fileRestrictions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que segue a definição da interface ThfFileRestrictions.
         * Onde é possível definir tamanho máximo, minimo e extensão dos arquivos permitidos.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto que segue a definição da interface ThfFileRestrictions.
         * Onde é possível definir tamanho máximo, minimo e extensão dos arquivos permitidos.
         * @param {?} restrictions
         * @return {?}
         */
        function (restrictions) {
            this._fileRestrictions = restrictions;
            this.setAllowedExtensions(restrictions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "formField", {
        get: /**
         * @return {?}
         */
        function () {
            return this._formField;
        },
        /**
         * @optional
         *
         * @description
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
         *
         * @default `files`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
         *
         * \@default `files`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._formField = value && typeof value === 'string' ? value : thfUploadFormFieldDefault;
            this.getUploadService().formField = this.formField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será desabilitado.
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o campo será desabilitado.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.setAllowedExtensions = /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    function (restrictions) {
        if (restrictions === void 0) { restrictions = {}; }
        /** @type {?} */
        var _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    ThfUploadBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        url: [{ type: i0.Input, args: ['t-url',] }],
        fileRestrictions: [{ type: i0.Input, args: ['t-restrictions',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        formField: [{ type: i0.Input, args: ['t-form-field',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        autoUpload: [{ type: i0.Input, args: ['t-auto-upload',] }],
        isMultiple: [{ type: i0.Input, args: ['t-multiple',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        onUpload: [{ type: i0.Output, args: ['t-upload',] }],
        onError: [{ type: i0.Output, args: ['t-error',] }],
        onSuccess: [{ type: i0.Output, args: ['t-success',] }],
        ngModelChange: [{ type: i0.Output, args: ['ngModelChange',] }]
    };
    return ThfUploadBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfUploadStatus = {
    // Enviou com sucesso.
    Uploaded: 0,
    // Está enviando.
    Uploading: 1,
    // Ocorreu algum erro no envio.
    Error: 2,
    // Não enviou ou aconteceu algum erro.
    None: 3,
};
ThfUploadStatus[ThfUploadStatus.Uploaded] = 'Uploaded';
ThfUploadStatus[ThfUploadStatus.Uploading] = 'Uploading';
ThfUploadStatus[ThfUploadStatus.Error] = 'Error';
ThfUploadStatus[ThfUploadStatus.None] = 'None';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Classe responsável pelo arquivo do THF Upload
var ThfUploadFile = /** @class */ (function () {
    function ThfUploadFile(file) {
        if (file) {
            this.name = file.name;
            this.extension = this.getExtension(file.name);
            this.size = file.size;
            this.rawFile = file;
            this.uid = this.generateUUID();
            this.status = ThfUploadStatus.None;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfUploadFile.prototype.getExtension = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            /** @type {?} */
            var extension = value.substr(value.lastIndexOf('.'));
            return extension.toLowerCase();
        }
        return '';
    };
    /**
     * @private
     * @return {?}
     */
    ThfUploadFile.prototype.generateUUID = /**
     * @private
     * @return {?}
     */
    function () {
        /**
         * @return {?}
         */
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
    };
    return ThfUploadFile;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfUploadBaseService = /** @class */ (function () {
    function ThfUploadBaseService(http$$1) {
        this.http = http$$1;
        this.formField = 'files';
        this.requests = [];
    }
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param url URL da requisição a ser efetuada.
     * @param files Arquivos a serem enviados.
     * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     */
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param {?} url URL da requisição a ser efetuada.
     * @param {?} files Arquivos a serem enviados.
     * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     * @return {?}
     */
    ThfUploadBaseService.prototype.upload = /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param {?} url URL da requisição a ser efetuada.
     * @param {?} files Arquivos a serem enviados.
     * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     * @return {?}
     */
    function (url, files, tOnUpload, uploadCallback, successCallback, errorCallback) {
        /** @type {?} */
        var filesLength = files.length;
        /** @type {?} */
        var uploadEvent = {
            data: {},
            file: null
        };
        for (var i = 0; i < filesLength; i++) {
            /** @type {?} */
            var formData = new FormData();
            /** @type {?} */
            var file = files[i];
            /** @type {?} */
            var fileName = file.rawFile.name;
            formData.append(this.formField, file.rawFile, fileName);
            // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
            if (tOnUpload) {
                uploadEvent['file'] = file;
                tOnUpload.emit(uploadEvent);
                formData.append('data', JSON.stringify(uploadEvent.data));
            }
            this.sendFile(url, file, formData, uploadCallback, successCallback, errorCallback);
        }
    };
    /**
     * @param {?} url
     * @param {?} file
     * @param {?} formData
     * @param {?} uploadCallback
     * @param {?} successCallback
     * @param {?} errorCallback
     * @return {?}
     */
    ThfUploadBaseService.prototype.sendFile = /**
     * @param {?} url
     * @param {?} file
     * @param {?} formData
     * @param {?} uploadCallback
     * @param {?} successCallback
     * @param {?} errorCallback
     * @return {?}
     */
    function (url, file, formData, uploadCallback, successCallback, errorCallback) {
        var _this = this;
        /** @type {?} */
        var request = this.getRequest(url, formData).subscribe(function (event) {
            if (event.type === http.HttpEventType.UploadProgress) {
                _this.addRequest(file, request);
                /** @type {?} */
                var percentDone = Math.round(100 * event.loaded / event.total);
                uploadCallback(file, percentDone);
            }
            else if (event instanceof http.HttpResponse) {
                // Sucesso, arquivos enviados.
                successCallback(file, event);
            }
        }, function (err) {
            errorCallback(file, err);
        });
    };
    /**
     * @param {?} url
     * @param {?} formData
     * @return {?}
     */
    ThfUploadBaseService.prototype.getRequest = /**
     * @param {?} url
     * @param {?} formData
     * @return {?}
     */
    function (url, formData) {
        /** @type {?} */
        var req = new http.HttpRequest('POST', url, formData, {
            reportProgress: true
        });
        return this.http.request(req);
    };
    /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    ThfUploadBaseService.prototype.stopRequestByFile = /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    function (file, callback) {
        /** @type {?} */
        var requestObj = this.requests.find(function (req) {
            return req.file.uid === file.uid;
        });
        if (requestObj) {
            /** @type {?} */
            var request = requestObj.request;
            request.unsubscribe();
            this.removeRequest(requestObj);
            callback();
        }
    };
    /**
     * @param {?} requestObj
     * @return {?}
     */
    ThfUploadBaseService.prototype.removeRequest = /**
     * @param {?} requestObj
     * @return {?}
     */
    function (requestObj) {
        /** @type {?} */
        var index = this.requests.indexOf(requestObj);
        this.requests.splice(index, 1);
    };
    /**
     * @param {?} file
     * @param {?} request
     * @return {?}
     */
    ThfUploadBaseService.prototype.addRequest = /**
     * @param {?} file
     * @param {?} request
     * @return {?}
     */
    function (file, request) {
        /** @type {?} */
        var hasRequest = this.requests.some(function (req) {
            return req.file.uid === file.uid;
        });
        if (!hasRequest) {
            this.requests.push({ file: file, request: request });
        }
    };
    ThfUploadBaseService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfUploadBaseService.ctorParameters = function () { return [
        { type: http.HttpClient }
    ]; };
    return ThfUploadBaseService;
}());

var __extends$37 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfUploadService = /** @class */ (function (_super) {
    __extends$37(ThfUploadService, _super);
    function ThfUploadService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfUploadService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfUploadService;
}(ThfUploadBaseService));

var __extends$38 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfUploadBaseComponent
 *
 * \@example
 *
 * <example name="thf-upload-basic" title="Totvs Upload Basic">
 *  <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.html"> </file>
 *  <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-labs" title="Totvs Upload Labs">
 *  <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.html"> </file>
 *  <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-resume" title="Totvs Upload - Resume">
 *  <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.html"> </file>
 *  <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.ts"> </file>
 * </example>
 */
var ThfUploadComponent = /** @class */ (function (_super) {
    __extends$38(ThfUploadComponent, _super);
    function ThfUploadComponent(elementRef, uploadService) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.uploadService = uploadService;
        _this.calledByCleanInputValue = false;
        return _this;
    }
    Object.defineProperty(ThfUploadComponent.prototype, "hasFileNotUploaded", {
        get: /**
         * @return {?}
         */
        function () {
            if (Array.isArray(this.currentFiles)) {
                return this.currentFiles.some(function (file) { return file.status !== ThfUploadStatus.Uploaded; });
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadComponent.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var currentFiles = this.currentFiles || [];
            return this.hasAnyFileUploading(this.currentFiles) ||
                !this.url ||
                this.disabled ||
                this.isExceededFileLimit(currentFiles.length);
        },
        enumerable: true,
        configurable: true
    });
    // Invoca a seleção de arquivos, clicando no input type file.
    // Invoca a seleção de arquivos, clicando no input type file.
    /**
     * @return {?}
     */
    ThfUploadComponent.prototype.onClick = 
    // Invoca a seleção de arquivos, clicando no input type file.
    /**
     * @return {?}
     */
    function () {
        this.calledByCleanInputValue = false;
        this.inputFile.nativeElement.click();
    };
    // Função disparada ao selecionar algum arquivo.
    // Função disparada ao selecionar algum arquivo.
    /**
     * @param {?} event
     * @return {?}
     */
    ThfUploadComponent.prototype.onFileChange = 
    // Função disparada ao selecionar algum arquivo.
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // necessario este tratamento quando for rodado no IE;
        // no IE o change é disparado quando o campo é limpado também
        if (this.calledByCleanInputValue) {
            this.calledByCleanInputValue = false;
            return event.preventDefault();
        }
        /** @type {?} */
        var files = event.target.files;
        this.currentFiles = this.currentFiles || [];
        this.currentFiles = this.parseFiles(files);
        this.updateModel(this.currentFiles.slice());
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
        this.cleanInputValue();
    };
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.updateModel = 
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
    };
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadFiles = 
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filesFiltered = files.filter(function (file) {
            return file.status !== ThfUploadStatus.Uploaded;
        });
        this.uploadService.upload(this.url, filesFiltered, this.onUpload, function (file, percent) {
            // UPLOADING
            _this.uploadingHandler(file, percent);
        }, function (file, eventResponse) {
            // SUCCESS
            _this.successHandler(file);
            _this.onSuccess.emit(eventResponse);
        }, function (file, eventError) {
            // Error
            _this.errorHandler(file);
            _this.onError.emit(eventError);
        });
    };
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUpload = 
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        this.uploadService.stopRequestByFile(file, function () {
            if (_this.autoUpload) {
                _this.removeFile(file);
            }
            else {
                _this.stopUploadHandler(file);
            }
        });
    };
    // Função disparada ao parar um envio de arquivo.
    // Função disparada ao parar um envio de arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUploadHandler = 
    // Função disparada ao parar um envio de arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.status = ThfUploadStatus.None;
        this.removeFileNameClass(file.uid);
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress', 100);
    };
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    /**
     * @param {?} file
     * @param {?} percent
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadingHandler = 
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    /**
     * @param {?} file
     * @param {?} percent
     * @return {?}
     */
    function (file, percent) {
        file.status = ThfUploadStatus.Uploading;
        this.setProgressStatus(file.uid, percent, true);
        this.setUploadStatus(file, 'thf-upload-progress', percent);
    };
    // Função disparada quando o envio é realizado com sucesso.
    // Função disparada quando o envio é realizado com sucesso.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.successHandler = 
    // Função disparada quando o envio é realizado com sucesso.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.status = ThfUploadStatus.Uploaded;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-success', 100);
    };
    // Função disparada quando é retornado um erro no envio do arquivo.
    // Função disparada quando é retornado um erro no envio do arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.errorHandler = 
    // Função disparada quando é retornado um erro no envio do arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.status = ThfUploadStatus.Error;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-error', 100);
    };
    // Valida se o status passado por parâmetro é igual ao status do arquivo.
    // Valida se o status passado por parâmetro é igual ao status do arquivo.
    /**
     * @param {?} status
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.isStatusFile = 
    // Valida se o status passado por parâmetro é igual ao status do arquivo.
    /**
     * @param {?} status
     * @param {?} file
     * @return {?}
     */
    function (status, file) {
        return file.status === ThfUploadStatus[status];
    };
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.hasAnyFileUploading = 
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        if (files && files.length) {
            return files.some(function (file) { return file.status === ThfUploadStatus.Uploading; });
        }
        return false;
    };
    // Retorna o thf-icon de acordo com o status do arquivo.
    // Retorna o thf-icon de acordo com o status do arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.getThfIcon = 
    // Retorna o thf-icon de acordo com o status do arquivo.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        switch (file.status) {
            case ThfUploadStatus.Uploaded:
                return 'thf-icon-ok';
            case ThfUploadStatus.Error:
                return 'thf-icon-close';
            case ThfUploadStatus.None:
                return 'thf-icon-info';
            case ThfUploadStatus.Uploading:
            default:
                return '';
        }
    };
    /**
     * @return {?}
     */
    ThfUploadComponent.prototype.getUploadService = /**
     * @return {?}
     */
    function () {
        return this.uploadService;
    };
    // Atualiza o status do envio de arquivos.
    // Atualiza o status do envio de arquivos.
    /**
     * @param {?} file
     * @param {?} className
     * @param {?} percent
     * @return {?}
     */
    ThfUploadComponent.prototype.setUploadStatus = 
    // Atualiza o status do envio de arquivos.
    /**
     * @param {?} file
     * @param {?} className
     * @param {?} percent
     * @return {?}
     */
    function (file, className, percent) {
        /** @type {?} */
        var uid = file.uid;
        /** @type {?} */
        var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        divStatus.classList.remove('thf-upload-progress-error', 'thf-upload-progress-success');
        divStatus.classList.add(className);
        if (percent > 5 && file.status !== ThfUploadStatus.None) {
            this.addFileNameClass(uid);
        }
    };
    // Atualiza o status do progresso do envio do arquivo.
    // Atualiza o status do progresso do envio do arquivo.
    /**
     * @param {?} uid
     * @param {?} percent
     * @param {?} isShow
     * @return {?}
     */
    ThfUploadComponent.prototype.setProgressStatus = 
    // Atualiza o status do progresso do envio do arquivo.
    /**
     * @param {?} uid
     * @param {?} percent
     * @param {?} isShow
     * @return {?}
     */
    function (uid, percent, isShow) {
        /** @type {?} */
        var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        /** @type {?} */
        var divProgress = divStatus.querySelector('.thf-upload-progress-status');
        /** @type {?} */
        var isDisplay = isShow ? 'block' : 'none';
        divProgress.setAttribute('style', "display: " + isDisplay + ";");
        divProgress.setAttribute('style', "width: " + percent + "%;");
    };
    // Remove o arquivo passado por parametro da lista dos arquivos correntes.
    // Remove o arquivo passado por parametro da lista dos arquivos correntes.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFile = 
    // Remove o arquivo passado por parametro da lista dos arquivos correntes.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
        this.updateModel(this.currentFiles.slice());
    };
    // Retorna o tamanho do arquivo em KBytes.
    // Retorna o tamanho do arquivo em KBytes.
    /**
     * @param {?} size
     * @return {?}
     */
    ThfUploadComponent.prototype.getFileSize = 
    // Retorna o tamanho do arquivo em KBytes.
    /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var kbSize = 0;
        if (size) {
            kbSize = Math.ceil(size / 1024);
        }
        return kbSize + " KB";
    };
    // Recebe o valor do model.
    // Recebe o valor do model.
    /**
     * @param {?} model
     * @return {?}
     */
    ThfUploadComponent.prototype.writeValue = 
    // Recebe o valor do model.
    /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    };
    // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
    // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.addFileNameClass = 
    // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
    /**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        /** @type {?} */
        var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        /** @type {?} */
        var fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.add('thf-upload-filename-loading');
    };
    // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
    // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFileNameClass = 
    // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
    /**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        /** @type {?} */
        var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        /** @type {?} */
        var fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.remove('thf-upload-filename-loading');
    };
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.parseFiles = 
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var thfUploadFiles = this.currentFiles || [];
        /** @type {?} */
        var filesLength = files.length;
        for (var i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(thfUploadFiles.length)) {
                break;
            }
            /** @type {?} */
            var file = new ThfUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                thfUploadFiles = this.insertFileInFiles(file, thfUploadFiles);
            }
        }
        return thfUploadFiles;
    };
    // Verifica se o arquivo está de acordo com as restrições.
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.checkRestrictions = 
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var restrictions = this.fileRestrictions;
        if (restrictions) {
            /** @type {?} */
            var allowedExtensions = restrictions.allowedExtensions;
            /** @type {?} */
            var minFileSize = restrictions.minFileSize || 0;
            /** @type {?} */
            var maxFileSize = restrictions.maxFileSize || 31457280;
            // 30MB
            /** @type {?} */
            var isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            /** @type {?} */
            var isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            return isAccept && isAcceptSize;
        }
        return true;
    };
    /**
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    ThfUploadComponent.prototype.isAllowedExtension = /**
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    function (extension, allowedExtensions) {
        if (allowedExtensions === void 0) { allowedExtensions = []; }
        return allowedExtensions.some(function (ext) { return ext.toLowerCase() === extension; });
    };
    /**
     * @private
     * @return {?}
     */
    ThfUploadComponent.prototype.cleanInputValue = /**
     * @private
     * @return {?}
     */
    function () {
        this.calledByCleanInputValue = true;
        this.inputFile.nativeElement.value = '';
    };
    /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.existsFileSameName = /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    function (file, files) {
        return files.some(function (currentFile) { return file.name === currentFile.name; });
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.insertFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    };
    /**
     * @private
     * @param {?} currentFilesLength
     * @return {?}
     */
    ThfUploadComponent.prototype.isExceededFileLimit = /**
     * @private
     * @param {?} currentFilesLength
     * @return {?}
     */
    function (currentFilesLength) {
        return this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength;
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.updateExistsFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        /** @type {?} */
        var fileIndex = files.findIndex(function (currentFile) { return newFile.name === currentFile.name && currentFile.status !== ThfUploadStatus.Uploaded; });
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    };
    ThfUploadComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-upload', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-upload\"> <input #inputFile class=\"thf-upload-input\" type=\"file\" [accept]=\"allowedExtensions\" [attr.name]=\"name\" [disabled]=\"isDisabled\" [multiple]=\"isMultiple\" [required]=\"required\" (change)=\"onFileChange($event)\"> <thf-button class=\"thf-upload-button\" for=\"file\" [t-disabled]=\"isDisabled\" [t-label]=\"literals.selectFile\" (t-click)=\"onClick()\"> </thf-button> <div class=\"thf-upload-progress\" *ngFor=\"let file of currentFiles\" [id]=\"file.uid\"> <div class=\"thf-upload-progress-status\"></div> <div class=\"thf-upload-filename-foreground\"> <div class=\"thf-upload-filename\"> <span class=\"thf-icon {{ getThfIcon(file) }}\"></span> {{ file.name }} - {{ getFileSize(file.size) }} </div> <div class=\"thf-upload-group-actions\"> <span *ngIf=\"isStatusFile('None', file) || isStatusFile('Error', file)\" class=\"thf-upload-action\" (click)=\"removeFile(file)\"> {{ literals.deleteFile }} </span> <span *ngIf=\"isStatusFile('Uploading', file)\" class=\"thf-upload-action\" (click)=\"stopUpload(file)\"> {{ literals.cancel }} </span> <span *ngIf=\"isStatusFile('Error', file)\" class=\"thf-upload-action\" (click)=\"uploadFiles([file])\"> {{ literals.tryAgain }} </span> </div> </div> </div> <thf-button *ngIf=\"!autoUpload && (currentFiles?.length > 0 && hasFileNotUploaded)\" t-type=\"primary\" [t-disabled]=\"hasAnyFileUploading(currentFiles)\" [t-label]=\"literals.startSending\" (t-click)=\"uploadFiles(currentFiles)\"> </thf-button> </div> </thf-field-container> ",
                    providers: [
                        ThfUploadService,
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfUploadComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfUploadComponent; }),
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfUploadComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ThfUploadService }
    ]; };
    ThfUploadComponent.propDecorators = {
        inputFile: [{ type: i0.ViewChild, args: ['inputFile', { read: i0.ElementRef },] }]
    };
    return ThfUploadComponent;
}(ThfUploadBaseComponent));

var __extends$39 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 *
 * thf-url é um input específico para receber URL, com o pattern já configurado.
 *
 * \@example
 *
 * <example name="thf-url-basic" title="Totvs Url Basic">
 *   <file name="sample-thf-url-basic/sample-thf-url-basic.component.html"> </file>
 *   <file name="sample-thf-url-basic/sample-thf-url-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-url-labs" title="Totvs Url Labs">
 *   <file name="sample-thf-url-labs/sample-thf-url-labs.component.html"> </file>
 *   <file name="sample-thf-url-labs/sample-thf-url-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-url-shortener" title="Totvs Url - Shortener">
 *   <file name="sample-thf-url-shortener/sample-thf-url-shortener.component.html"> </file>
 *   <file name="sample-thf-url-shortener/sample-thf-url-shortener.component.ts"> </file>
 * </example>
 *
 */
var ThfUrlComponent = /** @class */ (function (_super) {
    __extends$39(ThfUrlComponent, _super);
    function ThfUrlComponent(el) {
        var _this = _super.call(this, el) || this;
        _this.icon = 'thf-icon-world';
        _this.maxlength = 254;
        _this.type = 'url';
        _this.pattern = '^((https|http):\\/\\/)?' + // protocol
            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
            '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
            '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
            '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
            '(\\#[-a-z\\d_]*)?$';
        _this.mask = '';
        _this.listener = _this.validateClassesForPattern.bind(_this);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfUrlComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        setTimeout(function () {
            if (!_this.onChangePropagate) {
                _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
            }
        });
    };
    /**
     * @return {?}
     */
    ThfUrlComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!this.onChangePropagate) {
            this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfUrlComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    ThfUrlComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-url', template: "<thf-field-container [t-help]=\"help\" [t-label]=\"label\" [t-opcional]=\"!required\"> <div class=\"thf-field-container-content\"> <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\"> <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span> </div> <input #inp class=\"thf-input\" [attr.name]=\"name\" [class.thf-input-icon-left]=\"icon\" [class.thf-input-icon-right]=\"clean\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [readonly]=\"readonly\" [required]=\"required\" [type]=\"type\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" (focus)=\"eventOnFocus($event)\" (input)=\"eventOnInput($event)\"> <div class=\"thf-field-icon-container-right\"> <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean> </div> </div> <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"> </thf-field-container-bottom> </thf-field-container> ",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return ThfUrlComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return ThfUrlComponent; }),
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfUrlComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    return ThfUrlComponent;
}(ThfInputGeneric));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo dos componentes thf-combo, thf-checkbox-group, thf-datepicker, thf-datepicker-range, thf-email, thf-input, thf-lookup,
 * thf-number, thf-multiselect, thf-password, thf-radio-group, thf-select, thf-switch, thf-textarea, thf-upload e thf-url.
 */
var ThfFieldModule = /** @class */ (function () {
    function ThfFieldModule() {
    }
    ThfFieldModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        http.HttpClientModule,
                        ThfButtonModule,
                        ThfDisclaimerModule,
                        ThfLoadingModule,
                        ThfModalModule,
                        ThfTableModule
                    ],
                    exports: [
                        ThfCheckboxGroupComponent,
                        ThfCleanComponent,
                        ThfComboComponent,
                        ThfDecimalComponent,
                        ThfDatepickerComponent,
                        ThfDatepickerRangeComponent,
                        ThfEmailComponent,
                        ThfInputComponent,
                        ThfLoginComponent,
                        ThfLookupComponent,
                        ThfLookupModalComponent,
                        ThfMultiselectComponent,
                        ThfNumberComponent,
                        ThfPasswordComponent,
                        ThfRadioGroupComponent,
                        ThfSelectComponent,
                        ThfSelectOptionTemplateDirective,
                        ThfSwitchComponent,
                        ThfTextareaComponent,
                        ThfUploadComponent,
                        ThfUrlComponent
                    ],
                    declarations: [
                        ThfCalendarComponent$1,
                        ThfCheckboxGroupComponent,
                        ThfCleanComponent,
                        ThfComboComponent,
                        ThfDecimalComponent,
                        ThfDatepickerComponent,
                        ThfDatepickerRangeComponent,
                        ThfEmailComponent,
                        ThfFieldContainerComponent,
                        ThfFieldContainerBottomComponent,
                        ThfInputComponent,
                        ThfLoginComponent,
                        ThfLookupComponent,
                        ThfLookupModalComponent,
                        ThfMultiselectComponent,
                        ThfMultiselectDropdownComponent,
                        ThfMultiselectItemComponent,
                        ThfMultiselectSearchComponent,
                        ThfNumberComponent,
                        ThfPasswordComponent,
                        ThfRadioGroupComponent,
                        ThfSelectComponent,
                        ThfSelectOptionTemplateDirective,
                        ThfSwitchComponent,
                        ThfTextareaComponent,
                        ThfUploadComponent,
                        ThfUrlComponent
                    ],
                    providers: [],
                    entryComponents: [
                        ThfCalendarComponent$1,
                        ThfLookupModalComponent
                    ]
                },] },
    ];
    return ThfFieldModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfInfoOrientation = {
    /** O valor será exibido na horizontal, ao lado direito em relação ao label. */
    Horizontal: 'horizontal',
    /** Exibe o valor na vertical, ou seja, abaixo do label. */
    Vertical: 'vertical',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfInfoOrientationDefault = ThfInfoOrientation.Vertical;
var ThfInfoBaseComponent = /** @class */ (function () {
    function ThfInfoBaseComponent() {
        this._orientation = thfInfoOrientationDefault;
        this.thfInfoOrientation = ThfInfoOrientation;
    }
    Object.defineProperty(ThfInfoBaseComponent.prototype, "labelSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelSize;
        },
        /**
         * @optional
         *
         * @description
         *
         * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `t-label` quando o componente for
         * utilizado na orientação horizontal.
         *
         * Valores válidos:
         *  - `[1 .. 11]`
         *
         * > A propriedade `t-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `t-label` quando o componente for
         * utilizado na orientação horizontal.
         *
         * Valores válidos:
         *  - `[1 .. 11]`
         *
         * > A propriedade `t-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                this._labelSize = undefined;
            }
            else {
                value = parseInt((/** @type {?} */ (value)), 10);
                this._labelSize = (value < 1 || value > 11) ? undefined : value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfInfoBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o layout de exibição.
         *
         * > Quando definido na horizontal, pode-se utilizar a propriedade `t-label-size` para um maior controle das informações exibidas.
         *
         * @default `vertical`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o layout de exibição.
         *
         * > Quando definido na horizontal, pode-se utilizar a propriedade `t-label-size` para um maior controle das informações exibidas.
         *
         * \@default `vertical`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(ThfInfoOrientation).includes(value) ? value : thfInfoOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    ThfInfoBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        labelSize: [{ type: i0.Input, args: ['t-label-size',] }],
        orientation: [{ type: i0.Input, args: ['t-orientation',] }],
        value: [{ type: i0.Input, args: ['t-value',] }]
    };
    return ThfInfoBaseComponent;
}());

var __extends$40 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfInfoBaseComponent
 *
 * \@description
 *
 * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
 * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão Totvs.
 *
 * \@example
 *
 * <example name="thf-info-basic" title="Totvs Info Basic">
 *  <file name="sample-thf-info-basic/sample-thf-info-basic.component.html"> </file>
 *  <file name="sample-thf-info-basic/sample-thf-info-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-info-labs" title="Totvs Info Labs">
 *  <file name="sample-thf-info-labs/sample-thf-info-labs.component.html"> </file>
 *  <file name="sample-thf-info-labs/sample-thf-info-labs.component.ts"> </file>
 * </example>
 */
var ThfInfoComponent = /** @class */ (function (_super) {
    __extends$40(ThfInfoComponent, _super);
    function ThfInfoComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfInfoComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-info', template: "<div class=\"thf-info\" [class.thf-row]=\"orientation === thfInfoOrientation.Horizontal && labelSize\"> <div class=\"thf-info-container-title\" [ngClass]=\"labelSize && orientation === thfInfoOrientation.Horizontal ? 'thf-sm-' + labelSize : ''\" [class.thf-info-label-horizontal]=\"orientation === thfInfoOrientation.Horizontal\" [class.thf-text-nowrap]=\"orientation === thfInfoOrientation.Horizontal && !labelSize\"> <span class=\"thf-info-label\"> {{ orientation === thfInfoOrientation.Horizontal ? label + ':' : label }} </span> </div> <div [ngClass]=\"labelSize && orientation === thfInfoOrientation.Horizontal ? 'thf-sm-' + (12 - labelSize) : ''\" [class.thf-info-container-content]=\"orientation !== thfInfoOrientation.Horizontal\" [class.thf-info-value-horizontal]=\"orientation === thfInfoOrientation.Horizontal\"> <span class=\"thf-info-value\">{{ value }}</span> </div> </div> "
                },] },
    ];
    return ThfInfoComponent;
}(ThfInfoBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-info.
 */
var ThfInfoModule = /** @class */ (function () {
    function ThfInfoModule() {
    }
    ThfInfoModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfInfoComponent
                    ],
                    exports: [ThfInfoComponent],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfInfoModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfTagIcon = {
    /** Ícone fechar */
    Danger: 'close',
    /** Ícone de informação */
    Info: 'info',
    /** Ícone que representa confirmação */
    Success: 'ok',
    /** Ícone com ponto de exclamação */
    Warning: 'warning',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfTagOrientation = {
    /** A tag será exibida na horizontal, ao lado direito em relação ao label. */
    Horizontal: 'horizontal',
    /** Exibe a tag na vertical, ou seja, abaixo do label. */
    Vertical: 'vertical',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfTagType = {
    /** Erro, perigo, problema ou aviso crítico. */
    Danger: 'danger',
    /** Informativo ou explicativo. */
    Info: 'info',
    /** Confirmação, resultados positivos ou êxito */
    Success: 'success',
    /** Aviso ou advertência. */
    Warning: 'warning',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfTagOrientationDefault = ThfTagOrientation.Vertical;
/** @type {?} */
var thfTagTypeDefault = ThfTagType.Info;
/**
 * \@description
 *
 * Este componente apresenta um valor em um marcador colorido que pode conter ícone e *label*, as cores são definidas conforme o tipo
 * escolhido.
 * Seu uso é indicado para informações que necessitam de destaque em forma de marcação.
 */
var ThfTagBaseComponent = /** @class */ (function () {
    function ThfTagBaseComponent() {
        this._orientation = thfTagOrientationDefault;
        this._type = thfTagTypeDefault;
        this.thfTagOrientation = ThfTagOrientation;
    }
    Object.defineProperty(ThfTagBaseComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        /**
         * @optional
         *
         * @description
         *
         * Apresenta um ícone na tag conforme o tipo:
         * - `danger`: <span class="thf-icon thf-icon-close"></span>
         * - `info`: <span class="thf-icon thf-icon-info"></span>
         * - `success`: <span class="thf-icon thf-icon-ok"></span>
         * - `warning`: <span class="thf-icon thf-icon-warning"></span>
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Apresenta um ícone na tag conforme o tipo:
         * - `danger`: <span class="thf-icon thf-icon-close"></span>
         * - `info`: <span class="thf-icon thf-icon-info"></span>
         * - `success`: <span class="thf-icon thf-icon-ok"></span>
         * - `warning`: <span class="thf-icon thf-icon-warning"></span>
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._icon = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTagBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o layout de exibição.
         *
         * @default `vertical`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o layout de exibição.
         *
         * \@default `vertical`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(ThfTagOrientation).includes(value) ? value : thfTagOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTagBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o tipo e determina a cor do `thf-tag`.
         *
         * Valores válidos:
         *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
         *  - `warning`: cor amarela que representa aviso ou advertência.
         *  - `danger`: cor vermelha para erro ou aviso crítico.
         *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
         *
         * @default `info`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o tipo e determina a cor do `thf-tag`.
         *
         * Valores válidos:
         *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
         *  - `warning`: cor amarela que representa aviso ou advertência.
         *  - `danger`: cor vermelha para erro ou aviso crítico.
         *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
         *
         * \@default `info`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = ((/** @type {?} */ (Object))).values(ThfTagType).includes(value) ? value : thfTagTypeDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTagBaseComponent.prototype, "iconFromType", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.type) {
                case ThfTagType.Danger: return ThfTagIcon.Danger;
                case ThfTagType.Info: return ThfTagIcon.Info;
                case ThfTagType.Success: return ThfTagIcon.Success;
                case ThfTagType.Warning: return ThfTagIcon.Warning;
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfTagBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        icon: [{ type: i0.Input, args: ['t-icon',] }],
        orientation: [{ type: i0.Input, args: ['t-orientation',] }],
        type: [{ type: i0.Input, args: ['t-type',] }],
        value: [{ type: i0.Input, args: ['t-value',] }]
    };
    return ThfTagBaseComponent;
}());

var __extends$41 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfTagBaseComponent
 *
 * \@example
 *
 * <example name="thf-tag-basic" title="Totvs Tag Basic">
 *  <file name="sample-thf-tag-basic/sample-thf-tag-basic.component.html"> </file>
 *  <file name="sample-thf-tag-basic/sample-thf-tag-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tag-labs" title="Totvs Tag Labs">
 *  <file name="sample-thf-tag-labs/sample-thf-tag-labs.component.html"> </file>
 *  <file name="sample-thf-tag-labs/sample-thf-tag-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tag-bank-account" title="Totvs Tag - Bank Account">
 *  <file name="sample-thf-tag-bank-account/sample-thf-tag-bank-account.component.html"> </file>
 *  <file name="sample-thf-tag-bank-account/sample-thf-tag-bank-account.component.ts"> </file>
 * </example>
 */
var ThfTagComponent = /** @class */ (function (_super) {
    __extends$41(ThfTagComponent, _super);
    function ThfTagComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfTagComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-tag', template: "<div class=\"thf-tag-container\" [class.thf-tag-container-horizontal]=\"orientation === thfTagOrientation.Horizontal\"> <div *ngIf=\"label\" class=\"thf-tag-title thf-text-nowrap\"> <span class=\"thf-tag-label\">{{ orientation === thfTagOrientation.Horizontal ? label + ':' : label }}</span> </div> <div class=\"thf-tag thf-tag-{{ type }}\"> <span *ngIf=\"icon\" class=\"thf-icon thf-icon-{{ iconFromType }}\"></span> <span class=\"thf-tag-value\">{{value}}</span> </div> </div> "
                },] },
    ];
    return ThfTagComponent;
}(ThfTagBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `thf-tag`.
 */
var ThfTagModule = /** @class */ (function () {
    function ThfTagModule() {
    }
    ThfTagModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfTagComponent
                    ],
                    exports: [
                        ThfTagComponent
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfTagModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
 *
 * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
 */
var ThfDynamicFormBaseComponent = /** @class */ (function () {
    function ThfDynamicFormBaseComponent() {
        this._groupForm = false;
        /**
         * \@optional
         *
         * \@description
         *
         * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
         * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
         *
         * Portanto existem duas maneiras de recuperar o formulário,
         * através de *template reference* e através do *output*, veja os exemplos abaixo:
         *
         * > *template reference*
         *
         * ```html
         *  <thf-dynamic-form #dynamicForm>
         *  </thf-dynamic-form>
         *
         *  <thf-button t-label="Adicionar" [t-disabled]="dynamicForm?.form.invalid">
         *  </thf-button>
         *
         * ```
         *
         * > *Output*
         *
         * ```html
         *  ...
         *  <thf-dynamic-form (t-form)="getForm($event)">
         *  </thf-dynamic-form>
         *
         *  <thf-button t-label="Adicionar" [t-disabled]="dynamicForm?.invalid">
         *  </thf-button>
         *  ...
         *
         * ```
         *
         * ```ts
         *  ...
         *
         *  export class AppComponent {
         *
         *    dynamicForm: NgForm;
         *
         *    getForm(form: NgForm) {
         *      this.dynamicForm = form;
         *    }
         *
         *  }
         * ```
         *
         * > Caso a propriedade `t-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
         * o formulário pai.
         */
        this.formOutput = new i0.EventEmitter();
    }
    Object.defineProperty(ThfDynamicFormBaseComponent.prototype, "groupForm", {
        get: /**
         * @return {?}
         */
        function () {
            return this._groupForm;
        },
        /**
         * @optional
         *
         * @description
         * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
         * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
         *
         * ```html
         * <form #parentForm="ngForm">
         *
         *   <thf-dynamic-form t-group-form [t-fields]="fields"></thf-dynamic-form>
         *
         *  <thf-button t-label="Adicionar" [t-disabled]="parentForm.invalid"></thf-button>
         * </form>
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
         * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
         *
         * ```html
         * <form #parentForm="ngForm">
         *
         *   <thf-dynamic-form t-group-form [t-fields]="fields"></thf-dynamic-form>
         *
         *  <thf-button t-label="Adicionar" [t-disabled]="parentForm.invalid"></thf-button>
         * </form>
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._groupForm = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ThfDynamicFormBaseComponent.propDecorators = {
        fields: [{ type: i0.Input, args: ['t-fields',] }],
        value: [{ type: i0.Input, args: ['t-value',] }],
        formOutput: [{ type: i0.Output, args: ['t-form',] }],
        groupForm: [{ type: i0.Input, args: ['t-group-form',] }]
    };
    return ThfDynamicFormBaseComponent;
}());

var __extends$42 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfDynamicFormBaseComponent
 *
 * \@example
 *
 * <example name="thf-dynamic-form-basic" title="Totvs Dynamic Form Basic">
 *  <file name="sample-thf-dynamic-form-basic/sample-thf-dynamic-form-basic.component.html"> </file>
 *  <file name="sample-thf-dynamic-form-basic/sample-thf-dynamic-form-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dynamic-form-register" title="Totvs Dynamic Form - Register">
 *  <file name="sample-thf-dynamic-form-register/sample-thf-dynamic-form-register.component.html"> </file>
 *  <file name="sample-thf-dynamic-form-register/sample-thf-dynamic-form-register.component.ts"> </file>
 * </example>
 */
var ThfDynamicFormComponent = /** @class */ (function (_super) {
    __extends$42(ThfDynamicFormComponent, _super);
    function ThfDynamicFormComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ThfDynamicFormComponent.prototype, "form", {
        get: /**
         * @return {?}
         */
        function () {
            return this._form || (/** @type {?} */ ({}));
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            // necessario para nao ocorrer o ExpressionChangedAfterItHasBeenCheckedError
            setTimeout(function () {
                _this._form = value;
                _this.emitForm();
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    ThfDynamicFormComponent.prototype.emitForm = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.groupForm && this.formOutput.observers.length) {
            this.formOutput.emit(this.form);
        }
    };
    ThfDynamicFormComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-dynamic-form', template: " <ng-container *ngIf=\"groupForm; then reuseFormTemplate; else uniqueFormTemplate\"></ng-container> <ng-template #reuseFormTemplate> <thf-dynamic-form-fields [t-fields]=\"fields\" [t-value]=\"value\"></thf-dynamic-form-fields> </ng-template> <ng-template #uniqueFormTemplate> <form #dynamicForm=\"ngForm\"> <thf-dynamic-form-fields [t-fields]=\"fields\" [t-value]=\"value\"></thf-dynamic-form-fields> </form> </ng-template> "
                },] },
    ];
    ThfDynamicFormComponent.propDecorators = {
        form: [{ type: i0.ViewChild, args: ['dynamicForm',] }]
    };
    return ThfDynamicFormComponent;
}(ThfDynamicFormBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} smColumns
 * @param {?} mdColumns
 * @param {?} lgColumns
 * @param {?} xlColumns
 * @param {?} gridColumns
 * @return {?}
 */
function getGridColumnsClasses(smColumns, mdColumns, lgColumns, xlColumns, gridColumns) {
    /** @type {?} */
    var systemGrid = {
        sm: smColumns || gridColumns || 12,
        md: mdColumns || gridColumns || 6,
        lg: lgColumns || gridColumns || 4,
        xl: xlColumns || gridColumns || 3
    };
    return "thf-sm-" + systemGrid.sm + " thf-md-" + systemGrid.md + " thf-lg-" + systemGrid.lg + " thf-xl-" + systemGrid.xl;
}
/**
 * @param {?} field
 * @return {?}
 */
function isVisibleField(field) {
    /** @type {?} */
    var containsVisible = 'visible' in field;
    return containsVisible ? field.visible : true;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfDynamicFieldType = {
    /** Valor booleano. */
    Boolean: 'boolean',
    /** Valor numérico que contém casas decimais e milhar. */
    Currency: 'currency',
    /** Valor para data. */
    Date: 'date',
    /** Valor para data e hora. */
    DateTime: 'datetime',
    /** Utilizado para informar/exibir hora. */
    Time: 'time',
    /** Valor númerico. */
    Number: 'number',
    /** Texto. */
    String: 'string',
};

var __assign$10 = (undefined && undefined.__assign) || function () {
    __assign$10 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$10.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfDynamicFormFieldsBaseComponent = /** @class */ (function () {
    function ThfDynamicFormFieldsBaseComponent(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this._value = {};
        this.visibleFields = [];
    }
    Object.defineProperty(ThfDynamicFormFieldsBaseComponent.prototype, "fields", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fields;
        },
        // array de objetos que implementam a interface ThfDynamicFormField, que serão exibidos no componente.
        set: 
        // array de objetos que implementam a interface ThfDynamicFormField, que serão exibidos no componente.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fields = Array.isArray(value) ? value.slice() : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDynamicFormFieldsBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        // valor que será utilizado para iniciar valor no componente.
        set: 
        // valor que será utilizado para iniciar valor no componente.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value && isTypeof(value, 'object') ? value : {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} compareTo
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.compareTo = /**
     * @param {?} value
     * @param {?} compareTo
     * @return {?}
     */
    function (value, compareTo) {
        return value === compareTo;
    };
    // retorna um array com os objetos configurados e visiveis.
    // retorna um array com os objetos configurados e visiveis.
    /**
     * @protected
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.getVisibleFields = 
    // retorna um array com os objetos configurados e visiveis.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var visibleFields = [];
        this.fields.forEach(function (field) {
            if (_this.existsProperty(visibleFields, field.property)) {
                _this.printError("\"thf-dynamic-form\" property \"" + field.property + "\" est\u00E1 duplicado. Interface: ThfDynamicFormField.");
                return;
            }
            if (!field['property']) {
                _this.printError('"thf-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(_this.createField(field));
            }
        });
        return visibleFields;
    };
    // converte um array em string para um array de objetos que contem label e value.
    // converte um array em string para um array de objetos que contem label e value.
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.convertOptions = 
    // converte um array em string para um array de objetos que contem label e value.
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var everyOptionString = options.every(function (option) { return typeof option === 'string'; });
        if (everyOptionString) {
            return options.map(function (value) { return ({ label: value, value: value }); });
        }
        return options;
    };
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.createField = 
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var control = this.getComponentControl(field);
        /** @type {?} */
        var componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return __assign$10({ label: this.titleCasePipe.transform(field.property) }, field, { componentClass: componentClass,
            control: control });
    };
    /**
     * @private
     * @param {?} fields
     * @param {?} property
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.existsProperty = /**
     * @private
     * @param {?} fields
     * @param {?} property
     * @return {?}
     */
    function (fields, property) {
        return fields.some(function (field) {
            return field.property === property;
        });
    };
    // recupera o componente de acordo com algumas regras do field.
    // recupera o componente de acordo com algumas regras do field.
    /**
     * @private
     * @param {?=} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.getComponentControl = 
    // recupera o componente de acordo com algumas regras do field.
    /**
     * @private
     * @param {?=} field
     * @return {?}
     */
    function (field) {
        if (field === void 0) { field = (/** @type {?} */ ({})); }
        /** @type {?} */
        var type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            field.options = this.convertOptions(field.options);
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            field.options = this.convertOptions(field.options);
            return 'radioGroup';
        }
        else if (this.compareTo(type, ThfDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, ThfDynamicFieldType.Date) || this.compareTo(type, ThfDynamicFieldType.DateTime)) {
            return 'datepicker';
        }
        else if (this.compareTo(type, ThfDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        return 'input';
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isCombo = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var optionsService = field.optionsService;
        return !!optionsService && isTypeof(optionsService, 'string');
    };
    /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isCurrencyType = /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, ThfDynamicFieldType.Currency) && (!mask && !pattern);
    };
    /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isNumberType = /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, ThfDynamicFieldType.Number) && (!mask && !pattern);
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isRadioGroup = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var options = field.options;
        return !!options && options.length <= 3;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.isSelect = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var options = field.options;
        return !!options && options.length > 3;
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    ThfDynamicFormFieldsBaseComponent.prototype.printError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        console.error(error);
    };
    ThfDynamicFormFieldsBaseComponent.propDecorators = {
        fields: [{ type: i0.Input, args: ['t-fields',] }],
        value: [{ type: i0.Input, args: ['t-value',] }]
    };
    return ThfDynamicFormFieldsBaseComponent;
}());

var __extends$43 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de criação dos campos dinâmicos.
 */
var ThfDynamicFormFieldsComponent = /** @class */ (function (_super) {
    __extends$43(ThfDynamicFormFieldsComponent, _super);
    function ThfDynamicFormFieldsComponent(titleCasePipe) {
        return _super.call(this, titleCasePipe) || this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfDynamicFormFieldsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.fields) {
            this.visibleFields = this.getVisibleFields();
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfDynamicFormFieldsComponent.prototype.trackBy = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    ThfDynamicFormFieldsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-dynamic-form-fields', template: "<div class=\"thf-row\" *ngIf=\"visibleFields && visibleFields.length > 0\"> <ng-container *ngFor=\"let field of visibleFields; trackBy: trackBy\"> <thf-divider *ngIf=\"field?.divider?.trim()\" class=\"thf-sm-12\" [t-label]=\"field.divider\"> </thf-divider> <thf-datepicker *ngIf=\"compareTo(field.control, 'datepicker')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-clean [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-end]=\"field.maxValue\" [t-start]=\"field.minValue\" [t-required]=\"field.required\"> </thf-datepicker> <thf-input *ngIf=\"compareTo(field.control, 'input')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-clean [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-mask]=\"field.mask\" [t-maxlength]=\"field.maxLength\" [t-minlength]=\"field.minLength\" [t-pattern]=\"field.pattern\" [t-required]=\"field.required\"> </thf-input> <thf-number *ngIf=\"compareTo(field.control, 'number')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-clean [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-min]=\"field.minValue\" [t-max]=\"field.maxValue\" [t-maxlength]=\"field.maxLength\" [t-minlength]=\"field.minLength\" [t-required]=\"field.required\"> </thf-number> <thf-decimal *ngIf=\"compareTo(field.control, 'decimal')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-clean [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-required]=\"field.required\"> </thf-decimal> <thf-select *ngIf=\"compareTo(field.control, 'select')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-options]=\"field.options\" [t-required]=\"field.required\"> </thf-select> <thf-radio-group *ngIf=\"compareTo(field.control, 'radioGroup')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" t-columns=\"3\" [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-options]=\"field.options\" [t-required]=\"field.required\"> </thf-radio-group> <thf-switch *ngIf=\"compareTo(field.control, 'switch')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" [t-disabled]=\"field.disabled\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-label-off]=\"field.booleanFalse\" [t-label-on]=\"field.booleanTrue\" [t-required]=\"field.required\"> </thf-switch> <thf-combo *ngIf=\"compareTo(field.control, 'combo')\" [name]=\"field.property\" [(ngModel)]=\"value[field.property]\" [ngClass]=\"field.componentClass\" [t-disabled]=\"field.disabled\" [t-filter-service]=\"field.optionsService\" [t-help]=\"field.help\" [t-label]=\"field.label\" [t-required]=\"field.required\"> </thf-combo> </ng-container> </div> ",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
                },] },
    ];
    /** @nocollapse */
    ThfDynamicFormFieldsComponent.ctorParameters = function () { return [
        { type: common.TitleCasePipe }
    ]; };
    return ThfDynamicFormFieldsComponent;
}(ThfDynamicFormFieldsBaseComponent));

var __assign$11 = (undefined && undefined.__assign) || function () {
    __assign$11 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$11.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `thf-info` para exibição, é possível criar `thf-tag` passando a propriedade { tag: true }.
 *
 */
var ThfDynamicViewBaseComponent = /** @class */ (function () {
    function ThfDynamicViewBaseComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this._fields = [];
        this._showAllValue = false;
        this._value = {};
        this.visibleFields = [];
    }
    Object.defineProperty(ThfDynamicViewBaseComponent.prototype, "fields", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fields;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de objetos que implementam a interface `ThfDynamicView`.
         *
         * > Ex: `[ { property: 'age' } ]`
         *
         * Regras de tipagem e formatação dos valores exibidos:
         *
         * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
         * como formato padrão.
         * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
         * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
         * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
         * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
         *
         * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `t-value`.
         *
         * @default `[]`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista de objetos que implementam a interface `ThfDynamicView`.
         *
         * > Ex: `[ { property: 'age' } ]`
         *
         * Regras de tipagem e formatação dos valores exibidos:
         *
         * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
         * como formato padrão.
         * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
         * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
         * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
         * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
         *
         * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `t-value`.
         *
         * \@default `[]`
         * @param {?} fields
         * @return {?}
         */
        function (fields) {
            this._fields = Array.isArray(fields) ? fields.slice() : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDynamicViewBaseComponent.prototype, "showAllValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showAllValue;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `t-value`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `t-value`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showAllValue = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDynamicViewBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /**
         * @description
         *
         * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
         * dos objetos contidos na propridade `t-fields`.
         *
         * > Ex: `{ age: '35' }`
         */
        set: /**
         * \@description
         *
         * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
         * dos objetos contidos na propridade `t-fields`.
         *
         * > Ex: `{ age: '35' }`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value && isTypeof(value, 'object') ? value : {};
        },
        enumerable: true,
        configurable: true
    });
    // retorna os fields com os valores recuperados do objeto value.
    // retorna os fields com os valores recuperados do objeto value.
    /**
     * @protected
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.getConfiguredFields = 
    // retorna os fields com os valores recuperados do objeto value.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var newFields = [];
        this.fields.forEach(function (field) {
            if (isVisibleField(field)) {
                newFields.push(_this.createField(field));
            }
        });
        return newFields;
    };
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    /**
     * @protected
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.getMergedFields = 
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var mergedFields = this.getConfiguredFields().slice();
        this.getValueFields().forEach(function (valueField) {
            /** @type {?} */
            var fieldIndex = mergedFields.findIndex(function (field) { return field.property === valueField.property; });
            /** @type {?} */
            var property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(_this.createField({ property: property }));
            }
        });
        return mergedFields;
    };
    // retorna o objeto value como fields.
    // retorna o objeto value como fields.
    /**
     * @protected
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.getValueFields = 
    // retorna o objeto value como fields.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.value).map(function (property) {
            return _this.createField({ property: property });
        });
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.createField = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var property = field.property;
        /** @type {?} */
        var value = this.transformValue(field.type, this.value[property], field.format);
        /** @type {?} */
        var classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return __assign$11({ property: property,
            value: value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
    };
    /**
     * @private
     * @param {?} type
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    ThfDynamicViewBaseComponent.prototype.transformValue = /**
     * @private
     * @param {?} type
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (type, value, format) {
        /** @type {?} */
        var transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    };
    ThfDynamicViewBaseComponent.propDecorators = {
        fields: [{ type: i0.Input, args: ['t-fields',] }],
        showAllValue: [{ type: i0.Input, args: ['t-show-all-value',] }],
        value: [{ type: i0.Input, args: ['t-value',] }]
    };
    return ThfDynamicViewBaseComponent;
}());

var __extends$44 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfDynamicViewBaseComponent
 *
 * \@example
 *
 * <example name="thf-dynamic-view-basic" title="Totvs Dynamic View Basic">
 *  <file name="sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.html"> </file>
 *  <file name="sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dynamic-view-employee" title="Totvs Dynamic View - Employee">
 *  <file name="sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.html"> </file>
 *  <file name="sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.ts"> </file>
 * </example>
 */
var ThfDynamicViewComponent = /** @class */ (function (_super) {
    __extends$44(ThfDynamicViewComponent, _super);
    function ThfDynamicViewComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        return _super.call(this, currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) || this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfDynamicViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.fields || changes.value || changes.showAllValue) {
            this.visibleFields = this.getVisibleFields();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfDynamicViewComponent.prototype.getVisibleFields = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.showAllValue) {
            return this.getMergedFields();
        }
        return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
    };
    ThfDynamicViewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-dynamic-view', template: "<div class=\"thf-row\" *ngIf=\"visibleFields.length\"> <ng-template ngFor let-field [ngForOf]=\"visibleFields\"> <thf-divider *ngIf=\"field?.divider?.trim()\" class=\"thf-sm-12\" [t-label]=\"field.divider\"> </thf-divider> <ng-container *ngTemplateOutlet=\"!field.tag ? thfInfo : thfTag; context: { $implicit: field }\"> </ng-container> </ng-template> </div> <ng-template #thfInfo let-field> <thf-info [ngClass]=\"field.cssClass\" [t-label]=\"field.label\" [t-value]=\"field.value\"> </thf-info> </ng-template> <ng-template #thfTag let-field> <thf-tag [ngClass]=\"field.cssClass\" [t-label]=\"field.label\" [t-value]=\"field.value\"> </thf-tag> </ng-template> "
                },] },
    ];
    /** @nocollapse */
    ThfDynamicViewComponent.ctorParameters = function () { return [
        { type: common.CurrencyPipe },
        { type: common.DatePipe },
        { type: common.DecimalPipe },
        { type: ThfTimePipe },
        { type: common.TitleCasePipe }
    ]; };
    return ThfDynamicViewComponent;
}(ThfDynamicViewBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfDynamicModule = /** @class */ (function () {
    function ThfDynamicModule() {
    }
    ThfDynamicModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        ThfDividerModule,
                        ThfInfoModule,
                        ThfFieldModule,
                        ThfTagModule,
                        ThfTimeModule
                    ],
                    declarations: [
                        ThfDynamicFormComponent,
                        ThfDynamicFormFieldsComponent,
                        ThfDynamicViewComponent
                    ],
                    exports: [
                        ThfDynamicFormComponent,
                        ThfDynamicViewComponent
                    ],
                    providers: [common.CurrencyPipe, common.DatePipe, common.DecimalPipe, ThfTimePipe, common.TitleCasePipe]
                },] },
    ];
    return ThfDynamicModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfGridCellActionComponent = /** @class */ (function () {
    function ThfGridCellActionComponent() {
        this.position = '';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ThfGridCellActionComponent.prototype.onKeyDownContent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('onKeyDownContent: ', event);
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
            // this.openActions(this.value);
            return;
        }
    };
    ThfGridCellActionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-grid-cell-action', template: "<div> <div #contentElement [id]=\"position\" class=\"thf-grid-cell-action-content\" tabindex=\"0\" (keydown)=\"onKeyDownContent($event)\"> <span>{{ value || '&nbsp;' }}</span> </div> </div> ", styles: [".thf-grid-cell-action-content { border-bottom: 1px solid #eceeee; border-left: none; border-right: 1px solid #eceeee; border-top: none; font-family: NunitoSans; font-size: 14px; height: 44px; line-height: 1.71; margin: 0; max-height: 44px; max-width: 56px; min-height: 44px; min-width: 56px; padding: 10px 16px; text-align: center; width: 56px; } .thf-grid-cell-action-content:focus { border: none; outline: 1px solid #0c9abe; } "]
                },] },
    ];
    /** @nocollapse */
    ThfGridCellActionComponent.ctorParameters = function () { return []; };
    ThfGridCellActionComponent.propDecorators = {
        position: [{ type: i0.Input, args: ['t-position',] }],
        value: [{ type: i0.Input, args: ['t-value',] }]
    };
    return ThfGridCellActionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfGridCellComponent = /** @class */ (function () {
    function ThfGridCellComponent(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this._value = '';
        this.edit = false;
        this.editValue = '';
        this.align = 'left';
        this.freeze = false;
        this.tabIndex = -1;
        this.position = '';
        this.readonly = false;
        this.required = false;
        this.valueChange = new i0.EventEmitter();
    }
    Object.defineProperty(ThfGridCellComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            return this._width ? this._width + "px" : '100%';
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._width = value;
            if (this.freeze && !this._width) {
                this._width = 100;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfGridCellComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        // @Input('t-value') value?: string;
        set: 
        // @Input('t-value') value?: string;
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
            this.valueChange.emit(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ThfGridCellComponent.prototype.onKeyDownContent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('onKeyDownContent: ', event);
        // BACKSPACE / DELETE
        if ((!event.ctrlKey) && ((event.keyCode === 8) || (event.keyCode === 46))) {
            if (this.readonly) {
                return;
            }
            event.preventDefault();
            this.value = '';
            return;
        }
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
            this.onEditCell(this.value);
            return;
        }
        // A..Z - 0..9
        if ((event.keyCode >= 65) && (event.keyCode <= 90) || (event.keyCode >= 48) && (event.keyCode <= 57)) {
            event.preventDefault();
            this.onEditCell(event.key);
            return;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfGridCellComponent.prototype.dblclick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('dblclick: ', event);
        event.preventDefault();
        this.onEditCell(this.value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfGridCellComponent.prototype.onBlurInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('onBlurInput: ', event);
        this.value = this.editValue;
        this.editValue = undefined;
        this.edit = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfGridCellComponent.prototype.onKeyDownInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('onKeyDownInput: ', event);
        // ENTER
        if (event.keyCode === 13) {
            this.value = this.editValue;
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
        }
        // ESCAPE
        if (event.keyCode === 27) {
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
            event.stopPropagation();
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfGridCellComponent.prototype.onEditCell = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.readonly) {
            return;
        }
        this.editValue = value;
        this.edit = true;
        this.changeDetectorRef.detectChanges();
        this.inputElement.nativeElement.focus();
    };
    ThfGridCellComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-grid-cell', template: "<div> <ng-container *ngIf=\"edit; then input; else content\"></ng-container> <ng-template #content> <div #contentElement [id]=\"position\" class=\"thf-grid-cell-content thf-grid-cell-{{ align }} {{ !value && required ? 'thf-grid-cell-required' : '' }}\" (keydown)=\"onKeyDownContent($event)\" tabindex=\"{{ readonly ? -1 : 0 }}\" (dblclick)=dblclick($event)> <span>{{ value || '&nbsp;' }}</span> </div> </ng-template> <ng-template #input> <input [id]=\"position\" #inputElement class=\"thf-grid-cell-input\" [(ngModel)]=\"editValue\" (keydown.arrowup)=\"$event.stopPropagation()\" (keydown.arrowdown)=\"$event.stopPropagation()\" (keydown.arrowleft)=\"$event.stopPropagation()\" (keydown.arrowright)=\"$event.stopPropagation()\" (keydown)=\"onKeyDownInput($event)\" (blur)=\"onBlurInput($event)\"> <!-- <thf-input #inputElement class=\"thf-grid-cell-input\" [(ngModel)]=\"editValue\" (keydown)=\"onKeyDownInput($event)\" (t-blur)=\"onBlurInput($event)\"> </thf-input> --> </ng-template> </div> ", styles: [".thf-grid-cell-content, .thf-grid-cell-input { border-bottom: 1px solid #eceeee; border-left: none; border-right: 1px solid #eceeee; border-top: none; font-family: NunitoSans; font-size: 14px; height: 44px; line-height: 1.71; margin: 0; overflow: hidden; padding: 10px 16px; text-align: left; text-overflow: ellipsis; white-space: nowrap; } .thf-grid-cell-center { text-align: center; } .thf-grid-cell-right { text-align: right; } .thf-grid-cell-content:focus { border: none; outline: 1px solid #0c9abe; } .thf-grid-cell-required { border: 1px dashed red; } .thf-grid-cell-input { border: 1px solid #0c9abe; box-shadow: 0px 0px 4px 4px rgba(0, 0, 0, 0.10); outline: none; position: relative; min-width: 100%; max-width: 100%; width: 100%; } "]
                },] },
    ];
    /** @nocollapse */
    ThfGridCellComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    ThfGridCellComponent.propDecorators = {
        align: [{ type: i0.Input, args: ['t-align',] }],
        freeze: [{ type: i0.Input, args: ['t-freeze',] }],
        tabIndex: [{ type: i0.Input, args: ['t-tab-index',] }],
        position: [{ type: i0.Input, args: ['t-position',] }],
        width: [{ type: i0.Input, args: ['t-width',] }],
        readonly: [{ type: i0.Input, args: ['t-readonly',] }],
        required: [{ type: i0.Input, args: ['t-required',] }],
        valueChange: [{ type: i0.Output, args: ['t-valueChange',] }],
        value: [{ type: i0.Input, args: ['t-value',] }],
        inputElement: [{ type: i0.ViewChild, args: ['inputElement',] }],
        contentElement: [{ type: i0.ViewChild, args: ['contentElement',] }]
    };
    return ThfGridCellComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * \@example
 *
 * <example name="thf-grid-basic" title="Totvs Grid Basic">
 *  <file name="sample-thf-grid-basic/sample-thf-grid-basic.component.html"> </file>
 *  <file name="sample-thf-grid-basic/sample-thf-grid-basic.component.ts"> </file>
 * </example>
 */
var ThfGridComponent = /** @class */ (function () {
    function ThfGridComponent(changeDetectorRef, elRef, renderer) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.elRef = elRef;
        this.lastCell = '0-0';
        this.lastRow = 0;
        this.lastColumn = 0;
        this.currencyCell = '0-0';
        this.currencyRow = 0;
        this.currencyColumn = 0;
        this.logger = false;
        this.width = '100%';
        this.widthFreeze = 0;
        this.widthActions = 0;
        this._columns = [];
        /**
         * \@description
         *
         * Ações disparadas quando uma linha do grid é manipulada.
         */
        this.rowActions = {};
        /**
         * Lista com os dados que serão exibidos no grid.
         */
        this.data = [];
        this.debounceResize();
        this.resizeListener = renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
    }
    Object.defineProperty(ThfGridComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns.filter(function (column) { return column.freeze !== true && column.action !== true; });
        },
        /**
         * Colunas exibidas no grid.
         */
        set: /**
         * Colunas exibidas no grid.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._columns = value.slice();
            this._columns.forEach(function (column) {
                column.label = column.label || column.property;
                if (column.freeze === true) {
                    column.cssWidth = (column.width || 100) + "px";
                }
                else {
                    column.cssWidth = column.width ? column.width + "px" : '100%';
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfGridComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            /** @type {?} */
            var widthTableWrapper = _this.tableWrapper.nativeElement.offsetWidth;
            _this.width = widthTableWrapper - (_this.widthFreeze + 8) - _this.widthActions + "px";
        }, 100);
    };
    Object.defineProperty(ThfGridComponent.prototype, "freezeColumns", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var freezeColumns = this._columns.filter(function (column) { return column.freeze === true; });
            this.widthFreeze = freezeColumns.reduce(function (prev, current) { return prev + (current.width || 100); }, 0);
            return freezeColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfGridComponent.prototype, "actionColumns", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var actionsColumns = this._columns.filter(function (column) { return column.action === true; });
            this.widthActions = actionsColumns.length > 0 ? 56 : 0;
            return actionsColumns;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    ThfGridComponent.prototype.cancelRow = /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    function (event, row) {
        var _this = this;
        /** @type {?} */
        var el = event.path.find(function (element) { return element.id; });
        if (!el) {
            return;
        }
        var x = (el.id).split('-')[0];
        if (this.isEmptyRow(x)) {
            if (!this.removeRow(event, row)) {
                return;
            }
            this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
        }
        else {
            this.data[+x - 1] = Object.assign({}, this.currencyObj);
            setTimeout(function () { return _this.selectCell(_this.currencyRow, _this.currencyColumn); });
        }
    };
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    ThfGridComponent.prototype.removeRow = /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    function (event, row) {
        if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
            return false;
        }
        /** @type {?} */
        var index = this.data.indexOf(row);
        this.data.splice(index, 1);
        this.changeDetectorRef.detectChanges();
        if ((this.data.length === 0) || (index === this.data.length)) {
            this.selectCell(this.currencyRow - 1, this.currencyColumn);
        }
        else {
            this.selectCell(this.currencyRow, this.currencyColumn);
        }
        return true;
    };
    /**
     * @param {?} event
     * @param {?} direction
     * @return {?}
     */
    ThfGridComponent.prototype.tableKeydown = /**
     * @param {?} event
     * @param {?} direction
     * @return {?}
     */
    function (event, direction) {
        var _a = event.target.id.split('-'), row = _a[0], col = _a[1];
        row = +row;
        col = +col;
        /** @type {?} */
        var prow = +row;
        /** @type {?} */
        var pcol = +col;
        // event.preventDefault();
        // event.stopPropagation();
        // debugger;
        if (direction === 'down') {
            if (row <= this.data.length) {
                prow++;
            }
            if (row === this.data.length) {
                if (row === 0 || !this.isEmptyRow(row)) {
                    if (this.saveRow(row)) {
                        if (!this.insertRow()) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    prow--;
                }
            }
        }
        else if ((direction === 'up') && (row > 0)) {
            prow--;
        }
        else if ((direction === 'left') && (col > 0)) {
            pcol--;
        }
        else if ((direction === 'right') && (col < this._columns.length - 1)) {
            pcol++;
        }
        else if (direction === 'next') {
            if (col < this._columns.length - 1) {
                pcol++;
                event.preventDefault();
            }
            else if (row < this.data.length) {
                pcol = 0;
                prow++;
                event.preventDefault();
            }
        }
        else if (direction === 'prior') {
            if (col > 0) {
                pcol--;
                event.preventDefault();
            }
            else if (row > 0) {
                pcol = this._columns.length - 1;
                prow--;
                event.preventDefault();
            }
        }
        if (this.currencyCell === prow + "-" + pcol) {
            // console.log('vazou');
            return;
        }
        // debugger;
        if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
            if (!this.isEmptyRow(row)) {
                if (!this.saveRow(row)) {
                    return;
                }
            }
            else {
                if (!this.removeRow(event, row)) {
                    return;
                }
            }
        }
        if (this.currencyRow !== prow) {
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('mudou de linha');
        }
        this.lastCell = event.target.id;
        this.lastRow = row;
        this.lastColumn = col;
        this.selectCell(prow, pcol);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfGridComponent.prototype.tableClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var el = event.path.find(function (element) { return element.id; });
        if (!el) {
            this.selectCell(this.currencyRow, this.currencyColumn);
            return;
        }
        if (this.currencyCell === el.id) {
            return;
        }
        var _a = (el.id).split('-'), row = _a[0], col = _a[1];
        /** @type {?} */
        var prow = +row;
        /** @type {?} */
        var pcol = +col;
        if (prow !== this.currencyRow) {
            if (this.currencyRow > 0) {
                if (!this.isEmptyRow(this.currencyRow)) {
                    if (!this.saveRow(this.currencyRow)) {
                        this.selectCell(this.currencyRow, this.currencyColumn);
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('>>>>>>> ', prow - 1);
        }
        this.lastCell = this.currencyCell;
        this.lastRow = this.currencyRow;
        this.lastColumn = this.currencyColumn;
        this.currencyCell = el.id;
        this.currencyRow = prow;
        this.currencyColumn = pcol;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfGridComponent.prototype.saveRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        // console.log(this.data[row - 1]);
        var _this = this;
        // console.log(this.data[row - 1]);
        /** @type {?} */
        var obj = this.data[row - 1];
        if (!Object.keys(obj).some(function (prop) { return obj[prop] !== _this.currencyObj[prop]; })) {
            // console.log('tudo igual');
            return true;
        }
        if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
            return false;
        }
        /** @type {?} */
        var requireds = [];
        this.columns.forEach(function (column) {
            if (column.required === true && !obj[column.property]) {
                requireds.push(column.property);
            }
        });
        return requireds.length === 0;
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.insertRow = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = {};
        if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
            return false;
        }
        // this.currencyObj = Object.assign({}, obj);
        this.data.push(obj);
        this.changeDetectorRef.detectChanges();
        return true;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfGridComponent.prototype.isEmptyRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var obj = this.data[row - 1];
        if (!obj) { // title
            return false;
        }
        /** @type {?} */
        var filled = Object.keys(obj).some(function (property) { return obj[property]; });
        return !filled;
    };
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    ThfGridComponent.prototype.selectCell = /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    function (row, col) {
        /** @type {?} */
        var nextCell = this.elRef.nativeElement.querySelector("[id='" + row + "-" + col + "']");
        if (nextCell) {
            this.currencyCell = row + "-" + col;
            this.currencyRow = row;
            this.currencyColumn = col;
            nextCell.focus();
        }
    };
    ThfGridComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-grid', template: "<div class=\"thf-grid-wrapper thf-grid-row-wrapper\" #wrapper> <div *ngIf=\"logger\"> lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br> lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br> lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br> <hr> currencyObj: {{ currencyObj | json }} <hr> </div> <div class=\"thf-grid\"> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" #table (keydown.arrowup)=\"tableKeydown($event, 'up')\" (keydown.arrowdown)=\"tableKeydown($event, 'down')\" (keydown.arrowleft)=\"tableKeydown($event, 'left')\" (keydown.arrowright)=\"tableKeydown($event, 'right')\" (keydown.tab)=\"tableKeydown($event, 'next')\" (keydown.shift.tab)=\"tableKeydown($event, 'prior')\" (click)=\"tableClick($event)\" (contextmenu)=\"tableClick($event)\" (dblclick)=\"tableClick($event)\"> <div class=\"thf-grid-cell thf-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\"> <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container> </div> <div class=\"thf-grid-cell thf-grid-cell-normal\" [style.width]=\"width\" [style.max-width]=\"width\" [style.min-width]=\"width\"> <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container> </div> <div class=\"thf-grid-cell thf-grid-cell-action\" *ngIf=\"actionColumns.length > 0\"> <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container> </div> </div> </div> </div> <!-- <div class=\"thf-grid-footer-wrapper\"> <div class=\"thf-grid-footer\"> <div class=\"links\"><a href=\"#\">RODAPÉ</a></div> </div> </div> --> </div> <!-- Coluna com as colunas congeladas --> <ng-template #divFreezeColumns> <div class=\"thf-grid thf-grid-freeze\"> <div class=\"thf-grid-header-group\"> <div class=\"thf-grid-row\"> <thf-grid-head *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-title\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" t-freeze=\"true\" t-position=\"{{ '0-' + i }}\" [t-width]=\"column.width\" [t-align]=\"column.align\" [t-title]=\"column.label\"> </thf-grid-head> </div> </div> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\" (keydown.control.delete)=\"removeRow($event, row)\" (keydown.esc)=\"cancelRow($event, row)\"> <thf-grid-cell *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-cell\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" t-freeze=\"true\" [t-align]=\"column.align\" [t-readonly]=\"column.readonly\" [t-required]=\"column.required\" t-position=\"{{ (j + 1) + '-' + i }}\" [t-width]=\"column.width\" [(t-value)]=\"row[column.property]\"> </thf-grid-cell> </div> </div> </div> </ng-template> <!-- FIM: Coluna com as colunas congeladas --> <!-- Coluna com as colunas nornais --> <ng-template #divColumns> <div class=\"thf-grid thf-grid-normal\"> <div class=\"thf-grid-header-group\"> <div class=\"thf-grid-row\"> <thf-grid-head *ngFor=\"let column of columns; index as i\" class=\"thf-grid-title\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" [t-align]=\"column.align\" t-position=\"{{ '0-' + (i + freezeColumns.length) }}\" [t-title]=\"column.label\" [t-width]=\"column.width\"> </thf-grid-head> </div> </div> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\" (keydown.control.delete)=\"removeRow($event, row)\" (keydown.esc)=\"cancelRow($event, row)\"> <thf-grid-cell *ngFor=\"let column of columns; index as i\" class=\"thf-grid-cell\" [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\" [t-align]=\"column.align\" [t-readonly]=\"column.readonly\" [t-required]=\"column.required\" t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length) }}\" [(t-value)]=\"row[column.property]\" [t-width]=\"column.width\"> </thf-grid-cell> </div> </div> </div> </ng-template> <!-- FIM: Coluna com as colunas nornais --> <!-- Coluna com as colunas de ação --> <ng-template #divActionColumns> <div class=\"thf-grid thf-grid-actions\"> <div class=\"thf-grid-header-group\"> <div class=\"thf-grid-row\"> <thf-grid-head *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-title\" t-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\" [t-title]=\"column.label\" [t-align]=\"column.align\"> </thf-grid-head> </div> </div> <div class=\"thf-grid-body\"> <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\" (keydown.control.delete)=\"removeRow($event, row)\" (keydown.esc)=\"cancelRow($event, row)\"> <thf-grid-cell-action *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-cell\" t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length + columns.length) }}\" [t-value]=\"row[column.property]\"> </thf-grid-cell-action> </div> </div> </div> </ng-template> <!-- FIM: Coluna com as colunas de ação --> ", styles: [".thf-grid-wrapper { /* margin: 30px; */ overflow: auto; border: 1px solid #eceeee; /* width: 100%; */ /* border: 1px solid red; */ /* display: table-cell; */ } .thf-grid { display: table; border-right: none; border-bottom: none; } .thf-grid-cell-normal::-webkit-scrollbar, .thf-grid-row-wrapper::-webkit-scrollbar { border-radius: 2px; height: 4px; opacity: 0.5; width: 4px; } .thf-grid-cell-normal::-webkit-scrollbar-thumb, .thf-grid-row-wrapper::-webkit-scrollbar-thumb { background-color: #0c9abe; } .thf-grid .fixed { display: table; } .thf-grid-header-group { display: table-header-group; } .thf-grid-body { display: table-row-group; } .thf-grid-row { display: table-row; } .thf-grid-title, .thf-grid-cell { display: table-cell; border: none; } .thf-grid-cell-freeze { border-right: 2px solid #ceeaf2; } .thf-grid-cell-action { color: blue; border-left: 2px solid #ceeaf2; } .thf-grid-freeze, .thf-grid-actions { width: 100%; } .thf-grid-normal { width: 100%; } .thf-grid-cell-normal { overflow: auto; } .thf-grid-footer { display: table-footer-group; } .thf-grid-footer-wrapper { border: 1px solid #eceeee; border-top: none; } "]
                },] },
    ];
    /** @nocollapse */
    ThfGridComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    ThfGridComponent.propDecorators = {
        tableElement: [{ type: i0.ViewChild, args: ['table',] }],
        tableWrapper: [{ type: i0.ViewChild, args: ['wrapper',] }],
        rowActions: [{ type: i0.Input, args: ['t-row-actions',] }],
        columns: [{ type: i0.Input, args: ['t-columns',] }],
        data: [{ type: i0.Input, args: ['t-data',] }]
    };
    return ThfGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfGridHeadComponent = /** @class */ (function () {
    function ThfGridHeadComponent(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.align = 'left';
        this.boolean = false;
        this.position = '';
        this.tabIndex = -1;
    }
    Object.defineProperty(ThfGridHeadComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            return this._width ? this._width + "px" : '100%';
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._width = value;
        },
        enumerable: true,
        configurable: true
    });
    ThfGridHeadComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-grid-head', template: "<div> <div [id]=\"position\" class=\"thf-grid-head-content thf-grid-head-{{ align }}\" tabindex=\"{{ title ? 0 : -1 }}\"> <span>{{ title || '&nbsp;' }}</span> </div> </div> ", styles: [".thf-grid-head-content { border-bottom: 2px solid #ceeaf2; border-left: none; border-right: 1px solid #eceeee; border-top: none; color: #0c9abe; font-family: NunitoSans-bold; font-size: 14px; height: 44px; line-height: 1.71; margin: 0; max-height: 44px; min-height: 44px; overflow: hidden; padding: 10px 16px; text-align: left; text-overflow: ellipsis; white-space: nowrap; } .thf-grid-head-center { text-align: center; } .thf-grid-head-right { text-align: right; } .thf-grid-head-content:focus { border: 1px solid #0c9abe; outline: none; } "]
                },] },
    ];
    /** @nocollapse */
    ThfGridHeadComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    ThfGridHeadComponent.propDecorators = {
        align: [{ type: i0.Input, args: ['t-align',] }],
        boolean: [{ type: i0.Input, args: ['t-freeze',] }],
        position: [{ type: i0.Input, args: ['t-position',] }],
        tabIndex: [{ type: i0.Input, args: ['t-tab-index',] }],
        width: [{ type: i0.Input, args: ['t-width',] }],
        title: [{ type: i0.Input, args: ['t-title',] }]
    };
    return ThfGridHeadComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-grid.
 */
var ThfGridModule = /** @class */ (function () {
    function ThfGridModule() {
    }
    ThfGridModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        ThfFieldModule
                    ],
                    declarations: [
                        ThfGridCellActionComponent,
                        ThfGridCellComponent,
                        ThfGridComponent,
                        ThfGridHeadComponent
                    ],
                    exports: [
                        ThfGridComponent
                    ]
                },] },
    ];
    return ThfGridModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela. O componente disponibiliza uma área de exibição específica
 * para exibição de mais informações através do link "Exibir Detalhes".
 * Este componente é utilizado em conjunto com os componentes thf-list-item, thf-list-item-content e
 * thf-list-item-detail.
 *
 * \@example
 * <example name="thf-list" title="Totvs List">
 *  <file name="sample-thf-list.component.html"> </file>
 *  <file name="sample-thf-list.component.ts"> </file>
 * </example>
 */
var ThfListComponent = /** @class */ (function () {
    function ThfListComponent() {
        /**
         * Recebe valores "true" ou "false" para habilitar ou desabilitar o botão "Carregar Mais Resultados"
         */
        this.showMoreDisabled = 'false';
        /**
         * Recebe uma ação de clique do controller da página para o botão "Carregar mais resultados".
         */
        this.showMore = new i0.EventEmitter();
    }
    /**
     * @return {?}
     */
    ThfListComponent.prototype.onShowMore = /**
     * @return {?}
     */
    function () {
        this.showMore.emit(null);
    };
    ThfListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-list', template: "<ng-content></ng-content> <div *ngIf=\"showMore.observers.length > 0\"> <div class=\"thf-list-show-more\"> <thf-button t-label=\"Carregar mais resultados\" (t-click)=\"onShowMore()\" [t-disabled]=\"showMoreDisabled\"></thf-button> </div> </div> "
                },] },
    ];
    ThfListComponent.propDecorators = {
        showMoreDisabled: [{ type: i0.Input, args: ['t-show-more-disabled',] }],
        showMore: [{ type: i0.Output, args: ['t-show-more',] }]
    };
    return ThfListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este componente é utilizado em conjunto thf-list.
 */
var ThfListItemComponent = /** @class */ (function () {
    function ThfListItemComponent(viewRef, renderer) {
        var _this = this;
        /**
         * Lista de ações a ser executadas no item. Ao passar até duas ações é exibido apenas botões,
         * se passar de duas ações é exibido um menu com todas as opções.
         */
        this.actions = [];
        this.showAction = false;
        this.showLink = true;
        this.showDetail = false;
        this.showContent = true;
        this.closeListActionsWhenClickedOut = function (event) {
            if (_this.checkClickedOutActionsIcon(event)) {
                _this.closeActions();
            }
        };
        this._parentRef = viewRef['_view']['component'];
        this.collapsed = true;
        this.clickListener = renderer.listen('document', 'click', this.closeListActionsWhenClickedOut);
    }
    /**
     * @return {?}
     */
    ThfListItemComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.content && this.content.nativeElement.children.length === 0) {
            this.showContent = false;
        }
        if (this.detailsContent && this.detailsContent.nativeElement.children.length === 0) {
            this.showLink = false;
        }
    };
    /**
     * @return {?}
     */
    ThfListItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // remove click listener from document
        this.clickListener();
    };
    Object.defineProperty(ThfListItemComponent.prototype, "parentRef", {
        get: /**
         * @return {?}
         */
        function () {
            return this._parentRef;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfListItemComponent.prototype.checkClickedOutActionsIcon = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.actionsIconElement && !this.actionsIconElement.nativeElement.contains(event.target);
    };
    /**
     * @private
     * @return {?}
     */
    ThfListItemComponent.prototype.closeActions = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.actions) {
            this.showAction = false;
        }
    };
    ThfListItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-list-item', template: "<div class=\"thf-list-border\"> <div class=\"thf-list-header-container\"> <div *ngIf=\"title\" class=\"thf-list-title-container\"> <span class=\"thf-list-title\">{{title}}</span> </div> <div id=\"divActionButtonsId\" class=\"thf-list-actions-button\" *ngIf=\"actions.length > 0 && actions.length <= 2\"> <thf-button *ngFor=\"let action of actions\" [t-label]=\"action.label\" (t-click)=\"parentRef[action.function](index)\" t-small=\"true\"></thf-button> </div> <div class=\"thf-list-more-button\" (click)=\"showAction = !showAction\" *ngIf=\"actions.length > 0 && actions.length > 2\"> <span #actionsIconElement class=\"thf-icon thf-icon-more thf-list-icon-action\"></span> <div class=\"thf-list-actions\" [hidden]=\"!showAction\"> <div class=\"thf-list-action\" *ngFor=\"let action of actions\" (click)=\"parentRef[action.function](index)\"> {{action.label}} </div> </div> </div> </div> <div class=\"thf-list-item-container\" #content [hidden]=\"!showContent\"> <ng-content select=\"thf-list-item-content\"></ng-content> </div> <div class=\"thf-list-detail-container\" [hidden]=\"!showDetail\" #detailsContent> <ng-content select=\"thf-list-item-detail\"></ng-content> </div> <div select=\"details\" class=\"thf-list-details-link\" (click)=\"showDetail = !showDetail\" [hidden]=\"!showLink\"> <a class=\"thf-list-details\" *ngIf=\"!showDetail\">Exibir detalhes completamente</a> <a class=\"thf-list-details\" *ngIf=\"showDetail\">Ocultar detalhes completamente</a> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfListItemComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i0.Renderer2 }
    ]; };
    ThfListItemComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['t-title',] }],
        index: [{ type: i0.Input, args: ['t-index',] }],
        actions: [{ type: i0.Input, args: ['t-actions',] }],
        actionsIconElement: [{ type: i0.ViewChild, args: ['actionsIconElement', { read: i0.ElementRef },] }],
        detailsContent: [{ type: i0.ViewChild, args: ['detailsContent',] }],
        content: [{ type: i0.ViewChild, args: ['content',] }]
    };
    return ThfListItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este componente é utilizado em conjunto thf-list-item. Neste componente deve ser passado o
 * HTML que será exibido ao clicar no link "Exibir Detalhes".
 */
var ThfListItemDetailComponent = /** @class */ (function () {
    function ThfListItemDetailComponent() {
    }
    ThfListItemDetailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-list-item-detail', template: "<ng-content></ng-content>"
                },] },
    ];
    return ThfListItemDetailComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este componente é utilizado em conjunto thf-list-item. Neste componente deve ser passado o
 * HTML que será exibido a cada item".
 */
var ThfListItemContentComponent = /** @class */ (function () {
    function ThfListItemContentComponent() {
    }
    ThfListItemContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-list-item-content', template: "<ng-content></ng-content>"
                },] },
    ];
    return ThfListItemContentComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-list.
 *
 * > Aviso: Componente DEPRECIADO, utilize o componente [`thf-list-view`](/documentation/thf-list-view).
 */
var ThfListModule = /** @class */ (function () {
    function ThfListModule() {
    }
    ThfListModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfButtonModule
                    ],
                    declarations: [
                        ThfListComponent,
                        ThfListItemComponent,
                        ThfListItemDetailComponent,
                        ThfListItemContentComponent
                    ],
                    exports: [
                        ThfListComponent,
                        ThfListItemComponent,
                        ThfListItemDetailComponent,
                        ThfListItemContentComponent
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfListModule;
}());

var __assign$12 = (undefined && undefined.__assign) || function () {
    __assign$12 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$12.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfListViewLiteralsDefault = {
    en: (/** @type {?} */ ({
        hideDetails: 'Hide details',
        loadMoreData: 'Load more data',
        noData: 'No data found',
        selectAll: 'Select all',
        showDetails: 'Show details'
    })),
    es: (/** @type {?} */ ({
        hideDetails: 'Ocultar detalles',
        loadMoreData: 'Cargar más resultados',
        noData: 'Datos no encontrados',
        selectAll: 'Seleccionar todos',
        showDetails: 'Mostrar detalles'
    })),
    pt: (/** @type {?} */ ({
        hideDetails: 'Ocultar detalhes',
        loadMoreData: 'Carregar mais resultados',
        noData: 'Nenhum dado encontrado',
        selectAll: 'Selecionar todos',
        showDetails: 'Exibir detalhes'
    }))
};
/**
 * \@description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[t-list-view-content-template](/documentation/thf-list-view-content-template)** e
 * **[t-list-view-detail-template](/documentation/thf-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[t-list-view-detail-template](/documentation/thf-list-view-detail-template)**.
 */
var ThfListViewBaseComponent = /** @class */ (function () {
    function ThfListViewBaseComponent() {
        this.selectAll = false;
        this.showHeader = false;
        /**
         * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
         *
         * > Caso nenhuma ação for definida o mesmo não ficará visível.
         */
        this.showMore = new i0.EventEmitter();
        /**
         * Ação que será executada ao clicar no título.
         */
        this.titleAction = new i0.EventEmitter();
    }
    Object.defineProperty(ThfListViewBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de ações que serão exibidas no componente.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista de ações que serão exibidas no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._actions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do `thf-list-view` em *pixels*.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do `thf-list-view` em *pixels*.
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "hideSelectAll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSelectAll;
        },
        /**
         * @description
         *
         * Esconde o *checkbox* para seleção de todos os itens.
         *
         * @default `false`
         */
        set: /**
         * \@description
         *
         * Esconde o *checkbox* para seleção de todos os itens.
         *
         * \@default `false`
         * @param {?} hideSelectAll
         * @return {?}
         */
        function (hideSelectAll) {
            this._hideSelectAll = convertToBoolean(hideSelectAll);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /** Lista de itens que serão exibidos no componente. */
        set: /**
         * Lista de itens que serão exibidos no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._items = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfListViewLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-list-view`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfListViewLiterals = {
         *    hideDetail: 'Ocultar detalhes completamente',
         *    loadMoreData: 'Mais dados',
         *    showDetail: 'Mostrar mais detalhes',
         *    selectAll: 'Selecionar todos os itens'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfListViewLiterals = {
         *    showDetail: 'Mostrar mais detalhes'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-list-view
         *   [t-literals]="customLiterals">
         * </thf-list-view>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-list-view`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfListViewLiterals = {
         *    hideDetail: 'Ocultar detalhes completamente',
         *    loadMoreData: 'Mais dados',
         *    showDetail: 'Mostrar mais detalhes',
         *    selectAll: 'Selecionar todos os itens'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfListViewLiterals = {
         *    showDetail: 'Mostrar mais detalhes'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-list-view
         *   [t-literals]="customLiterals">
         * </thf-list-view>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign$12({}, thfListViewLiteralsDefault[thfLocaleDefault], thfListViewLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfListViewLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "select", {
        get: /**
         * @return {?}
         */
        function () {
            return this._select;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
         * item está selecionado, por exemplo:
         *
         * ```
         *  item.$selected
         *
         *  // ou
         *
         *  item['$selected']
         * ```
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
         * item está selecionado, por exemplo:
         *
         * ```
         *  item.$selected
         *
         *  // ou
         *
         *  item['$selected']
         * ```
         *
         * \@default `false`
         * @param {?} select
         * @return {?}
         */
        function (select) {
            this._select = convertToBoolean(select);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "showMoreDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showMoreDisabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o botão `Carregar Mais Resultados` será desabilitado.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o botão `Carregar Mais Resultados` será desabilitado.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showMoreDisabled = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.onClickAction = /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    function (listViewAction, item) {
        /** @type {?} */
        var cleanItem = this.deleteInternalAttrs(item);
        if (listViewAction.action) {
            listViewAction.action(cleanItem);
        }
    };
    /**
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.onShowMore = /**
     * @return {?}
     */
    function () {
        this.showMore.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.runTitleAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.titleAction.emit(event);
    };
    /**
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.selectAllListItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(function (item) {
                item.$selected = _this.selectAll;
            });
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.selectListItem = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected = !row.$selected;
        this.selectAll = this.checkIfItemsAreSelected(this.items);
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.deleteInternalAttrs = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        for (var key in item) {
            if (item.hasOwnProperty(key) && key.startsWith('$')) {
                delete item[key];
            }
        }
        return item;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.checkIfItemsAreSelected = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        /** @type {?} */
        var someCheckedOrIndeterminate = function (item) { return item.$selected || item.$selected === null; };
        /** @type {?} */
        var everyChecked = function (item) { return item.$selected; };
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.showMainHeader = /**
     * @private
     * @return {?}
     */
    function () {
        this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
    };
    ThfListViewBaseComponent.propDecorators = {
        actions: [{ type: i0.Input, args: ['t-actions',] }],
        height: [{ type: i0.Input, args: ['t-height',] }],
        hideSelectAll: [{ type: i0.Input, args: ['t-hide-select-all',] }],
        items: [{ type: i0.Input, args: ['t-items',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        propertyLink: [{ type: i0.Input, args: ['t-property-link',] }],
        propertyTitle: [{ type: i0.Input, args: ['t-property-title',] }],
        select: [{ type: i0.Input, args: ['t-select',] }],
        showMoreDisabled: [{ type: i0.Input, args: ['t-show-more-disabled',] }],
        showMore: [{ type: i0.Output, args: ['t-show-more',] }],
        titleAction: [{ type: i0.Output, args: ['t-title-action',] }]
    };
    return ThfListViewBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-list-view
 *   t-property-title="name"
 *   [t-items]="[{id: 1, name: "Register", email: register\@totvs.com}]">
 *
 *   <ng-template t-list-view-content-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="code"></thf-info>
 *       <thf-info class="thf-md-6" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-list-view
 *    t-property-title="name"
 *    [t-items]="[{id: 1, name: "Register", email: register\@totvs.com}]">
 *
 *    <div *t-list-view-content-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-list-view>
 * ...
 *
 * ```
 *
 * A diretiva **t-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
 * é necessário atribuir a referência da função que faz a alteração, à propriedade `t-title`,
 * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    template: `
 *      ...
 *      <thf-list-view
 *        [t-items]="items">
 *        <ng-template t-list-view-content-template let-item [t-title]="customTitle">
 *          <div class="thf-row">
 *            <thf-info class="thf-md-12" t-label="Customer" [t-value]="item.customer"></thf-info>
 *          </div>
 *        </ng-template>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      customer: 'Supermarket 1',
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      customer: 'Supermarket 2'
 *    }];
 *
 *    customTitle(item) {
 *      return `${item.code} - ${item.product}`;
 *    }
 * }
 * ```
 */
var ThfListViewContentTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfListViewContentTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfListViewContentTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[t-list-view-content-template]'
                },] },
    ];
    /** @nocollapse */
    ThfListViewContentTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    ThfListViewContentTemplateDirective.propDecorators = {
        title: [{ type: i0.Input, args: ['t-title',] }]
    };
    return ThfListViewContentTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-list-view
 *   t-property-title="name"
 *   [t-items]="items">
 *
 *   <ng-template t-list-view-detail-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="code"></thf-info>
 *       <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-list-view
 *    t-property-title="name"
 *    [t-items]="items">
 *    <div *t-list-view-detail-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-list-view>
 * ...
 *
 * ```
 */
var ThfListViewDetailTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfListViewDetailTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfListViewDetailTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[t-list-view-detail-template]'
                },] },
    ];
    /** @nocollapse */
    ThfListViewDetailTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    ThfListViewDetailTemplateDirective.propDecorators = {
        showDetail: [{ type: i0.Input, args: ['t-show-detail',] }]
    };
    return ThfListViewDetailTemplateDirective;
}());

var __extends$45 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfListViewBaseComponent
 *
 * \@example
 *
 * <example name="thf-list-view-basic" title="Totvs List View Basic">
 *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.html"> </file>
 *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-list-view-labs" title="Totvs List View Labs">
 *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.html"> </file>
 *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-list-view-hiring-processes" title="Totvs List View - Hiring Processes">
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
var ThfListViewComponent = /** @class */ (function (_super) {
    __extends$45(ThfListViewComponent, _super);
    function ThfListViewComponent(changeDetector, differs) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(ThfListViewComponent.prototype, "hasContentTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "hasDetailTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewDetailTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "displayShowMoreButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "showButtonsActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "showPopupActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "titleHasAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.titleAction.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "visibleActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.actions && this.actions.filter(function (action) { return action.visible !== false; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfListViewComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.initShowDetail();
    };
    /**
     * @return {?}
     */
    ThfListViewComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkItemsChange();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfListViewComponent.prototype.checkTitleType = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfListViewComponent.prototype.getItemTitle = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title ?
            this.listViewContentTemplate.title(item) : item[this.propertyTitle];
    };
    /**
     * @return {?}
     */
    ThfListViewComponent.prototype.hasItems = /**
     * @return {?}
     */
    function () {
        return this.items && this.items.length > 0;
    };
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    ThfListViewComponent.prototype.returnBooleanValue = /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    function (listViewAction, item) {
        return isTypeof(listViewAction.disabled, 'function') ? ((/** @type {?} */ (listViewAction))).disabled(item) : listViewAction.disabled;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfListViewComponent.prototype.trackBy = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    ThfListViewComponent.prototype.togglePopup = /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    function (item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.thfPopupComponent.toggle(item);
    };
    /**
     * @private
     * @return {?}
     */
    ThfListViewComponent.prototype.checkItemsChange = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfListViewComponent.prototype.initShowDetail = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach(function (item) { return item.$showDetail = _this.listViewDetailTemplate.showDetail(item); });
        }
    };
    ThfListViewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-list-view', template: " <div [class.thf-list-view-main-container-header]=\"showHeader\" [class.thf-list-view-main-container]=\"!showHeader\" [style.height.px]=\"height\"> <div *ngIf=\"showHeader\" class=\"thf-list-view-main-header\"> <div class=\"thf-checkbox-group-item\"> <div class=\"thf-list-view-main-select\"> <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\" [class.thf-checkbox-group-input-checked]=\"selectAll\" [class.thf-checkbox-group-input-indeterminate]=\"selectAll === null\"> <label class=\"thf-checkbox-group-label thf-clickable\" (click)=\"selectAllListItems()\"> {{ literals.selectAll }} </label> </div> </div> </div> <div class=\"thf-list-view-main-content\"> <div class=\"thf-list-view\" *ngIf=\"!hasItems()\"> <div class=\"thf-list-view-container-no-data thf-text-center\"> <span> {{ literals.noData }} </span> </div> </div> <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\"> <div class=\"thf-list-view\"> <div class=\"thf-list-view-container\"> <div class=\"thf-list-view-header\"> <div class=\"thf-list-view-title\" [ngSwitch]=\"checkTitleType(item)\"> <div *ngIf=\"select\" class=\"thf-list-view-select\"> <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\" [class.thf-checkbox-group-input-checked]=\"item.$selected\"> <label class=\"thf-checkbox-group-label thf-clickable\" (click)=\"selectListItem(item)\"></label> </div> <a *ngSwitchCase=\"'externalLink'\" class=\"thf-list-view-title-link\" target=\"_blank\" [href]=\"item[propertyLink]\" (click)=\"runTitleAction($event)\"> {{ getItemTitle(item) }} </a> <a *ngSwitchCase=\"'internalLink'\" class=\"thf-list-view-title-link\" [routerLink]=\"item[propertyLink]\" (click)=\"runTitleAction($event)\"> {{ getItemTitle(item) }} </a> <span *ngSwitchCase=\"'noLink'\" class=\"thf-list-view-title-no-link\" [class.thf-list-view-title-link]=\"titleHasAction\" (click)=\"titleHasAction && runTitleAction($event)\"> {{ getItemTitle(item) }} </span> </div> <div *ngIf=\"showButtonsActions\" class=\"thf-list-view-actions\"> <thf-button *ngFor=\"let action of visibleActions\" t-small=\"true\" [t-disabled]=\"returnBooleanValue(action, item)\" [t-icon]=\"action.icon\" [t-label]=\"action.label\" [t-type]=\"action.type\" (t-click)=\"onClickAction(action, item)\"> </thf-button> </div> <div *ngIf=\"showPopupActions\" class=\"thf-list-view-more-actions\"> <span #popupTarget class=\"thf-icon thf-icon-more thf-list-view-more-icon thf-clickable\" (click)=\"togglePopup(item, popupTarget)\"> </span> </div> </div> <div *ngIf=\"hasContentTemplate\" class=\"thf-list-view-content\"> <ng-template [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"> </ng-template> </div> <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"thf-list-view-detail\"> <ng-template [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"> </ng-template> </div> </div> <div *ngIf=\"hasDetailTemplate\" class=\"thf-list-view-detail-button\"> <span class=\"thf-clickable\" (click)=\"item.$showDetail = !item.$showDetail\"> {{ item.$showDetail ? literals.hideDetails : literals.showDetails }} </span> </div> </div> </ng-container> </div> </div> <div *ngIf=\"displayShowMoreButton\" class=\"thf-mb-2 thf-text-center\"> <thf-button [t-disabled]=\"showMoreDisabled\" [t-label]=\"literals.loadMoreData\" (t-click)=\"onShowMore()\"> </thf-button> </div> <thf-popup #popup [t-actions]=\"actions\" [t-target]=\"popupTarget\"> </thf-popup> ",
                    animations: [
                        animations.trigger('showHideDetail', [
                            animations.state('*', animations.style({ 'overflow-y': 'visible' })),
                            animations.state('void', animations.style({ 'overflow-y': 'hidden' })),
                            animations.transition('* => void', [
                                animations.style({ height: '*', 'overflow-y': 'hidden' }),
                                animations.animate(100, animations.style({ height: 0 }))
                            ]),
                            animations.transition('void => *', [
                                animations.style({ height: '0' }),
                                animations.animate(100, animations.style({ height: '*' }))
                            ])
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    ThfListViewComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.IterableDiffers }
    ]; };
    ThfListViewComponent.propDecorators = {
        listViewContentTemplate: [{ type: i0.ContentChild, args: [ThfListViewContentTemplateDirective,] }],
        listViewDetailTemplate: [{ type: i0.ContentChild, args: [ThfListViewDetailTemplateDirective,] }],
        thfPopupComponent: [{ type: i0.ViewChild, args: ['popup',] }]
    };
    return ThfListViewComponent;
}(ThfListViewBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `thf-list-view`.
 *
 * > Para o correto funcionamento do componente `thf-list-view`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 * import { ThfModule } from '\@totvs/thf-ui/thf.module';
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     ThfModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var ThfListViewModule = /** @class */ (function () {
    function ThfListViewModule() {
    }
    ThfListViewModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule,
                        ThfButtonModule,
                        ThfPopupModule
                    ],
                    declarations: [
                        ThfListViewComponent,
                        ThfListViewContentTemplateDirective,
                        ThfListViewDetailTemplateDirective
                    ],
                    exports: [
                        ThfListViewComponent,
                        ThfListViewContentTemplateDirective,
                        ThfListViewDetailTemplateDirective
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfListViewModule;
}());

var __assign$13 = (undefined && undefined.__assign) || function () {
    __assign$13 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$13.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfMenuLiteralsDefault = {
    en: { itemNotFound: 'Item not found.' },
    es: { itemNotFound: 'Elemento no encontrado.' },
    pt: { itemNotFound: 'Item não encontrado.' }
};
/**
 * \@description
 *
 * Este é um componente de menu lateral que é utilizado para navegação nas páginas de uma aplicação.
 *
 * O componente thf-menu recebe uma lista de objetos do tipo `MenuItem` com as informações dos itens de menu como
 * textos, links para redirecionamento, ações, até 4 níveis de menu e ícones para o primeiro nível de menu.
 */
var ThfMenuBaseComponent = /** @class */ (function () {
    function ThfMenuBaseComponent(menuService) {
        this.menuService = menuService;
        this._filter = false;
        this._maxLevel = 4;
        this.literals = __assign$13({}, thfMenuLiteralsDefault[thfLocaleDefault], thfMenuLiteralsDefault[browserLanguage()]);
    }
    Object.defineProperty(ThfMenuBaseComponent.prototype, "menus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._menus;
        },
        /** Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
        set: /**
         * Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         * @param {?} menus
         * @return {?}
         */
        function (menus) {
            this._menus = Array.isArray(menus) ? menus : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMenuBaseComponent.prototype, "maxLevel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxLevel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMenuBaseComponent.prototype, "filter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filter;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita um campo para pesquisa no menu.
         * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
         * ou também, pode ser realizada através de um serviço definido na propriedade `t-service`.
         *
         * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
         *
         * @default false
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita um campo para pesquisa no menu.
         * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
         * ou também, pode ser realizada através de um serviço definido na propriedade `t-service`.
         *
         * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
         *
         * \@default false
         * @param {?} filter
         * @return {?}
         */
        function (filter$$1) {
            this._filter = (/** @type {?} */ (filter$$1)) === '' ? true : convertToBoolean(filter$$1);
            this.filteredItems = this._menus.slice();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMenuBaseComponent.prototype, "service", {
        get: /**
         * @return {?}
         */
        function () {
            return this._service;
        },
        /**
         * @optional
         *
         * @description
         *
         * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
         * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
         * serviço implementando a interface `ThfMenuFilter`.
         *
         * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
         * [Guia de implementação de API da Totvs](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS).
         *
         * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
         * no parâmetro `search`, veja exemplo:
         *
         * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
         *
         * ```
         * <thf-menu t-service="/api/v1/fnd/menu">
         * </thf-menu>
         *
         * Requisição: GET /api/v1/fnd/menu?search=contas
         * ```
         *
         * > É necessário que propriedade `t-filter` esteja habilitada.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
         * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
         * serviço implementando a interface `ThfMenuFilter`.
         *
         * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
         * [Guia de implementação de API da Totvs](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS).
         *
         * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
         * no parâmetro `search`, veja exemplo:
         *
         * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
         *
         * ```
         * <thf-menu t-service="/api/v1/fnd/menu">
         * </thf-menu>
         *
         * Requisição: GET /api/v1/fnd/menu?search=contas
         * ```
         *
         * > É necessário que propriedade `t-filter` esteja habilitada.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._service = value || undefined;
            this.configService(this.service);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMenuBaseComponent.prototype, "params", {
        get: /**
         * @return {?}
         */
        function () {
            return this._params;
        },
        /**
         * @optional
         *
         * @description
         *
         * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
         *
         * Caso utilizado um serviço customizado, implementando a interface `ThfMenuFilter`, o valor desta propriedade
         * será passado como parâmetro, na função `getFilteredData`.
         *
         * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
         * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
         *
         * ```
         * <thf-menu t-service="/api/v1/fnd/menu" [t-params]="{ company: 1, user: 297767512 }">
         * </thf-menu>
         *
         * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
         *
         * Caso utilizado um serviço customizado, implementando a interface `ThfMenuFilter`, o valor desta propriedade
         * será passado como parâmetro, na função `getFilteredData`.
         *
         * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
         * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
         *
         * ```
         * <thf-menu t-service="/api/v1/fnd/menu" [t-params]="{ company: 1, user: 297767512 }">
         * </thf-menu>
         *
         * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._params = value && isTypeof(value, 'object') ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    ThfMenuBaseComponent.prototype.configService = /**
     * @private
     * @param {?} service
     * @return {?}
     */
    function (service) {
        if (typeof service === 'string' && service.trim()) {
            // service url
            this.menuService.configProperties(service);
            this.filterService = this.menuService;
        }
        else if (typeof service === 'object' && service.getFilteredData) {
            // custom service
            this.filterService = service;
        }
        else {
            this.filterService = undefined;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ThfMenuBaseComponent.prototype.setMenuExtraProperties = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.allowIcons = true;
        this.allowCollapseMenu = true;
        this.menus.forEach(function (menuItem) {
            _this._level = 1;
            _this.allowIcons = _this.allowIcons ? validValue(menuItem.icon) : false;
            _this.allowCollapseMenu = _this.allowCollapseMenu && _this.allowIcons ? validValue(menuItem.shortLabel) : false;
            _this.setMenuItemProperties(menuItem);
            if (menuItem.subItems) {
                _this._level++;
                _this.processSubItems(menuItem);
            }
        });
    };
    /**
     * @protected
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuBaseComponent.prototype.setMenuItemProperties = /**
     * @protected
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        menuItem['id'] = menuItem['id'] || uuid.v4();
        menuItem['level'] = this._level;
        menuItem['type'] = this.setMenuType(menuItem);
    };
    /**
     * @protected
     * @param {?} menus
     * @return {?}
     */
    ThfMenuBaseComponent.prototype.validateMenus = /**
     * @protected
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        var _this = this;
        menus.forEach(function (menu) { return _this.validateMenu(menu); });
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuBaseComponent.prototype.processSubItems = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        var _this = this;
        menu.subItems.forEach(function (menuItem, index, menuItems) {
            /** @type {?} */
            var previousItem = menuItems[index - 1];
            if (previousItem && previousItem.subItems) {
                _this._level = previousItem['level'];
            }
            if (_this._level <= _this.maxLevel) {
                _this.setMenuItemProperties(menuItem);
                if (menuItem.subItems) {
                    _this._level++;
                    _this.processSubItems(menuItem);
                }
            }
        });
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuBaseComponent.prototype.setMenuType = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (menuItem.subItems && menuItem.subItems.length > 0 && this._level < this.maxLevel) {
            return 'subItems';
        }
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuBaseComponent.prototype.validateMenu = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        var _this = this;
        if (!menuItem.label || menuItem.label.trim() === '') {
            throw new Error('O atributo ThfMenuItem.label não pode ser vazio.');
        }
        else if (menuItem.subItems) {
            menuItem.subItems.forEach(function (subItem) {
                _this.validateMenu(subItem);
            });
        }
    };
    ThfMenuBaseComponent.propDecorators = {
        menus: [{ type: i0.Input, args: ['t-menus',] }],
        filter: [{ type: i0.Input, args: ['t-filter',] }],
        service: [{ type: i0.Input, args: ['t-service',] }],
        params: [{ type: i0.Input, args: ['t-params',] }]
    };
    return ThfMenuBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a comunicação entre os items do thf-menu.
 */
var ThfMenuItemsService = /** @class */ (function () {
    function ThfMenuItemsService() {
        this.subjectParent = new rxjs.Subject();
        this.subjectChild = new rxjs.Subject();
    }
    // Envia informações do click do thf-menu-item para o thf-menu
    // Envia informações do click do thf-menu-item para o thf-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuItemsService.prototype.sendToParentMenuClicked = 
    // Envia informações do click do thf-menu-item para o thf-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectChild.next(menu);
    };
    // Recebe do thf-menu-item sua informação de click.
    // Recebe do thf-menu-item sua informação de click.
    /**
     * @return {?}
     */
    ThfMenuItemsService.prototype.receiveFromChildMenuClicked = 
    // Recebe do thf-menu-item sua informação de click.
    /**
     * @return {?}
     */
    function () {
        return this.subjectChild.asObservable();
    };
    // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.
    // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuItemsService.prototype.sendToChildMenuClicked = 
    // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectParent.next(menu);
    };
    // Recebe do thf-menu as informações processadas do click de um thf-menu-item.
    // Recebe do thf-menu as informações processadas do click de um thf-menu-item.
    /**
     * @return {?}
     */
    ThfMenuItemsService.prototype.receiveFromParentMenuClicked = 
    // Recebe do thf-menu as informações processadas do click de um thf-menu-item.
    /**
     * @return {?}
     */
    function () {
        return this.subjectParent.asObservable();
    };
    ThfMenuItemsService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfMenuItemsService;
}());

var __assign$14 = (undefined && undefined.__assign) || function () {
    __assign$14 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$14.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a interface `ThfMenuFilter`, utilizado para fazer requisições ao serviço informado pelo usuário,
 * caso for uma URL, no componente `thf-menu`.
 */
var ThfMenuService = /** @class */ (function () {
    function ThfMenuService(http$$1) {
        this.http = http$$1;
    }
    Object.defineProperty(ThfMenuService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @return {?}
     */
    ThfMenuService.prototype.configProperties = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this._url = url;
    };
    /**
     * @param {?} search
     * @param {?=} params
     * @return {?}
     */
    ThfMenuService.prototype.getFilteredData = /**
     * @param {?} search
     * @param {?=} params
     * @return {?}
     */
    function (search, params) {
        /** @type {?} */
        var filterParams = __assign$14({ search: search }, params);
        return this.http.get(this.url, { params: filterParams })
            .pipe(operators.map(function (response) { return response && response.items; }));
    };
    ThfMenuService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfMenuService.ctorParameters = function () { return [
        { type: http.HttpClient }
    ]; };
    return ThfMenuService;
}());

var __extends$46 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfMenuDebounceTime = 400;
/** @type {?} */
var thfMenuMinLength = 3;
/** @type {?} */
var thfMenuRootLevel = 1;
/**
 * \@docsExtends ThfMenuBaseComponent
 *
 * \@description
 *
 * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
 *
 * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
 * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
 * então o menu alternará novamente para o estado aberto.
 *
 * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
 * um serviço customizado implementando a interface `ThfMenuFilter`.
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     ThfModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '\@angular/core';
 *
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * \@NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * \@example
 *
 * <example name="thf-menu-basic" title="Totvs Menu Basic">
 *   <file name="sample-thf-menu-basic/sample-thf-menu-basic.component.html"> </file>
 *   <file name="sample-thf-menu-basic/sample-thf-menu-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-menu-labs" title="Totvs Menu Labs">
 *   <file name="sample-thf-menu-labs/sample-thf-menu-labs.component.html"> </file>
 *   <file name="sample-thf-menu-labs/sample-thf-menu-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-menu-human-resources" title="Totvs Menu - Human Resources">
 *   <file name="sample-thf-menu-human-resources/sample-thf-menu-human-resources.component.html"> </file>
 *   <file name="sample-thf-menu-human-resources/sample-thf-menu-human-resources.component.ts"> </file>
 *   <file name="sample-thf-menu-human-resources/sample-thf-menu-human-resources.service.ts"> </file>
 * </example>
 */
var ThfMenuComponent = /** @class */ (function (_super) {
    __extends$46(ThfMenuComponent, _super);
    function ThfMenuComponent(viewRef, element, renderer, router$$1, menuItemsService, changeDetector, menuService) {
        var _this = _super.call(this, menuService) || this;
        _this.element = element;
        _this.renderer = renderer;
        _this.router = router$$1;
        _this.menuItemsService = menuItemsService;
        _this.changeDetector = changeDetector;
        _this.collapsedMenu = false;
        _this.filterLoading = false;
        _this.menuMobileOpened = false;
        _this.noData = false;
        _this.filteringItems = false;
        _this.menuInitialized = false;
        _this.menuPrevious = null;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    Object.defineProperty(ThfMenuComponent.prototype, "isActiveItemMenuSubMenu", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMenuComponent.prototype, "enableCollapseButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.allowCollapseMenu && !this.collapsedMenu && !this.menuMobileOpened;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.filteringItems && this.filter) {
            return;
        }
        /** @type {?} */
        var menuCurrent = JSON.stringify(this.menus);
        if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
            this.updateMenu();
        }
        this.validateCollapseClass();
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscribeToMenuItem();
        this.subscribeToRoute();
        setTimeout(function () {
            /** @type {?} */
            var urlRouter = _this.checkingRouterChildrenFragments();
            _this.checkActiveMenuByUrl(urlRouter);
        });
    };
    /**
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    ThfMenuComponent.prototype.activateMenuByUrl = /**
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    function (urlPath, menus) {
        var _this = this;
        if (menus) {
            return menus.some(function (menu) {
                /** @type {?} */
                var formattedLink = getFormattedLink(menu.link);
                if (formattedLink === urlPath) {
                    _this.linkActive = formattedLink;
                    _this.activateMenuItem(menu);
                    return true;
                }
                else {
                    return _this.activateMenuByUrl(urlPath, menu.subItems);
                }
            });
        }
    };
    /**
     * @param {?} urlPath
     * @return {?}
     */
    ThfMenuComponent.prototype.checkActiveMenuByUrl = /**
     * @param {?} urlPath
     * @return {?}
     */
    function (urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    ThfMenuComponent.prototype.debounceFilter = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter$$1) {
        var _this = this;
        clearTimeout(this.timeoutFilter);
        this.timeoutFilter = setTimeout(function () {
            _this.filterProcess(filter$$1);
        }, thfMenuDebounceTime);
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.subscribeToMenuItem = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe(function (menu) {
            _this.clickMenuItem(menu);
        });
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.subscribeToRoute = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.routeSubscription = this.router.events.subscribe(function (val) {
            if (val instanceof router.NavigationEnd || val instanceof router.NavigationCancel) {
                /** @type {?} */
                var urlRouter = _this.checkingRouterChildrenFragments();
                _this.checkActiveMenuByUrl(urlRouter);
            }
        });
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.toggleMenuCollapse = /**
     * @return {?}
     */
    function () {
        this.collapsedMenu = !this.collapsedMenu;
        this.validateCollapseClass();
        if (this.groupedMenuItem) {
            this.groupedMenuItem = this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
            this.toggleGroupedMenuItem();
        }
        if (this.activeMenuItem) {
            this.activateCollapseSubMenuItem();
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
        this.updateMenu();
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.toggleMenuMobile = /**
     * @return {?}
     */
    function () {
        this.menuMobileOpened = !this.menuMobileOpened;
        if (isMobile()) {
            return;
        }
        if (this.menuMobileOpened) {
            this.createResizeListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.activateCollapseSubMenuItem = /**
     * @private
     * @return {?}
     */
    function () {
        this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
        if (!this.collapsedMenu && this.activeMenuItem['level'] > thfMenuRootLevel && this.isActiveItemMenuSubMenu) {
            this.openParentMenu(this.activeMenuItem);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.activateMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.activeMenuItem = menu;
        this.linkActive = menu.link;
        if (this.activeMenuItem['level'] > thfMenuRootLevel) {
            this.openParentMenu(this.activeMenuItem);
        }
        else {
            this.groupedMenuItem = null;
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
    };
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    ThfMenuComponent.prototype.areSubMenus = /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        return menus.every(function (menu) { return menu['level'] > thfMenuRootLevel; });
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.checkingRouterChildrenFragments = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? "/" + childrenPrimary.segments.map(function (it) { return it.path; }).join('/') : '';
    };
    /**
     * @private
     * @param {?} activeMenuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.clearGroupMenuIfFirstLevel = /**
     * @private
     * @param {?} activeMenuItem
     * @return {?}
     */
    function (activeMenuItem) {
        if (activeMenuItem['level'] === thfMenuRootLevel) {
            this.groupedMenuItem = undefined;
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.clickMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu['type'] === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu['type'] === 'internalLink') {
            this.activateMenuItem(menu);
        }
        else if (menu['type'] === 'subItems') {
            if (this.filteringItems) {
                this.filteringItems = false;
            }
            this.groupMenuItem(menu);
        }
        if (menu['type'] !== 'subItems') {
            this.menuMobileOpened = false;
        }
    };
    /**
     * @private
     * @param {?=} menuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.convertToMenuItemFiltered = /**
     * @private
     * @param {?=} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (menuItem === void 0) { menuItem = { label: '', link: '' }; }
        var label = menuItem.label, link = menuItem.link;
        /** @type {?} */
        var menuItemFiltered = { label: label, link: link };
        this.setMenuItemProperties(menuItemFiltered);
        return menuItemFiltered;
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.createResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function () {
            _this.menuMobileOpened = false;
            _this.resizeListener();
        });
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.executeMenuAction = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (typeof menu.action === 'string') {
            this.parentRef[menu.action](menu);
        }
        else {
            menu.action.call(this.parentRef, menu);
        }
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    ThfMenuComponent.prototype.filterItems = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter$$1) {
        return __awaiter(this, void 0, void 0, function () {
            var trimFilter, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        trimFilter = filter$$1 && filter$$1.trim();
                        if (!trimFilter) return [3 /*break*/, 4];
                        this.filteredItems = [];
                        _a = this;
                        if (!this.filterService) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.filterOnService(trimFilter)];
                    case 1:
                        _b = _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _b = this.filterLocalItems(trimFilter);
                        _c.label = 3;
                    case 3:
                        _a.filteredItems = _b;
                        this.filteringItems = true;
                        return [3 /*break*/, 5];
                    case 4:
                        this.filteredItems = this.menus.slice();
                        this.filteringItems = false;
                        _c.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    ThfMenuComponent.prototype.filterLocalItems = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter$$1) {
        /** @type {?} */
        var filteredItems = [];
        this.findItems(this.menus, filter$$1.toLowerCase(), filteredItems);
        return filteredItems;
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    ThfMenuComponent.prototype.filterProcess = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter$$1) {
        var _this = this;
        this.filterLoading = true;
        this.filterItems(filter$$1).then(function () {
            _this.filterLoading = false;
            _this.showNoData();
            _this.changeDetector.detectChanges();
            _this.menuItemsService.sendToChildMenuClicked({ active: _this.activeMenuItem, grouped: _this.groupedMenuItem });
        }).catch(function (error) {
            _this.filterLoading = false;
            Promise.reject(error);
        });
    };
    /**
     * @private
     * @param {?=} search
     * @return {?}
     */
    ThfMenuComponent.prototype.filterOnService = /**
     * @private
     * @param {?=} search
     * @return {?}
     */
    function (search) {
        if (search === void 0) { search = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(search.length >= thfMenuMinLength)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.filterService.getFilteredData(search, this.params)
                                .pipe(operators.map(function (menuItemsFiltered) { return menuItemsFiltered.map(function (menuItem) { return _this.convertToMenuItemFiltered(menuItem); }); }))
                                .toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, this.filteredItems];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} filter
     * @param {?} filteredItems
     * @return {?}
     */
    ThfMenuComponent.prototype.findItems = /**
     * @private
     * @param {?} menus
     * @param {?} filter
     * @param {?} filteredItems
     * @return {?}
     */
    function (menus, filter$$1, filteredItems) {
        var _this = this;
        menus.forEach(function (menu) {
            if ((menu.label.toLowerCase().includes(filter$$1) && !menu.subItems) ||
                (menu.subItems && _this.findItems(menu.subItems, filter$$1, filteredItems))) {
                filteredItems.push(menu);
            }
        });
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.findParent = /**
     * @private
     * @param {?} menus
     * @param {?} menuItem
     * @return {?}
     */
    function (menus, menuItem) {
        /** @type {?} */
        var getParent = function (menuItems, id) {
            if (menuItems) {
                for (var index = 0; index < menuItems.length; index++) {
                    /** @type {?} */
                    var menu = menuItems[index];
                    if (menu.subItems && menu.subItems.find(function (subItem) { return subItem['id'] === id; })) {
                        return menu;
                    }
                    /** @type {?} */
                    var found = getParent(menu.subItems, id);
                    if (found) {
                        return found;
                    }
                }
            }
        };
        return getParent(menus, menuItem['id']);
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.findRootParent = /**
     * @private
     * @param {?} menus
     * @param {?} menu
     * @return {?}
     */
    function (menus, menu) {
        /** @type {?} */
        var findParent = this.findParent;
        /** @type {?} */
        var getRootParent = function (menuItems, menuItem) {
            /** @type {?} */
            var parent = findParent(menuItems, menuItem);
            if (parent['level'] !== thfMenuRootLevel) {
                parent = getRootParent(menuItems, parent);
            }
            return parent;
        };
        return getRootParent(menus, menu);
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.getActiveMenuParent = /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    function (menus, activeMenuItem, groupedMenuItem) {
        if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
            return this.findRootParent(menus, activeMenuItem);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.groupMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (this.collapsedMenu) {
            this.toggleMenuCollapse();
        }
        menu['isOpened'] = !menu['isOpened'];
        this.groupedMenuItem = menu;
        if (this.activeMenuItem && menu['isOpened']
            && this.isActiveItemMenuSubMenu
            && this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
            this.activateMenuItem(this.activeMenuItem);
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    ThfMenuComponent.prototype.isRootMenuEqualGroupedMenu = /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    function (menus, activeMenuItem, groupedMenuItem) {
        /** @type {?} */
        var activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
        return activeMenuRootParent['id'] === groupedMenuItem['id'];
    };
    /**
     * @private
     * @param {?} childMenu
     * @return {?}
     */
    ThfMenuComponent.prototype.openParentMenu = /**
     * @private
     * @param {?} childMenu
     * @return {?}
     */
    function (childMenu) {
        /** @type {?} */
        var parent = this.findParent(this.menus, childMenu);
        parent['isOpened'] = true;
        this.groupedMenuItem = parent;
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.showNoData = /**
     * @private
     * @return {?}
     */
    function () {
        this.noData = this.filteredItems.length === 0;
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.toggleGroupedMenuItem = /**
     * @private
     * @return {?}
     */
    function () {
        this.groupedMenuItem['isOpened'] = !this.collapsedMenu && this.allowCollapseMenu;
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.updateMenu = /**
     * @private
     * @return {?}
     */
    function () {
        this.menuInitialized = true;
        this.setMenuExtraProperties();
        this.filteredItems = this.menus.slice();
        this.menuPrevious = JSON.stringify(this.menus);
        this.validateMenus(this.menus);
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuComponent.prototype.validateCollapseClass = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var wrapper = this.element.nativeElement.parentNode;
        this.renderer[this.collapsedMenu && this.allowCollapseMenu ? 'addClass' : 'removeClass'](wrapper, 'thf-collapsed-menu');
    };
    ThfMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-menu', template: "<div *ngIf=\"menuMobileOpened\" class=\"thf-menu-overlay\" (click)=\"toggleMenuMobile()\"></div> <div class=\"thf-menu-mobile thf-clickable\" (click)=\"toggleMenuMobile()\"> <span class=\"thf-icon thf-icon-menu\"></span> </div> <div class=\"thf-menu\" [ngClass]=\"{ 'thf-menu-animation' : menuMobileOpened }\"> <div class=\"thf-menu-header-container\" [class.thf-menu-header-filter]=\"filter\"> <a href=\"./\"> <div [ngClass]=\"allowCollapseMenu && collapsedMenu ? 'thf-menu-panel-logo' : 'thf-menu-logo'\"></div> </a> <a *ngIf=\"enableCollapseButton\" class=\"thf-collapse-button-icon thf-clickable\" (click)=\"toggleMenuCollapse()\"> </a> <thf-menu-filter *ngIf=\"filter && !collapsedMenu\" [t-loading]=\"filterLoading\" (t-filter)=\"debounceFilter($event)\"> </thf-menu-filter> </div> <nav class=\"thf-menu-container\"> <!-- Inner e outer para esconder scroll --> <div class=\"thf-menu-outer\"> <div class=\"thf-menu-inner\"> <div *ngIf=\"noData\" class=\"thf-menu-item-wrapper\"> <div class=\"thf-menu-item-first\"> <div class=\"thf-menu-icon-container thf-menu-item-no-data\"> <span class=\"thf-icon thf-icon-info thf-menu-icon-item thf-lg-2\"></span> <div class=\"thf-lg-10 thf-menu-icon-label\"> {{literals.itemNotFound}} </div> </div> </div> </div> <div *ngFor=\"let menu of filteredItems, let menuIndex = index;\" class=\"thf-menu-item-wrapper\"> <thf-menu-item [class.thf-menu-item-first]=\"menuIndex === 0\" [t-action]=\"menu.action\" [t-collapsed-menu]=\"collapsedMenu\" [t-id]=\"menu.id\" [t-label]=\"menu.label\" [t-icon]=\"allowIcons ? menu.icon : null\" [t-level]=\"menu.level\" [t-link]=\"menu.link\" [t-short-label]=\"menu.shortLabel\" [t-sub-items]=\"menu.subItems\" [t-type]=\"menu.type\"> </thf-menu-item> </div> </div> </div> </nav> <div *ngIf=\"allowCollapseMenu && collapsedMenu\" class=\"thf-collapse-button-bottom thf-clickable\" (click)=\"toggleMenuCollapse()\"> <a class=\"thf-collapse-button-bottom-icon\"><span class=\"thf-icon thf-icon-menu\"></span></a> </div> </div> ",
                    providers: [ThfMenuItemsService, ThfMenuService]
                },] },
    ];
    /** @nocollapse */
    ThfMenuComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: router.Router },
        { type: ThfMenuItemsService },
        { type: i0.ChangeDetectorRef },
        { type: ThfMenuService }
    ]; };
    return ThfMenuComponent;
}(ThfMenuBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que apresenta o campo de pesquisa no thf-menu.
 */
var ThfMenuFilterComponent = /** @class */ (function () {
    function ThfMenuFilterComponent() {
        // Variável necessária para o thf-clean identificar que deve ser criado.
        this.clean = true;
        this.filter = new i0.EventEmitter();
    }
    /**
     * @param {?} search
     * @return {?}
     */
    ThfMenuFilterComponent.prototype.filterItems = /**
     * @param {?} search
     * @return {?}
     */
    function (search) {
        this.filter.emit(search);
    };
    ThfMenuFilterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-menu-filter', template: "<div class=\"thf-menu-filter-container\"> <input #inputFilter type=\"text\" class=\"thf-menu-filter\" placeholder=\"Pesquisar\" (keyup)=\"filterItems(inputFilter.value)\"> <div class=\"thf-menu-filter-search-icon-container\"> <span *ngIf=\"!loading\" class=\"thf-icon thf-menu-filter-icon thf-icon-search\"></span> <span *ngIf=\"loading\" class=\"thf-icon thf-menu-filter-icon thf-loading-icon\"></span> </div> <div class=\"thf-menu-filter-close-icon-container\"> <thf-clean [t-element-ref]=\"inputFilterElement\" (t-change-event)=\"filterItems(inputFilter.value)\"></thf-clean> </div> </div> "
                },] },
    ];
    ThfMenuFilterComponent.propDecorators = {
        loading: [{ type: i0.Input, args: ['t-loading',] }],
        inputFilterElement: [{ type: i0.ViewChild, args: ['inputFilter', { read: i0.ElementRef },] }],
        filter: [{ type: i0.Output, args: ['t-filter',] }]
    };
    return ThfMenuFilterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que implementa cada item do thf-menu.
 */
var ThfMenuItemComponent = /** @class */ (function () {
    function ThfMenuItemComponent(menuItemsService) {
        this.menuItemsService = menuItemsService;
        this.maxHeight = 0;
        this.subItemSize = 74;
    }
    /**
     * @return {?}
     */
    ThfMenuItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfMenuItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // subscribe to menu component messages
        this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(function (menu) {
            _this.processMenuItem(menu);
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMenuItemComponent.prototype.clickMenuItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked({
                link: this.link,
                action: this.action,
                id: this.id,
                icon: this.icon,
                label: this.label,
                level: this.level,
                subItems: this.subItems,
                isSelected: this.isSelected,
                isOpened: this.isOpened,
                shortLabel: this.shortLabel,
                type: this.type
            });
        }
    };
    /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @param {?} activatedByRoute
     * @return {?}
     */
    ThfMenuItemComponent.prototype.accordionAnimation = /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @param {?} activatedByRoute
     * @return {?}
     */
    function (menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
        if (this.id === menuOpened['id']) {
            this.maxHeight = this.subItems.length * this.subItemSize;
        }
        if (hasSubItemOpened) {
            this.maxHeight = menuOpened['isOpened'] ?
                (this.maxHeight + menuOpened.subItems.length * this.subItemSize) :
                (this.maxHeight - menuOpened.subItems.length * this.subItemSize);
            if (activatedByRoute) {
                this.maxHeight = this.getMinimumHeight(0, this, menuActive);
            }
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuItemComponent.prototype.activateMenu = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.isSelected = menu && this.id === menu.id;
    };
    /**
     * @private
     * @param {?} minimumHeight
     * @param {?} menuItem
     * @param {?} menuActive
     * @return {?}
     */
    ThfMenuItemComponent.prototype.getMinimumHeight = /**
     * @private
     * @param {?} minimumHeight
     * @param {?} menuItem
     * @param {?} menuActive
     * @return {?}
     */
    function (minimumHeight, menuItem, menuActive) {
        minimumHeight += this.subItemSize;
        if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
            for (var index = 0; index < menuItem.subItems.length; index++) {
                minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
            }
        }
        return minimumHeight;
    };
    /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?=} activatedByRoute
     * @return {?}
     */
    ThfMenuItemComponent.prototype.groupedMenu = /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?=} activatedByRoute
     * @return {?}
     */
    function (menuActive, menuOpened, activatedByRoute) {
        if (activatedByRoute === void 0) { activatedByRoute = false; }
        /** @type {?} */
        var hasSubItemOpened = (menuOpened && this.id !== menuOpened['id']) ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
        this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
        this.isSelected = (menuActive && !this.isOpened) ? this.hasSubItem(this.subItems, menuActive['id']) : false;
        if (!this.isOpened) {
            this.maxHeight = 0;
            return;
        }
        this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
    };
    /**
     * @private
     * @param {?} subItems
     * @param {?} id
     * @return {?}
     */
    ThfMenuItemComponent.prototype.hasSubItem = /**
     * @private
     * @param {?} subItems
     * @param {?} id
     * @return {?}
     */
    function (subItems, id) {
        var _this = this;
        if (subItems) {
            return subItems.some(function (item) {
                return item['id'] === id ? true : _this.hasSubItem(item.subItems, id);
            });
        }
    };
    /**
     * @private
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @return {?}
     */
    ThfMenuItemComponent.prototype.isMenuOpened = /**
     * @private
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @return {?}
     */
    function (menuOpened, hasSubItemOpened) {
        if (menuOpened) {
            return (this.id === menuOpened['id']) ? menuOpened['isOpened'] : hasSubItemOpened;
        }
        return false;
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuItemComponent.prototype.processMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (this.type === 'internalLink') {
            this.activateMenu(menu.active);
            return;
        }
        if (this.type === 'subItems') {
            this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
            return;
        }
    };
    ThfMenuItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-menu-item', template: "<!-- menu com link interno --> <a *ngIf=\"type === 'internalLink'\" class=\"thf-menu-item-link\" [routerLink]=\"link\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu com link externo --> <a *ngIf=\"type === 'externalLink'\" class=\"thf-menu-item-link\" [href]=\"link\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu sem link --> <a *ngIf=\"type === 'noLink'\" class=\"thf-menu-item-link\" href=\"javascript:;\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu com sub itens --> <div *ngIf=\"type === 'subItems'\" class=\"thf-menu-item-link thf-clickable\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate;\"></ng-container> <div [hidden]=\"collapsedMenu\" class=\"thf-menu-sub-items\" [style.maxHeight.px]=\"maxHeight\"> <div *ngFor=\"let subItem of subItems\"> <thf-menu-item [t-action]=\"subItem.action\" [t-id]=\"subItem.id\" [t-label]=\"subItem.label\" [t-level]=\"subItem.level\" [t-link]=\"subItem.link\" [t-sub-items]=\"subItem.subItems\" [t-type]=\"subItem.type\"> </thf-menu-item> </div> </div> </div> <ng-template #menuItemTemplate> <div class=\"thf-menu-item\" [class.thf-menu-icon-container]=\"level === 1 && icon\" [class.thf-menu-item-selected]=\"isSelected\" [class.thf-menu-item-level-two]=\"level === 2\" [class.thf-menu-item-level-three]=\"level === 3\" [class.thf-menu-item-level-four]=\"level === 4\" [class.thf-menu-item-grouper-up]=\"type === 'subItems' && isOpened\" [class.thf-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\" (click)=\"clickMenuItem($event);\"> <span *ngIf=\"level === 1 && icon\" class=\"thf-icon {{icon}} thf-menu-icon-item\"></span> <span *ngIf=\"type === 'subItems' && !collapsedMenu\" class=\"thf-icon thf-menu-group-icon\" [class.thf-icon-arrow-up]=\"isOpened\" [class.thf-icon-arrow-down]=\"!isOpened\"> </span> <div [class.thf-menu-icon-label]=\"level === 1 && icon\"> {{ label }} </div> <div *ngIf=\"collapsedMenu\" class=\"thf-menu-short-label\">{{ shortLabel }}</div> </div> </ng-template> "
                },] },
    ];
    /** @nocollapse */
    ThfMenuItemComponent.ctorParameters = function () { return [
        { type: ThfMenuItemsService }
    ]; };
    ThfMenuItemComponent.propDecorators = {
        action: [{ type: i0.Input, args: ['t-action',] }],
        collapsedMenu: [{ type: i0.Input, args: ['t-collapsed-menu',] }],
        icon: [{ type: i0.Input, args: ['t-icon',] }],
        id: [{ type: i0.Input, args: ['t-id',] }],
        isOpened: [{ type: i0.Input, args: ['t-is-opened',] }],
        isSelected: [{ type: i0.Input, args: ['t-is-selected',] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        level: [{ type: i0.Input, args: ['t-level',] }],
        link: [{ type: i0.Input, args: ['t-link',] }],
        shortLabel: [{ type: i0.Input, args: ['t-short-label',] }],
        subItems: [{ type: i0.Input, args: ['t-sub-items',] }],
        type: [{ type: i0.Input, args: ['t-type',] }]
    };
    return ThfMenuItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-menu.
 */
var ThfMenuModule = /** @class */ (function () {
    function ThfMenuModule() {
    }
    ThfMenuModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule,
                        ThfFieldModule
                    ],
                    declarations: [
                        ThfMenuComponent,
                        ThfMenuFilterComponent,
                        ThfMenuItemComponent
                    ],
                    exports: [
                        ThfMenuComponent
                    ]
                },] },
    ];
    return ThfMenuModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
 * em páginas internas, externas da aplicação ou aciona uma ação.
 *
 * O componente `thf-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
 * itens de menu como textos, links para redirecionamento, ações e ícones.
 */
var ThfMenuPanelBaseComponent = /** @class */ (function () {
    function ThfMenuPanelBaseComponent() {
    }
    Object.defineProperty(ThfMenuPanelBaseComponent.prototype, "menus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._menus;
        },
        /** Lista dos itens do `thf-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
        set: /**
         * Lista dos itens do `thf-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         * @param {?} menus
         * @return {?}
         */
        function (menus) {
            this._menus = Array.isArray(menus) ? menus : [];
            this.setMenuExtraProperties(this._menus);
            this.validateMenus(this._menus);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.setMenuExtraProperties = /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        var _this = this;
        menus.forEach(function (menuItem) { return _this.setMenuItemProperties((/** @type {?} */ (menuItem))); });
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.setMenuItemProperties = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        menuItem.id = menuItem.id || uuid.v4();
        menuItem.type = this.setMenuType(menuItem);
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.setMenuType = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.validateMenu = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (!menuItem.label) {
            throw new Error('O atributo ThfMenuPanelItem.label não pode ser vazio.');
        }
        if (!menuItem.icon) {
            throw new Error('O atributo ThfMenuPanelItem.icon não pode ser vazio.');
        }
    };
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    ThfMenuPanelBaseComponent.prototype.validateMenus = /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        var _this = this;
        menus.forEach(function (menu) { return _this.validateMenu(menu); });
    };
    ThfMenuPanelBaseComponent.propDecorators = {
        menus: [{ type: i0.Input, args: ['t-menus',] }]
    };
    return ThfMenuPanelBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a comunicação entre os items do thf-menu-panel.
 */
var ThfMenuPanelItemsService = /** @class */ (function () {
    function ThfMenuPanelItemsService() {
        this.subjectChild = new rxjs.Subject();
        this.subjectParent = new rxjs.Subject();
    }
    // Recebe do thf-menu-panel-item sua informação de click.
    // Recebe do thf-menu-panel-item sua informação de click.
    /**
     * @return {?}
     */
    ThfMenuPanelItemsService.prototype.receiveFromChildMenuClicked = 
    // Recebe do thf-menu-panel-item sua informação de click.
    /**
     * @return {?}
     */
    function () {
        return this.subjectChild.asObservable();
    };
    // Recebe do thf-menu-panel as informações processadas do click de um thf-menu-panel-item.
    // Recebe do thf-menu-panel as informações processadas do click de um thf-menu-panel-item.
    /**
     * @return {?}
     */
    ThfMenuPanelItemsService.prototype.receiveFromParentMenuClicked = 
    // Recebe do thf-menu-panel as informações processadas do click de um thf-menu-panel-item.
    /**
     * @return {?}
     */
    function () {
        return this.subjectParent.asObservable();
    };
    // Envia informações do click do thf-menu-panel-item para o thf-menu
    // Envia informações do click do thf-menu-panel-item para o thf-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelItemsService.prototype.sendToParentMenuClicked = 
    // Envia informações do click do thf-menu-panel-item para o thf-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectChild.next(menu);
    };
    // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.
    // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelItemsService.prototype.sendToChildMenuClicked = 
    // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectParent.next(menu);
    };
    ThfMenuPanelItemsService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfMenuPanelItemsService;
}());

var __extends$47 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfMenuPanelBaseComponent
 *
 * \@description
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     ThfModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '\@angular/core';
 *
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * \@NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * \@example
 *
 * <example name="thf-menu-panel-basic" title="Totvs Menu Panel Basic">
 *   <file name="sample-thf-menu-panel-basic/sample-thf-menu-panel-basic.component.html"> </file>
 *   <file name="sample-thf-menu-panel-basic/sample-thf-menu-panel-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-menu-panel-labs" title="Totvs Menu Panel Labs">
 *   <file name="sample-thf-menu-panel-labs/sample-thf-menu-panel-labs.component.html"> </file>
 *   <file name="sample-thf-menu-panel-labs/sample-thf-menu-panel-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-menu-panel-customer" title="Totvs Menu Panel - Customers">
 *   <file name="sample-thf-menu-panel-customer/sample-thf-menu-panel-customer.component.html"> </file>
 *   <file name="sample-thf-menu-panel-customer/sample-thf-menu-panel-customer.component.ts"> </file>
 * </example>
 */
var ThfMenuPanelComponent = /** @class */ (function (_super) {
    __extends$47(ThfMenuPanelComponent, _super);
    function ThfMenuPanelComponent(viewRef, location, menuItemsService, router$$1) {
        var _this = _super.call(this) || this;
        _this.location = location;
        _this.menuItemsService = menuItemsService;
        _this.router = router$$1;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfMenuPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfMenuPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
    };
    /**
     * @private
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    ThfMenuPanelComponent.prototype.activateMenuByUrl = /**
     * @private
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    function (urlPath, menus) {
        var _this = this;
        if (menus) {
            return menus.some(function (menu) {
                if (getFormattedLink(menu.link) === urlPath) {
                    _this.activateMenuItem(menu);
                    return true;
                }
            });
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelComponent.prototype.activateMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.activeMenuItem = menu;
        this.linkActive = getFormattedLink(menu.link);
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, activatedByRoute: true });
    };
    /**
     * @private
     * @param {?} urlPath
     * @return {?}
     */
    ThfMenuPanelComponent.prototype.checkActiveMenuByUrl = /**
     * @private
     * @param {?} urlPath
     * @return {?}
     */
    function (urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelComponent.prototype.clickMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (menu.action) {
            callFunction(menu.action, this.parentRef, menu);
        }
        if (menu.type === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu.type === 'internalLink') {
            this.activateMenuItem(menu);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuPanelComponent.prototype.subscribeToRoute = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.routeSubscription = this.router.events.subscribe(function (rounterEvent) {
            if (rounterEvent instanceof router.NavigationEnd) {
                _this.checkActiveMenuByUrl(_this.location.path());
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuPanelComponent.prototype.subscribeToMenuItem = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.itemSubscription =
            this.menuItemsService.receiveFromChildMenuClicked().subscribe(function (menu) { return _this.clickMenuItem(menu); });
    };
    ThfMenuPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-menu-panel', template: "<div class=\"thf-menu-panel\"> <div class=\"thf-menu-panel-logo-container\"> <a href=\"./\"> <div class=\"thf-menu-panel-logo\"></div> </a> </div> <nav class=\"thf-menu-panel-container\"> <div class=\"thf-menu-panel-inner\"> <div *ngFor=\"let menu of menus, let menuIndex = index;\" class=\"thf-menu-panel-item-wrapper\"> <thf-menu-panel-item [class.thf-menu-panel-item-first]=\"menuIndex === 0\" [t-menu-item-internal]=\"menu\"> </thf-menu-panel-item> </div> </div> </nav> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfMenuPanelComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: common.Location },
        { type: ThfMenuPanelItemsService },
        { type: router.Router }
    ]; };
    return ThfMenuPanelComponent;
}(ThfMenuPanelBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que implementa cada item do thf-menu-panel.
 */
var ThfMenuPanelItemComponent = /** @class */ (function () {
    function ThfMenuPanelItemComponent(menuItemsService) {
        this.menuItemsService = menuItemsService;
    }
    /**
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemsSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // subscribe to menu component messages
        this.subscribeMenuClickedFromParent();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.clickMenuItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked(this.menuItemInternal);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.activateMenu = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.menuItemInternal.isSelected = this.menuItemInternal.id === menu.id;
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.processMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (this.menuItemInternal.type === 'internalLink') {
            this.activateMenu(menu.active);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfMenuPanelItemComponent.prototype.subscribeMenuClickedFromParent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.itemsSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(function (menu) {
            _this.processMenuItem(menu);
        });
    };
    ThfMenuPanelItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-menu-panel-item', template: "<!-- menu com link interno --> <a *ngIf=\"menuItemInternal.type === 'internalLink'\" [routerLink]=\"menuItemInternal.link\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu com link externo --> <a *ngIf=\"menuItemInternal.type === 'externalLink'\" [href]=\"menuItemInternal.link\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <!-- menu sem link --> <a *ngIf=\"menuItemInternal.type === 'noLink'\" href=\"javascript:;\"> <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container> </a> <ng-template #menuItemTemplate> <div class=\"thf-menu-panel-item\" t-tooltip-position=\"right\" [class.thf-menu-panel-item-selected]=\"menuItemInternal.isSelected\" [t-tooltip]=\"menuItemInternal.label\" (click)=\"clickMenuItem($event);\"> <span class=\"thf-icon {{menuItemInternal.icon}}\"></span> </div> </ng-template> "
                },] },
    ];
    /** @nocollapse */
    ThfMenuPanelItemComponent.ctorParameters = function () { return [
        { type: ThfMenuPanelItemsService }
    ]; };
    ThfMenuPanelItemComponent.propDecorators = {
        menuItemInternal: [{ type: i0.Input, args: ['t-menu-item-internal',] }]
    };
    return ThfMenuPanelItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-menu-panel.
 */
var ThfMenuPanelModule = /** @class */ (function () {
    function ThfMenuPanelModule() {
    }
    ThfMenuPanelModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule,
                        ThfFieldModule,
                        ThfTooltipModule
                    ],
                    declarations: [
                        ThfMenuPanelComponent,
                        ThfMenuPanelItemComponent
                    ],
                    exports: [
                        ThfMenuPanelComponent
                    ],
                    providers: [
                        ThfMenuPanelItemsService
                    ]
                },] },
    ];
    return ThfMenuPanelModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **thf-page** é utilizado como container principal para os componentes thf-page-header, thf-page-content
 * e para as ações dos componentes thf-page-edit e thf-page-detail.
 *
 * Quando estiver sendo utilizado o componente thf-menu junto ao thf-page, ambos devem estar no mesmo nível
 * e inseridos em uma div com a classe **thf-wrapper**. Esta classe será responsável por fazer os cálculos
 * necessários de alinhamento dos componentes.
 *
 * O componente **thf-page** também pode ser utilizado sem o thf-menu e neste caso o corpo da página deve ser
 * definido com a altura de 100% para que o thf-page maximize seu tamanho.
 * ```
 * html, body {
 *   height:100%;
 * }
 * ```
 */
var ThfPageBaseComponent = /** @class */ (function () {
    function ThfPageBaseComponent() {
    }
    return ThfPageBaseComponent;
}());

var __extends$48 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfPageBaseComponent
 */
var ThfPageComponent = /** @class */ (function (_super) {
    __extends$48(ThfPageComponent, _super);
    function ThfPageComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfPageComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-page', template: "<div class=\"thf-page\"> <ng-content> </ng-content> </div> "
                },] },
    ];
    return ThfPageComponent;
}(ThfPageBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **thf-page-content** é utilizado como o container para o conteúdo da página.
 */
var ThfPageContentBaseComponent = /** @class */ (function () {
    function ThfPageContentBaseComponent() {
    }
    return ThfPageContentBaseComponent;
}());

var __extends$49 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfPageContentBaseComponent
 */
var ThfPageContentComponent = /** @class */ (function (_super) {
    __extends$49(ThfPageContentComponent, _super);
    function ThfPageContentComponent(renderer) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.contentOpacity = 0;
        _this.height = '90%';
        _this.overflowY = 'none';
        _this.initializeListeners();
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageContentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.recalculateHeaderSize();
    };
    /**
     * @return {?}
     */
    ThfPageContentComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @return {?}
     */
    ThfPageContentComponent.prototype.recalculateHeaderSize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            /** @type {?} */
            var pageHeaderElement = document.querySelector('div.thf-page-header');
            _this.setHeightContent(pageHeaderElement);
            _this.contentOpacity = 1;
        });
    };
    /**
     * @param {?} thfPageHeader
     * @return {?}
     */
    ThfPageContentComponent.prototype.setHeightContent = /**
     * @param {?} thfPageHeader
     * @return {?}
     */
    function (thfPageHeader) {
        /** @type {?} */
        var bodyHeight = document.body.clientHeight;
        /** @type {?} */
        var pageHeaderHeight = thfPageHeader ? thfPageHeader.offsetTop + thfPageHeader.offsetHeight : 0;
        /** @type {?} */
        var newHeight = bodyHeight - pageHeaderHeight;
        this.height = newHeight + "px";
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageContentComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function () {
            _this.recalculateHeaderSize();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageContentComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    ThfPageContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-page-content', template: "<div class=\"thf-page-content\" [style.height]=\"height\" [style.opacity]=\"contentOpacity\" [style.overflow-y]=\"overflowY\"> <ng-content></ng-content> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfPageContentComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 }
    ]; };
    return ThfPageContentComponent;
}(ThfPageContentBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-page-default` é utilizado como o container principal para as telas sem um template definido.
 * @abstract
 */
var ThfPageDefaultBaseComponent = /** @class */ (function () {
    function ThfPageDefaultBaseComponent() {
        this._actions = [];
    }
    Object.defineProperty(ThfPageDefaultBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface `ThfPageAction`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface `ThfPageAction`.
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            this._actions = Array.isArray(actions) ? actions : [];
            this.setDropdownActions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageDefaultBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /** Título da página. */
        set: /**
         * Título da página.
         * @param {?} title
         * @return {?}
         */
        function (title) {
            this._title = title;
            this.thfPageContent.recalculateHeaderSize();
        },
        enumerable: true,
        configurable: true
    });
    ThfPageDefaultBaseComponent.propDecorators = {
        thfPageContent: [{ type: i0.ViewChild, args: [ThfPageContentComponent,] }],
        actions: [{ type: i0.Input, args: ['t-actions',] }],
        breadcrumb: [{ type: i0.Input, args: ['t-breadcrumb',] }],
        title: [{ type: i0.Input, args: ['t-title',] }]
    };
    return ThfPageDefaultBaseComponent;
}());

var __extends$50 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfPageDefaultBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-default-basic" title="Totvs Page Default Basic">
 *  <file name="sample-thf-page-default-basic/sample-thf-page-default-basic.component.html"> </file>
 *  <file name="sample-thf-page-default-basic/sample-thf-page-default-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-default-labs" title="Totvs Page Default Labs">
 *  <file name="sample-thf-page-default-labs/sample-thf-page-default-labs.component.html"> </file>
 *  <file name="sample-thf-page-default-labs/sample-thf-page-default-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-default-dashboard" title="Totvs Page Default - Dashboard">
 *  <file name="sample-thf-page-default-dashboard/sample-thf-page-default-dashboard.component.html"> </file>
 *  <file name="sample-thf-page-default-dashboard/sample-thf-page-default-dashboard.component.ts"> </file>
 *  <file name="sample-thf-page-default-dashboard/sample-thf-page-default-dashboard.service.ts"> </file>
 * </example>
 */
var ThfPageDefaultComponent = /** @class */ (function (_super) {
    __extends$50(ThfPageDefaultComponent, _super);
    function ThfPageDefaultComponent(viewRef, renderer, router$$1) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.router = router$$1;
        _this.limitPrimaryActions = 3;
        _this.maxWidthMobile = 480;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listen('window', 'resize', function (event) {
            _this.onResize(event);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.setDropdownActions();
    };
    /**
     * @param {?} action
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.actionIsDisabled = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.callAction = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.hasPageHeader = /**
     * @return {?}
     */
    function () {
        return !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.onResize = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var width = ((/** @type {?} */ (event.target))).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.setIsMobile = /**
     * @private
     * @return {?}
     */
    function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.setDropdownActions = /**
     * @return {?}
     */
    function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    ThfPageDefaultComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-page-default', template: "<thf-page> <!-- HEADER --> <thf-page-header *ngIf=\"hasPageHeader()\" [t-breadcrumb]=\"breadcrumb\" [t-title]=\"title\"> <!-- OPERATIONS --> <div class=\"thf-page-header-actions\"> <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\" t-label=\"Outras ações\" [t-actions]=\"dropdownActions\"> </thf-dropdown> <thf-button *ngIf=\"actions.length === 3 && actions[2] && !isMobile\" [t-disabled]=\"actionIsDisabled(actions[2])\" [t-label]=\"actions[2].label\" (t-click)=\"callAction(actions[2])\"> </thf-button> <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\" [t-disabled]=\"actionIsDisabled(actions[1])\" [t-label]=\"actions[1].label\" (t-click)=\"callAction(actions[1])\"> </thf-button> <thf-button *ngIf=\"actions[0]\" t-type=\"primary\" [t-disabled]=\"actionIsDisabled(actions[0])\" [t-icon]=\"actions[0].icon\" [t-label]=\"actions[0].label\" (t-click)=\"callAction(actions[0])\"> </thf-button> </div> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content></ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /** @nocollapse */
    ThfPageDefaultComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i0.Renderer2 },
        { type: router.Router }
    ]; };
    return ThfPageDefaultComponent;
}(ThfPageDefaultBaseComponent));

var __assign$15 = (undefined && undefined.__assign) || function () {
    __assign$15 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$15.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfPageDetailLiteralsDefault = {
    en: (/** @type {?} */ ({
        back: 'Back',
        edit: 'Edit',
        remove: 'Remove'
    })),
    es: (/** @type {?} */ ({
        back: 'Volver',
        edit: 'Editar',
        remove: 'Eliminar'
    })),
    pt: (/** @type {?} */ ({
        back: 'Voltar',
        edit: 'Editar',
        remove: 'Remover'
    }))
};
/**
 * \@description
 *
 * O componente **thf-page-detail** é utilizado como container principal para a tela de detalhamento de um registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o thf-page-detail,
 * são elas:
 *  - Voltar (função: back);
 *  - Editar (função: edit);
 *  - Remover (função: remove);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 */
var ThfPageDetailBaseComponent = /** @class */ (function () {
    function ThfPageDetailBaseComponent() {
    }
    Object.defineProperty(ThfPageDetailBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfPageDetailLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-page-detail`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageDetailLiterals = {
         *    edit: 'Edição',
         *    remove: 'Exclusão',
         *    back: 'Menu'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageDetailLiterals = {
         *    remove: 'Excluir registro permanentemente'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-detail
         *   [t-literals]="customLiterals">
         * </thf-page-detail>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-page-detail`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageDetailLiterals = {
         *    edit: 'Edição',
         *    remove: 'Exclusão',
         *    back: 'Menu'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageDetailLiterals = {
         *    remove: 'Excluir registro permanentemente'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-detail
         *   [t-literals]="customLiterals">
         * </thf-page-detail>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign$15({}, thfPageDetailLiteralsDefault[thfLocaleDefault], thfPageDetailLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfPageDetailLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageDetailBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /** Título da página. */
        set: /**
         * Título da página.
         * @param {?} title
         * @return {?}
         */
        function (title) {
            this._title = title;
            this.thfPageContent.recalculateHeaderSize();
        },
        enumerable: true,
        configurable: true
    });
    ThfPageDetailBaseComponent.propDecorators = {
        thfPageContent: [{ type: i0.ViewChild, args: [ThfPageContentComponent,] }],
        breadcrumb: [{ type: i0.Input, args: ['t-breadcrumb',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        title: [{ type: i0.Input, args: ['t-title',] }]
    };
    return ThfPageDetailBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description Verifica se existe a função dentro do contexto.
 *
 * @param {?} action Nome da função que será verificada a existência no parentContext.
 *
 * @param {?} parentContext Contexto da qual a função será verificada.
 * @return {?}
 */
function hasAction(action, parentContext) {
    return parentContext && parentContext[action];
}
/**
 * \@description Executa a função cujo o nome foi passado por parâmetro.
 *
 * @param {?} action Nome da função que será executada no parentContext.
 *
 * @param {?} parentContext Contexto da qual a função será executada.
 * @return {?}
 */
function callAction(action, parentContext) {
    if (hasAction(action, parentContext)) {
        parentContext[action]();
    }
}

var __extends$51 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfPageDetailBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-detail-basic" title="Totvs Page Detail Basic">
 *  <file name="sample-thf-page-detail-basic/sample-thf-page-detail-basic.component.html"> </file>
 *  <file name="sample-thf-page-detail-basic/sample-thf-page-detail-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-detail-labs" title="Totvs Page Detail Labs">
 *  <file name="sample-thf-page-detail-labs/sample-thf-page-detail-labs.component.html"> </file>
 *  <file name="sample-thf-page-detail-labs/sample-thf-page-detail-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-detail-user" title="Totvs Page Detail - User">
 *  <file name="sample-thf-page-detail-user/sample-thf-page-detail-user.component.html"> </file>
 *  <file name="sample-thf-page-detail-user/sample-thf-page-detail-user.component.ts"> </file>
 * </example>
 */
var ThfPageDetailComponent = /** @class */ (function (_super) {
    __extends$51(ThfPageDetailComponent, _super);
    function ThfPageDetailComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.callActionFn = callAction;
        _this.hasActionFn = hasAction;
        _this.parentContext = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageDetailComponent.prototype.hasAnyAction = /**
     * @return {?}
     */
    function () {
        return this.hasActionFn('back', this.parentContext) ||
            this.hasActionFn('edit', this.parentContext) ||
            this.hasActionFn('remove', this.parentContext);
    };
    /**
     * @param {?} property
     * @return {?}
     */
    ThfPageDetailComponent.prototype.hasEditFn = /**
     * @param {?} property
     * @return {?}
     */
    function (property) {
        if (property === 'icon') {
            return this.hasActionFn('edit', this.parentContext) ? '' : 'thf-icon-delete';
        }
        else if (property === 'type') {
            return this.hasActionFn('edit', this.parentContext) ? 'default' : 'primary';
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} property
     * @return {?}
     */
    ThfPageDetailComponent.prototype.hasEditOrRemoveFn = /**
     * @param {?} property
     * @return {?}
     */
    function (property) {
        if (property === 'icon') {
            return this.hasActionFn('edit', this.parentContext) || this.hasActionFn('remove', this.parentContext) ? '' : 'thf-icon-arrow-left';
        }
        else if (property === 'type') {
            return this.hasActionFn('edit', this.parentContext) || this.hasActionFn('remove', this.parentContext) ? 'default' : 'primary';
        }
        else {
            return '';
        }
    };
    /**
     * @return {?}
     */
    ThfPageDetailComponent.prototype.hasPageHeader = /**
     * @return {?}
     */
    function () {
        return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
    };
    ThfPageDetailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-page-detail', template: "<thf-page> <!-- HEADER --> <thf-page-header *ngIf=\"hasPageHeader()\" [t-breadcrumb]=\"breadcrumb\" [t-title]=\"title\"> <!-- OPERATIONS --> <div *ngIf=\"hasAnyAction()\" class=\"thf-page-header-actions\"> <thf-button *ngIf=\"hasActionFn('back', parentContext)\" [t-icon]=\"hasEditOrRemoveFn('icon')\" [t-label]=\"literals.back\" [t-type]=\"hasEditOrRemoveFn('type')\" (t-click)=\"callActionFn('back', parentContext)\"> </thf-button> <thf-button *ngIf=\"hasActionFn('remove', parentContext)\" [t-icon]=\"hasEditFn('icon')\" [t-label]=\"literals.remove\" [t-type]=\"hasEditFn('type')\" (t-click)=\"callActionFn('remove', parentContext)\"> </thf-button> <thf-button *ngIf=\"hasActionFn('edit', parentContext)\" t-icon=\"thf-icon-edit\" t-type=\"primary\" [t-label]=\"literals.edit\" (t-click)=\"callActionFn('edit', parentContext)\"> </thf-button> </div> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /** @nocollapse */
    ThfPageDetailComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };
    return ThfPageDetailComponent;
}(ThfPageDetailBaseComponent));

var __assign$16 = (undefined && undefined.__assign) || function () {
    __assign$16 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$16.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfPageEditLiteralsDefault = {
    en: (/** @type {?} */ ({
        cancel: 'Cancel',
        save: 'Save',
        saveNew: 'Save and New'
    })),
    es: (/** @type {?} */ ({
        cancel: 'Cancelar',
        save: 'Guardar',
        saveNew: 'Guardar y Nuevo'
    })),
    pt: (/** @type {?} */ ({
        cancel: 'Cancelar',
        save: 'Salvar',
        saveNew: 'Salvar e Novo'
    }))
};
/**
 * \@description
 *
 * O componente **thf-page-edit** é utilizado como container principal para tela de edição ou adição de um
 * registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o thf-page-edit,
 * são elas:
 *  - Cancelar (função: cancel);
 *  - Salvar e Novo (função: saveNew);
 *  - Salvar (função: save);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 *
 * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade t-disable-submit.
 * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
 * regra de negócio não tenha sido atendida.
 */
var ThfPageEditBaseComponent = /** @class */ (function () {
    function ThfPageEditBaseComponent() {
    }
    Object.defineProperty(ThfPageEditBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfPageEditLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-page-edit`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageEditLiterals = {
         *    cancel: 'Voltar',
         *    save: 'Confirmar',
         *    saveNew: 'Confirmar e criar um novo'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageEditLiterals = {
         *    cancel: 'Cancelar processo'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-edit
         *   [t-literals]="customLiterals">
         * </thf-page-edit>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-page-edit`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageEditLiterals = {
         *    cancel: 'Voltar',
         *    save: 'Confirmar',
         *    saveNew: 'Confirmar e criar um novo'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageEditLiterals = {
         *    cancel: 'Cancelar processo'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-edit
         *   [t-literals]="customLiterals">
         * </thf-page-edit>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign$16({}, thfPageEditLiteralsDefault[thfLocaleDefault], thfPageEditLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfPageEditLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageEditBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /** Título da página. */
        set: /**
         * Título da página.
         * @param {?} title
         * @return {?}
         */
        function (title) {
            this._title = title;
            this.thfPageContent.recalculateHeaderSize();
        },
        enumerable: true,
        configurable: true
    });
    ThfPageEditBaseComponent.propDecorators = {
        thfPageContent: [{ type: i0.ViewChild, args: [ThfPageContentComponent,] }],
        breadcrumb: [{ type: i0.Input, args: ['t-breadcrumb',] }],
        disableSubmit: [{ type: i0.Input, args: ['t-disable-submit',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }],
        title: [{ type: i0.Input, args: ['t-title',] }]
    };
    return ThfPageEditBaseComponent;
}());

var __extends$52 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfPageEditBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-edit-basic" title="Totvs Page Edit Basic">
 *  <file name="sample-thf-page-edit-basic/sample-thf-page-edit-basic.component.html"> </file>
 *  <file name="sample-thf-page-edit-basic/sample-thf-page-edit-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-edit-labs" title="Totvs Page Edit Labs">
 *  <file name="sample-thf-page-edit-labs/sample-thf-page-edit-labs.component.html"> </file>
 *  <file name="sample-thf-page-edit-labs/sample-thf-page-edit-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-edit-user" title="Totvs Page Edit - User">
 *  <file name="sample-thf-page-edit-user/sample-thf-page-edit-user.component.html"> </file>
 *  <file name="sample-thf-page-edit-user/sample-thf-page-edit-user.component.ts"> </file>
 * </example>
 */
var ThfPageEditComponent = /** @class */ (function (_super) {
    __extends$52(ThfPageEditComponent, _super);
    function ThfPageEditComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.hasAction = hasAction;
        _this.callAction = callAction;
        _this.parentContext = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @param {?} icon
     * @return {?}
     */
    ThfPageEditComponent.prototype.getIcon = /**
     * @param {?} icon
     * @return {?}
     */
    function (icon) {
        if (icon === 'cancel') {
            return this.isPrimaryAction('cancel') ? 'thf-icon-close' : '';
        }
        if (icon === 'saveNew') {
            return this.isPrimaryAction('saveNew') ? 'thf-icon-ok' : '';
        }
        return '';
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ThfPageEditComponent.prototype.getType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var isCancelPrimaryAction = type === 'cancel' && this.isPrimaryAction('cancel');
        /** @type {?} */
        var isSaveNewPrimaryAction = type === 'saveNew' && this.isPrimaryAction('saveNew');
        return isCancelPrimaryAction || isSaveNewPrimaryAction ? 'primary' : 'default';
    };
    /**
     * @return {?}
     */
    ThfPageEditComponent.prototype.hasAnyAction = /**
     * @return {?}
     */
    function () {
        return hasAction('cancel', this.parentContext) || hasAction('saveNew', this.parentContext) || hasAction('save', this.parentContext);
    };
    /**
     * @return {?}
     */
    ThfPageEditComponent.prototype.hasPageHeader = /**
     * @return {?}
     */
    function () {
        return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    ThfPageEditComponent.prototype.isPrimaryAction = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        /** @type {?} */
        var hasSaveAction = !hasAction('save', this.parentContext);
        if (action === 'saveNew') {
            return hasSaveAction;
        }
        if (action === 'cancel') {
            return !hasAction('saveNew', this.parentContext) && hasSaveAction;
        }
        return false;
    };
    ThfPageEditComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-page-edit', template: "<thf-page> <!-- HEADER --> <thf-page-header *ngIf=\"hasPageHeader()\" [t-breadcrumb]=\"breadcrumb\" [t-title]=\"title\"> <!-- OPERATIONS --> <div *ngIf=\"hasAnyAction()\" class=\"thf-page-header-actions\"> <thf-button *ngIf=\"hasAction('cancel', parentContext)\" [t-icon]=\"getIcon('cancel')\" [t-label]=\"literals.cancel\" [t-type]=\"getType('cancel')\" (t-click)=\"callAction('cancel', parentContext)\"> </thf-button> <thf-button *ngIf=\"hasAction('saveNew', parentContext)\" [t-disabled]=\"disableSubmit\" [t-icon]=\"getIcon('saveNew')\" [t-label]=\"literals.saveNew\" [t-type]=\"getType('saveNew')\" (t-click)=\"callAction('saveNew', parentContext)\"> </thf-button> <thf-button *ngIf=\"hasAction('save', parentContext)\" t-icon=\"thf-icon-ok\" t-type=\"primary\" [t-disabled]=\"disableSubmit\" [t-label]=\"literals.save\" (t-click)=\"callAction('save', parentContext)\"> </thf-button> </div> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /** @nocollapse */
    ThfPageEditComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };
    return ThfPageEditComponent;
}(ThfPageEditBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **thf-page-header** é responsável pelo título da página e container dos botões de ações dos componentes
 * thf-page-list e thf-page-base.
 */
var ThfPageHeaderBaseComponent = /** @class */ (function () {
    function ThfPageHeaderBaseComponent() {
    }
    Object.defineProperty(ThfPageHeaderBaseComponent.prototype, "breadcrumb", {
        get: /**
         * @return {?}
         */
        function () {
            return this._breadcrumb;
        },
        /** Objeto com propriedades do breadcrumb. */
        set: /**
         * Objeto com propriedades do breadcrumb.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._breadcrumb = value;
        },
        enumerable: true,
        configurable: true
    });
    ThfPageHeaderBaseComponent.propDecorators = {
        breadcrumb: [{ type: i0.Input, args: ['t-breadcrumb',] }],
        title: [{ type: i0.Input, args: ['t-title',] }]
    };
    return ThfPageHeaderBaseComponent;
}());

var __extends$53 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 * \@docsExtends ThfPageHeaderBaseComponent
 */
var ThfPageHeaderComponent = /** @class */ (function (_super) {
    __extends$53(ThfPageHeaderComponent, _super);
    function ThfPageHeaderComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfPageHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-page-header', template: "<div class=\"thf-page-header\"> <!-- Breadcrumb --> <div class=\"thf-page-header-breadcrumb\" *ngIf=\"breadcrumb && breadcrumb.items.length\"> <thf-breadcrumb [t-favorite-service]=\"breadcrumb.favorite\" [t-items]=\"breadcrumb.items\" [t-params-service]=\"breadcrumb.params\"> </thf-breadcrumb> </div>  <!-- Titulo --> <h1 class=\"thf-page-header-title\" *ngIf=\"title\"> {{ title }} </h1> <!-- Operações --> <ng-content></ng-content> </div> "
                },] },
    ];
    return ThfPageHeaderComponent;
}(ThfPageHeaderBaseComponent));

var __extends$54 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$17 = (undefined && undefined.__assign) || function () {
    __assign$17 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$17.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfPageListLiteralsDefault = {
    en: (/** @type {?} */ ({
        otherActions: 'Other actions'
    })),
    es: (/** @type {?} */ ({
        otherActions: 'Otras acciones'
    })),
    pt: (/** @type {?} */ ({
        otherActions: 'Outras ações'
    }))
};
/**
 * \@description
 *
 * O componente `thf-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [thf-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`thf-disclaimer-group`](/documentation/thf-disclaimer-group).
 * @abstract
 */
var ThfPageListBaseComponent = /** @class */ (function (_super) {
    __extends$54(ThfPageListBaseComponent, _super);
    function ThfPageListBaseComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ThfPageListBaseComponent.prototype, "disclaimerGroup", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disclaimerGroup;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                value = (/** @type {?} */ ({}));
            }
            this._disclaimerGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageListBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfPageListLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-page-list`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Mais ações'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Ações da página'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-list
         *   [t-literals]="customLiterals">
         * </thf-page-list>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-page-list`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Mais ações'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Ações da página'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-list
         *   [t-literals]="customLiterals">
         * </thf-page-list>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign$17({}, thfPageListLiteralsDefault[thfLocaleDefault], thfPageListLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfPageListLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfPageListBaseComponent.propDecorators = {
        breadcrumb: [{ type: i0.Input, args: ['t-breadcrumb',] }],
        disclaimerGroup: [{ type: i0.Input, args: ['t-disclaimer-group',] }],
        filter: [{ type: i0.Input, args: ['t-filter',] }],
        literals: [{ type: i0.Input, args: ['t-literals',] }]
    };
    return ThfPageListBaseComponent;
}(ThfPageDefaultBaseComponent));

var __extends$55 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfPageListBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-list-basic" title="Totvs Page List Basic">
 *  <file name="sample-thf-page-list-basic/sample-thf-page-list-basic.component.html"> </file>
 *  <file name="sample-thf-page-list-basic/sample-thf-page-list-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-list-labs" title="Totvs Page List Labs">
 *  <file name="sample-thf-page-list-labs/sample-thf-page-list-labs.component.html"> </file>
 *  <file name="sample-thf-page-list-labs/sample-thf-page-list-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-list-hiring-processes" title="Totvs Page List - Hiring Processes">
 *  <file name="sample-thf-page-list-hiring-processes/sample-thf-page-list-hiring-processes.component.html"> </file>
 *  <file name="sample-thf-page-list-hiring-processes/sample-thf-page-list-hiring-processes.component.ts"> </file>
 *  <file name="sample-thf-page-list-hiring-processes/sample-thf-page-list-hiring-processes.service.ts"> </file>
 * </example>
 */
var ThfPageListComponent = /** @class */ (function (_super) {
    __extends$55(ThfPageListComponent, _super);
    function ThfPageListComponent(viewRef, renderer, router$$1) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.router = router$$1;
        _this.limitPrimaryActions = 3;
        _this.isRecalculate = true;
        _this.maxWidthMobile = 480;
        _this.callFunction = callFunction;
        _this.parentRef = viewRef['_view']['component'];
        _this.initializeListeners();
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.advancedSearch = this.initFixedLiterals();
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setIsMobile();
        this.setDropdownActions();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfPageListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.setDropdownActions();
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @param {?} action
     * @return {?}
     */
    ThfPageListComponent.prototype.actionIsDisabled = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfPageListComponent.prototype.callAction = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.hasPageHeader = /**
     * @return {?}
     */
    function () {
        return !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfPageListComponent.prototype.onResize = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var width = ((/** @type {?} */ (event.target))).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageListComponent.prototype.setIsMobile = /**
     * @private
     * @return {?}
     */
    function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.setDropdownActions = /**
     * @return {?}
     */
    function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    ThfPageListComponent.prototype.callActionFilter = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.callFunction(this.filter[field], this.parentRef);
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.initFixedLiterals = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var locale = browserLanguage();
        /** @type {?} */
        var literal = {
            pt: {
                advancedSearch: 'Busca avançada'
            },
            en: {
                advancedSearch: 'Advanced search'
            },
            es: {
                advancedSearch: 'Búsqueda avanzada'
            }
        };
        return literal[locale].advancedSearch;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ThfPageListComponent.prototype.onkeypress = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (key === 13) {
            this.callActionFilter('action');
        }
    };
    /**
     * @param {?} newModel
     * @return {?}
     */
    ThfPageListComponent.prototype.changeModel = /**
     * @param {?} newModel
     * @return {?}
     */
    function (newModel) {
        this.parentRef[this.filter.ngModel] = newModel;
    };
    // Recebe evento change do disclaimer e recalcula tela
    // Recebe evento change do disclaimer e recalcula tela
    /**
     * @param {?} disclaimers
     * @return {?}
     */
    ThfPageListComponent.prototype.onChangeDisclaimerGroup = 
    // Recebe evento change do disclaimer e recalcula tela
    /**
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        if ((disclaimers && disclaimers.length && this.isRecalculate) || (disclaimers.length === 0 && !this.isRecalculate)) {
            this.thfPageContent.recalculateHeaderSize();
            this.isRecalculate = !this.isRecalculate;
        }
        if (this.disclaimerGroup && this.disclaimerGroup.change) {
            this.disclaimerGroup.change(disclaimers);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageListComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.onResize(event);
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageListComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    ThfPageListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-page-list', template: "<thf-page> <!-- HEADER --> <thf-page-header *ngIf=\"hasPageHeader()\" [class.thf-page-list-header-padding]=\"filter && !actions.length\" [t-breadcrumb]=\"breadcrumb\" [t-title]=\"title\"> <!-- OPERATIONS --> <div class=\"thf-page-list-operations\"> <div class=\"thf-page-list-actions\" [class.thf-page-list-actions-padding]=\"filter\"> <thf-button *ngIf=\"actions[0]\" t-type=\"primary\" [t-disabled]=\"actionIsDisabled(actions[0])\" [t-icon]=\"actions[0].icon\" [t-label]=\"actions[0].label\" (t-click)=\"callAction(actions[0])\"> </thf-button> <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\" [t-disabled]=\"actionIsDisabled(actions[1])\" [t-label]=\"actions[1].label\" (t-click)=\"callAction(actions[1])\"> </thf-button> <thf-button *ngIf=\"actions.length == 3 && actions[2] && !isMobile\" [t-disabled]=\"actionIsDisabled(actions[2])\" [t-label]=\"actions[2].label\" (t-click)=\"callAction(actions[2])\"> </thf-button> <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\" [t-actions]=\"dropdownActions\" [t-label]=\"literals.otherActions\"> </thf-dropdown> </div> <!-- FILTER --> <div class=\"thf-page-list-filter-wrapper\" *ngIf=\"filter\"> <div class=\"thf-field-container-content thf-page-filter-content\"> <div class=\"thf-field-icon-container-right\"> <span class=\"thf-icon thf-icon-search thf-field-icon\" (click)=\"callActionFilter('action')\"> </span> </div> <input class=\"thf-input thf-input-icon-right\" name=\"model\" type=\"text\" [ngModel]=\"parentRef[filter.ngModel]\" [placeholder]=\"filter.placeholder || ''\" (keypress)=\"onkeypress($event.keyCode)\" (ngModelChange)=\"changeModel($event)\"> </div> <div class=\"thf-page-list-filter-search\" *ngIf=\"filter.advancedAction\"> <span class=\"thf-page-list-filter-search-link\" tabindex=\"0\" (click)=\"callActionFilter('advancedAction')\" (keydown.enter)=\"callActionFilter('advancedAction')\"> {{advancedSearch}} </span> </div> </div> </div> <!-- DISCLAIMER --> <thf-disclaimer-group *ngIf=\"!!disclaimerGroup\" [class.thf-page-list-disclaimer-group]=\"!!disclaimerGroup?.disclaimers?.length\" [t-disclaimers]=\"disclaimerGroup?.disclaimers\" [t-hide-remove-all]=\"disclaimerGroup?.hideRemoveAll\" [t-title]=\"disclaimerGroup?.title\" (t-change)=\"onChangeDisclaimerGroup($event)\"> </thf-disclaimer-group> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content></ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /** @nocollapse */
    ThfPageListComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i0.Renderer2 },
        { type: router.Router }
    ]; };
    ThfPageListComponent.propDecorators = {
        thfPageContent: [{ type: i0.ViewChild, args: [ThfPageContentComponent,] }]
    };
    return ThfPageListComponent;
}(ThfPageListBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo dos componentes thf-page-default, thf-page-edit, thf-page-list, thf-page-login e thf-page-detail.
 */
var ThfPageModule = /** @class */ (function () {
    function ThfPageModule() {
    }
    ThfPageModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        router.RouterModule,
                        ThfBreadcrumbModule,
                        ThfButtonModule,
                        ThfDisclaimerGroupModule,
                        ThfDropdownModule,
                        ThfFieldModule,
                        ThfModalModule
                    ],
                    declarations: [
                        ThfPageComponent,
                        ThfPageContentComponent,
                        ThfPageDefaultComponent,
                        ThfPageDetailComponent,
                        ThfPageEditComponent,
                        ThfPageHeaderComponent,
                        ThfPageListComponent
                    ],
                    exports: [
                        ThfPageDetailComponent,
                        ThfPageDefaultComponent,
                        ThfPageEditComponent,
                        ThfPageListComponent
                    ]
                },] },
    ];
    return ThfPageModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_POPOVER_DEFAULT_POSITION = 'right';
/** @type {?} */
var THF_POPOVER_DEFAULT_TRIGGER = 'click';
/** @type {?} */
var THF_POPOVER_TRIGGERS = ['click', 'hover'];
/**
 * \@description
 *
 * O componente `thf-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
 * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
 *
 * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
 * [**thf-tooltip**](https://thf.totvs.com.br/documentation/thf-tooltip?view=doc).
 *
 * Para conteúdos maiores recomenda-se o uso do [**thf-modal**](https://thf.totvs.com.br/documentation/thf-modal?view=doc).
 *
 * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
 * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
 * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
 *
 * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
 * Os eventos permitidos são: `click` e `hover`.
 *
 */
var ThfPopoverBaseComponent = /** @class */ (function () {
    function ThfPopoverBaseComponent() {
        // Controla se o popover fica oculto ou visível, por padrão é oculto.
        this.isHidden = true;
        this._hideArrow = false;
        this._position = THF_POPOVER_DEFAULT_POSITION;
        this._trigger = THF_POPOVER_DEFAULT_TRIGGER;
    }
    Object.defineProperty(ThfPopoverBaseComponent.prototype, "hideArrow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideArrow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a seta do componente *popover*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a seta do componente *popover*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideArrow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPopoverBaseComponent.prototype, "position", {
        get: /**
         * @return {?}
         */
        function () {
            return this._position;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição que o thf-popover abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-popover no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-popover no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-popover no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-popover abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-popover abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-popover abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-popover no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-popover no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-popover no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-popover acima do componente alvo.
         * - `top-right`: Posiciona o thf-popover acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-popover acima e à esquerda do componente alvo.
         *
         *
         * @default right
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a posição que o thf-popover abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o thf-popover no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o thf-popover no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o thf-popover no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o thf-popover abaixo do componente alvo.
         * - `bottom-left`: Posiciona o thf-popover abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o thf-popover abaixo e à direita do componente alvo.
         * - `left`: Posiciona o thf-popover no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o thf-popover no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o thf-popover no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o thf-popover acima do componente alvo.
         * - `top-right`: Posiciona o thf-popover acima e à direita do componente alvo.
         * - `top-left`: Posiciona o thf-popover acima e à esquerda do componente alvo.
         *
         *
         * \@default right
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._position = THF_CONTROL_POSITIONS.includes(value) ? value : THF_POPOVER_DEFAULT_POSITION;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPopoverBaseComponent.prototype, "trigger", {
        get: /**
         * @return {?}
         */
        function () {
            return this._trigger;
        },
        /**
         * @description
         *
         * Define o evento que abrirá o thf-popover.
         *
         * Valores válidos:
         *  - `click`: Abre ao clicar no componente alvo.
         *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
         *
         * @default click
         * @optional
         */
        set: /**
         * \@description
         *
         * Define o evento que abrirá o thf-popover.
         *
         * Valores válidos:
         *  - `click`: Abre ao clicar no componente alvo.
         *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
         *
         * \@default click
         * \@optional
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._trigger = THF_POPOVER_TRIGGERS.includes(value) ? value : THF_POPOVER_DEFAULT_TRIGGER;
        },
        enumerable: true,
        configurable: true
    });
    ThfPopoverBaseComponent.propDecorators = {
        hideArrow: [{ type: i0.Input, args: ['t-hide-arrow',] }],
        position: [{ type: i0.Input, args: ['t-position',] }],
        target: [{ type: i0.Input, args: ['t-target',] }],
        title: [{ type: i0.Input, args: ['t-title',] }],
        trigger: [{ type: i0.Input, args: ['t-trigger',] }]
    };
    return ThfPopoverBaseComponent;
}());

var __extends$56 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@docsExtends ThfPopoverBaseComponent
 *
 * \@example
 *
 * <example name="thf-popover-basic" title="Totvs Popover Basic">
 *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.html"> </file>
 *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popover-labs" title="Totvs Popover Labs">
 *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.html"> </file>
 *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popover-credit-card" title="Totvs Popover - Credit Card">
 *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.html"> </file>
 *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.ts"> </file>
 * </example>
 */
var ThfPopoverComponent = /** @class */ (function (_super) {
    __extends$56(ThfPopoverComponent, _super);
    function ThfPopoverComponent(renderer, thfControlPosition) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.thfControlPosition = thfControlPosition;
        _this.arrowDirection = 'left';
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initEventListenerFunction();
        /** @type {?} */
        var popoverOffset = 8;
        this.thfControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
        this.setRendererListenInit();
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.isHidden = true;
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.debounceResize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.setPopoverPosition();
        }, 200);
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.addScrollEventListener();
        this.isHidden = false;
        this.setOpacity(0);
        setTimeout(function () {
            _this.thfControlPosition.adjustPosition(_this.position);
            _this.arrowDirection = _this.thfControlPosition.getArrowDirection();
            _this.setOpacity(1);
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfPopoverComponent.prototype.setOpacity = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.popoverElement.nativeElement.style.opacity = value;
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.setPopoverPosition = /**
     * @return {?}
     */
    function () {
        this.thfControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.thfControlPosition.getArrowDirection();
    };
    /**
     * @return {?}
     */
    ThfPopoverComponent.prototype.setRendererListenInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            if (!_this.isHidden) {
                _this.debounceResize();
            }
        });
        if (this.trigger === 'hover') {
            this.mouseEnterListener = this.renderer.listen(this.target.nativeElement, 'mouseenter', function (event) {
                _this.open();
            });
            this.mouseLeaveListener = this.renderer.listen(this.target.nativeElement, 'mouseleave', function (event) {
                _this.close();
            });
        }
        else {
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.togglePopup(event);
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfPopoverComponent.prototype.togglePopup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isHidden && !this.popoverElement.nativeElement.contains(event.target) &&
            !this.target.nativeElement.contains(event.target)) {
            this.close();
        }
        else if (this.target.nativeElement.contains(event.target)) {
            this.popoverElement.nativeElement.hidden ? this.open() : this.close();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopoverComponent.prototype.addScrollEventListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopoverComponent.prototype.initEventListenerFunction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventListenerFunction = function () {
            _this.setPopoverPosition();
        };
    };
    /**
     * @private
     * @return {?}
     */
    ThfPopoverComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.mouseEnterListener) {
            this.mouseEnterListener();
        }
        if (this.mouseLeaveListener) {
            this.mouseLeaveListener();
        }
        this.resizeListener();
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    };
    ThfPopoverComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-popover', template: "<div [hidden]=\"isHidden\" class=\"thf-popover\" #popoverElement> <div *ngIf=\"!hideArrow\" class=\"thf-popover-arrow thf-arrow-{{ arrowDirection }}\"></div> <div class=\"thf-popover-content\"> <span *ngIf=\"title\" class=\"thf-popover-title\">{{ title }}</span> <ng-content></ng-content> </div> </div> ",
                    providers: [ThfControlPositionService]
                },] },
    ];
    /** @nocollapse */
    ThfPopoverComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: ThfControlPositionService }
    ]; };
    ThfPopoverComponent.propDecorators = {
        popoverElement: [{ type: i0.ViewChild, args: ['popoverElement', { read: i0.ElementRef },] }]
    };
    return ThfPopoverComponent;
}(ThfPopoverBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-popover.
 */
var ThfPopoverModule = /** @class */ (function () {
    function ThfPopoverModule() {
    }
    ThfPopoverModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfPopoverComponent],
                    exports: [ThfPopoverComponent]
                },] },
    ];
    return ThfPopoverModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para o conjunto de círculos que faz a passagem de itens do `thf-slide`.
 */
var ThfSlideCirclesComponent = /** @class */ (function () {
    function ThfSlideCirclesComponent() {
        /**
         * Evento emitido ao clicar em um controle.
         */
        this.click = new i0.EventEmitter();
    }
    ThfSlideCirclesComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-slide-circles', template: "<div class=\"thf-slide-circles\"> <ng-container *ngFor=\"let item of items; let index = index;\"> <div class=\"thf-slide-circle\" [class.thf-slide-active-circle]=\"index === currentSlideIndex\" (click)=\"click.emit(index)\"> </div> </ng-container> </div> "
                },] },
    ];
    ThfSlideCirclesComponent.propDecorators = {
        currentSlideIndex: [{ type: i0.Input, args: ['t-current-slide-index',] }],
        items: [{ type: i0.Input, args: ['t-items',] }],
        click: [{ type: i0.Output, args: ['t-click',] }]
    };
    return ThfSlideCirclesComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfSlideIntervalDefault = 4000;
/**
 * \@description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[t-slide-content-template](/documentation/thf-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 * @abstract
 */
var ThfSlideBaseComponent = /** @class */ (function () {
    function ThfSlideBaseComponent() {
        this._interval = thfSlideIntervalDefault;
    }
    Object.defineProperty(ThfSlideBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * @default `336`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * \@default `336`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = convertToInt(value);
            this.setSlideHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideBaseComponent.prototype, "interval", {
        get: /**
         * @return {?}
         */
        function () {
            return this._interval;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * @default `4000`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * \@default `4000`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._interval = convertToInt(value, thfSlideIntervalDefault);
            this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideBaseComponent.prototype, "slides", {
        get: /**
         * @return {?}
         */
        function () {
            return this._slides;
        },
        /**
         * @description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `ThfSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         */
        set: /**
         * \@description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `ThfSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._slides = value;
            this.setSlideItems(value);
            if (value && value.length) {
                this.startSlide();
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfSlideBaseComponent.propDecorators = {
        height: [{ type: i0.Input, args: ['t-height',] }],
        interval: [{ type: i0.Input, args: ['t-interval',] }],
        slides: [{ type: i0.Input, args: ['t-slides',] }]
    };
    return ThfSlideBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfSlideComponent
 *
 * \@description
 *
 * Esta diretiva permite a customização de um slide.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item do slide corrente.
 *  - Índice: `index` determina o índice do slide corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-slide
 *   [t-slides]="[{ id: 1, name: 'Register', email: 'register\@totvs.com' }]">
 *
 *   <ng-template t-slide-content-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="item.id"></thf-info>
 *       <thf-info class="thf-md-6" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-slide>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-slide
 *    [t-slides]="[{ id: 1, name: 'Register', email: 'register\@totvs.com' }]">
 *
 *    <div *t-slide-content-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-slide>
 * ...
 *
 * ```
 */
var ThfSlideContentTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfSlideContentTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfSlideContentTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[t-slide-content-template]'
                },] },
    ];
    /** @nocollapse */
    ThfSlideContentTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    return ThfSlideContentTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para cada item do thf-slide.
 */
var ThfSlideItemComponent = /** @class */ (function () {
    function ThfSlideItemComponent() {
        this.isIEOrEdge = isIEOrEdge();
    }
    /**
     * @return {?}
     */
    ThfSlideItemComponent.prototype.setLinkType = /**
     * @return {?}
     */
    function () {
        if (!this.template && this.link) {
            return this.link.startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    };
    ThfSlideItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-slide-item', template: "<div #slideItem class=\"thf-slide-item\" [class.thf-slide-item-background-image]=\"!template && isIEOrEdge\" [style.background-image]=\"!template && isIEOrEdge ? 'url(' + image + ')' : ''\" [ngSwitch]=\"setLinkType()\"> <!-- slide com link interno --> <a *ngSwitchCase=\"'internalLink'\"  class=\"thf-slide-item-link\"  [routerLink]=\"link\"> <ng-container  [ngTemplateOutlet]=\"slideItemImage\"  [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\"> </ng-container> </a> <!-- slide com link externo --> <a  *ngSwitchCase=\"'externalLink'\" class=\"thf-slide-item-link\"  [href]=\"link\"> <ng-container  [ngTemplateOutlet]=\"slideItemImage\"  [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\"> </ng-container> </a> <!-- slide sem link --> <a  *ngSwitchCase=\"'noLink'\" [ngClass]=\"action ? 'thf-slide-item-link' : 'thf-slide-item-no-link'\" (click)=\"action ? action(data) : undefined\"> <ng-container  [ngTemplateOutlet]=\"template ? slideItemTemplate : slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image, data: data }}\"> </ng-container> </a> </div> <ng-template #slideItemTemplate let-item='item'> <div *ngIf=\"template\" class=\"thf-slide-item-content\"> <ng-template [ngTemplateOutlet]=\"template.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item.data, index: index }\"> </ng-template> </div> </ng-template> <ng-template #slideItemImage let-item='item'> <img *ngIf=\"item.image && !isIEOrEdge\" class=\"thf-slide-image\" [alt]=\"item.alt\" [src]=\"item.image\" [style.height.px]=\"imageHeight\"> </ng-template> "
                },] },
    ];
    ThfSlideItemComponent.propDecorators = {
        itemElement: [{ type: i0.ViewChild, args: ['slideItem',] }],
        action: [{ type: i0.Input, args: ['t-action',] }],
        alt: [{ type: i0.Input, args: ['t-alt',] }],
        data: [{ type: i0.Input, args: ['t-data',] }],
        image: [{ type: i0.Input, args: ['t-image',] }],
        imageHeight: [{ type: i0.Input, args: ['t-image-height',] }],
        template: [{ type: i0.Input, args: ['t-template',] }],
        link: [{ type: i0.Input, args: ['t-link',] }]
    };
    return ThfSlideItemComponent;
}());

var __extends$57 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfSlideDefaultHeight = 336;
/** @type {?} */
var thfSlideIntervalMin = 1000;
/** @type {?} */
var thfSlideMinHeight = 192;
/** @type {?} */
var thfSlideTiming = '250ms ease';
/**
 * \@docsExtends ThfSlideBaseComponent
 *
 * \@example
 * <example name="thf-slide-basic" title="Totvs Slide Basic">
 *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.html"> </file>
 *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-labs" title="Totvs Slide Labs">
 *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.html"> </file>
 *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-useful-articles" title="Totvs Slide - Useful articles">
 *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.html"> </file>
 *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-landscapes" title="Totvs Slide - Landscapes">
 *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.html"> </file>
 *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.ts"> </file>
 * </example>
 */
var ThfSlideComponent = /** @class */ (function (_super) {
    __extends$57(ThfSlideComponent, _super);
    function ThfSlideComponent(builder) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.isLoaded = false;
        _this.currentSlideIndex = 0;
        _this.slideItems = [];
        return _this;
    }
    Object.defineProperty(ThfSlideComponent.prototype, "hasElements", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideComponent.prototype, "isImageSlide", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !this.slideContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideComponent.prototype, "offset", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.currentSlideIndex * this.slideItemWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideComponent.prototype, "hasSlides", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.slides && !!this.slides.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.slide) {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        }
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfSlideComponent.prototype.goToItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.nextControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.previous = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = ((this.currentSlideIndex - 1) + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    ThfSlideComponent.prototype.previousControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    };
    /**
     * @param {?} height
     * @return {?}
     */
    ThfSlideComponent.prototype.setSlideHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        this.setHeight(height);
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    ThfSlideComponent.prototype.animate = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        if (this.hasElements) {
            /** @type {?} */
            var animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    ThfSlideComponent.prototype.buildTransitionAnimation = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        return this.builder.build([
            animations.animate(thfSlideTiming, animations.keyframes([animations.style({ transform: "translateX(-" + offset + "px)" })]))
        ]);
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    ThfSlideComponent.prototype.createArrayForTemplate = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        this.slideItems = slides.slice();
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    ThfSlideComponent.prototype.createArrayFromSlides = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        var _this = this;
        /** @type {?} */
        var isStringArray = slides.every(function (item) { return typeof item === 'string'; });
        if (isStringArray) {
            slides.forEach(function (element) { return _this.slideItems.push({ image: "" + element }); });
        }
        else {
            this.slideItems = (/** @type {?} */ (slides)).slice();
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    ThfSlideComponent.prototype.setDefaultHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height <= thfSlideMinHeight || !height && this.isImageSlide) {
            this.slide.nativeElement.style.height = thfSlideDefaultHeight + "px";
            this.imageHeight = thfSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    ThfSlideComponent.prototype.setHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height > thfSlideMinHeight) {
            this.slide.nativeElement.style.height = height + "px";
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfSlideComponent.prototype.setSlideItemWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ThfSlideComponent.prototype.cancelInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        clearInterval(this.setInterval);
    };
    /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    ThfSlideComponent.prototype.setSlideItems = /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ThfSlideComponent.prototype.startSlide = /**
     * @protected
     * @return {?}
     */
    function () {
        this.setSlideHeight(this.height);
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    };
    /**
     * @protected
     * @return {?}
     */
    ThfSlideComponent.prototype.startInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval = this.hasSlides && this.hasElements ? setInterval(function () { _this.next(); }, this.interval) : undefined;
    };
    ThfSlideComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-slide', template: "<div class=\"thf-slide-wrapper\"> <div class=\"thf-slide-outer\"> <div class=\"thf-slide-inner\" #slide> <ng-container *ngFor=\"let item of slideItems; let index = index;\"> <thf-slide-item [t-action]=\"item.action\" [t-data]=\"item\" [t-image]=\"item.image\" [t-image-height]=\"imageHeight\" [t-template]=\"slideContentTemplate\" [t-alt]=\"item.alt\" [t-link]=\"item.link\"> </thf-slide-item> </ng-container> </div> <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\"  t-control=\"previous\" (t-click)=\"previousControl()\"> </thf-slide-control> <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\" t-control=\"next\" (t-click)=\"nextControl()\"> </thf-slide-control> </div> <thf-slide-circles *ngIf=\"hasSlides && slides.length > 1\" [t-current-slide-index]=\"currentSlideIndex\" [t-items]=\"slideItems\" (t-click)=\"goToItem($event)\"> </thf-slide-circles> </div> ",
                },] },
    ];
    /** @nocollapse */
    ThfSlideComponent.ctorParameters = function () { return [
        { type: animations.AnimationBuilder }
    ]; };
    ThfSlideComponent.propDecorators = {
        slideContentTemplate: [{ type: i0.ContentChild, args: [ThfSlideContentTemplateDirective,] }],
        slide: [{ type: i0.ViewChild, args: ['slide',] }],
        itemsElements: [{ type: i0.ViewChildren, args: [ThfSlideItemComponent,] }],
        onResize: [{ type: i0.HostListener, args: ['window:resize',] }]
    };
    return ThfSlideComponent;
}(ThfSlideBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a seta que controla a passagem de itens do `thf-slide`.
 */
var ThfSlideControlComponent = /** @class */ (function () {
    function ThfSlideControlComponent() {
        /**
         * Evento emitido ao clicar em um controle.
         */
        this.click = new i0.EventEmitter();
    }
    ThfSlideControlComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-slide-control', template: "<div class=\"thf-slide-control-{{control}}\"> <div class=\"thf-slide-arrow-circle\" (click)=\"click.emit();\"> <div class=\"thf-slide-arrow thf-slide-arrow-{{control}}\"></div> </div> </div> "
                },] },
    ];
    ThfSlideControlComponent.propDecorators = {
        control: [{ type: i0.Input, args: ['t-control',] }],
        click: [{ type: i0.Output, args: ['t-click',] }]
    };
    return ThfSlideControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `thf-slide`.
 *
 * > Para o correto funcionamento do componente `thf-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 * import { ThfModule } from '\@totvs/thf-ui/thf.module';
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     ThfModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var ThfSlideModule = /** @class */ (function () {
    function ThfSlideModule() {
    }
    ThfSlideModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule,
                        ThfContainerModule
                    ],
                    declarations: [
                        ThfSlideCirclesComponent,
                        ThfSlideComponent,
                        ThfSlideControlComponent,
                        ThfSlideContentTemplateDirective,
                        ThfSlideItemComponent,
                    ],
                    exports: [
                        ThfSlideComponent,
                        ThfSlideContentTemplateDirective
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfSlideModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ThfStepperStatus = {
    /** Enum para informações do tipo Completo */
    Done: 'done',
    /** Enum para informações do tipo Ativo */
    Active: 'active',
    /** Enum para informações do tipo Padrão */
    Default: 'default',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var THF_STEPPER_MODES = ['horizontal', 'vertical'];
/** @type {?} */
var THF_STEPPER_MODE_DEFAULT = 'horizontal';
/**
 * \@description
 *
 * O `thf-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Através dos modes, é possível identificar se o stepper será disposto horizontal ou verticalmente na tela
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-stepper` por página.
 */
var ThfStepperBaseComponent = /** @class */ (function () {
    function ThfStepperBaseComponent() {
        this._barLeftTop = 'left';
        this._barRightBottom = 'right';
        this._mode = THF_STEPPER_MODE_DEFAULT;
        this._sequential = true;
        this._step = 1;
        this._steps = [];
        /**
         * Ação que será executada quando o usuário mudar o passo do `thf-stepper`.
         */
        this.onChangeStep = new i0.EventEmitter();
    }
    Object.defineProperty(ThfStepperBaseComponent.prototype, "mode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a disposição do `thf-stepper`.
         *
         * Valore válidos:
         *  - `horizontal`: estilo padrão do `thf-stepper`.
         *  - `vertical`: deixa o `thf-stepper` disposto verticalmente na página
         *
         * @default `horizontal`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a disposição do `thf-stepper`.
         *
         * Valore válidos:
         *  - `horizontal`: estilo padrão do `thf-stepper`.
         *  - `vertical`: deixa o `thf-stepper` disposto verticalmente na página
         *
         * \@default `horizontal`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._mode = THF_STEPPER_MODES.includes(value) ? value : THF_STEPPER_MODE_DEFAULT;
            this.toggleBarClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        /**
         * @optional
         *
         * @description
         *
         * Controla o passo atual do `thf-stepper`.
         *
         * @default `1`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Controla o passo atual do `thf-stepper`.
         *
         * \@default `1`
         * @param {?} step
         * @return {?}
         */
        function (step) {
            if (step >= 1 && step <= this.steps.length) {
                this._step = step;
                this._steps[this._step - 1].status = ThfStepperStatus.Active;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "steps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._steps;
        },
        /** Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
        set: /**
         * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         * @param {?} steps
         * @return {?}
         */
        function (steps) {
            this._steps = Array.isArray(steps) ? steps : [];
            this._steps.forEach(function (step) { return step.status = ThfStepperStatus.Default; });
            this.step = 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "sequential", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sequential;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o `thf-stepper` será sequencial ou aleatório.
         *
         * @default `true`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o `thf-stepper` será sequencial ou aleatório.
         *
         * \@default `true`
         * @param {?} sequential
         * @return {?}
         */
        function (sequential) {
            this._sequential = (/** @type {?} */ (sequential)) === '' ? true : convertToBoolean(sequential);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "barLeftTop", {
        get: /**
         * @return {?}
         */
        function () {
            return this._barLeftTop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "barRightBottom", {
        get: /**
         * @return {?}
         */
        function () {
            return this._barRightBottom;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfStepperBaseComponent.prototype.toggleBarClass = /**
     * @return {?}
     */
    function () {
        if (this._mode === THF_STEPPER_MODE_DEFAULT) {
            this._barLeftTop = 'left';
            this._barRightBottom = 'right';
        }
        else {
            this._barLeftTop = 'top';
            this._barRightBottom = 'bottom';
        }
    };
    ThfStepperBaseComponent.propDecorators = {
        mode: [{ type: i0.Input, args: ['t-mode',] }],
        step: [{ type: i0.Input, args: ['t-step',] }],
        steps: [{ type: i0.Input, args: ['t-steps',] }],
        sequential: [{ type: i0.Input, args: ['t-sequential',] }],
        onChangeStep: [{ type: i0.Output, args: ['t-change-step',] }]
    };
    return ThfStepperBaseComponent;
}());

var __extends$58 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfStepperBaseComponent
 *
 * \@example
 *
 * <example name="thf-stepper-basic" title="Totvs Stepper Basic">
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.html"> </file>
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-labs" title="Totvs Stepper Labs">
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.html"> </file>
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-sales" title="Totvs Stepper - Sales">
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.html"> </file>
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.ts"> </file>
 * </example>
 */
var ThfStepperComponent = /** @class */ (function (_super) {
    __extends$58(ThfStepperComponent, _super);
    function ThfStepperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} stepNumber
     * @return {?}
     */
    ThfStepperComponent.prototype.changeStep = /**
     * @param {?} stepNumber
     * @return {?}
     */
    function (stepNumber) {
        if (stepNumber !== this.step && this.canJumpStep(stepNumber)) {
            this.onChangeStep.emit(stepNumber);
        }
    };
    /**
     * @param {?} stepNumber
     * @return {?}
     */
    ThfStepperComponent.prototype.canJumpStep = /**
     * @param {?} stepNumber
     * @return {?}
     */
    function (stepNumber) {
        if (!this.sequential) {
            return true;
        }
        return this.steps.slice(this.step, stepNumber - 1)
            .every(function (step) { return step.status === ThfStepperStatus.Done; });
    };
    ThfStepperComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-stepper', template: "<div class=\"thf-stepper-card-content\"> <div class=\"thf-stepper thf-stepper-{{mode}}\"> <div *ngFor=\"let step of steps; let i = index\" class=\"thf-stepper-step thf-stepper-step-{{step.status}}\" (click)=\"changeStep(i+1)\"> <div class=\"thf-stepper-circle thf-stepper-{{i < 9 ? 'one-digit' : 'two-digits'}}\"> <span class=\"thf-stepper-number\">{{i+1}}</span> </div> <div class=\"thf-stepper-title\"> {{step.label}} </div> <div class=\"thf-stepper-bar-{{barLeftTop}}\"></div> <div class=\"thf-stepper-bar-{{barRightBottom}}\"></div> </div> </div> </div> "
                },] },
    ];
    return ThfStepperComponent;
}(ThfStepperBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-stepper
 */
var ThfStepperModule = /** @class */ (function () {
    function ThfStepperModule() {
    }
    ThfStepperModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                    ],
                    declarations: [
                        ThfStepperComponent
                    ],
                    exports: [
                        ThfStepperComponent
                    ]
                },] },
    ];
    return ThfStepperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por manipular os botões de aba.
 */
var ThfTabButtonComponent = /** @class */ (function () {
    function ThfTabButtonComponent(elementRef) {
        this.elementRef = elementRef;
        // Função sera emitida quando a tab ficar ativada
        this.activated = new i0.EventEmitter();
        // Função sera emitida quando a tab ficar desabilitada ou escondida
        this.changeState = new i0.EventEmitter();
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.click = new i0.EventEmitter();
    }
    Object.defineProperty(ThfTabButtonComponent.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        // Ativa o botão
        set: 
        // Ativa o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._active = value;
            this.emitActivated();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabButtonComponent.prototype, "hide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hide;
        },
        // Oculta o botão
        set: 
        // Oculta o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hide = convertToBoolean(value);
            this.setDisplayOnHide();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfTabButtonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    };
    /**
     * @return {?}
     */
    ThfTabButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTabButtonComponent.prototype.emitActivated = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.active) {
            this.activated.emit(this);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTabButtonComponent.prototype.setDisplayOnHide = /**
     * @private
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    };
    ThfTabButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-tab-button', template: "<div class=\"thf-tab-button-md\" [class.thf-tab-button-disabled]=\"disabled\" [class.thf-tab-button-active]=\"active\" [class.thf-tab-button-sm]=\"small\" (click)=\"onClick()\"> <span class=\"thf-tab-button-label\"> {{label}} </span> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfTabButtonComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    ThfTabButtonComponent.propDecorators = {
        active: [{ type: i0.Input, args: ['t-active',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        hide: [{ type: i0.Input, args: ['t-hide',] }],
        id: [{ type: i0.Input, args: ['t-id',] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        small: [{ type: i0.Input, args: ['t-small',] }],
        activated: [{ type: i0.Output, args: ['t-activated',] }],
        changeState: [{ type: i0.Output, args: ['t-change-state',] }],
        click: [{ type: i0.Output, args: ['t-click',] }]
    };
    return ThfTabButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-tab` renderiza uma aba na qual envolve um conteúdo HTML.
 *
 * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
 * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
 *
 * > Para controlar a navegação entre diversas abas, utilizar o componente [`thf-tabs`](/documentation/thf-tabs).
 * @abstract
 */
var ThfTabBaseComponent = /** @class */ (function () {
    function ThfTabBaseComponent() {
        this._active = false;
        this._disabled = false;
        this._hide = false;
        // ID da aba
        this.id = uuid$1();
        /**
         * Método disparado ao clicar na aba.
         */
        this.click = new i0.EventEmitter();
    }
    Object.defineProperty(ThfTabBaseComponent.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        /**
         * @optional
         *
         * @description
         *
         * Ativa a aba exibindo seu conteúdo.
         *
         * > Sugere-se utilizar na aba de conteúdo inicial.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Ativa a aba exibindo seu conteúdo.
         *
         * > Sugere-se utilizar na aba de conteúdo inicial.
         *
         * \@default `false`
         * @param {?} active
         * @return {?}
         */
        function (active) {
            this._active = convertToBoolean(active);
            this.setDisplayOnActive();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a aba.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a aba.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabBaseComponent.prototype, "hide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hide;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta a aba.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta a aba.
         *
         * \@default `false`
         * @param {?} hide
         * @return {?}
         */
        function (hide) {
            this._hide = convertToBoolean(hide);
        },
        enumerable: true,
        configurable: true
    });
    ThfTabBaseComponent.propDecorators = {
        active: [{ type: i0.Input, args: ['t-active',] }],
        disabled: [{ type: i0.Input, args: ['t-disabled',] }],
        hide: [{ type: i0.Input, args: ['t-hide',] }],
        label: [{ type: i0.Input, args: ['t-label',] }],
        click: [{ type: i0.Output, args: ['t-click',] }]
    };
    return ThfTabBaseComponent;
}());

var __extends$59 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfTabBaseComponent
 */
var ThfTabComponent = /** @class */ (function (_super) {
    __extends$59(ThfTabComponent, _super);
    function ThfTabComponent(elementRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfTabComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setDisplayOnActive();
    };
    /**
     * @protected
     * @return {?}
     */
    ThfTabComponent.prototype.setDisplayOnActive = /**
     * @protected
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
    };
    ThfTabComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-tab', template: "<ng-content></ng-content> "
                },] },
    ];
    /** @nocollapse */
    ThfTabComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    return ThfTabComponent;
}(ThfTabBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para agrupamento de componentes `thf-tab-button` que os rendereiza em uma um caixa de diálogo
 * no formato de lista.
 */
var ThfTabDropdownComponent = /** @class */ (function () {
    function ThfTabDropdownComponent() {
        // Lista de abas
        this.tabs = [];
        // Evento que será emitido ao ativar uma aba
        this.activated = new i0.EventEmitter();
        // Evento que será emitido a aba for desabilitada ou ocultada
        this.changeState = new i0.EventEmitter();
        // Evento de click
        this.click = new i0.EventEmitter();
    }
    /**
     * @return {?}
     */
    ThfTabDropdownComponent.prototype.getContainerClass = /**
     * @return {?}
     */
    function () {
        return this.small ? 'thf-tab-dropdown-container-sm' : 'thf-tab-dropdown-container';
    };
    ThfTabDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-tab-dropdown', template: "<div #tabDrop class=\"thf-tab-dropdown-content thf-tab-button-md\" [class.thf-tab-button-sm]=\"small\"> <div class=\"thf-tab-button-label\"> {{ label }} <span class=\"thf-icon\" [ngClass]=\"(popover.isHidden ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up')\"> </span> </div> </div> <thf-popover #popover t-hide-arrow t-position=\"bottom\" [t-target]=\"tabDropdown\"> <div [ngClass]=\"getContainerClass()\"> <thf-tab-button *ngFor=\"let tab of tabs\" class=\"thf-tab-dropdown-button\" [class.thf-tab-dropdown-button-active]=\"tab.active\" [t-active]=\"tab.active\" [t-disabled]=\"tab.disabled\" [t-hide]=\"tab.hide\" [t-id]=\"tab.id\" [t-label]=\"tab.label\" [t-small]=\"small\" (t-activated)=\"activated.emit(tab)\" (t-change-state)=\"changeState.emit(tab)\" (t-click)=\"popover.close();click.emit(tab);\"> </thf-tab-button> </div> </thf-popover> "
                },] },
    ];
    ThfTabDropdownComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['t-label',] }],
        small: [{ type: i0.Input, args: ['t-small',] }],
        tabs: [{ type: i0.Input, args: ['t-tabs',] }],
        activated: [{ type: i0.Output, args: ['t-activated',] }],
        changeState: [{ type: i0.Output, args: ['t-change-state',] }],
        click: [{ type: i0.Output, args: ['t-click',] }],
        tabDropdown: [{ type: i0.ViewChild, args: ['tabDrop', { read: i0.ElementRef },] }]
    };
    return ThfTabDropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-tabs` é responsável por agrupar [abas](/documentation/thf-tab) dispostas numa linha horizontal,
 * ideal para facilitar a organização de conteúdos.
 *
 * Até cinco abas o componente exibe todas normalmente. Contudo, a partir de seis abas, o componente torna visível
 * apenas as quatro primeiras, agrupando todas as demais na quinta aba rotulada de **Mais**.
 *
 * > As abas que estiverem agrupadas serão dispostas numa cascata suspensa que será exibida ao clicar no botão **Mais**.
 *
 * #### Boas práticas
 *
 * - Evite utilizar uma quantidade excessiva de abas, pois irá gerar um *scroll* muito longo no `dropdown`;
 * - Evite `labels` extensos para as `tabs` pois podem quebrar seu *layout*, use `labels` diretos, curtos e intuitivos.
 */
var ThfTabsBaseComponent = /** @class */ (function () {
    function ThfTabsBaseComponent() {
        this._small = false;
    }
    Object.defineProperty(ThfTabsBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optinal
         *
         * @description
         *
         * Diminui o tamanho das abas.
         *
         * @default `false`
         */
        set: /**
         * \@optinal
         *
         * \@description
         *
         * Diminui o tamanho das abas.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ThfTabsBaseComponent.propDecorators = {
        small: [{ type: i0.Input, args: ['t-small',] }]
    };
    return ThfTabsBaseComponent;
}());

var __extends$60 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfTabsMaxNumberOfTabs = 5;
/**
 * \@docsExtends ThfTabsBaseComponent
 *
 * \@example
 *
 * <example name="thf-tabs-basic" title="Totvs Tabs Basic">
 *  <file name="sample-thf-tabs-basic/sample-thf-tabs-basic.component.html"> </file>
 *  <file name="sample-thf-tabs-basic/sample-thf-tabs-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tabs-labs" title="Totvs Tabs Labs">
 *  <file name="sample-thf-tabs-labs/sample-thf-tabs-labs.component.html"> </file>
 *  <file name="sample-thf-tabs-labs/sample-thf-tabs-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tabs-travel" title="Totvs Tabs - Travel">
 *  <file name="sample-thf-tabs-travel/sample-thf-tabs-travel.component.html"> </file>
 *  <file name="sample-thf-tabs-travel/sample-thf-tabs-travel.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tabs-business-conf" title="Totvs Tabs - Business Conference">
 *  <file name="sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.html"> </file>
 *  <file name="sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.ts"> </file>
 * </example>
 */
var ThfTabsComponent = /** @class */ (function (_super) {
    __extends$60(ThfTabsComponent, _super);
    function ThfTabsComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.maxNumberOfTabs = thfTabsMaxNumberOfTabs;
        return _this;
    }
    Object.defineProperty(ThfTabsComponent.prototype, "isShowTabDropdown", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleTabs.length > this.maxNumberOfTabs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabsComponent.prototype, "overflowedTabs", {
        // tabs que serão apresentadas na aba "Mais"
        get: 
        // tabs que serão apresentadas na aba "Mais"
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.visibleTabs.filter(function (_tab, index) { return index > (_this.maxNumberOfTabs - 2); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabsComponent.prototype, "visibleTabs", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tabs.filter(function (tab) { return !tab.hide; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.isVisibleTab = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        /** @type {?} */
        var visibleTabIndex = this.visibleTabs.findIndex(function (visibleTab) { return visibleTab.id === tab.id; });
        return (this.visibleTabs.length <= this.maxNumberOfTabs) || (visibleTabIndex < (this.maxNumberOfTabs - 1));
    };
    // Função disparada quando alguma tab ficar ativa
    // Função disparada quando alguma tab ficar ativa
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.onTabActive = 
    // Função disparada quando alguma tab ficar ativa
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        this.previousActiveTab = this.tabs.find(function (tabChild) { return tabChild.active && tabChild.id !== tab.id; });
        this.deactivateTab();
    };
    // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
    // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.onTabChangeState = 
    // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        if (tab.active) {
            tab.active = false;
            this.activeDistinctTab();
            this.changeDetector.detectChanges();
        }
    };
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    /**
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.selectedTab = 
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        tab.active = true;
        if (tab.click) {
            tab.click.emit(tab);
        }
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} _i
     * @param {?} tab
     * @return {?}
     */
    ThfTabsComponent.prototype.trackByFn = /**
     * @param {?} _i
     * @param {?} tab
     * @return {?}
     */
    function (_i, tab) {
        return tab.id;
    };
    // ativa a previousActiveTab ou primeira tab encontrada.
    // ativa a previousActiveTab ou primeira tab encontrada.
    /**
     * @private
     * @return {?}
     */
    ThfTabsComponent.prototype.activeDistinctTab = 
    // ativa a previousActiveTab ou primeira tab encontrada.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = true;
        }
        else {
            this.activeFirstTab();
        }
    };
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    /**
     * @private
     * @return {?}
     */
    ThfTabsComponent.prototype.activeFirstTab = 
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    /**
     * @private
     * @return {?}
     */
    function () {
        this.tabs.some(function (tabChild) {
            if (!tabChild.disabled && !tabChild.hide) {
                tabChild.active = true;
                return true;
            }
        });
    };
    // desativa previousActiveTab e dispara a detecção de mudança.
    // desativa previousActiveTab e dispara a detecção de mudança.
    /**
     * @private
     * @return {?}
     */
    ThfTabsComponent.prototype.deactivateTab = 
    // desativa previousActiveTab e dispara a detecção de mudança.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = false;
            this.changeDetector.detectChanges();
        }
    };
    ThfTabsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-tabs', template: "<div class=\"thf-tabs-header\"> <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\"> <thf-tab-button *ngIf=\"isVisibleTab(tab)\" class=\"thf-tab-button\" [t-active]=\"tab.active\" [t-disabled]=\"tab.disabled\" [t-id]=\"tab.id\" [t-hide]=\"tab.hide\" [t-label]=\"tab.label\" [t-small]=\"small\" (t-activated)=\"onTabActive(tab)\" (t-change-state)=\"onTabChangeState(tab)\" (t-click)=\"selectedTab(tab)\"> </thf-tab-button> </ng-container> <thf-tab-dropdown *ngIf=\"isShowTabDropdown\" class=\"thf-tab-button thf-tab-dropdown\" t-label=\"Mais\" [t-small]=\"small\" [t-tabs]=\"overflowedTabs\" (t-activated)=\"onTabActive($event)\" (t-change-state)=\"onTabChangeState($event)\" (t-click)=\"selectedTab($event)\"> </thf-tab-dropdown> </div> <div class=\"thf-tabs-container\"> <ng-content></ng-content> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfTabsComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    ThfTabsComponent.propDecorators = {
        tabs: [{ type: i0.ContentChildren, args: [ThfTabComponent,] }]
    };
    return ThfTabsComponent;
}(ThfTabsBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente thf-tabs
 */
var ThfTabsModule = /** @class */ (function () {
    function ThfTabsModule() {
    }
    ThfTabsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfPopoverModule
                    ],
                    declarations: [
                        ThfTabButtonComponent,
                        ThfTabComponent,
                        ThfTabDropdownComponent,
                        ThfTabsComponent
                    ],
                    entryComponents: [
                        ThfTabButtonComponent,
                        ThfTabDropdownComponent
                    ],
                    exports: [
                        ThfTabComponent,
                        ThfTabsComponent
                    ]
                },] },
    ];
    return ThfTabsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfToolbarActionsIconDefault = 'thf-icon-more';
/**
 * \@docsPrivate
 *
 * \@usedBy ThfToolbarComponent
 *
 * \@description
 *
 * O componente `thf-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
 */
var ThfToolbarActionsComponent = /** @class */ (function () {
    function ThfToolbarActionsComponent() {
        this._actionsIcon = thfToolbarActionsIconDefault;
    }
    Object.defineProperty(ThfToolbarActionsComponent.prototype, "actionsIcon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actionsIcon;
        },
        /** Define o ícone das ações. */
        set: /**
         * Define o ícone das ações.
         * @param {?} icon
         * @return {?}
         */
        function (icon) {
            this._actionsIcon = isTypeof(icon, 'string') ? icon : thfToolbarActionsIconDefault;
        },
        enumerable: true,
        configurable: true
    });
    ThfToolbarActionsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-toolbar-actions', template: "<div class=\"thf-toolbar-actions thf-clickable\" (click)=\"popup.toggle()\"> <span #toolbarActions class=\"thf-icon {{ actionsIcon }} thf-toolbar-icon\"></span> </div> <thf-popup #popup [t-actions]=\"actions\" [t-target]=\"toolbarActions\"> </thf-popup> ",
                    providers: [ThfControlPositionService]
                },] },
    ];
    ThfToolbarActionsComponent.propDecorators = {
        actions: [{ type: i0.Input, args: ['t-actions',] }],
        actionsIcon: [{ type: i0.Input, args: ['t-actions-icon',] }]
    };
    return ThfToolbarActionsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
 */
var ThfToolbarBaseComponent = /** @class */ (function () {
    function ThfToolbarBaseComponent() {
        /**
         * Se falso, oculta o ícone de notificações.
         */
        this.showNotification = true;
    }
    Object.defineProperty(ThfToolbarBaseComponent.prototype, "notificationNumber", {
        get: /**
         * @return {?}
         */
        function () {
            return this._notificationNumber;
        },
        /**
         * @optional
         *
         * @description
         *
         * Número de notificações.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Número de notificações.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._notificationNumber = convertToInt(value, 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfToolbarBaseComponent.prototype, "isShowProfile", {
        get: /**
         * @return {?}
         */
        function () {
            return this.profile || this.profileActions;
        },
        enumerable: true,
        configurable: true
    });
    ThfToolbarBaseComponent.propDecorators = {
        actions: [{ type: i0.Input, args: ['t-actions',] }],
        actionsIcon: [{ type: i0.Input, args: ['t-actions-icon',] }],
        profile: [{ type: i0.Input, args: ['t-profile',] }],
        profileActions: [{ type: i0.Input, args: ['t-profile-actions',] }],
        showNotification: [{ type: i0.Input, args: ['t-show-notification',] }],
        title: [{ type: i0.Input, args: ['t-title',] }],
        notificationActions: [{ type: i0.Input, args: ['t-notification-actions',] }],
        notificationNumber: [{ type: i0.Input, args: ['t-notification-number',] }]
    };
    return ThfToolbarBaseComponent;
}());

var __extends$61 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfToolbarBaseComponent
 *
 * \@example
 *
 * <example name="thf-toolbar-basic" title="Totvs Toolbar Basic">
 *  <file name="sample-thf-toolbar-basic/sample-thf-toolbar-basic.component.html"> </file>
 *  <file name="sample-thf-toolbar-basic/sample-thf-toolbar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-toolbar-labs" title="Totvs Toolbar Labs">
 *  <file name="sample-thf-toolbar-labs/sample-thf-toolbar-labs.component.html"> </file>
 *  <file name="sample-thf-toolbar-labs/sample-thf-toolbar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-toolbar-logged" title="Totvs Toolbar - Logged">
 *  <file name="sample-thf-toolbar-logged/sample-thf-toolbar-logged.component.html"> </file>
 *  <file name="sample-thf-toolbar-logged/sample-thf-toolbar-logged.component.ts"> </file>
 * </example>
 */
var ThfToolbarComponent = /** @class */ (function (_super) {
    __extends$61(ThfToolbarComponent, _super);
    function ThfToolbarComponent(titleService, viewRef) {
        var _this = _super.call(this) || this;
        _this.titleService = titleService;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setTitle(this.title);
    };
    /**
     * @private
     * @param {?} newTitle
     * @return {?}
     */
    ThfToolbarComponent.prototype.setTitle = /**
     * @private
     * @param {?} newTitle
     * @return {?}
     */
    function (newTitle) {
        this.titleService.setTitle(newTitle);
    };
    ThfToolbarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-toolbar', template: "<div class=\"thf-toolbar\"> <div class=\"thf-toolbar-title\"> {{title}} </div> <div class=\"thf-toolbar-group-icon\"> <thf-toolbar-actions *ngIf=\"actions && actions.length\" [t-actions]=\"actions\" [t-actions-icon]=\"actionsIcon\"> </thf-toolbar-actions> <thf-toolbar-notification *ngIf=\"showNotification && notificationActions\" [t-notification-actions]=\"notificationActions\" [t-notification-number]=\"notificationNumber\"> </thf-toolbar-notification> <thf-toolbar-profile *ngIf=\"isShowProfile\" [t-profile]=\"profile || { avatar: userSrc, title: userName }\" [t-profile-actions]=\"profileActions || userActions\"> </thf-toolbar-profile> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfToolbarComponent.ctorParameters = function () { return [
        { type: platformBrowser.Title },
        { type: i0.ViewContainerRef }
    ]; };
    return ThfToolbarComponent;
}(ThfToolbarBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@usedBy ThfToolbarComponent
 *
 * \@description
 *
 * O componente `thf-toolbar-notification` tem como objetivo notificar o usuário de novas ações da aplicação que necessitam de atenção,
 * como por exemplo um alerta de nova mensagem.
 *
 * O mesmo também permite que a cada nova notificação seja incrementado e exibido, ou não, este número em uma *tag* ao lado do
 * ícone de notificações.
 */
var ThfToolbarNotificationComponent = /** @class */ (function () {
    function ThfToolbarNotificationComponent() {
        this._notificationNumber = 0;
    }
    Object.defineProperty(ThfToolbarNotificationComponent.prototype, "notificationNumber", {
        get: /**
         * @return {?}
         */
        function () {
            return this._notificationNumber;
        },
        /** Define o número de notificações. */
        set: /**
         * Define o número de notificações.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._notificationNumber = Number.isInteger(value) ? value : 0;
        },
        enumerable: true,
        configurable: true
    });
    ThfToolbarNotificationComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-toolbar-notification', template: "<div class=\"thf-toolbar-notification thf-clickable\" (click)=\"popup.toggle()\"> <span #notification class=\"thf-icon thf-icon-notification thf-toolbar-icon\"></span> <div *ngIf=\"notificationNumber\" class=\"thf-toolbar-notification-badge\"> {{ notificationNumber }} </div> </div> <thf-popup #popup [t-actions]=\"notificationActions\" [t-target]=\"notification\"> </thf-popup> ",
                    providers: [ThfControlPositionService]
                },] },
    ];
    ThfToolbarNotificationComponent.propDecorators = {
        notificationActions: [{ type: i0.Input, args: ['t-notification-actions',] }],
        notificationNumber: [{ type: i0.Input, args: ['t-notification-number',] }]
    };
    return ThfToolbarNotificationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfToolbarProfileDefaultAvatar = './assets/images/totvs-logo-user.svg';
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfToolbarProfileComponent
 *
 * \@description
 *
 * Componente `thf-toolbar-profile`.
 */
var ThfToolbarProfileComponent = /** @class */ (function () {
    function ThfToolbarProfileComponent() {
        this.defaultAvatar = thfToolbarProfileDefaultAvatar;
    }
    ThfToolbarProfileComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-toolbar-profile', template: "<div #profileElement class=\"thf-toolbar-profile thf-clickable\" (click)=\"popup.toggle()\"> <ng-container *ngIf=\"profile.avatar; then avatar; else userIcon\"></ng-container> </div> <thf-popup #popup [t-actions]=\"profileActions\" [t-target]=\"profileElement\"> <div t-popup-header-template *ngIf=\"profile?.title\" class=\"thf-toolbar-profile-item-header\"> <thf-avatar class=\"thf-toolbar-profile-item-avatar\" t-size=\"sm\" [t-src]=\"profile.avatar || defaultAvatar\"> </thf-avatar> <div> <div class=\"thf-toolbar-profile-item-header-title\"> {{ profile.title }} </div> <div *ngIf=\"profile.subtitle\" class=\"thf-toolbar-profile-item-header-subtitle\"> {{ profile.subtitle }} </div> </div> </div> </thf-popup> <ng-template #avatar> <thf-avatar t-size=\"xs\" [t-src]=\"profile.avatar\"></thf-avatar> </ng-template> <ng-template #userIcon> <span class=\"thf-icon thf-icon-user thf-toolbar-icon\"></span> </ng-template> ",
                    providers: [ThfControlPositionService]
                },] },
    ];
    ThfToolbarProfileComponent.propDecorators = {
        profile: [{ type: i0.Input, args: ['t-profile',] }],
        profileActions: [{ type: i0.Input, args: ['t-profile-actions',] }]
    };
    return ThfToolbarProfileComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-toolbar
 *
 */
var ThfToolbarModule = /** @class */ (function () {
    function ThfToolbarModule() {
    }
    ThfToolbarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfAvatarModule,
                        ThfPopupModule
                    ],
                    declarations: [
                        ThfToolbarActionsComponent,
                        ThfToolbarComponent,
                        ThfToolbarNotificationComponent,
                        ThfToolbarProfileComponent
                    ],
                    exports: [
                        ThfToolbarComponent
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    return ThfToolbarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * O componente `thf-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
 * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
 *
 * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
 * para ajuda, como também possibilita ser utilizado com ou sem sombra.
 *
 * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
 * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
 * @abstract
 */
var ThfWidgetBaseComponent = /** @class */ (function () {
    function ThfWidgetBaseComponent() {
        this._noShadow = false;
        this._primary = false;
        this._size = 'thf-widget-xl';
        /**
         * Ação que será executada quando o usuário clicar sobre a área total do `thf-widget`.
         */
        this.click = new i0.EventEmitter();
        /**
         * Função que será chamada na primeira ação.
         */
        this.primaryAction = new i0.EventEmitter();
        /**
         * Função que será chamada na segunda ação.
         */
        this.secondaryAction = new i0.EventEmitter();
        /**
         * Função que será chamada ao clicar no título.
         */
        this.titleAction = new i0.EventEmitter();
    }
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "background", {
        get: /**
         * @return {?}
         */
        function () {
            return this._background;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplicação de imagem de fundo.
         * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,
         * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplicação de imagem de fundo.
         * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,
         * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._background = (value && typeof value === 'string') ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Altura do thf-widget.
         * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Altura do thf-widget.
         * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = parseInt((/** @type {?} */ (value)), 10);
            this.setHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "noShadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noShadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a sombra do thf-widget.
         *
         * @default `true`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a sombra do thf-widget.
         *
         * \@default `true`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noShadow = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "primary", {
        get: /**
         * @return {?}
         */
        function () {
            return this._primary;
        },
        /**
         * @optional
         *
         * @description
         *
         * Opção para que o `thf-widget` fique em destaque.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Opção para que o `thf-widget` fique em destaque.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._primary = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfWidgetBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * @deprecated 5.x.x
         *
         * @optional
         *
         * @description
         *
         * Largura do `thf-widget`.
         *
         * > Utilize o [Grid System](/guides/grid-system) para difinir a largura.
         *
         * @default `xl`
         */
        set: /**
         * @deprecated 5.x.x
         *
         * \@optional
         *
         * \@description
         *
         * Largura do `thf-widget`.
         *
         * > Utilize o [Grid System](/guides/grid-system) para difinir a largura.
         *
         * \@default `xl`
         * @param {?} size
         * @return {?}
         */
        function (size) {
            /** @type {?} */
            var sizes = ['sm', 'md', 'lg', 'xl'];
            this._size = (sizes.indexOf(size) > -1) ? "thf-widget-" + size : 'thf-widget-xl';
        },
        enumerable: true,
        configurable: true
    });
    ThfWidgetBaseComponent.propDecorators = {
        background: [{ type: i0.Input, args: ['t-background',] }],
        height: [{ type: i0.Input, args: ['t-height',] }],
        help: [{ type: i0.Input, args: ['t-help',] }],
        noShadow: [{ type: i0.Input, args: ['t-no-shadow',] }],
        click: [{ type: i0.Output, args: ['t-click',] }],
        primary: [{ type: i0.Input, args: ['t-primary',] }],
        primaryAction: [{ type: i0.Output, args: ['t-primary-action',] }],
        primaryLabel: [{ type: i0.Input, args: ['t-primary-label',] }],
        secondaryAction: [{ type: i0.Output, args: ['t-secondary-action',] }],
        secondaryLabel: [{ type: i0.Input, args: ['t-secondary-label',] }],
        size: [{ type: i0.Input, args: ['t-size',] }],
        title: [{ type: i0.Input, args: ['t-title',] }],
        titleAction: [{ type: i0.Output, args: ['t-title-action',] }]
    };
    return ThfWidgetBaseComponent;
}());

var __extends$62 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfWidgetBaseComponent
 *
 * \@example
 *
 * <example name="thf-widget-basic" title="Totvs Widget Basic">
 *  <file name="sample-thf-widget-basic/sample-thf-widget-basic.component.html"> </file>
 *  <file name="sample-thf-widget-basic/sample-thf-widget-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-widget-labs" title="Totvs Widget Labs">
 *  <file name="sample-thf-widget-labs/sample-thf-widget-labs.component.html"> </file>
 *  <file name="sample-thf-widget-labs/sample-thf-widget-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-widget-finance-dashboard" title="Totvs Widget - Finance dashboard">
 *  <file name="sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.html"> </file>
 *  <file name="sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.ts"> </file>
 * </example>
 *
 * <example name="thf-widget-card" title="Totvs Widget - Card">
 *  <file name="sample-thf-widget-card/sample-thf-widget-card.component.html"> </file>
 *  <file name="sample-thf-widget-card/sample-thf-widget-card.component.ts"> </file>
 * </example>
 *
 */
var ThfWidgetComponent = /** @class */ (function (_super) {
    __extends$62(ThfWidgetComponent, _super);
    function ThfWidgetComponent(viewRef) {
        var _this = _super.call(this) || this;
        /**
         * Função chamada ao clicar no ícone de configuração
         */
        _this.setting = new i0.EventEmitter();
        return _this;
    }
    Object.defineProperty(ThfWidgetComponent.prototype, "showTitleAction", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.titleAction.observers[0];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setHeight(this.height);
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.hasTitleHelpOrSetting = /**
     * @return {?}
     */
    function () {
        return !!this.title || !!this.help || !!this.setting.observers[0];
    };
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfWidgetComponent.prototype.isTypeof = /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    function (object, type) {
        return typeof object === type;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.click.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.openHelp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        window.open(this.help, '_blank');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.runPrimaryAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.primaryAction.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.runSecondaryAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.secondaryAction.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.runTitleAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.titleAction.emit();
    };
    /**
     * @param {?} height
     * @return {?}
     */
    ThfWidgetComponent.prototype.setHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height) {
            /** @type {?} */
            var heightBody = height - 32;
            // Calcula tamanho restante para o Body, subtraindo title e footer se existirem
            if (this.title) {
                heightBody = heightBody - 40;
            }
            if (this.primaryLabel) {
                heightBody = heightBody - 40;
            }
            // Seta o corpo do widget com o tamanho calculado
            this.elBody.nativeElement.style.height = heightBody + "px";
        }
        else {
            this.elBody.nativeElement.style.height = "auto";
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfWidgetComponent.prototype.settingOutput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.setting.emit();
    };
    ThfWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-widget', template: "<div [class.thf-clickable]=\"click.observers.length\" [class.thf-widget]=\"!primary\" [class.thf-widget-primary]=\"primary\" [class.thf-widget-no-shadow]=\"noShadow\" [ngClass]=\"size\" [style.background-image]=\"background ? 'url(' + background + ')' : undefined\" (click)=\"onClick($event)\"> <div *ngIf=\"hasTitleHelpOrSetting()\" class=\"thf-widget-header\"> <span *ngIf=\"showTitleAction; else noTitleAction\" class=\"thf-widget-title-action\" (click)=\"runTitleAction($event)\"> {{ title }} </span> <ng-template #noTitleAction>{{ title }}</ng-template> <div *ngIf=\"setting.observers[0] || help\" class=\"thf-pull-right\"> <span id=\"settingAction\" *ngIf=\"setting.observers[0]\" class=\"thf-clickable thf-icon thf-icon-settings\" (click)=\"settingOutput($event)\"> </span> <span id=\"helpLink\" *ngIf=\"help\" class=\"thf-clickable thf-icon thf-icon-help\" (click)=\"openHelp($event)\"> </span> </div> </div> <div class=\"thf-widget-body\" #elemBody> <ng-content></ng-content> </div> <div *ngIf=\"!isTypeof(primaryLabel, 'undefined')\" class=\"thf-widget-footer\"> <div class=\"thf-widget-xl\" *ngIf=\"isTypeof(secondaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secondaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secondaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='secondaryAct' (click)=\"runSecondaryAction($event)\">{{ secondaryLabel }}</a> </div> </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfWidgetComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };
    ThfWidgetComponent.propDecorators = {
        setting: [{ type: i0.Output, args: ['t-setting',] }],
        elBody: [{ type: i0.ViewChild, args: ['elemBody', { read: i0.ElementRef },] }]
    };
    return ThfWidgetComponent;
}(ThfWidgetBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente thf-widget
 */
var ThfWidgetModule = /** @class */ (function () {
    function ThfWidgetModule() {
    }
    ThfWidgetModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        ThfWidgetComponent
                    ],
                    declarations: [ThfWidgetComponent]
                },] },
    ];
    return ThfWidgetModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfComponentsModule = /** @class */ (function () {
    function ThfComponentsModule() {
    }
    ThfComponentsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [
                        ThfAvatarModule,
                        ThfBreadcrumbModule,
                        ThfButtonModule,
                        ThfButtonGroupModule,
                        ThfCalendarModule,
                        ThfChartModule,
                        ThfContainerModule,
                        ThfDisclaimerGroupModule,
                        ThfDisclaimerModule,
                        ThfDividerModule,
                        ThfDropdownModule,
                        ThfDynamicModule,
                        ThfFieldModule,
                        ThfGridModule,
                        ThfInfoModule,
                        ThfListModule,
                        ThfListViewModule,
                        ThfLoadingModule,
                        ThfMenuModule,
                        ThfMenuPanelModule,
                        ThfModalModule,
                        ThfPageModule,
                        ThfPopoverModule,
                        ThfPopupModule,
                        ThfSlideModule,
                        ThfStepperModule,
                        ThfTableModule,
                        ThfTabsModule,
                        ThfTagModule,
                        ThfToolbarModule,
                        ThfWidgetModule
                    ],
                    exports: [
                        ThfAvatarModule,
                        ThfBreadcrumbModule,
                        ThfButtonModule,
                        ThfButtonGroupModule,
                        ThfCalendarModule,
                        ThfChartModule,
                        ThfContainerModule,
                        ThfDisclaimerGroupModule,
                        ThfDisclaimerModule,
                        ThfDividerModule,
                        ThfDropdownModule,
                        ThfDynamicModule,
                        ThfFieldModule,
                        ThfGridModule,
                        ThfInfoModule,
                        ThfListModule,
                        ThfListViewModule,
                        ThfLoadingModule,
                        ThfMenuModule,
                        ThfMenuPanelModule,
                        ThfModalModule,
                        ThfPageModule,
                        ThfPopoverModule,
                        ThfPopupModule,
                        ThfSlideModule,
                        ThfStepperModule,
                        ThfTableModule,
                        ThfTabsModule,
                        ThfTagModule,
                        ThfToolbarModule,
                        ThfWidgetModule
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfComponentsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfDirectivesModule = /** @class */ (function () {
    function ThfDirectivesModule() {
    }
    ThfDirectivesModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [
                        ThfTooltipModule
                    ],
                    exports: [
                        ThfTooltipModule
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfDirectivesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfGuardsModule = /** @class */ (function () {
    function ThfGuardsModule() {
    }
    ThfGuardsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfGuardsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfDialogType = {
    // Enum para alert
    Alert: 0,
    // Enum para confirm
    Confirm: 1,
};
ThfDialogType[ThfDialogType.Alert] = 'Alert';
ThfDialogType[ThfDialogType.Confirm] = 'Confirm';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O thf-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
 * necessidade do desenvolvedor.
 * @abstract
 */
var ThfDialogBaseService = /** @class */ (function () {
    function ThfDialogBaseService() {
    }
    /** Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento. */
    /**
     * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
     * @param {?} confirmOptions
     * @return {?}
     */
    ThfDialogBaseService.prototype.confirm = /**
     * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
     * @param {?} confirmOptions
     * @return {?}
     */
    function (confirmOptions) {
        this.openDialog(ThfDialogType.Confirm, confirmOptions);
    };
    /** Exibe um diálogo de alerta. */
    /**
     * Exibe um diálogo de alerta.
     * @param {?} alertOptions
     * @return {?}
     */
    ThfDialogBaseService.prototype.alert = /**
     * Exibe um diálogo de alerta.
     * @param {?} alertOptions
     * @return {?}
     */
    function (alertOptions) {
        this.openDialog(ThfDialogType.Alert, alertOptions);
    };
    return ThfDialogBaseService;
}());

var __assign$18 = (undefined && undefined.__assign) || function () {
    __assign$18 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$18.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var thfDialogAlertLiteralsDefault = {
    en: (/** @type {?} */ ({ ok: 'Ok' })),
    es: (/** @type {?} */ ({ ok: 'Ok' })),
    pt: (/** @type {?} */ ({ ok: 'Ok' }))
};
/** @type {?} */
var thfDialogConfirmLiteralsDefault = {
    en: (/** @type {?} */ ({ cancel: 'Cancel', confirm: 'Confirm' })),
    es: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
    pt: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' }))
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do thf-dialog.service
 */
var ThfDialogComponent = /** @class */ (function () {
    function ThfDialogComponent() {
        // Objeto primary do thfModal
        this.primaryAction = { label: 'ok', action: function () { } };
    }
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.closeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.closeSubscription = this.thfModal.onXClosed.subscribe(function (close) { return _this.destroy(); });
    };
    // Fecha o thfModal
    // Fecha o thfModal
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.close = 
    // Fecha o thfModal
    /**
     * @return {?}
     */
    function () {
        this.thfModal.close();
        this.destroy();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    // Insere os valores recebidos de this.open para o thfModal
    // Insere os valores recebidos de this.open para o thfModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    ThfDialogComponent.prototype.configDialog = 
    // Insere os valores recebidos de this.open para o thfModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                }
            };
        }
    };
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    ThfDialogComponent.prototype.open = 
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case ThfDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, ((/** @type {?} */ (dialogOptions))).confirm, this.literalsConfirm.cancel, ((/** @type {?} */ (dialogOptions))).cancel);
                break;
            }
            case ThfDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, ((/** @type {?} */ (dialogOptions))).ok);
                break;
            }
        }
        this.thfModal.open();
    };
    /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    ThfDialogComponent.prototype.setDialogLiterals = /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    function (dialogOptions, dialogType) {
        /** @type {?} */
        var alertLiterals = thfDialogAlertLiteralsDefault;
        /** @type {?} */
        var confirmLiterals = thfDialogConfirmLiteralsDefault;
        /** @type {?} */
        var literals = dialogOptions.literals;
        if (dialogType === ThfDialogType.Alert) {
            this.literalsAlert = __assign$18({}, alertLiterals[thfLocaleDefault], alertLiterals[browserLanguage()], literals);
        }
        else {
            this.literalsConfirm = __assign$18({}, confirmLiterals[thfLocaleDefault], confirmLiterals[browserLanguage()], literals);
        }
    };
    ThfDialogComponent.decorators = [
        { type: i0.Component, args: [{ template: "<thf-modal [t-title]=\"title\" [t-primary-action]=\"primaryAction\" [t-secondary-action]=\"secondaryAction\"> {{ message }} </thf-modal> "
                },] },
    ];
    ThfDialogComponent.propDecorators = {
        thfModal: [{ type: i0.ViewChild, args: [ThfModalComponent,] }]
    };
    return ThfDialogComponent;
}());

var __extends$63 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfDialogBaseService
 *
 * \@example
 *
 * <example name="thf-dialog-basic" title="Totvs Dialog Basic">
 *  <file name="sample-thf-dialog-basic/sample-thf-dialog-basic.component.html"> </file>
 *  <file name="sample-thf-dialog-basic/sample-thf-dialog-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dialog-labs" title="Totvs Dialog Labs">
 *  <file name="sample-thf-dialog-labs/sample-thf-dialog-labs.component.html"> </file>
 *  <file name="sample-thf-dialog-labs/sample-thf-dialog-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dialog-cancel-credit-card" title="Totvs Dialog - Cancel Credit Card">
 *  <file name="sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.html"> </file>
 *  <file name="sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.ts"> </file>
 * </example>
 */
var ThfDialogService = /** @class */ (function (_super) {
    __extends$63(ThfDialogService, _super);
    function ThfDialogService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    ThfDialogService.prototype.openDialog = /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    function (dialogType, dialogOptions) {
        /** @type {?} */
        var componentRef = this.thfComponentInjector.createComponentInApplication(ThfDialogComponent);
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.open(dialogOptions, dialogType, componentRef);
    };
    ThfDialogService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfDialogService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    return ThfDialogService;
}(ThfDialogBaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfToasterOrientation = {
    /** Orientção do componente fica no rodapé */
    Bottom: 0,
    /** Orientção do componente fica no topo */
    Top: 1,
};
ThfToasterOrientation[ThfToasterOrientation.Bottom] = 'Bottom';
ThfToasterOrientation[ThfToasterOrientation.Top] = 'Top';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ThfToasterType = {
    /** Enum para informações do tipo "Erro" */
    Error: 0,
    /** Enum para informações do tipo "Informação" */
    Information: 1,
    /** Enum para informações do tipo "Sucesso" */
    Success: 2,
    /** Enum para informações do tipo "Atenção" */
    Warning: 3,
};
ThfToasterType[ThfToasterType.Error] = 'Error';
ThfToasterType[ThfToasterType.Information] = 'Information';
ThfToasterType[ThfToasterType.Success] = 'Success';
ThfToasterType[ThfToasterType.Warning] = 'Warning';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto "ThfNotification" que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos, após este tempo a mesma é removida automaticamente.
 * @abstract
 */
var ThfNotificationBaseService = /** @class */ (function () {
    function ThfNotificationBaseService() {
        // Array responsável por guardar a instância de thf-toaster's superiores.
        this.stackTop = [];
        // Array responsável por guardar a instância de thf-toaster's inferiores.
        this.stackBottom = [];
        // Duração do toaster ativo.
        this.durationToaster = 10000;
    }
    /**
     * Emite uma notificação de sucesso.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     */
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.success = /**
     * Emite uma notificação de sucesso.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Success));
    };
    /**
     * Emite uma notificação de atenção.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    /**
     * Emite uma notificação de atenção.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.warning = /**
     * Emite uma notificação de atenção.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Warning));
    };
    /**
     * Emite uma notificação de erro.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    /**
     * Emite uma notificação de erro.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.error = /**
     * Emite uma notificação de erro.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Error));
    };
    /**
     * Emite uma notificação de informação.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    /**
     * Emite uma notificação de informação.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.information = /**
     * Emite uma notificação de informação.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Information));
    };
    /**
     * @docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @param notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     */
    /**
     * \@docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @private
     * @param {?} notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     * @param {?} type
     * @return {?}
     */
    ThfNotificationBaseService.prototype.buildToaster = /**
     * \@docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @private
     * @param {?} notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     * @param {?} type
     * @return {?}
     */
    function (notification, type) {
        var _this = this;
        /** @type {?} */
        var index = 0;
        /** @type {?} */
        var orientation;
        if (((/** @type {?} */ (notification))).orientation === undefined ||
            ((/** @type {?} */ (notification))).orientation === ThfToasterOrientation.Bottom) {
            index = this.stackBottom.length;
            orientation = ThfToasterOrientation.Bottom;
        }
        else {
            index = this.stackTop.length;
            orientation = ThfToasterOrientation.Top;
        }
        /** @type {?} */
        var toaster = {
            componentRef: undefined,
            message: ((/** @type {?} */ (notification))).message || (/** @type {?} */ (notification)),
            type: type,
            orientation: orientation,
            action: ((/** @type {?} */ (notification))).action,
            actionLabel: ((/** @type {?} */ (notification))).actionLabel,
            position: index
        };
        if (((/** @type {?} */ (notification))).action) {
            toaster.action = function (param) {
                ((/** @type {?} */ (notification))).action();
                _this.destroyToaster(param.componentRef);
            };
        }
        return toaster;
    };
    return ThfNotificationBaseService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente thf-toaster foi construído para exibir notificações para o usuário.
 * @abstract
 */
var ThfToasterBaseComponent = /** @class */ (function () {
    function ThfToasterBaseComponent() {
        /**
         * Orientação da notificação, a mesma pode ser exibida na parte superior ou inferior da página.
         */
        this.orientation = ThfToasterOrientation.Bottom;
    }
    return ThfToasterBaseComponent;
}());

var __extends$64 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfToasterBaseComponent
 */
var ThfToasterComponent = /** @class */ (function (_super) {
    __extends$64(ThfToasterComponent, _super);
    function ThfToasterComponent(changeDetector, elementeRef) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.elementeRef = elementeRef;
        /* Margem do Toaster referênte à sua orientação e posição*/
        _this.margin = 20;
        /* Observable para monitorar o Close to Toaster */
        _this.observableOnClose = new rxjs.Subject();
        /* Mostra ou oculta o Toaster */
        _this.showToaster = true;
        /* Posição do Toaster*/
        _this.toasterPosition = 'thf-toaster-bottom';
        return _this;
    }
    /* Muda a posição do Toaster na tela*/
    /* Muda a posição do Toaster na tela*/
    /**
     * @param {?} position
     * @return {?}
     */
    ThfToasterComponent.prototype.changePosition = /* Muda a posição do Toaster na tela*/
    /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.elementeRef.nativeElement.style.display = 'table';
        this.margin = 6 + (44 * (position)) + position * 6;
        if (this.orientation === ThfToasterOrientation.Top) {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
    };
    /* Fecha o componente Toaster */
    /* Fecha o componente Toaster */
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.close = /* Fecha o componente Toaster */
    /**
     * @return {?}
     */
    function () {
        this.showToaster = false;
        this.observableOnClose.next(true);
    };
    /* Configura o Toaster com os atributos passados para ele */
    /* Configura o Toaster com os atributos passados para ele */
    /**
     * @param {?} thfToaster
     * @return {?}
     */
    ThfToasterComponent.prototype.configToaster = /* Configura o Toaster com os atributos passados para ele */
    /**
     * @param {?} thfToaster
     * @return {?}
     */
    function (thfToaster) {
        this.type = thfToaster.type;
        this.message = thfToaster.message;
        this.orientation = thfToaster.orientation;
        this.position = thfToaster.position;
        this.action = thfToaster.action;
        this.actionLabel = (thfToaster.actionLabel) ? thfToaster.actionLabel : 'Fechar';
        this.componentRef = thfToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === ThfToasterOrientation.Top) {
            this.toasterPosition = 'thf-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case ThfToasterType.Error: {
                this.toasterType = 'thf-toaster-error';
                this.icon = 'thf-icon-close';
                break;
            }
            case ThfToasterType.Information: {
                this.toasterType = 'thf-toaster-info';
                this.icon = 'thf-icon-info';
                break;
            }
            case ThfToasterType.Success: {
                this.toasterType = 'thf-toaster-success';
                this.icon = 'thf-icon-ok';
                break;
            }
            case ThfToasterType.Warning: {
                this.toasterType = 'thf-toaster-warning';
                this.icon = 'thf-icon-warning';
                break;
            }
        }
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getShowToaster = /**
     * @return {?}
     */
    function () {
        return this.showToaster;
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getIcon = /**
     * @return {?}
     */
    function () {
        return this.icon;
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getToasterPosition = /**
     * @return {?}
     */
    function () {
        return this.toasterPosition;
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getToasterType = /**
     * @return {?}
     */
    function () {
        return this.toasterType;
    };
    /* Chama a função passada pelo atributo `action` */
    /* Chama a função passada pelo atributo `action` */
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.thfToasterAction = /* Chama a função passada pelo atributo `action` */
    /**
     * @return {?}
     */
    function () {
        this.action(this);
    };
    ThfToasterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thf-toaster', template: "<div #toaster *ngIf=\"getShowToaster()\" class=\"thf-toaster {{ getToasterType() }} {{ getToasterPosition() }} thf-clickable\" (click)=\"close()\"> <div class=\"thf-toaster-message\"> <span class=\"thf-icon {{ getIcon() }}\"></span> {{ message }} </div> <div *ngIf=\"action !== undefined\" (click)=\"thfToasterAction()\" class=\"thf-toaster-action\"> {{ actionLabel }} </div> </div> "
                },] },
    ];
    /** @nocollapse */
    ThfToasterComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef }
    ]; };
    ThfToasterComponent.propDecorators = {
        toaster: [{ type: i0.ViewChild, args: ['toaster',] }]
    };
    return ThfToasterComponent;
}(ThfToasterBaseComponent));

var __extends$65 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfNotificationBaseService
 *
 * \@example
 *
 * <example name="thf-notification-basic" title="Totvs Notification Basic">
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.html"> </file>
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-labs" title="Totvs Notification Labs">
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.html"> </file>
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-sales" title="Totvs Notification - Sales">
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.html"> </file>
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.ts"> </file>
 * </example>
 */
var ThfNotificationService = /** @class */ (function (_super) {
    __extends$65(ThfNotificationService, _super);
    function ThfNotificationService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.createToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        var _this = this;
        /** @type {?} */
        var componentRef = this.thfComponentInjector.createComponentInApplication(ThfToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === ThfToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout(function () {
                _this.destroyToaster(componentRef);
            }, this.durationToaster);
        }
    };
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.destroyToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        /** @type {?} */
        var stack;
        if (toaster.instance.orientation === ThfToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        /** @type {?} */
        var index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.thfComponentInjector.destroyComponentInApplication(toaster);
        for (var count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    };
    /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    ThfNotificationService.prototype.observableOnClose = /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        var _this = this;
        componentRef.instance.observableOnClose.subscribe(function () {
            _this.destroyToaster(componentRef);
        });
    };
    ThfNotificationService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ThfNotificationService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    /** @nocollapse */ ThfNotificationService.ngInjectableDef = i0.defineInjectable({ factory: function ThfNotificationService_Factory() { return new ThfNotificationService(i0.inject(ThfComponentInjectorService)); }, token: ThfNotificationService, providedIn: "root" });
    return ThfNotificationService;
}(ThfNotificationBaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NO_ERROR_HEADER_PARAM = 'X-Totvs-No-Error';
/**
 * \@description
 *
 * O serviço Totvs Http Interceptor realiza o tratamento de requisições HTTP conforme o padrão do
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444) para adaptá-lo
 * ao modelo do THF.
 *
 * Ao analisar o objeto totvs_messages retornado pela requisição, o serviço exibirá notificações com mensagens na tela.
 * Os retornos de erros com códigos 4xx e 5xx são tratados automaticamente, sem a necessidade de incluir o totvs_messages.
 *
 * Também existe a possibilidade de não apresentar a notificação quando houver algum erro com códigos 4xx e 5xx,
 * utilizando o parâmetro `X-Totvs-No-Error` que foi definido conforme o
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444) (em Cabeçalhos Customizados).
 * O parâmetro `X-Totvs-No-Error` deve ser informado no cabeçalho da requisição com o valor `'true'` para funcionar corretamente,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-No-Error': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * O `Content-Type` deve ser `application/json` e a estrutura de mensagem recebida pelo serviço é:
 *  - totvs_messages: lista de mensagens de erro ou informativo resultante do serviço.
 *    - type: success, warning, error, e information;
 *    - code: título ou código da mensagem;
 *    - detail: detalhamento ou texto da mensagem.
 *
 * Ao importar o módulo `ThfModule` na aplicação, o thf-http-interceptor é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class UserService {
 *
 *   constructor(private http: HttpClient) { }
 *
 *   getUsers() {
 *     return this.http.get('/api/users');
 *   }
 *
 *   ...
 *
 * }
 * ```
 *
 * @abstract
 */
var ThfHttpInterceptorBaseService = /** @class */ (function () {
    function ThfHttpInterceptorBaseService(notification, dialog) {
        this.notification = notification;
        this.dialog = dialog;
        this.notificationTypes = ['success', 'warning', 'error', 'information'];
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /** @type {?} */
        var cloneRequest = request.clone();
        request = request.headers.has(NO_ERROR_HEADER_PARAM) ? this.cloneRequestWithoutNoErrorHeaderParam(request) : request;
        return next.handle(request).pipe(operators.tap(function (response) {
            if (response instanceof http.HttpResponse) {
                _this.processResponse(response);
            }
        }, function (error) {
            _this.processErrorResponse(error, cloneRequest);
        }));
    };
    /**
     * @param {?} response
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.processResponse = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        var _this = this;
        if (response.body && response.body.totvs_messages) {
            /** @type {?} */
            var totvsMessages = response.body.totvs_messages;
            if (totvsMessages instanceof Array) {
                totvsMessages.forEach(function (totvsMessage) {
                    _this.showNotification(totvsMessage);
                });
            }
            else {
                this.showNotification(totvsMessages);
            }
        }
    };
    /**
     * @param {?} response
     * @param {?} request
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.processErrorResponse = /**
     * @param {?} response
     * @param {?} request
     * @return {?}
     */
    function (response, request) {
        /** @type {?} */
        var errorResponse = response.status !== 0
            ? response.error
            : { code: 0, message: 'Servidor não está respondendo.', detailedMessage: response.message };
        /** @type {?} */
        var hasNoErrorParam = this.hasNoErrorParam(request);
        // not show the notification when has NoError parameter on header of request.
        if (errorResponse && errorResponse.message && !hasNoErrorParam) {
            this.showErrorNotification(errorResponse);
        }
    };
    /**
     * @private
     * @param {?} request
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.cloneRequestWithoutNoErrorHeaderParam = /**
     * @private
     * @param {?} request
     * @return {?}
     */
    function (request) {
        return request && request.clone({ headers: request.headers.delete(NO_ERROR_HEADER_PARAM) });
    };
    /**
     * @private
     * @param {?} request
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.hasNoErrorParam = /**
     * @private
     * @param {?} request
     * @return {?}
     */
    function (request) {
        /** @type {?} */
        var noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);
        return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';
    };
    /**
     * @private
     * @param {?} totvsMessage
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.showNotification = /**
     * @private
     * @param {?} totvsMessage
     * @return {?}
     */
    function (totvsMessage) {
        if (this.notificationTypes.includes(totvsMessage.type)) {
            this.notification[totvsMessage.type]({ message: totvsMessage.detail });
        }
    };
    /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.showErrorNotification = /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    function (errorResponse) {
        /** @type {?} */
        var notificationAction = this.generateErrorNotificationAction(errorResponse);
        this.notification.error({
            message: errorResponse.message,
            actionLabel: notificationAction.label,
            action: notificationAction.action
        });
    };
    /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.generateErrorNotificationAction = /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    function (errorResponse) {
        /** @type {?} */
        var notificationAction;
        /** @type {?} */
        var notificationLabel;
        /** @type {?} */
        var notificationMessage = errorResponse.message.concat(" " + errorResponse.detailedMessage);
        if (errorResponse.details && errorResponse.details instanceof Array) {
            errorResponse.details.forEach(function (detailError) {
                notificationMessage += "\n" + detailError.message;
            });
        }
        if (errorResponse.helpUrl && !(errorResponse.detailedMessage || errorResponse.details)) {
            notificationLabel = 'Ajuda';
            notificationAction = this.generateUrlHelpFunction(errorResponse.helpUrl);
        }
        else if (errorResponse.detailedMessage || errorResponse.details) {
            notificationLabel = 'Detalhes';
            notificationAction = this.generateDialogDetailFunction(errorResponse, notificationMessage);
        }
        return { label: notificationLabel, action: notificationAction };
    };
    /**
     * @private
     * @param {?} helpUrl
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.generateUrlHelpFunction = /**
     * @private
     * @param {?} helpUrl
     * @return {?}
     */
    function (helpUrl) {
        return function () { window.open(helpUrl, '_blank'); };
    };
    /**
     * @private
     * @param {?} errorResponse
     * @param {?} notificationMessage
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.generateDialogDetailFunction = /**
     * @private
     * @param {?} errorResponse
     * @param {?} notificationMessage
     * @return {?}
     */
    function (errorResponse, notificationMessage) {
        var _this = this;
        return function () {
            _this.dialog.alert({
                title: errorResponse.code,
                message: notificationMessage,
                ok: errorResponse.helpUrl ? _this.generateUrlHelpFunction(errorResponse.helpUrl) : undefined
            });
        };
    };
    return ThfHttpInterceptorBaseService;
}());

var __extends$66 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfHttpInterceptorBaseService
 *
 * \@example
 * <example name='thf-http-interceptor-labs' title='Totvs Http Interceptor Labs'>
 *  <file name='sample-thf-http-interceptor-labs.component.ts'> </file>
 *  <file name='sample-thf-http-interceptor-labs.component.html'> </file>
 * </example>
 */
var ThfHttpInterceptorService = /** @class */ (function (_super) {
    __extends$66(ThfHttpInterceptorService, _super);
    function ThfHttpInterceptorService(notification, dialog) {
        return _super.call(this, notification, dialog) || this;
    }
    ThfHttpInterceptorService.decorators = [
        { type: i0.Injectable },
    ];
    /** @nocollapse */
    ThfHttpInterceptorService.ctorParameters = function () { return [
        { type: ThfNotificationService },
        { type: ThfDialogService }
    ]; };
    return ThfHttpInterceptorService;
}(ThfHttpInterceptorBaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfHttpInterceptorModule = /** @class */ (function () {
    function ThfHttpInterceptorModule() {
    }
    ThfHttpInterceptorModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        ThfHttpInterceptorService,
                        ThfDialogService,
                        ThfNotificationService,
                        {
                            provide: http.HTTP_INTERCEPTORS,
                            useClass: ThfHttpInterceptorService,
                            multi: true
                        }
                    ]
                },] },
    ];
    return ThfHttpInterceptorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * Serviço responsável por efetuar o controle de interação com o serviço de interceptor `ThfHttpRequestInterceptorService`
 * gerenciando o seu estado.
 */
var ThfHttpRequesControltService = /** @class */ (function () {
    function ThfHttpRequesControltService() {
        this.controlHttpRequest = new rxjs.Subject();
    }
    /**
     * @return {?}
     */
    ThfHttpRequesControltService.prototype.getControlHttpRequest = /**
     * @return {?}
     */
    function () {
        return this.controlHttpRequest.asObservable();
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    ThfHttpRequesControltService.prototype.send = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = 0; }
        this.controlHttpRequest.next(value);
    };
    ThfHttpRequesControltService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfHttpRequesControltService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var noCountPendingRequests = 'X-Totvs-No-Count-Pending-Requests';
/** @type {?} */
var screenLock = 'X-Totvs-Screen-Lock';
/**
 * \@description
 *
 * O serviço Totvs Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-Totvs-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `ThfHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-Totvs-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `ThfModule` na aplicação, o `thf-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-Totvs-No-Count-Pending-Requests': true, 'X-Totvs-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: ThfHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * \@example
 * <example name='thf-http-request-interceptor-labs' title='Totvs Http Request Interceptor Labs'>
 *  <file name='sample-thf-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-thf-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
var ThfHttpRequestInterceptorService = /** @class */ (function () {
    function ThfHttpRequestInterceptorService(controlHttpRequest, thfComponentInjector) {
        this.controlHttpRequest = controlHttpRequest;
        this.thfComponentInjector = thfComponentInjector;
        this.loadingOverlayComponent = undefined;
        this.pendingRequests = 0;
        this.overlayRequests = 0;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /** @type {?} */
        var requestClone = request.clone();
        request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
        this.setCountPendingRequests(true, requestClone);
        this.setCountOverlayRequests(true, requestClone);
        return next.handle(request).pipe(operators.tap(function (response) {
            if (response instanceof http.HttpResponse) {
                _this.setCountPendingRequests(false, requestClone);
                _this.setCountOverlayRequests(false, requestClone);
            }
        }), operators.catchError(function (error) {
            _this.setCountPendingRequests(false, requestClone);
            _this.setCountOverlayRequests(false, requestClone);
            return rxjs.throwError(error);
        }));
    };
    /**
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.getCountPendingRequests = /**
     * @return {?}
     */
    function () {
        return this.controlHttpRequest.getControlHttpRequest();
    };
    /**
     * @private
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.buildLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.loadingOverlayComponent) {
            this.loadingOverlayComponent = this.thfComponentInjector.createComponentInApplication(ThfLoadingOverlayComponent);
            this.loadingOverlayComponent.instance.screenLock = true;
            this.loadingOverlayComponent.instance.changeDetector.detectChanges();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.destroyLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.loadingOverlayComponent) {
            this.thfComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
            this.loadingOverlayComponent = undefined;
        }
    };
    /**
     * @private
     * @param {?} headersParams
     * @param {?} request
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.requestCloneWithoutHeaderParam = /**
     * @private
     * @param {?} headersParams
     * @param {?} request
     * @return {?}
     */
    function (headersParams, request) {
        /** @type {?} */
        var isRequestClone = false;
        headersParams.forEach(function (headerParam) {
            if (request.headers.has(headerParam)) {
                request.headers.delete(headerParam);
                isRequestClone = true;
            }
        });
        return isRequestClone ? request.clone({ headers: request.headers }) : request;
    };
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.setCountPendingRequests = /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    function (isIncrement, request) {
        /** @type {?} */
        var hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
        /** @type {?} */
        var headerParam = request.headers.get(noCountPendingRequests);
        if (hasCountPendingRequestHeaderParam && (headerParam.toString().toLowerCase() === 'true')) {
            return;
        }
        this.pendingRequests += isIncrement ? 1 : -1;
        this.controlHttpRequest.send(this.pendingRequests);
    };
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    ThfHttpRequestInterceptorService.prototype.setCountOverlayRequests = /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    function (isIncrement, request) {
        /** @type {?} */
        var hasOverlayRequestHeaderParam = request.headers.has(screenLock);
        if (hasOverlayRequestHeaderParam) {
            /** @type {?} */
            var headerParam = request.headers.get(screenLock);
            if (headerParam.toString().toLowerCase() === 'false') {
                return;
            }
            this.overlayRequests += isIncrement ? 1 : -1;
            this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
        }
    };
    ThfHttpRequestInterceptorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ThfHttpRequestInterceptorService.ctorParameters = function () { return [
        { type: ThfHttpRequesControltService },
        { type: ThfComponentInjectorService }
    ]; };
    /** @nocollapse */ ThfHttpRequestInterceptorService.ngInjectableDef = i0.defineInjectable({ factory: function ThfHttpRequestInterceptorService_Factory() { return new ThfHttpRequestInterceptorService(i0.inject(ThfHttpRequesControltService), i0.inject(ThfComponentInjectorService)); }, token: ThfHttpRequestInterceptorService, providedIn: "root" });
    return ThfHttpRequestInterceptorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfHttpRequestModule = /** @class */ (function () {
    function ThfHttpRequestModule() {
    }
    ThfHttpRequestModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        ThfHttpRequesControltService,
                        ThfHttpRequestInterceptorService,
                        ThfComponentInjectorService,
                        {
                            provide: http.HTTP_INTERCEPTORS,
                            useClass: ThfHttpRequestInterceptorService,
                            multi: true
                        }
                    ],
                    entryComponents: [ThfLoadingOverlayComponent, ThfLoadingComponent]
                },] },
    ];
    return ThfHttpRequestModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfInterceptorsModule = /** @class */ (function () {
    function ThfInterceptorsModule() {
    }
    ThfInterceptorsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [
                        ThfHttpInterceptorModule,
                        ThfHttpRequestModule
                    ],
                    exports: [
                        ThfHttpInterceptorModule,
                        ThfHttpRequestModule
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfInterceptorsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfPipesModule = /** @class */ (function () {
    function ThfPipesModule() {
    }
    ThfPipesModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [
                        ThfTimeModule
                    ],
                    exports: [
                        ThfTimeModule
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfPipesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço `thf-color-palette`.
 */
var ThfColorPaletteModule = /** @class */ (function () {
    function ThfColorPaletteModule() {
    }
    ThfColorPaletteModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        ThfColorPaletteService
                    ],
                    bootstrap: []
                },] },
    ];
    return ThfColorPaletteModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfComponentInjectorModule = /** @class */ (function () {
    function ThfComponentInjectorModule() {
    }
    ThfComponentInjectorModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [
                        ThfComponentInjectorService
                    ],
                    bootstrap: []
                },] },
    ];
    return ThfComponentInjectorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço thf-control-position.
 */
var ThfControlPositionModule = /** @class */ (function () {
    function ThfControlPositionModule() {
    }
    ThfControlPositionModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [
                        ThfControlPositionService
                    ],
                    bootstrap: []
                },] },
    ];
    return ThfControlPositionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço `thf-date`.
 */
var ThfDateTimeModule = /** @class */ (function () {
    function ThfDateTimeModule() {
    }
    ThfDateTimeModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        ThfDateService
                    ],
                    bootstrap: []
                },] },
    ];
    return ThfDateTimeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfDialogModule = /** @class */ (function () {
    function ThfDialogModule() {
    }
    ThfDialogModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ThfDialogComponent
                    ],
                    imports: [
                        ThfModalModule
                    ],
                    exports: [
                        ThfDialogComponent
                    ],
                    entryComponents: [
                        ThfDialogComponent
                    ],
                    providers: [
                        ThfDialogService
                    ]
                },] },
    ];
    return ThfDialogModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O pipe thf-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | thfI18n:[1,10] }}
 * {{ i18nPT.totalPages | thfI18n:10 }}
 * ```
 */
var ThfI18nBasePipe = /** @class */ (function () {
    function ThfI18nBasePipe() {
    }
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    ThfI18nBasePipe.prototype.transform = /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    function (value, args) {
        if (!value) {
            return '';
        }
        if (!(args instanceof Array)) {
            args = [args];
        }
        for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
            var arg = args_1[_i];
            value = value.replace(/(\{\w*\})+/, arg);
        }
        return value;
    };
    return ThfI18nBasePipe;
}());

var __extends$67 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfI18nBasePipe
 *
 * \@example
 * <example name='thf-i18n-pipe-labs' title='Totvs i18n Pipe Labs' >
 *  <file name='sample-thf-i18n-pipe-labs.component.html'> </file>
 *  <file name='sample-thf-i18n-pipe-labs.component.ts'> </file>
 *  <file name='sample-thf-i18n-pipe.component.html'> </file>
 *  <file name='sample-thf-i18n-pipe.component.ts'> </file>
 * </example>
 */
var ThfI18nPipe = /** @class */ (function (_super) {
    __extends$67(ThfI18nPipe, _super);
    function ThfI18nPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfI18nPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'thfI18n'
                },] },
    ];
    return ThfI18nPipe;
}(ThfI18nBasePipe));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfNotificationModule = /** @class */ (function () {
    function ThfNotificationModule() {
    }
    ThfNotificationModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ThfToasterComponent
                    ],
                    imports: [
                        common.CommonModule
                    ],
                    exports: [],
                    entryComponents: [
                        ThfToasterComponent
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfNotificationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfServicesModule = /** @class */ (function () {
    function ThfServicesModule() {
    }
    ThfServicesModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ThfI18nPipe
                    ],
                    imports: [
                        ThfColorPaletteModule,
                        ThfComponentInjectorModule,
                        ThfControlPositionModule,
                        ThfDateTimeModule,
                        ThfDialogModule,
                        ThfNotificationModule
                    ],
                    exports: [
                        ThfColorPaletteModule,
                        ThfComponentInjectorModule,
                        ThfControlPositionModule,
                        ThfDateTimeModule,
                        ThfDialogModule,
                        ThfI18nPipe,
                        ThfNotificationModule
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    return ThfServicesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThfModule = /** @class */ (function () {
    function ThfModule() {
    }
    ThfModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [
                        ThfComponentsModule,
                        ThfDirectivesModule,
                        ThfGuardsModule,
                        ThfInterceptorsModule,
                        ThfPipesModule,
                        ThfServicesModule
                    ],
                    exports: [
                        ThfComponentsModule,
                        ThfDirectivesModule,
                        ThfInterceptorsModule,
                        ThfGuardsModule,
                        ThfPipesModule,
                        ThfServicesModule
                    ],
                    providers: [ThfNotificationService],
                    bootstrap: []
                },] },
    ];
    return ThfModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy
 *
 * ThfBreadcrumb, ThfBreadcrumbComponent, ThfBreadcrumbBaseComponent,
 * ThfPageDefaultComponent, ThfPageDetailComponent, ThfPageEditComponent, ThfPageListComponent
 *
 * \@description
 *
 * Interface que define cada item do componente **thf-breadcrumb**.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy
 *
 * ThfPageDefaultComponent, ThfPageDetailComponent, ThfPageEditComponent, ThfPageListComponent, ThfPageDynamicSearchBaseComponent
 *
 * \@description
 *
 * Interface que define o `thf-breadcrumb`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfButtonGroupComponent
 *
 * \@description
 *
 * Interface para os itens do `thf-button-group`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfChartComponent
 *
 * \@description
 *
 * Interface que define cada objeto do `ThfPieChartSeries`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy
 *
 * ThfPageListComponent
 *
 * \@description
 *
 * Interface que representa o objeto `thf-disclaimer-group`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDisclaimerGroupComponent, ThfPageListComponent
 *
 * \@description
 *
 * Interface que representa o objeto `thf-disclaimer`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Interface do componente thf-dropdown
 *
 * \@usedBy ThfDropdownComponent
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDynamicFormComponent, ThfAdvancedFilterComponent
 *
 * \@docsExtends ThfDynamicField
 *
 * \@description
 *
 * Interface para definição das propriedades dos campos de entrada que serão criados dinamicamente.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDynamicViewComponent
 *
 * \@docsExtends ThfDynamicField
 *
 * \@description
 *
 * Interface para definição das propriedades dos campos de visualização que serão criados dinamicamente.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Interface para as ações do componente thf-checkbox-group.
 *
 * \@usedBy ThfCheckboxGroupComponent
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfComboComponent
 *
 * \@description
 *
 * Interface para os serviços que serão utilizados no thf-combo.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfComboComponent
 *
 * \@description
 *
 * Interface dos itens da coleção que será exibida no dropdown do thf-combo.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDatepickerRangeComponent
 *
 * \@description
 *
 * Interface para definição do objeto com a data inicial e final usadas no `thf-datepicker-range`.
 *
 * > Os formatos de data permitidos seguem os padrões definidos na
 * [descrição do componente](/documentation/thf-datepicker-range#accepted-formats).
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDatepickerRangeComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `thf-datepicker-range`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfLookupComponent
 *
 * \@description
 *
 * Interface para configuração das colunas do thf-lookup.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfLookupComponent
 *
 * \@description
 *
 * Define o tipo de busca utilizado no thf-lookup.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfLookupComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `thf-lookup`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfResponseApi
 *
 * \@usedBy ThfLookupComponent
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfMultiselectComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `thf-multiselect`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfMultiselectComponent
 *
 * \@description
 *
 * Interface dos itens da coleção que será exibida no dropdown do thf-multiselect.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfRadioGroupComponent
 *
 * \@description
 *
 * Interface para as ações do componente thf-radio-group.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfSelectComponent
 *
 * \@description
 *
 * Interface da coleções de itens que deve ser informado no componente thf-select
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfUploadComponent
 *
 * \@description
 *
 * Os arquivos a serem selecionados podem ser restritos com base em regras pré definidas
 * para o seu tamanho e / ou extensão.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfUploadComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `thf-upload`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfGridComponent
 *
 * \@description
 *
 * Ações executadas durante a manipulação das linhas do grid.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfListViewComponent
 *
 * \@description
 *
 * Interface que define as ações do componente `thf-list-view`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfListViewComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `thf-list-view`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfMenuPanelComponent
 *
 * \@description
 *
 * Interface para os itens de menu do componente `thf-menu-panel`.
 *
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfMenuComponent
 *
 * \@description
 *
 * Interface para os itens de menu do componente thf-menu.
 *
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfMenuComponent
 *
 * \@description
 *
 * Interface do objeto que deve conter na coleção de itens filtrados no componente `thf-menu`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfMenuComponent
 *
 * \@description
 *
 * Interface do serviço utilizado no componente `thf-menu`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfModalComponent
 *
 * \@description
 *
 * Interface que define os botões de ação do componente `thf-modal`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Interface para as ações dos componentes thf-page-default e thf-page-list.
 *
 * \@usedBy ThfPageDefaultComponent, ThfPageListComponent
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfPageComponent
 *
 * \@description
 *
 * Interface para o atributo `filter` do componente `thf-page`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfPageDetailComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `thf-page-detail`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfPageEditComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `thf-page-edit`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfPageListComponent
 *
 * \@description
 *
 * Interface para o atributo `filter` do componente `thf-page-list`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfPageListComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `thf-page-list`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfPageComponent
 *
 * \@description
 *
 * Interface para o atributo `filter` do componente `thf-page`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfPopupComponent
 *
 * \@description
 *
 * Interface para lista de ações do componente.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfSlideComponent
 *
 * \@description
 *
 * Interface que define cada objeto do `ThfSlideItem`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfStepperComponent
 *
 * \@description
 *
 * Interface para os steps do componente thf-stepper.
 *
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@docsExtends ThfPopupAction
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Interface que define as colunas booleanas do `thf-table`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Interface para configuração das colunas do `thf-table`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `thf-table`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Interface que define as colunas de ícones do `thf-table`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Interface para configuração das colunas de labels do `thf-table`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Interface para configuração das colunas do `thf-table-detail`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Interface para configuração do _detail_ do componente `thf-table`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Interface para configuração das colunas de legenda do Thf-Table.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfTabComponent
 *
 * \@description
 *
 * Interface que define o `thf-tab`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfPopupAction
 *
 * \@usedBy ThfToolbarComponent
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfToolbarComponent
 *
 * \@description
 *
 * Interface que define o perfil do `ThfToolbarComponent`.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Interface que representa a estrutura de uma resposta de sucesso HTTP.
 *
 * > Utilizada apenas quando a resposta incluir uma coleção de itens.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDialogService
 *
 * \@description
 *
 * Interface para definição das literais usadas no serviço `thf-dialog` para o tipo alerta.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDialogService
 *
 * \@description
 *
 * Interface para definição das literais usadas no serviço `thf-dialog` para o tipo confirmação.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@usedBy ThfDialogService
 *
 * \@description
 *
 * Interface para o título e a mensagem do serviço thf-dialog.
 * @record
 */
/**
 * \@usedBy ThfDialogService
 *
 * \@docsExtends ThfDialogOptions
 *
 * \@description
 *
 * Interface com as propriedades da caixa de diálogo de alerta do serviço thf-dialog.
 * @record
 */

/**
 * \@usedBy ThfDialogService
 *
 * \@docsExtends ThfDialogOptions
 *
 * \@description
 *
 * Interface com as propriedades da caixa de diálogo de confirmação do serviço thf-dialog.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Interface para a configuração do módulo ThfI18nModule.
 *
 * \@usedBy ThfI18nModule
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Interface para o método `getLiterals()` do serviço ThfI18nService.
 *
 * \@usedBy ThfI18nService
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var I18N_CONFIG = new i0.InjectionToken('I18N_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O serviço thfI18nService possibilita adicionar múltiplos idiomas e contextos à aplicação.
 *
 * A primeira configuração para a utilização do serviço thfI18nService é a importação do módulo
 * ThfI18nModule no módulo principal da aplicação.
 *
 * Ao importar o módulo ThfI18nModule devem ser definidos os contextos e idiomas que a aplicação
 * irá suportar, além de alguns padrões como idioma e contexto.
 *
 * No arquivo do módulo principal da aplicação deve ser definido uma constante implementando a
 * interface ThfI18nConfig. Nesta constante é possivel definir todos os contextos suportados pela
 * aplicação.
 *
 * Para cada contexto é possível definir a origem das literais, que podem ser de um serviço REST ou
 * de um objeto.
 * Exemplo:
 *
 * > Arquivo general-pt.ts
 *
 * ```
 * export const generalPt = {
 *  add: 'Adicionar',
 *  remove: 'Remover',
 *  people: '{0} Pessoas,
 *  greeting: 'Prazer, {0} {1}'
 * }
 *
 * ```
 *
 * > Arquivo general-en.ts
 *
 * ```
 * export const generalEn = {
 *  add: 'Add',
 *  remove: 'Remove',
 *  people: '{0} People,
 *  greeting: 'Nice to meet you, {0} {1}'
 * }
 *
 * ```
 *
 * ```
 * import { ThfI18nConfig } from '\@totvs/thf-ui/services/thf-i18n';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: ThfI18nConfig = {
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt,
 *       'en-US': generalEn
 *     },
 *     crm: {
 *       url: 'http://10.0.0.1:3000/api/translations/crm'
 *     }
 *   },
 *   default: {}
 * }
 * ```
 *
 * Ao optar por utilizar um serviço, deverá ser definida a URL específica do contexto,
 * como nos exemplos abaixo:
 *  - http://10.0.0.1:3000/api/translations/crm
 *  - http://10.0.0.1:3000/api/translations/general
 *
 * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
 * - language: o idioma será sempre passado por parâmetro e é recomendado utilizar o padrão suportado
 * pelos navegadores (pt-br, en-us)
 * - literals: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
 * serviço deve retornar todas as literais do idioma.
 *
 * Exemplos de requisição:
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text
 *
 * > Sempre que o idioma solicitado não for encontrado, será buscado por **pt-br**.
 *
 *
 * Conforme citado anteriormente, além dos contextos, é possível definir os padrões do sistema na
 * configuração do módulo:
 *  - language (string): idioma que será buscado por padrão pelo serviço, caso não seja especificado
 * será usado o idioma do navegador do usuário.
 *  - context (string): contexto que será buscado por padrão pelo serviço, caso não seja especificado
 * será usado o primeiro contexto da lista de contextos.
 *  - cache (boolean): define se as literais buscadas no serviço deverão ser armanezadas no cache do
 * navegador, lembrando que cada navegador possui sua própria limitação de cache. Para contextos com
 * grande quantidade de literais, recomenda-se o uso de constantes ao invés de serviços, desta forma
 * não será usado o cache do navegador.
 *
 * Exemplo de padrões definidos:
 * ```
 * const i18nConfig: ThfI18nConfig = {
 *   contexts: {
 *     general: { }
 *   },
 *   default: {
 *    language: 'pt-BR',
 *    context: 'general',
 *    cache: true
 *   }
 * }
 * ```
 *
 * Depois de criada a constante de configuração, deve-se passá-la para a função "config", diretamente
 * na importação do módulo.
 * ```
 *  imports: [
 *    ...
 *    ThfModule,
 *    ThfI18nModule.config(i18nConfig)
 *  ]
 * ```
 *
 * Feito isso, está finalizada a configuração do módulo e a aplicação está apta à utilizar o serviço
 * ThfI18nService.
 *
 * Para utilizar o serviço, deve-se importá-lo em todos os componentes que necessitarem de literais:
 * ```
 *  import { ThfI18nService } from '\@totvs/thf-ui/services/thf-i18n';
 * ```
 *
 * Em seguinda, fazer a injeção de dependência no construtor do componente:
 * ```
 *  constructor(private thfI18nService: ThfI18nService) { }
 * ```
 *
 * E por fim, fazer a busca pelas literais, se inscrevendo no Observable pelo método `getLiterals()`.
 * Este método pode receber um objeto com três atributos como parâmetro:
 *  - context (string): Para definir o contexto a ser buscado.
 *  - language (string): Para escolher o idioma a ser buscado.
 *  - literals (Array&#60;string&#62;): Para escolher quais literais devem ser buscadas.
 *
 * Todos esses parâmetros são opcionais, ou seja, caso nenhum parâmetro seja passado, serão trazidas
 * todas as literais do contexto definido com padrão, no idioma definido como padrão.
 *
 * Exemplos de requisição:
 * ```
 * literals = {};
 * literalsEn = {};
 * literalsCrm = {};
 *
 * constructor(private thfI18nService: ThfI18nService) {
 *   thfI18nService.getLiterals()
 *     .subscribe((literals) => {
 *       this.literals = literals;
 *     });
 *
 *   thfI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
 *     .subscribe((literals) => {
 *       this.literalsCrm = literals;
 *     });
 *
 *   thfI18nService.getLiterals({language: 'en-us'})
 *     .subscribe((literals) => {
 *       this.literalsEn = literals;
 *     });
 * }
 * ```
 *
 * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
 * seguinte código:
 *
 * <pre ngNonBindable>
 * {{ literals?.add }}
 * {{ literals?.remove }}
 * </pre>
 *
 * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o pipe thfI18n.
 * É possível informar propriedades do componente como `name` e `nickname` ou
 * informar o valor diretamente com "" ou número, confome o exemplo abaixo:
 *
 * <pre ngNonBindable>
 * {{ literals?.people | thfI18n:[120] }}
 * {{ literals?.greeting | thfI18n:[name, nickname] }}
 * {{ literals?.greeting | thfI18n:["Brad", "Green"] }}
 * </pre>
 *
 * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
 *
 * ### Teste unitário
 *
 * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `ThfI18nService`:
 *
 * ```
 * import { async, TestBed } from '\@angular/core/testing';
 * import { HttpClientTestingModule } from '\@angular/common/http/testing';
 *
 * import { ThfI18nModule } from '\@totvs/thf-ui/services/thf-i18n';
 *
 * import { AppComponent } from './app.component';
 *
 * describe('AppComponent', () => {
 *   const anotherPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const generalPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const config = {
 *     default: {
 *       language: 'pt-BR',
 *       context: 'general',
 *       cache: false
 *     },
 *     contexts: {
 *       general: {
 *         'pt-br': generalPT
 *       },
 *       another: {
 *         'pt-br': anotherPT
 *       }
 *     }
 *   };
 *
 *   beforeEach(async(() => {
 *     TestBed.configureTestingModule({
 *       declarations: [
 *         AppComponent
 *       ],
 *       imports: [
 *         HttpClientTestingModule,
 *         ThfI18nModule.config(config)
 *       ]
 *     }).compileComponents();
 *   }));
 *
 *   it('should create the app', async(() => {
 *     const fixture = TestBed.createComponent(AppComponent);
 *     const app = fixture.debugElement.componentInstance;
 *
 *     expect(app).toBeTruthy();
 *   }));
 *
 * });
 * ```
 */
var ThfI18nBaseService = /** @class */ (function () {
    function ThfI18nBaseService(config, http$$1) {
        this.config = config;
        this.http = http$$1;
        this.varI18n = {};
        this.useCache = false;
        this.servicesContext = {};
        this.setConfig(config);
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    ThfI18nBaseService.prototype.setConfig = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        // Seta as configurações padrões definidas no importação do módulo
        if (config['default']) {
            if (config['default']['language']) {
                this.languageDefault = config['default']['language'].toLowerCase();
            }
            else {
                this.languageDefault = navigator.language.toLowerCase();
            }
            this.contextDefault = (config['default']['context']) ? config['default']['context'] : '';
            this.useCache = (config['default']['cache']) ? config['default']['cache'] : false;
        }
        // Carrega a lista dos contextos e as contantes informadas
        if (config['contexts']) {
            this.setVarI18n(config['contexts']);
            // Se nenhum contexto foi definido como padrão,
            // então define o primeiro contexto
            if (!this.contextDefault) {
                for (var context in config['contexts']) {
                    if (this.config['contexts'].hasOwnProperty(context)) {
                        this.contextDefault = context;
                        break;
                    }
                }
            }
        }
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiterals = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var language = (options['language']) ? options['language'].toLowerCase() : this.languageDefault.toLowerCase();
        /** @type {?} */
        var context = (options['context']) ? options['context'] : this.contextDefault;
        /** @type {?} */
        var literals = (options['literals']) ? options['literals'] : [];
        return new rxjs.Observable(function (observer) {
            if (_this.servicesContext[context]) {
                // Faz o processo de busca de um contexto que contém serviço
                _this.getLiteralsFromContextService(language, context, literals, observer);
            }
            else {
                // Faz o processo de busca de um contexto que utiliza constante
                _this.getLiteralsFromContextConstant(language, context, literals, observer);
            }
        });
    };
    // Processo de busca de um contexto que contém serviço.
    //
    // Quando está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Se não encontrar todas as literais, procura no local storage (Se o cache estiver definido
    //        como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se não encontrar todas as literais desejadas e o idioma não for Português,
    //        então refaz o processo trocando o idioma para pt-BR
    //
    // Quando não está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    // Processo de busca de um contexto que contém serviço.
    //
    // Quando está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Se não encontrar todas as literais, procura no local storage (Se o cache estiver definido
    //        como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se não encontrar todas as literais desejadas e o idioma não for Português,
    //        então refaz o processo trocando o idioma para pt-BR
    //
    // Quando não está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiteralsFromContextService = 
    // Processo de busca de um contexto que contém serviço.
    //
    // Quando está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Se não encontrar todas as literais, procura no local storage (Se o cache estiver definido
    //        como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se não encontrar todas as literais desejadas e o idioma não for Português,
    //        então refaz o processo trocando o idioma para pt-BR
    //
    // Quando não está definida uma lista de literais:
    //    1 - Procura na variável do serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    function (language, context, literals, observer, translations, languageAlternative) {
        if (translations === void 0) { translations = {}; }
        if (languageAlternative === void 0) { languageAlternative = null; }
        // Idioma usado para tentar buscar as literais faltantes
        /** @type {?} */
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // Se foi pesquisado por literais
        if (literals.length > 0) {
            // Se não encontrou todas as literais pesquisadas no idioma
            if (literals.length > this.countObject(translations)) {
                this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
            }
        }
        else {
            this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
        }
    };
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiteralsLocalStorageAndCache = 
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    function (language, context, literals, observer, translations, languageAlternative) {
        var _this = this;
        if (languageAlternative === void 0) { languageAlternative = null; }
        /** @type {?} */
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        /** @type {?} */
        var translationTemp;
        // Verifica se usa cache
        if (this.useCache) {
            translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
            if (this.countObject(translationTemp) > 0) {
                this.updateVarI18n(language, context, translationTemp);
                translations = this.mergeObject(translations, translationTemp);
                observer.next(translations);
            }
        }
        // Busca do Serviço
        this.getHttpService(this.servicesContext[context], languageSearch, literals)
            .subscribe(function (response) {
            if (response) {
                _this.updateLocalStorage(language, context, response);
                _this.updateVarI18n(language, context, response);
                translationTemp = _this.searchInVarI18n(language, context, literals);
                translations = _this.mergeObject(translations, translationTemp);
                observer.next(translations);
            }
            // Se não encontrou todas as literais pesquisadas no idioma
            // Então refaz o processo procurando em português
            if (literals.length > _this.countObject(translations)) {
                if (languageAlternative === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = _this.completeFaultLiterals(language, context, literals, translations);
                    _this.updateLocalStorage(language, context, translations);
                    _this.updateVarI18n(language, context, translations);
                    observer.next(translations);
                }
                else {
                    _this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                }
            }
        });
    };
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiteralsFromContextConstant = 
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @return {?}
     */
    function (language, context, literals, observer, translations) {
        if (translations === void 0) { translations = {}; }
        translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // Se foi pesquisado por literais
        if (literals.length > 0) {
            // Se não encontrou todas as literais pesquisadas no idioma, procura em português
            if (literals.length > this.countObject(translations)) {
                if (language === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = this.completeFaultLiterals(language, context, literals, translations);
                    observer.next(translations);
                }
                else {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
            }
        }
        else {
            // Se não encontrar nenhuma literal, procura em português
            if (this.countObject(translations) === 0 && language !== 'pt-br') {
                this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
            }
            // caso não informar literais e não houver tradução
            observer.next(translations);
            observer.complete();
        }
    };
    // Busca pelas literais no local storage
    // Busca pelas literais no local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    ThfI18nBaseService.prototype.searchInLocalStorage = 
    // Busca pelas literais no local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    function (language, context, literals) {
        /** @type {?} */
        var translations = {};
        if (literals.length > 0) {
            for (var i = 0; i < literals.length; i++) {
                /** @type {?} */
                var literal = literals[i];
                /** @type {?} */
                var translation = localStorage.getItem(language + '-' + context + '-' + literal);
                if (translation) {
                    translations[literal] = translation;
                }
            }
        }
        return translations;
    };
    // Busca pelas literais na variável do serviço
    // Busca pelas literais na variável do serviço
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    ThfI18nBaseService.prototype.searchInVarI18n = 
    // Busca pelas literais na variável do serviço
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    function (language, context, literals) {
        /** @type {?} */
        var translations = {};
        if (this.varI18n[language] && this.varI18n[language][context]) {
            /** @type {?} */
            var content = this.varI18n[language][context];
            if (literals.length > 0) {
                // Busca as literais desejadas
                for (var i = 0; i < literals.length; i++) {
                    /** @type {?} */
                    var literal = literals[i];
                    if (content.hasOwnProperty(literal)) {
                        translations[literal] = content[literal];
                    }
                }
            }
            else {
                // Atribui todas as literais
                translations = content;
            }
        }
        return translations;
    };
    // Atualiza o local storage
    // Atualiza o local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    ThfI18nBaseService.prototype.updateLocalStorage = 
    // Atualiza o local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    function (language, context, data) {
        if (this.useCache) {
            for (var literal in data) {
                if (data.hasOwnProperty(literal)) {
                    localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
                }
            }
        }
    };
    // Atualiza a variável local com as literais com os objetos passados na configuração
    // Atualiza a variável local com as literais com os objetos passados na configuração
    /**
     * @private
     * @param {?} contexts
     * @return {?}
     */
    ThfI18nBaseService.prototype.setVarI18n = 
    // Atualiza a variável local com as literais com os objetos passados na configuração
    /**
     * @private
     * @param {?} contexts
     * @return {?}
     */
    function (contexts) {
        // Percorre os contextos
        for (var context in contexts) {
            if (contexts.hasOwnProperty(context)) {
                /** @type {?} */
                var contextContent = contexts[context];
                // Percorre os idiomas dentro do contexto
                for (var language in contextContent) {
                    if (contextContent.hasOwnProperty(language)) {
                        /** @type {?} */
                        var languageContent = contextContent[language];
                        if (language === 'url') {
                            this.servicesContext[context] = languageContent;
                        }
                        else {
                            this.updateVarI18n(language, context, languageContent);
                        }
                    }
                }
            }
        }
    };
    // Atualiza a variável local com as literais idioma e contexto
    // Atualiza a variável local com as literais idioma e contexto
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    ThfI18nBaseService.prototype.updateVarI18n = 
    // Atualiza a variável local com as literais idioma e contexto
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    function (language, context, data) {
        var _a;
        language = language.toLowerCase();
        if (!this.varI18n[language]) {
            this.varI18n[language] = (_a = {}, _a[context] = {}, _a);
        }
        if (!this.varI18n[language][context]) {
            this.varI18n[language][context] = {};
        }
        // Cria ou atualiza o contexto dentro do storage
        this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
    };
    /**
     * @private
     * @param {?} url
     * @param {?} language
     * @param {?} literals
     * @return {?}
     */
    ThfI18nBaseService.prototype.getHttpService = /**
     * @private
     * @param {?} url
     * @param {?} language
     * @param {?} literals
     * @return {?}
     */
    function (url, language, literals) {
        /** @type {?} */
        var param = '?language=' + language;
        if (literals.length > 0) {
            param += '&literals=' + literals.join();
        }
        // Remove a barra final do endereço
        url = (url.lastIndexOf('/') === url.length - 1) ? url.substr(0, url.length - 1) : url;
        return this.http.get(url + param);
    };
    // Completa com o nome da literais, as que não foram encontradas
    // Completa com o nome da literais, as que não foram encontradas
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} translations
     * @return {?}
     */
    ThfI18nBaseService.prototype.completeFaultLiterals = 
    // Completa com o nome da literais, as que não foram encontradas
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} translations
     * @return {?}
     */
    function (language, context, literals, translations) {
        for (var i = 0; i < literals.length; i++) {
            /** @type {?} */
            var literal = literals[i];
            if (!translations[literal]) {
                translations[literal] = literal;
            }
        }
        return translations;
    };
    // Conta os atributos do objeto
    // Conta os atributos do objeto
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    ThfI18nBaseService.prototype.countObject = 
    // Conta os atributos do objeto
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return Object.keys(obj).length;
    };
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    /**
     * @private
     * @param {?} objPermanent
     * @param {?} obj
     * @return {?}
     */
    ThfI18nBaseService.prototype.mergeObject = 
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    /**
     * @private
     * @param {?} objPermanent
     * @param {?} obj
     * @return {?}
     */
    function (objPermanent, obj) {
        for (var literal in objPermanent) {
            if (objPermanent.hasOwnProperty(literal)) {
                obj[literal] = objPermanent[literal];
            }
        }
        return obj;
    };
    /** @nocollapse */
    ThfI18nBaseService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [I18N_CONFIG,] }] },
        { type: http.HttpClient, decorators: [{ type: i0.Inject, args: [http.HttpClient,] }] }
    ]; };
    return ThfI18nBaseService;
}());

var __extends$68 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfI18nBaseService
 */
var ThfI18nService = /** @class */ (function (_super) {
    __extends$68(ThfI18nService, _super);
    function ThfI18nService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfI18nService.decorators = [
        { type: i0.Injectable },
    ];
    return ThfI18nService;
}(ThfI18nBaseService));
// Função usada para retornar instância para o módulo thf-i18n.module
/**
 * @param {?} config
 * @param {?} http
 * @return {?}
 */
function returnThfI18nService(config, http$$1) {
    return new ThfI18nService(config, http$$1);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo para controle de idiomas com THF.
 *
 * Para utilização do serviço de idiomas **thfI18nService**, deve-se importar este módulo mesmo já tendo importado
 * o módulo ThfModule.
 * Na importação deve ser invocado o método **config** informando um objeto para configuração.
 *
 * Exemplo de configuração:
 * ```
 * import { ThfI18nConfig } from '\@totvs/thf-ui/services/thf-i18n';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: ThfI18nConfig = {
 *   default: {
 *     language: 'pt-BR',
 *     context: 'general',
 *     cache: true
 *   },
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt,
 *       'en-US': generalEn
 *     },
 *     hcm: {
 *       url: 'http://10.1.1.1/api/translations/hcm/'
 *     }
 *   }
 * };
 *
 * \@NgModule({
 *   declarations: [],
 *   imports: [
 *     ThfModule,
 *     ThfI18nModule.config(i18nConfig)
 *   ],
 *   bootstrap: [AppComponent]
 * })
 * ```
 */
var ThfI18nModule = /** @class */ (function () {
    function ThfI18nModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    ThfI18nModule.config = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: ThfI18nModule,
            providers: [
                {
                    provide: I18N_CONFIG,
                    useValue: config
                },
                {
                    provide: ThfI18nService,
                    useFactory: returnThfI18nService,
                    deps: [I18N_CONFIG, http.HttpClient]
                }
            ]
        };
    };
    ThfI18nModule.decorators = [
        { type: i0.NgModule, args: [{},] },
    ];
    return ThfI18nModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfNotificationService
 *
 * \@description
 *
 * Interface para uso do serviço thf-notification.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

exports.ThfModule = ThfModule;
exports.ThfComponentsModule = ThfComponentsModule;
exports.ThfAvatarComponent = ThfAvatarComponent;
exports.ThfAvatarModule = ThfAvatarModule;
exports.ThfBreadcrumbComponent = ThfBreadcrumbComponent;
exports.ThfBreadcrumbModule = ThfBreadcrumbModule;
exports.ThfButtonGroupToggle = ThfButtonGroupToggle;
exports.ThfButtonGroupComponent = ThfButtonGroupComponent;
exports.ThfButtonGroupModule = ThfButtonGroupModule;
exports.ThfButtonComponent = ThfButtonComponent;
exports.ThfButtonModule = ThfButtonModule;
exports.ThfCalendarComponent = ThfCalendarComponent;
exports.ThfCalendarModule = ThfCalendarModule;
exports.ThfChartType = ThfChartType;
exports.ThfChartComponent = ThfChartComponent;
exports.ThfChartModule = ThfChartModule;
exports.ThfContainerComponent = ThfContainerComponent;
exports.ThfContainerModule = ThfContainerModule;
exports.ThfDisclaimerGroupComponent = ThfDisclaimerGroupComponent;
exports.ThfDisclaimerGroupModule = ThfDisclaimerGroupModule;
exports.ThfDisclaimerModule = ThfDisclaimerModule;
exports.ThfDividerComponent = ThfDividerComponent;
exports.ThfDividerModule = ThfDividerModule;
exports.ThfDropdownComponent = ThfDropdownComponent;
exports.ThfDropdownModule = ThfDropdownModule;
exports.ThfDynamicFieldType = ThfDynamicFieldType;
exports.ThfDynamicFormComponent = ThfDynamicFormComponent;
exports.ThfDynamicViewComponent = ThfDynamicViewComponent;
exports.ThfDynamicModule = ThfDynamicModule;
exports.ThfCheckboxGroupComponent = ThfCheckboxGroupComponent;
exports.ThfComboFilterMode = ThfComboFilterMode;
exports.ThfComboComponent = ThfComboComponent;
exports.ThfDatepickerComponent = ThfDatepickerComponent;
exports.ThfDatepickerRangeComponent = ThfDatepickerRangeComponent;
exports.ThfDecimalComponent = ThfDecimalComponent;
exports.ThfEmailComponent = ThfEmailComponent;
exports.ThfInputComponent = ThfInputComponent;
exports.ThfLoginComponent = ThfLoginComponent;
exports.ThfLookupComponent = ThfLookupComponent;
exports.ThfMultiselectFilterMode = ThfMultiselectFilterMode;
exports.ThfMultiselectComponent = ThfMultiselectComponent;
exports.ThfNumberComponent = ThfNumberComponent;
exports.ThfPasswordComponent = ThfPasswordComponent;
exports.ThfRadioGroupComponent = ThfRadioGroupComponent;
exports.ThfSelectOptionTemplateDirective = ThfSelectOptionTemplateDirective;
exports.ThfSelectComponent = ThfSelectComponent;
exports.ThfSwitchLabelPosition = ThfSwitchLabelPosition;
exports.ThfSwitchComponent = ThfSwitchComponent;
exports.ThfTextareaComponent = ThfTextareaComponent;
exports.ThfUploadComponent = ThfUploadComponent;
exports.ThfUrlComponent = ThfUrlComponent;
exports.ThfFieldModule = ThfFieldModule;
exports.ThfGridComponent = ThfGridComponent;
exports.ThfGridModule = ThfGridModule;
exports.ThfInfoOrientation = ThfInfoOrientation;
exports.ThfInfoComponent = ThfInfoComponent;
exports.ThfInfoModule = ThfInfoModule;
exports.ThfListViewContentTemplateDirective = ThfListViewContentTemplateDirective;
exports.ThfListViewDetailTemplateDirective = ThfListViewDetailTemplateDirective;
exports.ThfListViewComponent = ThfListViewComponent;
exports.ThfListViewModule = ThfListViewModule;
exports.ThfListItemContentComponent = ThfListItemContentComponent;
exports.ThfListItemDetailComponent = ThfListItemDetailComponent;
exports.ThfListItemComponent = ThfListItemComponent;
exports.ThfListComponent = ThfListComponent;
exports.ThfListModule = ThfListModule;
exports.ThfLoadingOverlayComponent = ThfLoadingOverlayComponent;
exports.ThfLoadingModule = ThfLoadingModule;
exports.ThfMenuPanelComponent = ThfMenuPanelComponent;
exports.ThfMenuPanelModule = ThfMenuPanelModule;
exports.ThfMenuComponent = ThfMenuComponent;
exports.ThfMenuModule = ThfMenuModule;
exports.ThfModalComponent = ThfModalComponent;
exports.ThfModalModule = ThfModalModule;
exports.ThfPageDefaultComponent = ThfPageDefaultComponent;
exports.ThfPageDetailComponent = ThfPageDetailComponent;
exports.ThfPageEditComponent = ThfPageEditComponent;
exports.ThfPageListComponent = ThfPageListComponent;
exports.ThfPageModule = ThfPageModule;
exports.ThfPopoverComponent = ThfPopoverComponent;
exports.ThfPopoverModule = ThfPopoverModule;
exports.ThfPopupComponent = ThfPopupComponent;
exports.ThfPopupModule = ThfPopupModule;
exports.ThfSlideComponent = ThfSlideComponent;
exports.ThfSlideModule = ThfSlideModule;
exports.ThfStepperStatus = ThfStepperStatus;
exports.ThfStepperComponent = ThfStepperComponent;
exports.ThfStepperModule = ThfStepperModule;
exports.ThfTableRowTemplateDirective = ThfTableRowTemplateDirective;
exports.ThfTableComponent = ThfTableComponent;
exports.ThfTableModule = ThfTableModule;
exports.ThfTabComponent = ThfTabComponent;
exports.ThfTabsComponent = ThfTabsComponent;
exports.ThfTabsModule = ThfTabsModule;
exports.ThfTagOrientation = ThfTagOrientation;
exports.ThfTagType = ThfTagType;
exports.ThfTagComponent = ThfTagComponent;
exports.ThfTagModule = ThfTagModule;
exports.ThfToolbarComponent = ThfToolbarComponent;
exports.ThfToolbarModule = ThfToolbarModule;
exports.ThfWidgetComponent = ThfWidgetComponent;
exports.ThfWidgetModule = ThfWidgetModule;
exports.ThfDirectivesModule = ThfDirectivesModule;
exports.ThfTooltipDirective = ThfTooltipDirective;
exports.ThfTooltipModule = ThfTooltipModule;
exports.ThfGuardsModule = ThfGuardsModule;
exports.ThfInterceptorsModule = ThfInterceptorsModule;
exports.ThfHttpInterceptorService = ThfHttpInterceptorService;
exports.ThfHttpInterceptorModule = ThfHttpInterceptorModule;
exports.ThfHttpRequestInterceptorService = ThfHttpRequestInterceptorService;
exports.ThfHttpRequestModule = ThfHttpRequestModule;
exports.ThfPipesModule = ThfPipesModule;
exports.ThfTimePipe = ThfTimePipe;
exports.ThfTimeModule = ThfTimeModule;
exports.ThfServicesModule = ThfServicesModule;
exports.ThfDialogType = ThfDialogType;
exports.ThfDialogService = ThfDialogService;
exports.ThfDialogModule = ThfDialogModule;
exports.ThfI18nPipe = ThfI18nPipe;
exports.returnThfI18nService = returnThfI18nService;
exports.ThfI18nService = ThfI18nService;
exports.ThfI18nModule = ThfI18nModule;
exports.ThfNotificationService = ThfNotificationService;
exports.ThfToasterOrientation = ThfToasterOrientation;
exports.ThfToasterType = ThfToasterType;
exports.ThfNotificationModule = ThfNotificationModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
